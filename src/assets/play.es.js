/**
 * @license
 * Video.js 7.2.0 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/master/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
 */

import window$1 from 'global/window';
import document$1 from 'global/document';
import tsml from 'tsml';
import xhr from 'xhr';
import vtt from 'videojs-vtt.js';
import safeParseTuple from 'safe-json-parse/tuple';
import URLToolkit from 'url-toolkit';
import { Parser } from 'm3u8-parser';
import { parse, parseUTCTiming } from 'mpd-parser';
import 'crypto-js/aes';
import CryptoJS from 'crypto-js/core';
import mp4probe$1 from 'mux.js/lib/mp4/probe';
import { CaptionParser } from 'mux.js/lib/mp4';
import { Decrypter, AsyncStream, decrypt } from 'aes-decrypter';
import tsInspector from 'mux.js/lib/tools/ts-inspector.js';

var version = "7.2.0";

/**
 * @file log.js
 * @module log
 */

var log = void 0;

// This is the private tracking variable for logging level.
var level = 'info';

// This is the private tracking variable for the logging history.
var history = [];

/**
 * Log messages to the console and history based on the type of message
 *
 * @private
 * @param  {string} type
 *         The name of the console method to use.
 *
 * @param  {Array} args
 *         The arguments to be passed to the matching console method.
 */
var logByType = function logByType(type, args) {
  var lvl = log.levels[level];
  var lvlRegExp = new RegExp('^(' + lvl + ')$');

  if (type !== 'log') {

    // Add the type to the front of the message when it's not "log".
    args.unshift(type.toUpperCase() + ':');
  }

  // Add a clone of the args at this point to history.
  if (history) {
    history.push([].concat(args));
  }

  // Add console prefix after adding to history.
  args.unshift('PLAYJS:');

  // If there's no console then don't try to output messages, but they will
  // still be stored in history.
  if (!window$1.console) {
    return;
  }

  // Was setting these once outside of this function, but containing them
  // in the function makes it easier to test cases where console doesn't exist
  // when the module is executed.
  var fn = window$1.console[type];

  if (!fn && type === 'debug') {
    // Certain browsers don't have support for console.debug. For those, we
    // should default to the closest comparable log.
    fn = window$1.console.info || window$1.console.log;
  }

  // Bail out if there's no console or if this type is not allowed by the
  // current logging level.
  if (!fn || !lvl || !lvlRegExp.test(type)) {
    return;
  }

  fn[Array.isArray(args) ? 'apply' : 'call'](window$1.console, args);
};

/**
 * Logs plain debug messages. Similar to `console.log`.
 *
 * @class
 * @param    {Mixed[]} args
 *           One or more messages or objects that should be logged.
 */
log = function log() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  logByType('log', args);
};

/**
 * Enumeration of available logging levels, where the keys are the level names
 * and the values are `|`-separated strings containing logging methods allowed
 * in that logging level. These strings are used to create a regular expression
 * matching the function name being called.
 *
 * Levels provided by video.js are:
 *
 * - `off`: Matches no calls. Any value that can be cast to `false` will have
 *   this effect. The most restrictive.
 * - `all`: Matches only Video.js-provided functions (`debug`, `log`,
 *   `log.warn`, and `log.error`).
 * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.
 * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.
 * - `warn`: Matches `log.warn` and `log.error` calls.
 * - `error`: Matches only `log.error` calls.
 *
 * @type {Object}
 */
log.levels = {
  all: 'debug|log|warn|error',
  off: '',
  debug: 'debug|log|warn|error',
  info: 'log|warn|error',
  warn: 'warn|error',
  error: 'error',
  DEFAULT: level
};

/**
 * Get or set the current logging level. If a string matching a key from
 * {@link log.levels} is provided, acts as a setter. Regardless of argument,
 * returns the current logging level.
 *
 * @param  {string} [lvl]
 *         Pass to set a new logging level.
 *
 * @return {string}
 *         The current logging level.
 */
log.level = function (lvl) {
  if (typeof lvl === 'string') {
    if (!log.levels.hasOwnProperty(lvl)) {
      throw new Error('"' + lvl + '" in not a valid log level');
    }
    level = lvl;
  }
  return level;
};

/**
 * Returns an array containing everything that has been logged to the history.
 *
 * This array is a shallow clone of the internal history record. However, its
 * contents are _not_ cloned; so, mutating objects inside this array will
 * mutate them in history.
 *
 * @return {Array} returns the data in array type
 */
log.history = function () {
  return history ? [].concat(history) : [];
};

/**
 * Clears the internal history tracking, but does not prevent further history
 * tracking.
 */
log.history.clear = function () {
  if (history) {
    history.length = 0;
  }
};

/**
 * Disable history tracking if it is currently enabled.
 */
log.history.disable = function () {
  if (history !== null) {
    history.length = 0;
    history = null;
  }
};

/**
 * Enable history tracking if it is currently disabled.
 */
log.history.enable = function () {
  if (history === null) {
    history = [];
  }
};

/**
 * Logs error messages. Similar to `console.error`.
 *
 * @param {Mixed[]} args
 *        One or more messages or objects that should be logged as an error
 * @return {Object} returns the log type object
 */
log.error = function () {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return logByType('error', args);
};

/**
 * Logs warning messages. Similar to `console.warn`.
 *
 * @param {Mixed[]} args
 *        One or more messages or objects that should be logged as a warning.
 * @return {Object} returns the log type object
 */
log.warn = function () {
  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  return logByType('warn', args);
};

/**
 * Logs debug messages. Similar to `console.debug`, but may also act as a comparable
 * log if `console.debug` is not available
 *
 * @param {Mixed[]} args
 *        One or more messages or objects that should be logged as debug.
 * @return {Object} returns the log type object
 */
log.debug = function () {
  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return logByType('debug', args);
};

var log$1 = log;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var taggedTemplateLiteralLoose = function (strings, raw) {
  strings.raw = raw;
  return strings;
};

/**
 * @file obj.js
 * @module obj
 */

/**
 * @callback obj:EachCallback
 *
 * @param {Mixed} value
 *        The current key for the object that is being iterated over.
 *
 * @param {string} key
 *        The current key-value for object that is being iterated over
 */

/**
 * @callback obj:ReduceCallback
 *
 * @param {Mixed} accum
 *        The value that is accumulating over the reduce loop.
 *
 * @param {Mixed} value
 *        The current key for the object that is being iterated over.
 *
 * @param {string} key
 *        The current key-value for object that is being iterated over
 *
 * @return {Mixed}
 *         The new accumulated value.
 */
var toString = Object.prototype.toString;

/**
 * Get the keys of an Object
 *
 * @param {Object} object
 *        The Object to get the keys from
 *
 * @return {string[]}
 *         An array of the keys from the object. Returns an empty array if the
 *         object passed in was invalid or had no keys.
 *
 * @private
 */
var keys = function keys(object) {
  return isObject(object) ? Object.keys(object) : [];
};

/**
 * Array-like iteration for objects.
 *
 * @param {Object} object
 *        The object to iterate over
 *
 * @param {Object} fn
 *        The callback function which is called for each key in the object.
 */
function each(object, fn) {
  keys(object).forEach(function (key) {
    return fn(object[key], key);
  });
}

/**
 * Array-like reduce for objects.
 *
 * @param {Object} object
 *        The Object that you want to reduce.
 *
 * @param {Function} fn
 *         A callback function which is called for each key in the object. It
 *         receives the accumulated value and the per-iteration value and key
 *         as arguments.
 *
 * @param {Mixed} [initial = 0]
 *        Starting value
 *
 * @return {Mixed}
 *         The final accumulated value.
 */
function reduce(object, fn) {
  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  return keys(object).reduce(function (accum, key) {
    return fn(accum, object[key], key);
  }, initial);
}

/**
 * Object.assign-style object shallow merge/extend.
 *
 * @param  {Object} target target details are passed to the function
 * @param  {Object} sources sources are passed to the function
 * @return {Object} returns object of assigned values
 */
function assign(target) {
  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }

  if (Object.assign) {
    return Object.assign.apply(Object, [target].concat(sources));
  }

  sources.forEach(function (source) {
    if (!source) {
      return;
    }

    each(source, function (value, key) {
      target[key] = value;
    });
  });

  return target;
}

/**
 * Returns whether a value is an object of any kind - including DOM nodes,
 * arrays, regular expressions, etc. Not functions, though.
 *
 * This avoids the gotcha where using `typeof` on a `null` value
 * results in `'object'`.
 *
 * @param  {Object} value value may be of any type
 * but should validate the type as object or not
 * @return {boolean} returns the passed value is object or not
 */
function isObject(value) {
  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
}

/**
 * Returns whether an object appears to be a "plain" object - that is, a
 * direct instance of `Object`.
 *
 * @param  {Object} value value may be nay type should give the success boolean type
 * @return {boolean} returns the value is plain or not
 */
function isPlain(value) {
  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;
}

/**
 * @file computed-style.js
 * @module computed-style
 */

/**
 * A safe getComputedStyle.
 *
 * This is needed because in Firefox, if the player is loaded in an iframe with
 * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to
 * make sure  that the player doesn't break in these cases.
 *
 * @param {Element} el
 *        The element you want the computed style of
 *
 * @param {string} prop
 *        The property name you want
 *
 * @return {string} prop
 *        The property name you want
 *
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 *
 * @static
 * @const
 */
function computedStyle(el, prop) {
  if (!el || !prop) {
    return '';
  }

  if (typeof window$1.getComputedStyle === 'function') {
    var cs = window$1.getComputedStyle(el);

    return cs ? cs[prop] : '';
  }

  return '';
}

var _templateObject = taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

/**
 * Detect if a value is a string with any non-whitespace characters.
 *
 * @param {string} str
 *        The string to check
 *
 * @return {boolean}
 *         - True if the string is non-blank
 *         - False otherwise
 *
 */
function isNonBlankString(str) {
    return typeof str === 'string' && /\S/.test(str);
}

/**
 * Throws an error if the passed string has whitespace. This is used by
 * class methods to be relatively consistent with the classList API.
 *
 * @param {string} str
 *         The string to check for whitespace.
 *
 * @throws {Error}
 *         Throws an error if there is whitespace in the string.
 *
 */
function throwIfWhitespace(str) {
    if (/\s/.test(str)) {
        throw new Error('class has illegal whitespace characters');
    }
}

/**
 * Produce a regular expression for matching a className within an elements className.
 *
 * @param {string} className
 *         The className to generate the RegExp for.
 *
 * @return {RegExp}
 *         The RegExp that will check for a specific `className` in an elements
 *         className.
 */
function classRegExp(className) {
    return new RegExp('(^|\\s)' + className + '($|\\s)');
}

/**
 * Whether the current DOM interface appears to be real.
 *
 * @return {Boolean}
 */
function isReal() {
    // Both document and window will never be undefined thanks to `global`.
    return document$1 === window$1.document;
}

/**
 * Determines, via duck typing, whether or not a value is a DOM element.
 *
 * @param {Mixed} value
 *        The thing to check
 *
 * @return {boolean}
 *         - True if it is a DOM element
 *         - False otherwise
 */
function isEl(value) {
    return isObject(value) && value.nodeType === 1;
}

/**
 * Determines if the current DOM is embedded in an iframe.
 *
 * @return {boolean}
 *
 */
function isInFrame() {

    // We need a try/catch here because Safari will throw errors when attempting
    // to get either `parent` or `self`
    try {
        return window$1.parent !== window$1.self;
    } catch (x) {
        return true;
    }
}

/**
 * Creates functions to query the DOM using a given method.
 *
 * @param {string} method
 *         The method to create the query with.
 *
 * @return {Function}
 *         The query method
 */
function createQuerier(method) {
    return function (selector, context) {
        if (!isNonBlankString(selector)) {
            return document$1[method](null);
        }
        if (isNonBlankString(context)) {
            context = document$1.querySelector(context);
        }

        var ctx = isEl(context) ? context : document$1;

        return ctx[method] && ctx[method](selector);
    };
}

/**
 * Creates an element and applies properties.
 *
 * @param {string} [tagName='div']
 *         Name of tag to be created.
 *
 * @param {Object} [properties={}]
 *         Element properties to be applied.
 *
 * @param {Object} [attributes={}]
 *         Element attributes to be applied.
 *
 * @param {String|Element|TextNode|Array|Function} [content]
 *         Contents for the element (see: {@link dom:normalizeContent})
 *
 * @return {Element}
 *         The element that was created.
 */
function createEl() {
    var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
    var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var content = arguments[3];

    var el = document$1.createElement(tagName);

    Object.getOwnPropertyNames(properties).forEach(function (propName) {
        var val = properties[propName];

        // See #2176
        // We originally were accepting both properties and attributes in the
        // same object, but that doesn't work so well.
        if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
            log$1.warn(tsml(_templateObject, propName, val));
            el.setAttribute(propName, val);

            // Handle textContent since it's not supported everywhere and we have a
            // method for it.
        } else if (propName === 'textContent') {
            textContent(el, val);
        } else {
            el[propName] = val;
        }
    });

    Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
        el.setAttribute(attrName, attributes[attrName]);
    });

    if (content) {
        appendContent(el, content);
    }

    return el;
}

/**
 * Injects text into an element, replacing any existing contents entirely.
 *
 * @param {Element} el
 *        The element to add text content into
 *
 * @param {string} text
 *        The text content to add.
 *
 * @return {Element}
 *         The element with added text content.
 */
function textContent(el, text) {
    if (typeof el.textContent === 'undefined') {
        el.innerText = text;
    } else {
        el.textContent = text;
    }
    return el;
}

/**
 * Insert an element as the first child node of another
 *
 * @param {Element} child
 *        Element to insert
 *
 * @param {Element} parent
 *        Element to insert child into
 */
function prependTo(child, parent) {
    if (parent.firstChild) {
        parent.insertBefore(child, parent.firstChild);
    } else {
        parent.appendChild(child);
    }
}

/**
 * Check if an element has a CSS class
 *
 * @param {Element} element
 *        Element to check
 *
 * @param {string} classToCheck
 *        Class name to check for
 *
 * @return {boolean}
 *         - True if the element had the class
 *         - False otherwise.
 *
 * @throws {Error}
 *         Throws an error if `classToCheck` has white space.
 */
function hasClass(element, classToCheck) {
    throwIfWhitespace(classToCheck);
    if (element.classList) {
        return element.classList.contains(classToCheck);
    }
    return classRegExp(classToCheck).test(element.className);
}

/**
 * Add a CSS class name to an element
 *
 * @param {Element} element
 *        Element to add class name to.
 *
 * @param {string} classToAdd
 *        Class name to add.
 *
 * @return {Element}
 *         The dom element with the added class name.
 */
function addClass(element, classToAdd) {
    if (element.classList) {
        element.classList.add(classToAdd);

        // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
        // in the case of classList not being supported.
    } else if (!hasClass(element, classToAdd)) {
        element.className = (element.className + ' ' + classToAdd).trim();
    }

    return element;
}

/**
 * Remove a CSS class name from an element
 *
 * @param {Element} element
 *        Element to remove a class name from.
 *
 * @param {string} classToRemove
 *        Class name to remove
 *
 * @return {Element}
 *         The dom element with class name removed.
 */
function removeClass(element, classToRemove) {
    if (element.classList) {
        element.classList.remove(classToRemove);
    } else {
        throwIfWhitespace(classToRemove);
        element.className = element.className.split(/\s+/).filter(function (c) {
            return c !== classToRemove;
        }).join(' ');
    }

    return element;
}

/**
 * The callback definition for toggleElClass.
 *
 * @callback Dom~PredicateCallback
 * @param {Element} element
 *        The DOM element of the Component.
 *
 * @param {string} classToToggle
 *        The `className` that wants to be toggled
 *
 * @return {boolean|undefined}
 *         - If true the `classToToggle` will get added to `element`.
 *         - If false the `classToToggle` will get removed from `element`.
 *         - If undefined this callback will be ignored
 */

/**
 * Adds or removes a CSS class name on an element depending on an optional
 * condition or the presence/absence of the class name.
 *
 * @param {Element} element
 *        The element to toggle a class name on.
 *
 * @param {string} classToToggle
 *        The class that should be toggled
 *
 * @param {boolean|PredicateCallback} [predicate]
 *        See the return value for {@link Dom~PredicateCallback}
 *
 * @return {Element}
 *         The element with a class that has been toggled.
 */
function toggleClass(element, classToToggle, predicate) {

    // This CANNOT use `classList` internally because IE11 does not support the
    // second parameter to the `classList.toggle()` method! Which is fine because
    // `classList` will be used by the add/remove functions.
    var has = hasClass(element, classToToggle);

    if (typeof predicate === 'function') {
        predicate = predicate(element, classToToggle);
    }

    if (typeof predicate !== 'boolean') {
        predicate = !has;
    }

    // If the necessary class operation matches the current state of the
    // element, no action is required.
    if (predicate === has) {
        return;
    }

    if (predicate) {
        addClass(element, classToToggle);
    } else {
        removeClass(element, classToToggle);
    }

    return element;
}

/**
 * Apply attributes to an HTML element.
 *
 * @param {Element} el
 *        Element to add attributes to.
 *
 * @param {Object} [attributes]
 *        Attributes to be applied.
 */
function setAttributes(el, attributes) {
    Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
        var attrValue = attributes[attrName];

        if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
            el.removeAttribute(attrName);
        } else {
            el.setAttribute(attrName, attrValue === true ? '' : attrValue);
        }
    });
}

/**
 * Get an element's attribute values, as defined on the HTML tag
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute (which shouldn't be used with HTML)
 * This will return true or false for boolean attributes.
 *
 * @param {Element} tag
 *        Element from which to get tag attributes.
 *
 * @return {Object}
 *         All attributes of the element.
 */
function getAttributes(tag) {
    var obj = {};

    // known boolean attributes
    // we can check for matching boolean properties, but not all browsers
    // and not all tags know about these attributes, so, we still want to check them manually
    var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';

    if (tag && tag.attributes && tag.attributes.length > 0) {
        var attrs = tag.attributes;

        for (var i = attrs.length - 1; i >= 0; i--) {
            var attrName = attrs[i].name;
            var attrVal = attrs[i].value;

            // check for known booleans
            // the matching element property will return a value for typeof
            if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
                // the value of an included boolean attribute is typically an empty
                // string ('') which would equal false if we just check for a false value.
                // we also don't want support bad code like autoplay='false'
                attrVal = attrVal !== null ? true : false;
            }

            obj[attrName] = attrVal;
        }
    }

    return obj;
}

/**
 * Get the value of an element's attribute
 *
 * @param {Element} el
 *        A DOM element
 *
 * @param {string} attribute
 *        Attribute to get the value of
 *
 * @return {string}
 *         value of the attribute
 */
function getAttribute(el, attribute) {
    return el.getAttribute(attribute);
}

/**
 * Set the value of an element's attribute
 *
 * @param {Element} el
 *        A DOM element
 *
 * @param {string} attribute
 *        Attribute to set
 *
 * @param {string} value
 *        Value to set the attribute to
 */
function setAttribute(el, attribute, value) {
    el.setAttribute(attribute, value);
}

/**
 * Remove an element's attribute
 *
 * @param {Element} el
 *        A DOM element
 *
 * @param {string} attribute
 *        Attribute to remove
 */
function removeAttribute(el, attribute) {
    el.removeAttribute(attribute);
}

/**
 * Attempt to block the ability to select text while dragging controls
 */
function blockTextSelection() {
    document$1.body.focus();
    document$1.onselectstart = function () {
        return false;
    };
}

/**
 * Turn off text selection blocking
 */
function unblockTextSelection() {
    document$1.onselectstart = function () {
        return true;
    };
}

/**
 * Identical to the native `getBoundingClientRect` function, but ensures that
 * the method is supported at all (it is in all browsers we claim to support)
 * and that the element is in the DOM before continuing.
 *
 * This wrapper function also shims properties which are not provided by some
 * older browsers (namely, IE8).
 *
 * Additionally, some browsers do not support adding properties to a
 * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
 * properties (except `x` and `y` which are not widely supported). This helps
 * avoid implementations where keys are non-enumerable.
 *
 * @param  {Element} el
 *         Element whose `ClientRect` we want to calculate.
 *
 * @return {Object|undefined}
 *         Always returns a plain
 */
function getBoundingClientRect(el) {
    if (el && el.getBoundingClientRect && el.parentNode) {
        var rect = el.getBoundingClientRect();
        var result = {};

        ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {
            if (rect[k] !== undefined) {
                result[k] = rect[k];
            }
        });

        if (!result.height) {
            result.height = parseFloat(computedStyle(el, 'height'));
        }

        if (!result.width) {
            result.width = parseFloat(computedStyle(el, 'width'));
        }

        return result;
    }
}

/**
 * The postion of a DOM element on the page.
 *
 * @typedef {Object} module:dom~Position
 *
 * @property {number} left
 *           Pixels to the left
 *
 * @property {number} top
 *           Pixels on top
 */

/**
 * Offset Left.
 * getBoundingClientRect technique from
 * John Resig
 *
 * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
 *
 * @param {Element} el
 *        Element from which to get offset
 *
 * @return {module:dom~Position}
 *         The position of the element that was passed in.
 */
function findPosition(el) {
    var box = void 0;

    if (el.getBoundingClientRect && el.parentNode) {
        box = el.getBoundingClientRect();
    }

    if (!box) {
        return {
            left: 0,
            top: 0
        };
    }

    var docEl = document$1.documentElement;
    var body = document$1.body;

    var clientLeft = docEl.clientLeft || body.clientLeft || 0;
    var scrollLeft = window$1.pageXOffset || body.scrollLeft;
    var left = box.left + scrollLeft - clientLeft;

    var clientTop = docEl.clientTop || body.clientTop || 0;
    var scrollTop = window$1.pageYOffset || body.scrollTop;
    var top = box.top + scrollTop - clientTop;

    // Android sometimes returns slightly off decimal values, so need to round
    return {
        left: Math.round(left),
        top: Math.round(top)
    };
}

/**
 * x and y coordinates for a dom element or mouse pointer
 *
 * @typedef {Object} Dom~Coordinates
 *
 * @property {number} x
 *           x coordinate in pixels
 *
 * @property {number} y
 *           y coordinate in pixels
 */

/**
 * Get pointer position in element
 * Returns an object with x and y coordinates.
 * The base on the coordinates are the bottom left of the element.
 *
 * @param {Element} el
 *        Element on which to get the pointer position on
 *
 * @param {EventTarget~Event} event
 *        Event object
 *
 * @return {Dom~Coordinates}
 *         A Coordinates object corresponding to the mouse position.
 *
 */
function getPointerPosition(el, event) {
    var position = {};
    var box = findPosition(el);
    var boxW = el.offsetWidth;
    var boxH = el.offsetHeight;

    var boxY = box.top;
    var boxX = box.left;
    var pageY = event.pageY;
    var pageX = event.pageX;

    if (event.changedTouches) {
        pageX = event.changedTouches[0].pageX;
        pageY = event.changedTouches[0].pageY;
    }

    position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
    position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));

    return position;
}

/**
 * Determines, via duck typing, whether or not a value is a text node.
 *
 * @param {Mixed} value
 *        Check if this value is a text node.
 *
 * @return {boolean}
 *         - True if it is a text node
 *         - False otherwise
 */
function isTextNode(value) {
    return isObject(value) && value.nodeType === 3;
}

/**
 * Empties the contents of an element.
 *
 * @param {Element} el
 *        The element to empty children from
 *
 * @return {Element}
 *         The element with no children
 */
function emptyEl(el) {
    while (el.firstChild) {
        el.removeChild(el.firstChild);
    }
    return el;
}

/**
 * Normalizes content for eventual insertion into the DOM.
 *
 * This allows a wide range of content definition methods, but protects
 * from falling into the trap of simply writing to `innerHTML`, which is
 * an XSS concern.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * @param {String|Element|TextNode|Array|Function} content
 *        - String: Normalized into a text node.
 *        - Element/TextNode: Passed through.
 *        - Array: A one-dimensional array of strings, elements, nodes, or functions
 *          (which return single strings, elements, or nodes).
 *        - Function: If the sole argument, is expected to produce a string, element,
 *          node, or array as defined above.
 *
 * @return {Array}
 *         All of the content that was passed in normalized.
 */
function normalizeContent(content) {

    // First, invoke content if it is a function. If it produces an array,
    // that needs to happen before normalization.
    if (typeof content === 'function') {
        content = content();
    }

    // Next up, normalize to an array, so one or many items can be normalized,
    // filtered, and returned.
    return (Array.isArray(content) ? content : [content]).map(function (value) {

        // First, invoke value if it is a function to produce a new value,
        // which will be subsequently normalized to a Node of some kind.
        if (typeof value === 'function') {
            value = value();
        }

        if (isEl(value) || isTextNode(value)) {
            return value;
        }

        if (typeof value === 'string' && /\S/.test(value)) {
            return document$1.createTextNode(value);
        }
    }).filter(function (value) {
        return value;
    });
}

/**
 * Normalizes and appends content to an element.
 *
 * @param {Element} el
 *        Element to append normalized content to.
 *
 *
 * @param {String|Element|TextNode|Array|Function} content
 *        See the `content` argument of {@link dom:normalizeContent}
 *
 * @return {Element}
 *         The element with appended normalized content.
 */
function appendContent(el, content) {
    normalizeContent(content).forEach(function (node) {
        return el.appendChild(node);
    });
    return el;
}

/**
 * Normalizes and inserts content into an element; this is identical to
 * `appendContent()`, except it empties the element first.
 *
 * @param {Element} el
 *        Element to insert normalized content into.
 *
 * @param {String|Element|TextNode|Array|Function} content
 *        See the `content` argument of {@link dom:normalizeContent}
 *
 * @return {Element}
 *         The element with inserted normalized content.
 *
 */
function insertContent(el, content) {
    return appendContent(emptyEl(el), content);
}

/**
 * Check if event was a single left click
 *
 * @param {EventTarget~Event} event
 *        Event object
 *
 * @return {boolean}
 *         - True if a left click
 *         - False if not a left click
 */
function isSingleLeftClick(event) {
    // Note: if you create something draggable, be sure to
    // call it on both `mousedown` and `mousemove` event,
    // otherwise `mousedown` should be enough for a button

    if (event.button === undefined && event.buttons === undefined) {
        // Why do we need `buttons` ?
        // Because, middle mouse sometimes have this:
        // e.button === 0 and e.buttons === 4
        // Furthermore, we want to prevent combination click, something like
        // HOLD middlemouse then left click, that would be
        // e.button === 0, e.buttons === 5
        // just `button` is not gonna work

        // Alright, then what this block does ?
        // this is for chrome `simulate mobile devices`
        // I want to support this as well

        return true;
    }

    if (event.button === 0 && event.buttons === undefined) {
        // Touch screen, sometimes on some specific device, `buttons`
        // doesn't have anything (safari on ios, blackberry...)

        return true;
    }

    if (event.button !== 0 || event.buttons !== 1) {
        // This is the reason we have those if else block above
        // if any special case we can catch and let it slide
        // we do it above, when get to here, this definitely
        // is-not-left-click

        return false;
    }

    return true;
}

/**
 * Finds a single DOM element matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param {string} selector
 *        A valid CSS selector, which will be passed to `querySelector`.
 *
 * @param {Element|String} [context=document]
 *        A DOM element within which to query. Can also be a selector
 *        string in which case the first matching element will be used
 *        as context. If missing (or no element matches selector), falls
 *        back to `document`.
 *
 * @return {Element|null}
 *         The element that was found or null.
 */
var $ = createQuerier('querySelector');

/**
 * Finds a all DOM elements matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param {string} selector
 *           A valid CSS selector, which will be passed to `querySelectorAll`.
 *
 * @param {Element|String} [context=document]
 *           A DOM element within which to query. Can also be a selector
 *           string in which case the first matching element will be used
 *           as context. If missing (or no element matches selector), falls
 *           back to `document`.
 *
 * @return {NodeList}
 *         A element list of elements that were found. Will be empty if none were found.
 *
 */
var $$ = createQuerier('querySelectorAll');

var Dom = /*#__PURE__*/Object.freeze({
  isReal: isReal,
  isEl: isEl,
  isInFrame: isInFrame,
  createEl: createEl,
  textContent: textContent,
  prependTo: prependTo,
  hasClass: hasClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  setAttributes: setAttributes,
  getAttributes: getAttributes,
  getAttribute: getAttribute,
  setAttribute: setAttribute,
  removeAttribute: removeAttribute,
  blockTextSelection: blockTextSelection,
  unblockTextSelection: unblockTextSelection,
  getBoundingClientRect: getBoundingClientRect,
  findPosition: findPosition,
  getPointerPosition: getPointerPosition,
  isTextNode: isTextNode,
  emptyEl: emptyEl,
  normalizeContent: normalizeContent,
  appendContent: appendContent,
  insertContent: insertContent,
  isSingleLeftClick: isSingleLeftClick,
  $: $,
  $$: $$
});

/**
 * @file guid.js
 * @module guid
 */

/**
 * Unique ID for an element or function
 * @type {Number}
 */
var _guid = 1;

/**
 * Get a unique auto-incrementing ID by number that has not been returned before.
 *
 * @return {number}
 *         A new unique ID.
 */
function newGUID() {
  return _guid++;
}

/**
 * @file dom-data.js
 * @module dom-data
 */

/**
 * Element Data Store.
 *
 * Allows for binding data to an element without putting it directly on the
 * element. Ex. Event listeners are stored here.
 * (also from jsninja.com, slightly modified and updated for closure compiler)
 *
 * @type {Object}
 * @private
 */
var elData = {};

/*
 * Unique attribute name to store an element's guid in
 *
 * @type {String}
 * @constant
 * @private
 */
var elIdAttr = 'vdata' + new Date().getTime();

/**
 * Returns the cache object where data for an element is stored
 *
 * @param {Element} el
 *        Element to store data for.
 *
 * @return {Object}
 *         The cache object for that el that was passed in.
 */
function getData(el) {
  var id = el[elIdAttr];

  if (!id) {
    id = el[elIdAttr] = newGUID();
  }

  if (!elData[id]) {
    elData[id] = {};
  }

  return elData[id];
}

/**
 * Returns whether or not an element has cached data
 *
 * @param {Element} el
 *        Check if this element has cached data.
 *
 * @return {boolean}
 *         - True if the DOM element has cached data.
 *         - False otherwise.
 */
function hasData(el) {
  var id = el[elIdAttr];

  if (!id) {
    return false;
  }

  return !!Object.getOwnPropertyNames(elData[id]).length;
}

/**
 * Delete data for the element from the cache and the guid attr from getElementById
 *
 * @param {Element} el
 *        Remove cached data for this element.
 */
function removeData(el) {
  var id = el[elIdAttr];

  if (!id) {
    return;
  }

  // Remove all stored data
  delete elData[id];

  // Remove the elIdAttr property from the DOM node
  try {
    delete el[elIdAttr];
  } catch (e) {
    if (el.removeAttribute) {
      el.removeAttribute(elIdAttr);
    } else {
      // IE doesn't appear to support removeAttribute on the document element
      el[elIdAttr] = null;
    }
  }
}

/**
 * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
 * robust as jquery's, so there's probably some differences.
 *
 * @module events
 */

/**
 * Clean up the listener cache and dispatchers
 *
 * @param {Element|Object} elem
 *        Element to clean up
 *
 * @param {string} type
 *        Type of event to clean up
 */
function _cleanUpEvents(elem, type) {
  var data = getData(elem);

  // Remove the events of a particular type if there are none left
  if (data.handlers[type].length === 0) {
    delete data.handlers[type];
    // data.handlers[type] = null;
    // Setting to null was causing an error with data.handlers

    // Remove the meta-handler from the element
    if (elem.removeEventListener) {
      elem.removeEventListener(type, data.dispatcher, false);
    } else if (elem.detachEvent) {
      elem.detachEvent('on' + type, data.dispatcher);
    }
  }

  // Remove the events object if there are no types left
  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
    delete data.handlers;
    delete data.dispatcher;
    delete data.disabled;
  }

  // Finally remove the element data if there is no data left
  if (Object.getOwnPropertyNames(data).length === 0) {
    removeData(elem);
  }
}

/**
 * Loops through an array of event types and calls the requested method for each type.
 *
 * @param {Function} fn
 *        The event method we want to use.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string} types
 *        Type of event to bind to.
 *
 * @param {EventTarget~EventListener} callback
 *        Event listener.
 */
function _handleMultipleEvents(fn, elem, types, callback) {
  types.forEach(function (type) {
    // Call the event method for each one of the types
    fn(elem, type, callback);
  });
}

/**
 * Fix a native event to have standard property values
 *
 * @param {Object} event
 *        Event object to fix.
 *
 * @return {Object}
 *         Fixed event object.
 */
function fixEvent(event) {

  /**
   * Return true function
   *
   * @return {boolean} return true
   */
  function returnTrue() {
    return true;
  }

  /**
   * Return false function
   *
   * @return {boolean} return false
   */
  function returnFalse() {
    return false;
  }

  // Test if fixing up is needed
  // Used to check if !event.stopPropagation instead of isPropagationStopped
  // But native events return true for stopPropagation, but don't have
  // other expected methods like isPropagationStopped. Seems to be a problem
  // with the Javascript Ninja code. So we're just overriding all events now.
  if (!event || !event.isPropagationStopped) {
    var old = event || window$1.event;

    event = {};
    // Clone the old object so that we can modify the values event = {};
    // IE8 Doesn't like when you mess with native event properties
    // Firefox returns false for event.hasOwnProperty('type') and other props
    // which makes copying more difficult.
    // Probably best to create a whitelist of event props:TODO
    for (var key in old) {
      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
      // and webkitMovementX/Y
      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
        // Chrome 32+ warns if you try to copy deprecated returnValue, but
        // we still want to if preventDefault isn't supported (IE8).
        if (!(key === 'returnValue' && old.preventDefault)) {
          event[key] = old[key];
        }
      }
    }

    // The event occurred on this element
    if (!event.target) {
      event.target = event.srcElement || document$1;
    }

    // Handle which other element the event is related to
    if (!event.relatedTarget) {
      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
    }

    // Stop the default browser action
    event.preventDefault = function () {
      if (old.preventDefault) {
        old.preventDefault();
      }
      event.returnValue = false;
      old.returnValue = false;
      event.defaultPrevented = true;
    };

    event.defaultPrevented = false;

    // Stop the event from bubbling
    event.stopPropagation = function () {
      if (old.stopPropagation) {
        old.stopPropagation();
      }
      event.cancelBubble = true;
      old.cancelBubble = true;
      event.isPropagationStopped = returnTrue;
    };

    event.isPropagationStopped = returnFalse;

    // Stop the event from bubbling and executing other handlers
    event.stopImmediatePropagation = function () {
      if (old.stopImmediatePropagation) {
        old.stopImmediatePropagation();
      }
      event.isImmediatePropagationStopped = returnTrue;
      event.stopPropagation();
    };

    event.isImmediatePropagationStopped = returnFalse;

    // Handle mouse position
    if (event.clientX !== null && event.clientX !== undefined) {
      var doc = document$1.documentElement;
      var body = document$1.body;

      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
    }

    // Handle key presses
    event.which = event.charCode || event.keyCode;

    // Fix button for mouse clicks:
    // 0 == left; 1 == middle; 2 == right
    if (event.button !== null && event.button !== undefined) {

      // The following is disabled because it does not pass videojs-standard
      // and... yikes.
      /* eslint-disable */
      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
      /* eslint-enable */
    }
  }

  // Returns fixed-up instance
  return event;
}

/**
 * Whether passive event listeners are supported
 */
var _supportsPassive = false;

(function () {
  try {
    var opts = Object.defineProperty({}, 'passive', {
      get: function get() {
        _supportsPassive = true;
      }
    });

    window$1.addEventListener('test', null, opts);
    window$1.removeEventListener('test', null, opts);
  } catch (e) {
    // disregard
  }
})();

/**
 * Touch events Chrome expects to be passive
 */
var passiveEvents = ['touchstart', 'touchmove'];

/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string|string[]} type
 *        Type of event to bind to.
 *
 * @param {EventTarget~EventListener} fn
 *        Event listener.
 *
 * @return {string} prop
 *        The property name you want
 */
function on(elem, type, fn) {
  if (Array.isArray(type)) {
    return _handleMultipleEvents(on, elem, type, fn);
  }

  var data = getData(elem);

  // We need a place to store all our handler data
  if (!data.handlers) {
    data.handlers = {};
  }

  if (!data.handlers[type]) {
    data.handlers[type] = [];
  }

  if (!fn.guid) {
    fn.guid = newGUID();
  }

  data.handlers[type].push(fn);

  if (!data.dispatcher) {
    data.disabled = false;

    data.dispatcher = function (event, hash) {

      if (data.disabled) {
        return;
      }

      event = fixEvent(event);

      var handlers = data.handlers[event.type];

      if (handlers) {
        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
        var handlersCopy = handlers.slice(0);

        for (var m = 0, n = handlersCopy.length; m < n; m++) {
          if (event.isImmediatePropagationStopped()) {
            break;
          } else {
            try {
              handlersCopy[m].call(elem, event, hash);
            } catch (e) {
              log$1.error(e);
            }
          }
        }
      }
    };
  }

  if (data.handlers[type].length === 1) {
    if (elem.addEventListener) {
      var options = false;

      if (_supportsPassive && passiveEvents.indexOf(type) > -1) {
        options = { passive: true };
      }
      elem.addEventListener(type, data.dispatcher, options);
    } else if (elem.attachEvent) {
      elem.attachEvent('on' + type, data.dispatcher);
    }
  }
}

/**
 * Removes event listeners from an element
 *
 * @param {Element|Object} elem
 *        Object to remove listeners from.
 *
 * @param {string|string[]} [type]
 *        Type of listener to remove. Don't include to remove all events from element.
 *
 * @param {EventTarget~EventListener} [fn]
 *        Specific listener to remove. Don't include to remove listeners for an event
 *        type.
 *
 * @return {string} prop
 *        The property name you want
 */
function off(elem, type, fn) {
  // Don't want to add a cache object through getElData if not needed
  if (!hasData(elem)) {
    return;
  }

  var data = getData(elem);

  // If no events exist, nothing to unbind
  if (!data.handlers) {
    return;
  }

  if (Array.isArray(type)) {
    return _handleMultipleEvents(off, elem, type, fn);
  }

  // Utility function
  var removeType = function removeType(el, t) {
    data.handlers[t] = [];
    _cleanUpEvents(el, t);
  };

  // Are we removing all bound events?
  if (type === undefined) {
    for (var t in data.handlers) {
      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {
        removeType(elem, t);
      }
    }
    return;
  }

  var handlers = data.handlers[type];

  // If no handlers exist, nothing to unbind
  if (!handlers) {
    return;
  }

  // If no listener was provided, remove all listeners for type
  if (!fn) {
    removeType(elem, type);
    return;
  }

  // We're only removing a single handler
  if (fn.guid) {
    for (var n = 0; n < handlers.length; n++) {
      if (handlers[n].guid === fn.guid) {
        handlers.splice(n--, 1);
      }
    }
  }

  _cleanUpEvents(elem, type);
}

/**
 * Trigger an event for an element
 *
 * @param {Element|Object} elem
 *        Element to trigger an event on
 *
 * @param {EventTarget~Event|string} event
 *        A string (the type) or an event object with a type attribute
 *
 * @param {Object} [hash]
 *        data hash to pass along with the event
 *
 * @return {boolean|undefined}
 *         - Returns the opposite of `defaultPrevented` if default was prevented
 *         - Otherwise returns undefined
 */
function trigger(elem, event, hash) {
  // Fetches element data and a reference to the parent (for bubbling).
  // Don't want to add a data object to cache for every parent,
  // so checking hasElData first.
  var elemData = hasData(elem) ? getData(elem) : {};
  var parent = elem.parentNode || elem.ownerDocument;
  // type = event.type || event,
  // handler;

  // If an event name was passed as a string, creates an event out of it
  if (typeof event === 'string') {
    event = { type: event, target: elem };
  } else if (!event.target) {
    event.target = elem;
  }

  // Normalizes the event properties.
  event = fixEvent(event);

  // If the passed element has a dispatcher, executes the established handlers.
  if (elemData.dispatcher) {
    elemData.dispatcher.call(elem, event, hash);
  }

  // Unless explicitly stopped or the event does not bubble (e.g. media events)
  // recursively calls this function to bubble the event up the DOM.
  if (parent && !event.isPropagationStopped() && event.bubbles === true) {
    trigger.call(null, parent, event, hash);

    // If at the top of the DOM, triggers the default action unless disabled.
  } else if (!parent && !event.defaultPrevented) {
    var targetData = getData(event.target);

    // Checks if the target has a default action for this event.
    if (event.target[event.type]) {
      // Temporarily disables event dispatching on the target as we have already executed the handler.
      targetData.disabled = true;
      // Executes the default action.
      if (typeof event.target[event.type] === 'function') {
        event.target[event.type]();
      }
      // Re-enables event dispatching.
      targetData.disabled = false;
    }
  }

  // Inform the triggerer if the default was prevented by returning false
  return !event.defaultPrevented;
}

/**
 * Trigger a listener only once for an event
 *
 * @param {Element|Object} elem
 *        Element or object to bind to.
 *
 * @param {string|string[]} type
 *        Name/type of event
 *
 * @param {Event~EventListener} fn
 *        Event Listener function
 *
 * @return {Event} Event Listener
 */
function one(elem, type, fn) {
  if (Array.isArray(type)) {
    return _handleMultipleEvents(one, elem, type, fn);
  }
  var func = function func() {
    off(elem, type, func);
    fn.apply(this, arguments);
  };

  // copy the guid to the new function so it can removed using the original function's ID
  func.guid = fn.guid = fn.guid || newGUID();
  on(elem, type, func);
}

var Events = /*#__PURE__*/Object.freeze({
  fixEvent: fixEvent,
  on: on,
  off: off,
  trigger: trigger,
  one: one
});

/**
 * @file setup.js - Functions for setting up a player without
 * user interaction based on the data-setup `attribute` of the video tag.
 *
 * @module setup
 */

var _windowLoaded = false;
var videojs = void 0;

/**
 * Set up any tags that have a data-setup `attribute` when the player is started.
 */
var autoSetup = function autoSetup() {

  // Protect against breakage in non-browser environments and check global autoSetup option.
  if (!isReal() || videojs.options.autoSetup === false) {
    return;
  }

  var vids = Array.prototype.slice.call(document$1.getElementsByTagName('video'));
  var audios = Array.prototype.slice.call(document$1.getElementsByTagName('audio'));
  var divs = Array.prototype.slice.call(document$1.getElementsByTagName('video-js'));
  var mediaEls = vids.concat(audios, divs);

  // Check if any media elements exist
  if (mediaEls && mediaEls.length > 0) {

    for (var i = 0, e = mediaEls.length; i < e; i++) {
      var mediaEl = mediaEls[i];

      // Check if element exists, has getAttribute func.
      if (mediaEl && mediaEl.getAttribute) {

        // Make sure this player hasn't already been set up.
        if (mediaEl.player === undefined) {
          var options = mediaEl.getAttribute('data-setup');

          // Check if data-setup attr exists.
          // We only auto-setup if they've added the data-setup attr.
          if (options !== null) {
            // Create new video.js instance.
            videojs(mediaEl);
          }
        }

        // If getAttribute isn't defined, we need to wait for the DOM.
      } else {
        autoSetupTimeout(1);
        break;
      }
    }

    // No videos were found, so keep looping unless page is finished loading.
  } else if (!_windowLoaded) {
    autoSetupTimeout(1);
  }
};

/**
 * Wait until the page is loaded before running autoSetup. This will be called in
 * autoSetup if `hasLoaded` returns false.
 *
 * @param {number} wait
 *        How long to wait in ms
 *
 * @param {module:videojs} [vjs]
 *        The videojs library function
 */
function autoSetupTimeout(wait, vjs) {
  if (vjs) {
    videojs = vjs;
  }

  window$1.setTimeout(autoSetup, wait);
}

if (isReal() && document$1.readyState === 'complete') {
  _windowLoaded = true;
} else {
  /**
   * Listen for the load event on window, and set _windowLoaded to true.
   *
   * @listens load
   */
  one(window$1, 'load', function () {
    _windowLoaded = true;
  });
}

/**
 * @file stylesheet.js
 * @module stylesheet
 */

/**
 * Create a DOM syle element given a className for it.
 *
 * @param {string} className
 *        The className to add to the created style element.
 *
 * @return {Element}
 *         The element that was created.
 */
var createStyleElement = function createStyleElement(className) {
  var style = document$1.createElement('style');

  style.className = className;

  return style;
};

/**
 * Add text to a DOM element.
 *
 * @param {Element} el
 *        The Element to add text content to.
 *
 * @param {string} content
 *        The text to add to the element.
 */
var setTextContent = function setTextContent(el, content) {
  if (el.styleSheet) {
    el.styleSheet.cssText = content;
  } else {
    el.textContent = content;
  }
};

/**
 * @file fn.js
 * @module fn
 */

/**
 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
 * It also stores a unique id on the function so it can be easily removed from events.
 *
 * @param {Mixed} context
 *        The object to bind as scope.
 *
 * @param {Function} fn
 *        The function to be bound to a scope.
 *
 * @param {number} [uid]
 *        An optional unique ID for the function to be set
 *
 * @return {Function}
 *         The new function that will be bound into the context given
 */
var bind = function bind(context, fn, uid) {
  // Make sure the function has a unique ID
  if (!fn.guid) {
    fn.guid = newGUID();
  }

  // Create the new function that changes the context
  var bound = function bound() {
    return fn.apply(context, arguments);
  };

  // Allow for the ability to individualize this function
  // Needed in the case where multiple objects might share the same prototype
  // IF both items add an event listener with the same function,
  // then you try to remove just one
  // it will remove both because they both have the same guid.
  // when using this, you need to use the bind method
  // when you remove the listener as well.
  // currently used in text tracks
  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;

  return bound;
};

/**
 * Wraps the given function, `fn`, with a new function that only invokes `fn`
 * at most once per every `wait` milliseconds.
 *
 * @param  {Function} fn
 *         The function to be throttled.
 *
 * @param  {number}   wait
 *         The number of milliseconds by which to throttle.
 *
 * @return {Function} returns the function
 */
var throttle = function throttle(fn, wait) {
  var last = Date.now();

  var throttled = function throttled() {
    var now = Date.now();

    if (now - last >= wait) {
      fn.apply(undefined, arguments);
      last = now;
    }
  };

  return throttled;
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked.
 *
 * Inspired by lodash and underscore implementations.
 *
 * @param  {Function} func
 *         The function to wrap with debounce behavior.
 *
 * @param  {number} wait
 *         The number of milliseconds to wait after the last invocation.
 *
 * @param  {boolean} [immediate]
 *         Whether or not to invoke the function immediately upon creation.
 *
 * @param  {Object} [context=window]
 *         The "context" in which the debounced function should debounce. For
 *         example, if this function should be tied to a Video.js player,
 *         the player can be passed here. Alternatively, defaults to the
 *         global `window` object.
 *
 * @return {Function}
 *         A debounced function.
 */
var debounce = function debounce(func, wait, immediate) {
  var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window$1;

  var timeout = void 0;

  /* eslint-disable consistent-this */
  return function () {
    var self = this;
    var args = arguments;

    var _later = function later() {
      timeout = null;
      _later = null;
      if (!immediate) {
        func.apply(self, args);
      }
    };

    if (!timeout && immediate) {
      func.apply(self, args);
    }

    context.clearTimeout(timeout);
    timeout = context.setTimeout(_later, wait);
  };
  /* eslint-enable consistent-this */
};

/**
 * @file src/js/event-target.js
 */

/**
 * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
 * adds shorthand functions that wrap around lengthy functions. For example:
 * the `on` function is a wrapper around `addEventListener`.
 *
 * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
 * @class EventTarget
 */
var EventTarget = function EventTarget() {};

/**
 * A Custom DOM event.
 *
 * @typedef {Object} EventTarget~Event
 * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
 */

/**
 * All event listeners should follow the following format.
 *
 * @callback EventTarget~EventListener
 * @this {EventTarget}
 *
 * @param {EventTarget~Event} event
 *        the event that triggered this function
 *
 * @param {Object} [hash]
 *        hash of data sent during the event
 */

/**
 * An object containing event names as keys and booleans as values.
 *
 * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
 *         will have extra functionality. See that function for more information.
 *
 * @property EventTarget.prototype.allowedEvents_
 * @private
 */
EventTarget.prototype.allowedEvents_ = {};

/**
 * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
 * function that will get called when an event with a certain name gets triggered.
 *
 * @param {string|string[]} type
 *        An event name or an array of event names.
 *
 * @param {EventTarget~EventListener} fn
 *        The function to call with `EventTarget`s
 */
EventTarget.prototype.on = function (type, fn) {
  // Remove the addEventListener alias before calling Events.on
  // so we don't get into an infinite type loop
  var ael = this.addEventListener;

  this.addEventListener = function () {};
  on(this, type, fn);
  this.addEventListener = ael;
};

/**
 * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#on}
 */
EventTarget.prototype.addEventListener = EventTarget.prototype.on;

/**
 * Removes an `event listener` for a specific event from an instance of `EventTarget`.
 * This makes it so that the `event listener` will no longer get called when the
 * named event happens.
 *
 * @param {string|string[]} type
 *        An event name or an array of event names.
 *
 * @param {EventTarget~EventListener} fn
 *        The function to remove.
 */
EventTarget.prototype.off = function (type, fn) {
  off(this, type, fn);
};

/**
 * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#off}
 */
EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

/**
 * This function will add an `event listener` that gets triggered only once. After the
 * first trigger it will get removed. This is like adding an `event listener`
 * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
 *
 * @param {string|string[]} type
 *        An event name or an array of event names.
 *
 * @param {EventTarget~EventListener} fn
 *        The function to be called once for each event name.
 */
EventTarget.prototype.one = function (type, fn) {
  // Remove the addEventListener alialing Events.on
  // so we don't get into an infinite type loop
  var ael = this.addEventListener;

  this.addEventListener = function () {};
  one(this, type, fn);
  this.addEventListener = ael;
};

/**
 * This function causes an event to happen. This will then cause any `event listeners`
 * that are waiting for that event, to get called. If there are no `event listeners`
 * for an event then nothing will happen.
 *
 * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
 * Trigger will also call the `on` + `uppercaseEventName` function.
 *
 * Example:
 * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
 * `onClick` if it exists.
 *
 * @param {string|EventTarget~Event|Object} event
 *        The name of the event, an `Event`, or an object with a key of type set to
 *        an event name.
 */
EventTarget.prototype.trigger = function (event) {
  var type = event.type || event;

  if (typeof event === 'string') {
    event = { type: type };
  }
  event = fixEvent(event);

  if (this.allowedEvents_[type] && this['on' + type]) {
    this['on' + type](event);
  }

  trigger(this, event);
};

/**
 * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#trigger}
 */
EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

var EVENT_MAP = void 0;

EventTarget.prototype.queueTrigger = function (event) {
  var _this = this;

  // only set up EVENT_MAP if it'll be used
  if (!EVENT_MAP) {
    EVENT_MAP = new Map();
  }

  var type = event.type || event;
  var map = EVENT_MAP.get(this);

  if (!map) {
    map = new Map();
    EVENT_MAP.set(this, map);
  }

  var oldTimeout = map.get(type);

  map.delete(type);
  window$1.clearTimeout(oldTimeout);

  var timeout = window$1.setTimeout(function () {
    // if we cleared out all timeouts for the current target, delete its map
    if (map.size === 0) {
      map = null;
      EVENT_MAP.delete(_this);
    }

    _this.trigger(event);
  }, 0);

  map.set(type, timeout);
};

/**
 * @file mixins/evented.js
 * @module evented
 */

/**
 * Returns whether or not an object has had the evented mixin applied.
 *
 * @param  {Object} object
 *         An object to test.
 *
 * @return {boolean}
 *         Whether or not the object appears to be evented.
 */
var isEvented = function isEvented(object) {
  return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {
    return typeof object[k] === 'function';
  });
};

/**
 * Whether a value is a valid event type - non-empty string or array.
 *
 * @private
 * @param  {string|Array} type
 *         The type value to test.
 *
 * @return {boolean}
 *         Whether or not the type is a valid event type.
 */
var isValidEventType = function isValidEventType(type) {
  return (
    // The regex here verifies that the `type` contains at least one non-
    // whitespace character.
    typeof type === 'string' && /\S/.test(type) || Array.isArray(type) && !!type.length
  );
};

/**
 * Validates a value to determine if it is a valid event target. Throws if not.
 *
 * @private
 * @throws {Error}
 *         If the target does not appear to be a valid event target.
 *
 * @param  {Object} target
 *         The object to test.
 */
var validateTarget = function validateTarget(target) {
  if (!target.nodeName && !isEvented(target)) {
    throw new Error('Invalid target; must be a DOM node or evented object.');
  }
};

/**
 * Validates a value to determine if it is a valid event target. Throws if not.
 *
 * @private
 * @throws {Error}
 *         If the type does not appear to be a valid event type.
 *
 * @param  {string|Array} type
 *         The type to test.
 */
var validateEventType = function validateEventType(type) {
  if (!isValidEventType(type)) {
    throw new Error('Invalid event type; must be a non-empty string or array.');
  }
};

/**
 * Validates a value to determine if it is a valid listener. Throws if not.
 *
 * @private
 * @throws {Error}
 *         If the listener is not a function.
 *
 * @param  {Function} listener
 *         The listener to test.
 */
var validateListener = function validateListener(listener) {
  if (typeof listener !== 'function') {
    throw new Error('Invalid listener; must be a function.');
  }
};

/**
 * Takes an array of arguments given to `on()` or `one()`, validates them, and
 * normalizes them into an object.
 *
 * @private
 * @param  {Object} self
 *         The evented object on which `on()` or `one()` was called. This
 *         object will be bound as the `this` value for the listener.
 *
 * @param  {Array} args
 *         An array of arguments passed to `on()` or `one()`.
 *
 * @return {Object}
 *         An object containing useful values for `on()` or `one()` calls.
 */
var normalizeListenArgs = function normalizeListenArgs(self, args) {

  // If the number of arguments is less than 3, the target is always the
  // evented object itself.
  var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;
  var target = void 0;
  var type = void 0;
  var listener = void 0;

  if (isTargetingSelf) {
    target = self.eventBusEl_;

    // Deal with cases where we got 3 arguments, but we are still listening to
    // the evented object itself.
    if (args.length >= 3) {
      args.shift();
    }

    type = args[0];
    listener = args[1];
  } else {
    target = args[0];
    type = args[1];
    listener = args[2];
  }

  validateTarget(target);
  validateEventType(type);
  validateListener(listener);

  listener = bind(self, listener);

  return { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener };
};

/**
 * Adds the listener to the event type(s) on the target, normalizing for
 * the type of target.
 *
 * @private
 * @param  {Element|Object} target
 *         A DOM node or evented object.
 *
 * @param  {string} method
 *         The event binding method to use ("on" or "one").
 *
 * @param  {string|Array} type
 *         One or more event type(s).
 *
 * @param  {Function} listener
 *         A listener function.
 */
var listen = function listen(target, method, type, listener) {
  validateTarget(target);

  if (target.nodeName) {
    Events[method](target, type, listener);
  } else {
    target[method](type, listener);
  }
};

/**
 * Contains methods that provide event capabilities to an object which is passed
 * to {@link module:evented|evented}.
 *
 * @mixin EventedMixin
 */
var EventedMixin = {

  /**
   * Add a listener to an event (or events) on this object or another evented
   * object.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */
  on: function on$$1() {
    var _this = this;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _normalizeListenArgs = normalizeListenArgs(this, args),
        isTargetingSelf = _normalizeListenArgs.isTargetingSelf,
        target = _normalizeListenArgs.target,
        type = _normalizeListenArgs.type,
        listener = _normalizeListenArgs.listener;

    listen(target, 'on', type, listener);

    // If this object is listening to another evented object.
    if (!isTargetingSelf) {

      // If this object is disposed, remove the listener.
      var removeListenerOnDispose = function removeListenerOnDispose() {
        return _this.off(target, type, listener);
      };

      // Use the same function ID as the listener so we can remove it later it
      // using the ID of the original listener.
      removeListenerOnDispose.guid = listener.guid;

      // Add a listener to the target's dispose event as well. This ensures
      // that if the target is disposed BEFORE this object, we remove the
      // removal listener that was just added. Otherwise, we create a memory leak.
      var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {
        return _this.off('dispose', removeListenerOnDispose);
      };

      // Use the same function ID as the listener so we can remove it later
      // it using the ID of the original listener.
      removeRemoverOnTargetDispose.guid = listener.guid;

      listen(this, 'on', 'dispose', removeListenerOnDispose);
      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);
    }
  },


  /**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will only be called once and then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */
  one: function one$$1() {
    var _this2 = this;

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var _normalizeListenArgs2 = normalizeListenArgs(this, args),
        isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,
        target = _normalizeListenArgs2.target,
        type = _normalizeListenArgs2.type,
        listener = _normalizeListenArgs2.listener;

    // Targeting this evented object.


    if (isTargetingSelf) {
      listen(target, 'one', type, listener);

      // Targeting another evented object.
    } else {
      var wrapper = function wrapper() {
        for (var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          largs[_key3] = arguments[_key3];
        }

        _this2.off(target, type, wrapper);
        listener.apply(null, largs);
      };

      // Use the same function ID as the listener so we can remove it later
      // it using the ID of the original listener.
      wrapper.guid = listener.guid;
      listen(target, 'one', type, wrapper);
    }
  },


  /**
   * Removes listener(s) from event(s) on an evented object.
   *
   * @param  {string|Array|Element|Object} [targetOrType]
   *         If this is a string or array, it represents the event type(s).
   *
   *         Another evented object can be passed here instead, in which case
   *         ALL 3 arguments are _required_.
   *
   * @param  {string|Array|Function} [typeOrListener]
   *         If the first argument was a string or array, this may be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function; otherwise, _all_ listeners bound to the
   *         event type(s) will be removed.
   */
  off: function off$$1(targetOrType, typeOrListener, listener) {

    // Targeting this evented object.
    if (!targetOrType || isValidEventType(targetOrType)) {
      off(this.eventBusEl_, targetOrType, typeOrListener);

      // Targeting another evented object.
    } else {
      var target = targetOrType;
      var type = typeOrListener;

      // Fail fast and in a meaningful way!
      validateTarget(target);
      validateEventType(type);
      validateListener(listener);

      // Ensure there's at least a guid, even if the function hasn't been used
      listener = bind(this, listener);

      // Remove the dispose listener on this evented object, which was given
      // the same guid as the event listener in on().
      this.off('dispose', listener);

      if (target.nodeName) {
        off(target, type, listener);
        off(target, 'dispose', listener);
      } else if (isEvented(target)) {
        target.off(type, listener);
        target.off('dispose', listener);
      }
    }
  },


  /**
   * Fire an event on this evented object, causing its listeners to be called.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash]
   *          An additional object to pass along to listeners.
   *
   * @returns {boolean}
   *          Whether or not the default behavior was prevented.
   */
  trigger: function trigger$$1(event, hash) {
    return trigger(this.eventBusEl_, event, hash);
  }
};

/**
 * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
 *
 * @param  {Object} target
 *         The object to which to add event methods.
 *
 * @param  {Object} [options={}]
 *         Options for customizing the mixin behavior.
 *
 * @param  {String} [options.eventBusKey]
 *         By default, adds a `eventBusEl_` DOM element to the target object,
 *         which is used as an event bus. If the target object already has a
 *         DOM element that should be used, pass its key here.
 *
 * @return {Object}
 *         The target object.
 */
function evented(target) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var eventBusKey = options.eventBusKey;

  // Set or create the eventBusEl_.

  if (eventBusKey) {
    if (!target[eventBusKey].nodeName) {
      throw new Error('The eventBusKey "' + eventBusKey + '" does not refer to an element.');
    }
    target.eventBusEl_ = target[eventBusKey];
  } else {
    target.eventBusEl_ = createEl('span', { className: 'play-event-bus' });
  }

  assign(target, EventedMixin);

  // When any evented object is disposed, it removes all its listeners.
  target.on('dispose', function () {
    target.off();
    window$1.setTimeout(function () {
      target.eventBusEl_ = null;
    }, 0);
  });

  return target;
}

/**
 * @file mixins/stateful.js
 * @module stateful
 */

/**
 * Contains methods that provide statefulness to an object which is passed
 * to {@link module:stateful}.
 *
 * @mixin StatefulMixin
 */
var StatefulMixin = {

  /**
   * A hash containing arbitrary keys and values representing the state of
   * the object.
   *
   * @type {Object}
   */
  state: {},

  /**
   * Set the state of an object by mutating its
   * {@link module:stateful~StatefulMixin.state|state} object in place.
   *
   * @fires   module:stateful~StatefulMixin#statechanged
   * @param   {Object|Function} stateUpdates
   *          A new set of properties to shallow-merge into the plugin state.
   *          Can be a plain object or a function returning a plain object.
   *
   * @returns {Object|undefined}
   *          An object containing changes that occurred. If no changes
   *          occurred, returns `undefined`.
   */
  setState: function setState(stateUpdates) {
    var _this = this;

    // Support providing the `stateUpdates` state as a function.
    if (typeof stateUpdates === 'function') {
      stateUpdates = stateUpdates();
    }

    var changes = void 0;

    each(stateUpdates, function (value, key) {

      // Record the change if the value is different from what's in the
      // current state.
      if (_this.state[key] !== value) {
        changes = changes || {};
        changes[key] = {
          from: _this.state[key],
          to: value
        };
      }

      _this.state[key] = value;
    });

    // Only trigger "statechange" if there were changes AND we have a trigger
    // function. This allows us to not require that the target object be an
    // evented object.
    if (changes && isEvented(this)) {

      /**
       * An event triggered on an object that is both
       * {@link module:stateful|stateful} and {@link module:evented|evented}
       * indicating that its state has changed.
       *
       * @event    module:stateful~StatefulMixin#statechanged
       * @type     {Object}
       * @property {Object} changes
       *           A hash containing the properties that were changed and
       *           the values they were changed `from` and `to`.
       */
      this.trigger({
        changes: changes,
        type: 'statechanged'
      });
    }

    return changes;
  }
};

/**
 * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
 * object.
 *
 * If the target object is {@link module:evented|evented} and has a
 * `handleStateChanged` method, that method will be automatically bound to the
 * `statechanged` event on itself.
 *
 * @param   {Object} target
 *          The object to be made stateful.
 *
 * @param   {Object} [defaultState]
 *          A default set of properties to populate the newly-stateful object's
 *          `state` property.
 *
 * @returns {Object}
 *          Returns the `target`.
 */
function stateful(target, defaultState) {
  assign(target, StatefulMixin);

  // This happens after the mixing-in because we need to replace the `state`
  // added in that step.
  target.state = assign({}, target.state, defaultState);

  // Auto-bind the `handleStateChanged` method of the target object if it exists.
  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {
    target.on('statechanged', target.handleStateChanged);
  }

  return target;
}

/**
 * @file to-title-case.js
 * @module to-title-case
 */

/**
 * Uppercase the first letter of a string.
 *
 * @param {string} string
 *        String to be uppercased
 *
 * @return {string}
 *         The string with an uppercased first letter
 */
function toTitleCase(string) {
  if (typeof string !== 'string') {
    return string;
  }

  return string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * Compares the TitleCase versions of the two strings for equality.
 *
 * @param {string} str1
 *        The first string to compare
 *
 * @param {string} str2
 *        The second string to compare
 *
 * @return {boolean}
 *         Whether the TitleCase versions of the strings are equal
 */
function titleCaseEquals(str1, str2) {
  return toTitleCase(str1) === toTitleCase(str2);
}

/**
 * @file merge-options.js
 * @module merge-options
 */

/**
 * Deep-merge one or more options objects, recursively merging **only** plain
 * object properties.
 *
 * @param   {Object[]} sources
 *          One or more objects to merge into a new object.
 *
 * @return {Object}
 *          A new object that is the merged result of all sources.
 */
function mergeOptions() {
  var result = {};

  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  sources.forEach(function (source) {
    if (!source) {
      return;
    }

    each(source, function (value, key) {
      if (!isPlain(value)) {
        result[key] = value;
        return;
      }

      if (!isPlain(result[key])) {
        result[key] = {};
      }

      result[key] = mergeOptions(result[key], value);
    });
  });

  return result;
}

/**
 * Player Component - Base class for all UI objects
 *
 * @file component.js
 */
//import { document } from 'global/document';

/**
 * Base class for all UI Components.
 * Components are UI objects which represent both a javascript object and an element
 * in the DOM. They can be children of other components, and can have
 * children themselves.
 *
 * Components can also use methods from {@link EventTarget}
 */

var Component = function () {

    /**
     * A callback that is called when a component is ready. Does not have any
     * paramters and any callback value will be ignored.
     *
     * @callback Component~ReadyCallback
     * @this Component
     */

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {Object[]} [options.children]
     *        An array of children objects to intialize this component with. Children objects have
     *        a name property that will be used if more than one component of the same type needs to be
     *        added.
     *
     * @param {Component~ReadyCallback} [ready]
     *        Function that gets called when the `Component` is ready.
     */
    function Component(player, options, ready) {
        classCallCheck(this, Component);


        // The component might be the player itself and we can't pass `this` to super
        if (!player && this.play) {
            this.player_ = player = this; // eslint-disable-line
            var videoDiv = document.getElementsByClassName('video-player-element');
            var audioDiv = document.getElementsByClassName('audio-player-element');
            if (videoDiv.length > 0 && options.tag && options.tag.localName == 'audio') {
                videoDiv[0].style.display = 'none';
            } else if (audioDiv.length > 0 && options.tag && options.tag.localName == 'video') {
                audioDiv[0].innerHTML = '';
            }
        } else {
            this.player_ = player;
        }

        // Make a copy of prototype.options_ to protect against overriding defaults
        this.options_ = mergeOptions({}, this.options_);

        // Updated options with supplied options
        options = this.options_ = mergeOptions(this.options_, options);

        // Get ID from options or options element if one is supplied
        this.id_ = options.id || options.el && options.el.id;

        // If there was no ID from the options, generate one
        if (!this.id_) {
            // Don't require the player ID function in the case of mock players
            var id = player && player.id && player.id() || 'no_player';

            this.id_ = id + '_component_' + newGUID();
        }

        this.name_ = options.name || null;

        // Create element if one wasn't provided in options
        if (options.el) {
            this.el_ = options.el;
        } else if (options.createEl !== false) {
            this.el_ = this.createEl();
        }

        // if evented is anything except false, we want to mixin in evented
        if (options.evented !== false) {
            // Make this an evented object and use `el_`, if available, as its event bus
            evented(this, { eventBusKey: this.el_ ? 'el_' : null });
        }
        stateful(this, this.constructor.defaultState);

        this.children_ = [];
        this.childIndex_ = {};
        this.childNameIndex_ = {};

        // Add any child components in options
        if (options.initChildren !== false) {
            this.initChildren();
        }

        this.ready(ready);
        // Don't want to trigger ready here or it will before init is actually
        // finished for all children that run this constructor

        if (options.reportTouchActivity !== false) {
            this.enableTouchActivity();
        }
    }

    /**
     * Dispose of the `Component` and all child components.
     *
     * @fires Component#dispose
     */


    Component.prototype.dispose = function dispose() {

        /**
         * Triggered when a `Component` is disposed.
         *
         * @event Component#dispose
         * @type {EventTarget~Event}
         *
         * @property {boolean} [bubbles=false]
         *           set to false so that the close event does not
         *           bubble up
         */
        this.trigger({ type: 'dispose', bubbles: false });

        // Dispose all children.
        if (this.children_) {
            for (var i = this.children_.length - 1; i >= 0; i--) {
                if (this.children_[i].dispose) {
                    this.children_[i].dispose();
                }
            }
        }

        // Delete child references
        this.children_ = null;
        this.childIndex_ = null;
        this.childNameIndex_ = null;

        if (this.el_) {
            // Remove element from DOM
            if (this.el_.parentNode) {
                this.el_.parentNode.removeChild(this.el_);
            }

            removeData(this.el_);
            this.el_ = null;
        }

        // remove reference to the player after disposing of the element
        this.player_ = null;
    };

    /**
     * Return the {@link Player} that the `Component` has attached to.
     *
     * @return {Player}
     *         The player that this `Component` has attached to.
     */


    Component.prototype.player = function player() {
        return this.player_;
    };

    /**
     * Deep merge of options objects with new options.
     * > Note: When both `obj` and `options` contain properties whose values are objects.
     *         The two properties get merged using {@link module:mergeOptions}
     *
     * @param {Object} obj
     *        The object that contains new options.
     *
     * @return {Object}
     *         A new object of `this.options_` and `obj` merged together.
     *
     * @deprecated since version 5
     */


    Component.prototype.options = function options(obj) {
        log$1.warn('this.options() has been deprecated and will be moved to the constructor in 6.0');

        if (!obj) {
            return this.options_;
        }

        this.options_ = mergeOptions(this.options_, obj);
        return this.options_;
    };

    /**
     * Get the `Component`s DOM element
     *
     * @return {Element}
     *         The DOM element for this `Component`.
     */


    Component.prototype.el = function el() {
        return this.el_;
    };

    /**
     * Create the `Component`s DOM element.
     *
     * @param {string} [tagName]
     *        Element's DOM node type. e.g. 'div'
     *
     * @param {Object} [properties]
     *        An object of properties that should be set.
     *
     * @param {Object} [attributes]
     *        An object of attributes that should be set.
     *
     * @return {Element}
     *         The element that gets created.
     */


    Component.prototype.createEl = function createEl$$1(tagName, properties, attributes) {
        return createEl(tagName, properties, attributes);
    };

    /**
     * Localize a string given the string in english.
     *
     * If tokens are provided, it'll try and run a simple token replacement on the provided string.
     * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.
     *
     * If a `defaultValue` is provided, it'll use that over `string`,
     * if a value isn't found in provided language files.
     * This is useful if you want to have a descriptive key for token replacement
     * but have a succinct localized string and not require `en.json` to be included.
     *
     * Currently, it is used for the progress bar timing.
     * ```js
     * {
     *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
     * }
     * ```
     * It is then used like so:
     * ```js
     * this.localize('progress bar timing: currentTime={1} duration{2}',
     *               [this.player_.currentTime(), this.player_.duration()],
     *               '{1} of {2}');
     * ```
     *
     * Which outputs something like: `01:23 of 24:56`.
     *
     *
     * @param {string} string
     *        The string to localize and the key to lookup in the language files.
     * @param {string[]} [tokens]
     *        If the current item has token replacements, provide the tokens here.
     * @param {string} [defaultValue]
     *        Defaults to `string`. Can be a default value to use for token replacement
     *        if the lookup key is needed to be separate.
     *
     * @return {string}
     *         The localized string or if no localization exists the english string.
     */


    Component.prototype.localize = function localize(string, tokens) {
        var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string;

        var code = this.player_.language && this.player_.language();
        var languages = this.player_.languages && this.player_.languages();
        var language = languages && languages[code];
        var primaryCode = code && code.split('-')[0];
        var primaryLang = languages && languages[primaryCode];

        var localizedString = defaultValue;

        if (language && language[string]) {
            localizedString = language[string];
        } else if (primaryLang && primaryLang[string]) {
            localizedString = primaryLang[string];
        }

        if (tokens) {
            localizedString = localizedString.replace(/\{(\d+)\}/g, function (match, index) {
                var value = tokens[index - 1];
                var ret = value;

                if (typeof value === 'undefined') {
                    ret = match;
                }

                return ret;
            });
        }

        return localizedString;
    };

    /**
     * Return the `Component`s DOM element. This is where children get inserted.
     * This will usually be the the same as the element returned in {@link Component#el}.
     *
     * @return {Element}
     *         The content element for this `Component`.
     */


    Component.prototype.contentEl = function contentEl() {
        return this.contentEl_ || this.el_;
    };

    /**
     * Get this `Component`s ID
     *
     * @return {string}
     *         The id of this `Component`
     */


    Component.prototype.id = function id() {
        return this.id_;
    };

    /**
     * Get the `Component`s name. The name gets used to reference the `Component`
     * and is set during registration.
     *
     * @return {string}
     *         The name of this `Component`.
     */


    Component.prototype.name = function name() {
        return this.name_;
    };

    /**
     * Get an array of all child components
     *
     * @return {Array}
     *         The children
     */


    Component.prototype.children = function children() {
        return this.children_;
    };

    /**
     * Returns the child `Component` with the given `id`.
     *
     * @param {string} id
     *        The id of the child `Component` to get.
     *
     * @return {Component|undefined}
     *         The child `Component` with the given `id` or undefined.
     */


    Component.prototype.getChildById = function getChildById(id) {
        return this.childIndex_[id];
    };

    /**
     * Returns the child `Component` with the given `name`.
     *
     * @param {string} name
     *        The name of the child `Component` to get.
     *
     * @return {Component|undefined}
     *         The child `Component` with the given `name` or undefined.
     */


    Component.prototype.getChild = function getChild(name) {
        if (!name) {
            return;
        }

        name = toTitleCase(name);

        return this.childNameIndex_[name];
    };

    /**
     * Add a child `Component` inside the current `Component`.
     *
     *
     * @param {string|Component} child
     *        The name or instance of a child to add.
     *
     * @param {Object} [options={}]
     *        The key/value store of options that will get passed to children of
     *        the child.
     *
     * @param {number} [index=this.children_.length]
     *        The index to attempt to add a child into.
     *
     * @return {Component}
     *         The `Component` that gets added as a child. When using a string the
     *         `Component` will get created by this process.
     */


    Component.prototype.addChild = function addChild(child) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;

        var component = void 0;
        var componentName = void 0;

        // If child is a string, create component with options
        if (typeof child === 'string') {
            componentName = toTitleCase(child);

            var componentClassName = options.componentClass || componentName;

            // Set name through options
            options.name = componentName;

            // Create a new object & element for this controls set
            // If there's no .player_, this is a player
            var ComponentClass = Component.getComponent(componentClassName);

            if (!ComponentClass) {
                throw new Error('Component ' + componentClassName + ' does not exist');
            }

            // data stored directly on the videojs object may be
            // misidentified as a component to retain
            // backwards-compatibility with 4.x. check to make sure the
            // component class can be instantiated.
            if (typeof ComponentClass !== 'function') {
                return null;
            }

            component = new ComponentClass(this.player_ || this, options);

            // child is a component instance
        } else {
            component = child;
        }

        this.children_.splice(index, 0, component);

        if (typeof component.id === 'function') {
            this.childIndex_[component.id()] = component;
        }

        // If a name wasn't used to create the component, check if we can use the
        // name function of the component
        componentName = componentName || component.name && toTitleCase(component.name());

        if (componentName) {
            this.childNameIndex_[componentName] = component;
        }

        // Add the UI object's element to the container div (box)
        // Having an element is not required
        if (typeof component.el === 'function' && component.el()) {
            var childNodes = this.contentEl().children;
            var refNode = childNodes[index] || null;

            this.contentEl().insertBefore(component.el(), refNode);
        }

        // Return so it can stored on parent object if desired.
        return component;
    };

    /**
     * Remove a child `Component` from this `Component`s list of children. Also removes
     * the child `Component`s element from this `Component`s element.
     *
     * @param {Component} component
     *        The child `Component` to remove.
     */


    Component.prototype.removeChild = function removeChild(component) {
        if (typeof component === 'string') {
            component = this.getChild(component);
        }

        if (!component || !this.children_) {
            return;
        }

        var childFound = false;

        for (var i = this.children_.length - 1; i >= 0; i--) {
            if (this.children_[i] === component) {
                childFound = true;
                this.children_.splice(i, 1);
                break;
            }
        }

        if (!childFound) {
            return;
        }

        this.childIndex_[component.id()] = null;
        this.childNameIndex_[component.name()] = null;

        var compEl = component.el();

        if (compEl && compEl.parentNode === this.contentEl()) {
            this.contentEl().removeChild(component.el());
        }
    };

    /**
     * Add and initialize default child `Component`s based upon options.
     */


    Component.prototype.initChildren = function initChildren() {
        var _this = this;

        var children = this.options_.children;

        if (children) {
            // `this` is `parent`
            var parentOptions = this.options_;

            var handleAdd = function handleAdd(child) {
                var name = child.name;
                var opts = child.opts;

                // Allow options for children to be set at the parent options
                // e.g. videojs(id, { controlBar: false });
                // instead of videojs(id, { children: { controlBar: false });
                if (parentOptions[name] !== undefined) {
                    opts = parentOptions[name];
                }

                // Allow for disabling default components
                // e.g. options['children']['posterImage'] = false
                if (opts === false) {
                    return;
                }

                // Allow options to be passed as a simple boolean if no configuration
                // is necessary.
                if (opts === true) {
                    opts = {};
                }

                // We also want to pass the original player options
                // to each component as well so they don't need to
                // reach back into the player for options later.
                opts.playerOptions = _this.options_.playerOptions;

                // Create and add the child component.
                // Add a direct reference to the child by name on the parent instance.
                // If two of the same component are used, different names should be supplied
                // for each
                var newChild = _this.addChild(name, opts);

                if (newChild) {
                    _this[name] = newChild;
                }
            };

            // Allow for an array of children details to passed in the options
            var workingChildren = void 0;
            var Tech = Component.getComponent('Tech');

            if (Array.isArray(children)) {
                workingChildren = children;
            } else {
                workingChildren = Object.keys(children);
            }

            workingChildren
            // children that are in this.options_ but also in workingChildren  would
            // give us extra children we do not want. So, we want to filter them out.
            .concat(Object.keys(this.options_).filter(function (child) {
                return !workingChildren.some(function (wchild) {
                    if (typeof wchild === 'string') {
                        return child === wchild;
                    }
                    return child === wchild.name;
                });
            })).map(function (child) {
                var name = void 0;
                var opts = void 0;

                if (typeof child === 'string') {
                    name = child;
                    opts = children[name] || _this.options_[name] || {};
                } else {
                    name = child.name;
                    opts = child;
                }

                return { name: name, opts: opts };
            }).filter(function (child) {
                // we have to make sure that child.name isn't in the techOrder since
                // techs are registerd as Components but can't aren't compatible
                // See https://github.com/videojs/video.js/issues/2772
                var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));

                return c && !Tech.isTech(c);
            }).forEach(handleAdd);
        }
    };

    /**
     * Builds the default DOM class name. Should be overriden by sub-components.
     *
     * @return {string}
     *         The DOM class name for this object.
     *
     * @abstract
     */


    Component.prototype.buildCSSClass = function buildCSSClass() {
        // Child classes can include a function that does:
        // return 'CLASS NAME' + this._super();
        return '';
    };

    /**
     * Bind a listener to the component's ready state.
     * Different from event listeners in that if the ready event has already happened
     * it will trigger the function immediately.
     *
     * @return {Component}
     *         Returns itself; method can be chained.
     */


    Component.prototype.ready = function ready(fn) {
        var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!fn) {
            return;
        }

        if (!this.isReady_) {
            this.readyQueue_ = this.readyQueue_ || [];
            this.readyQueue_.push(fn);
            return;
        }

        if (sync) {
            fn.call(this);
        } else {
            // Call the function asynchronously by default for consistency
            this.setTimeout(fn, 1);
        }
    };

    /**
     * Trigger all the ready listeners for this `Component`.
     *
     * @fires Component#ready
     */


    Component.prototype.triggerReady = function triggerReady() {
        this.isReady_ = true;

        // Ensure ready is triggered asynchronously
        this.setTimeout(function () {
            var readyQueue = this.readyQueue_;

            // Reset Ready Queue
            this.readyQueue_ = [];

            if (readyQueue && readyQueue.length > 0) {
                readyQueue.forEach(function (fn) {
                    fn.call(this);
                }, this);
            }

            // Allow for using event listeners also
            /**
             * Triggered when a `Component` is ready.
             *
             * @event Component#ready
             * @type {EventTarget~Event}
             */
            this.trigger('ready');
        }, 1);
    };

    /**
     * Find a single DOM element matching a `selector`. This can be within the `Component`s
     * `contentEl()` or another custom context.
     *
     * @param {string} selector
     *        A valid CSS selector, which will be passed to `querySelector`.
     *
     * @param {Element|string} [context=this.contentEl()]
     *        A DOM element within which to query. Can also be a selector string in
     *        which case the first matching element will get used as context. If
     *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
     *        nothing it falls back to `document`.
     *
     * @return {Element|null}
     *         the dom element that was found, or null
     *
     * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
     */


    Component.prototype.$ = function $$$1(selector, context) {
        return $(selector, context || this.contentEl());
    };

    /**
     * Finds all DOM element matching a `selector`. This can be within the `Component`s
     * `contentEl()` or another custom context.
     *
     * @param {string} selector
     *        A valid CSS selector, which will be passed to `querySelectorAll`.
     *
     * @param {Element|string} [context=this.contentEl()]
     *        A DOM element within which to query. Can also be a selector string in
     *        which case the first matching element will get used as context. If
     *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
     *        nothing it falls back to `document`.
     *
     * @return {NodeList}
     *         a list of dom elements that were found
     *
     * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
     */


    Component.prototype.$$ = function $$$$1(selector, context) {
        return $$(selector, context || this.contentEl());
    };

    /**
     * Check if a component's element has a CSS class name.
     *
     * @param {string} classToCheck
     *        CSS class name to check.
     *
     * @return {boolean}
     *         - True if the `Component` has the class.
     *         - False if the `Component` does not have the class`
     */


    Component.prototype.hasClass = function hasClass$$1(classToCheck) {
        return hasClass(this.el_, classToCheck);
    };

    /**
     * Add a CSS class name to the `Component`s element.
     *
     * @param {string} classToAdd
     *        CSS class name to add
     */


    Component.prototype.addClass = function addClass$$1(classToAdd) {
        addClass(this.el_, classToAdd);
    };

    /**
     * Remove a CSS class name from the `Component`s element.
     *
     * @param {string} classToRemove
     *        CSS class name to remove
     */


    Component.prototype.removeClass = function removeClass$$1(classToRemove) {
        removeClass(this.el_, classToRemove);
    };

    /**
     * Add or remove a CSS class name from the component's element.
     * - `classToToggle` gets added when {@link Component#hasClass} would return false.
     * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
     *
     * @param  {string} classToToggle
     *         The class to add or remove based on (@link Component#hasClass}
     *
     * @param  {boolean|Dom~predicate} [predicate]
     *         An {@link Dom~predicate} function or a boolean
     */


    Component.prototype.toggleClass = function toggleClass$$1(classToToggle, predicate) {
        toggleClass(this.el_, classToToggle, predicate);
    };

    /**
     * Show the `Component`s element if it is hidden by removing the
     * 'play-hidden' class name from it.
     */


    Component.prototype.show = function show() {
        this.removeClass('play-hidden');
    };

    /**
     * Hide the `Component`s element if it is currently showing by adding the
     * 'play-hidden` class name to it.
     */


    Component.prototype.hide = function hide() {
        this.addClass('play-hidden');
    };

    /**
     * Lock a `Component`s element in its visible state by adding the 'play-lock-showing'
     * class name to it. Used during fadeIn/fadeOut.
     *
     * @private
     */


    Component.prototype.lockShowing = function lockShowing() {
        this.addClass('play-lock-showing');
    };

    /**
     * Unlock a `Component`s element from its visible state by removing the 'play-lock-showing'
     * class name from it. Used during fadeIn/fadeOut.
     *
     * @private
     */


    Component.prototype.unlockShowing = function unlockShowing() {
        this.removeClass('play-lock-showing');
    };

    /**
     * Get the value of an attribute on the `Component`s element.
     *
     * @param {string} attribute
     *        Name of the attribute to get the value from.
     *
     * @return {string|null}
     *         - The value of the attribute that was asked for.
     *         - Can be an empty string on some browsers if the attribute does not exist
     *           or has no value
     *         - Most browsers will return null if the attibute does not exist or has
     *           no value.
     *
     * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
     */


    Component.prototype.getAttribute = function getAttribute$$1(attribute) {
        return getAttribute(this.el_, attribute);
    };

    /**
     * Set the value of an attribute on the `Component`'s element
     *
     * @param {string} attribute
     *        Name of the attribute to set.
     *
     * @param {string} value
     *        Value to set the attribute to.
     *
     * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
     */


    Component.prototype.setAttribute = function setAttribute$$1(attribute, value) {
        setAttribute(this.el_, attribute, value);
    };

    /**
     * Remove an attribute from the `Component`s element.
     *
     * @param {string} attribute
     *        Name of the attribute to remove.
     *
     * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
     */


    Component.prototype.removeAttribute = function removeAttribute$$1(attribute) {
        removeAttribute(this.el_, attribute);
    };

    /**
     * Get or set the width of the component based upon the CSS styles.
     * See {@link Component#dimension} for more detailed information.
     *
     * @param {number|string} [num]
     *        The width that you want to set postfixed with '%', 'px' or nothing.
     *
     * @param {boolean} [skipListeners]
     *        Skip the componentresize event trigger
     *
     * @return {number|string}
     *         The width when getting, zero if there is no width. Can be a string
     *           postpixed with '%' or 'px'.
     */


    Component.prototype.width = function width(num, skipListeners) {
        return this.dimension('width', num, skipListeners);
    };

    /**
     * Get or set the height of the component based upon the CSS styles.
     * See {@link Component#dimension} for more detailed information.
     *
     * @param {number|string} [num]
     *        The height that you want to set postfixed with '%', 'px' or nothing.
     *
     * @param {boolean} [skipListeners]
     *        Skip the componentresize event trigger
     *
     * @return {number|string}
     *         The width when getting, zero if there is no width. Can be a string
     *         postpixed with '%' or 'px'.
     */


    Component.prototype.height = function height(num, skipListeners) {
        return this.dimension('height', num, skipListeners);
    };

    /**
     * Set both the width and height of the `Component` element at the same time.
     *
     * @param  {number|string} width
     *         Width to set the `Component`s element to.
     *
     * @param  {number|string} height
     *         Height to set the `Component`s element to.
     */


    Component.prototype.dimensions = function dimensions(width, height) {
        // Skip componentresize listeners on width for optimization
        this.width(width, true);
        this.height(height);
    };

    /**
     * Get or set width or height of the `Component` element. This is the shared code
     * for the {@link Component#width} and {@link Component#height}.
     *
     * Things to know:
     * - If the width or height in an number this will return the number postfixed with 'px'.
     * - If the width/height is a percent this will return the percent postfixed with '%'
     * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
     *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
     *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
     *   for more information
     * - If you want the computed style of the component, use {@link Component#currentWidth}
     *   and {@link {Component#currentHeight}
     *
     * @fires Component#componentresize
     *
     * @param {string} widthOrHeight
     8        'width' or 'height'
     *
     * @param  {number|string} [num]
     8         New dimension
     *
     * @param  {boolean} [skipListeners]
     *         Skip componentresize event trigger
     *
     * @return {number}
     *         The dimension when getting or 0 if unset
     */


    Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
        if (num !== undefined) {
            // Set to zero if null or literally NaN (NaN !== NaN)
            if (num === null || num !== num) {
                num = 0;
            }

            // Check if using css width/height (% or px) and adjust
            if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
                this.el_.style[widthOrHeight] = num;
            } else if (num === 'auto') {
                this.el_.style[widthOrHeight] = '';
            } else {
                this.el_.style[widthOrHeight] = num + 'px';
            }

            // skipListeners allows us to avoid triggering the resize event when setting both width and height
            if (!skipListeners) {
                /**
                 * Triggered when a component is resized.
                 *
                 * @event Component#componentresize
                 * @type {EventTarget~Event}
                 */
                this.trigger('componentresize');
            }

            return;
        }

        // Not setting a value, so getting it
        // Make sure element exists
        if (!this.el_) {
            return 0;
        }

        // Get dimension value from style
        var val = this.el_.style[widthOrHeight];
        var pxIndex = val.indexOf('px');

        if (pxIndex !== -1) {
            // Return the pixel value with no 'px'
            return parseInt(val.slice(0, pxIndex), 10);
        }

        // No px so using % or no style was set, so falling back to offsetWidth/height
        // If component has display:none, offset will return 0
        // TODO: handle display:none and no dimension style using px
        return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);
    };

    /**
     * Get the width or the height of the `Component` elements computed style. Uses
     * `window.getComputedStyle`.
     *
     * @param {string} widthOrHeight
     *        A string containing 'width' or 'height'. Whichever one you want to get.
     *
     * @return {number}
     *         The dimension that gets asked for or 0 if nothing was set
     *         for that dimension.
     */


    Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
        var computedWidthOrHeight = 0;

        if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
            throw new Error('currentDimension only accepts width or height value');
        }

        if (typeof window$1.getComputedStyle === 'function') {
            var computedStyle = window$1.getComputedStyle(this.el_);

            computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
        }

        // remove 'px' from variable and parse as integer
        computedWidthOrHeight = parseFloat(computedWidthOrHeight);

        // if the computed value is still 0, it's possible that the browser is lying
        // and we want to check the offset values.
        // This code also runs wherever getComputedStyle doesn't exist.
        if (computedWidthOrHeight === 0) {
            var rule = 'offset' + toTitleCase(widthOrHeight);

            computedWidthOrHeight = this.el_[rule];
        }

        return computedWidthOrHeight;
    };

    /**
     * An object that contains width and height values of the `Component`s
     * computed style. Uses `window.getComputedStyle`.
     *
     * @typedef {Object} Component~DimensionObject
     *
     * @property {number} width
     *           The width of the `Component`s computed style.
     *
     * @property {number} height
     *           The height of the `Component`s computed style.
     */

    /**
     * Get an object that contains width and height values of the `Component`s
     * computed style.
     *
     * @return {Component~DimensionObject}
     *         The dimensions of the components element
     */


    Component.prototype.currentDimensions = function currentDimensions() {
        return {
            width: this.currentDimension('width'),
            height: this.currentDimension('height')
        };
    };

    /**
     * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.
     *
     * @return {number} width
     *           The width of the `Component`s computed style.
     */


    Component.prototype.currentWidth = function currentWidth() {
        return this.currentDimension('width');
    };

    /**
     * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.
     *
     * @return {number} height
     *           The height of the `Component`s computed style.
     */


    Component.prototype.currentHeight = function currentHeight() {
        return this.currentDimension('height');
    };

    /**
     * Set the focus to this component
     */


    Component.prototype.focus = function focus() {
        this.el_.focus();
    };

    /**
     * Remove the focus from this component
     */


    Component.prototype.blur = function blur() {
        this.el_.blur();
    };

    /**
     * Emit a 'tap' events when touch event support gets detected. This gets used to
     * support toggling the controls through a tap on the video. They get enabled
     * because every sub-component would have extra overhead otherwise.
     *
     * @private
     * @fires Component#tap
     * @listens Component#touchstart
     * @listens Component#touchmove
     * @listens Component#touchleave
     * @listens Component#touchcancel
     * @listens Component#touchend
      */


    Component.prototype.emitTapEvents = function emitTapEvents() {
        // Track the start time so we can determine how long the touch lasted
        var touchStart = 0;
        var firstTouch = null;

        // Maximum movement allowed during a touch event to still be considered a tap
        // Other popular libs use anywhere from 2 (hammer.js) to 15,
        // so 10 seems like a nice, round number.
        var tapMovementThreshold = 10;

        // The maximum length a touch can be while still being considered a tap
        var touchTimeThreshold = 200;

        var couldBeTap = void 0;

        this.on('touchstart', function (event) {
            // If more than one finger, don't consider treating this as a click
            if (event.touches.length === 1) {
                // Copy pageX/pageY from the object
                firstTouch = {
                    pageX: event.touches[0].pageX,
                    pageY: event.touches[0].pageY
                };
                // Record start time so we can detect a tap vs. "touch and hold"
                touchStart = new Date().getTime();
                // Reset couldBeTap tracking
                couldBeTap = true;
            }
        });

        this.on('touchmove', function (event) {
            // If more than one finger, don't consider treating this as a click
            if (event.touches.length > 1) {
                couldBeTap = false;
            } else if (firstTouch) {
                // Some devices will throw touchmoves for all but the slightest of taps.
                // So, if we moved only a small distance, this could still be a tap
                var xdiff = event.touches[0].pageX - firstTouch.pageX;
                var ydiff = event.touches[0].pageY - firstTouch.pageY;
                var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

                if (touchDistance > tapMovementThreshold) {
                    couldBeTap = false;
                }
            }
        });

        var noTap = function noTap() {
            couldBeTap = false;
        };

        // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
        this.on('touchleave', noTap);
        this.on('touchcancel', noTap);

        // When the touch ends, measure how long it took and trigger the appropriate
        // event
        this.on('touchend', function (event) {
            firstTouch = null;
            // Proceed only if the touchmove/leave/cancel event didn't happen
            if (couldBeTap === true) {
                // Measure how long the touch lasted
                var touchTime = new Date().getTime() - touchStart;

                // Make sure the touch was less than the threshold to be considered a tap
                if (touchTime < touchTimeThreshold) {
                    // Don't let browser turn this into a click
                    event.preventDefault();
                    /**
                     * Triggered when a `Component` is tapped.
                     *
                     * @event Component#tap
                     * @type {EventTarget~Event}
                     */
                    this.trigger('tap');
                    // It may be good to copy the touchend event object and change the
                    // type to tap, if the other event properties aren't exact after
                    // Events.fixEvent runs (e.g. event.target)
                }
            }
        });
    };

    /**
     * This function reports user activity whenever touch events happen. This can get
     * turned off by any sub-components that wants touch events to act another way.
     *
     * Report user touch activity when touch events occur. User activity gets used to
     * determine when controls should show/hide. It is simple when it comes to mouse
     * events, because any mouse event should show the controls. So we capture mouse
     * events that bubble up to the player and report activity when that happens.
     * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
     * controls. So touch events can't help us at the player level either.
     *
     * User activity gets checked asynchronously. So what could happen is a tap event
     * on the video turns the controls off. Then the `touchend` event bubbles up to
     * the player. Which, if it reported user activity, would turn the controls right
     * back on. We also don't want to completely block touch events from bubbling up.
     * Furthermore a `touchmove` event and anything other than a tap, should not turn
     * controls back on.
     *
     * @listens Component#touchstart
     * @listens Component#touchmove
     * @listens Component#touchend
     * @listens Component#touchcancel
     */


    Component.prototype.enableTouchActivity = function enableTouchActivity() {
        // Don't continue if the root player doesn't support reporting user activity
        if (!this.player() || !this.player().reportUserActivity) {
            return;
        }

        // listener for reporting that the user is active
        var report = bind(this.player(), this.player().reportUserActivity);

        var touchHolding = void 0;

        this.on('touchstart', function () {
            report();
            // For as long as the they are touching the device or have their mouse down,
            // we consider them active even if they're not moving their finger or mouse.
            // So we want to continue to update that they are active
            this.clearInterval(touchHolding);
            // report at the same interval as activityCheck
            touchHolding = this.setInterval(report, 250);
        });

        var touchEnd = function touchEnd(event) {
            report();
            // stop the interval that maintains activity if the touch is holding
            this.clearInterval(touchHolding);
        };

        this.on('touchmove', report);
        this.on('touchend', touchEnd);
        this.on('touchcancel', touchEnd);
    };

    /**
     * A callback that has no parameters and is bound into `Component`s context.
     *
     * @callback Component~GenericCallback
     * @this Component
     */

    /**
     * Creates a function that runs after an `x` millisecond timeout. This function is a
     * wrapper around `window.setTimeout`. There are a few reasons to use this one
     * instead though:
     * 1. It gets cleared via  {@link Component#clearTimeout} when
     *    {@link Component#dispose} gets called.
     * 2. The function callback will gets turned into a {@link Component~GenericCallback}
     *
     * > Note: You can't use `window.clearTimeout` on the id returned by this function. This
     *         will cause its dispose listener not to get cleaned up! Please use
     *         {@link Component#clearTimeout} or {@link Component#dispose} instead.
     *
     * @param {Component~GenericCallback} fn
     *        The function that will be run after `timeout`.
     *
     * @param {number} timeout
     *        Timeout in milliseconds to delay before executing the specified function.
     *
     * @return {number}
     *         Returns a timeout ID that gets used to identify the timeout. It can also
     *         get used in {@link Component#clearTimeout} to clear the timeout that
     *         was set.
     *
     * @listens Component#dispose
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
     */


    Component.prototype.setTimeout = function setTimeout(fn, timeout) {
        var _this2 = this;

        // declare as variables so they are properly available in timeout function
        // eslint-disable-next-line
        var timeoutId, disposeFn;

        fn = bind(this, fn);

        timeoutId = window$1.setTimeout(function () {
            _this2.off('dispose', disposeFn);
            fn();
        }, timeout);

        disposeFn = function disposeFn() {
            return _this2.clearTimeout(timeoutId);
        };

        disposeFn.guid = 'play-timeout-' + timeoutId;

        this.on('dispose', disposeFn);

        return timeoutId;
    };

    /**
     * Clears a timeout that gets created via `window.setTimeout` or
     * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
     * use this function instead of `window.clearTimout`. If you don't your dispose
     * listener will not get cleaned up until {@link Component#dispose}!
     *
     * @param {number} timeoutId
     *        The id of the timeout to clear. The return value of
     *        {@link Component#setTimeout} or `window.setTimeout`.
     *
     * @return {number}
     *         Returns the timeout id that was cleared.
     *
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
     */


    Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
        window$1.clearTimeout(timeoutId);

        var disposeFn = function disposeFn() {};

        disposeFn.guid = 'play-timeout-' + timeoutId;

        this.off('dispose', disposeFn);

        return timeoutId;
    };

    /**
     * Creates a function that gets run every `x` milliseconds. This function is a wrapper
     * around `window.setInterval`. There are a few reasons to use this one instead though.
     * 1. It gets cleared via  {@link Component#clearInterval} when
     *    {@link Component#dispose} gets called.
     * 2. The function callback will be a {@link Component~GenericCallback}
     *
     * @param {Component~GenericCallback} fn
     *        The function to run every `x` seconds.
     *
     * @param {number} interval
     *        Execute the specified function every `x` milliseconds.
     *
     * @return {number}
     *         Returns an id that can be used to identify the interval. It can also be be used in
     *         {@link Component#clearInterval} to clear the interval.
     *
     * @listens Component#dispose
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
     */


    Component.prototype.setInterval = function setInterval(fn, interval) {
        var _this3 = this;

        fn = bind(this, fn);

        var intervalId = window$1.setInterval(fn, interval);

        var disposeFn = function disposeFn() {
            return _this3.clearInterval(intervalId);
        };

        disposeFn.guid = 'play-interval-' + intervalId;

        this.on('dispose', disposeFn);

        return intervalId;
    };

    /**
     * Clears an interval that gets created via `window.setInterval` or
     * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}
     * use this function instead of `window.clearInterval`. If you don't your dispose
     * listener will not get cleaned up until {@link Component#dispose}!
     *
     * @param {number} intervalId
     *        The id of the interval to clear. The return value of
     *        {@link Component#setInterval} or `window.setInterval`.
     *
     * @return {number}
     *         Returns the interval id that was cleared.
     *
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
     */


    Component.prototype.clearInterval = function clearInterval(intervalId) {
        window$1.clearInterval(intervalId);

        var disposeFn = function disposeFn() {};

        disposeFn.guid = 'play-interval-' + intervalId;

        this.off('dispose', disposeFn);

        return intervalId;
    };

    /**
     * Queues up a callback to be passed to requestAnimationFrame (rAF), but
     * with a few extra bonuses:
     *
     * - Supports browsers that do not support rAF by falling back to
     *   {@link Component#setTimeout}.
     *
     * - The callback is turned into a {@link Component~GenericCallback} (i.e.
     *   bound to the component).
     *
     * - Automatic cancellation of the rAF callback is handled if the component
     *   is disposed before it is called.
     *
     * @param  {Component~GenericCallback} fn
     *         A function that will be bound to this component and executed just
     *         before the browser's next repaint.
     *
     * @return {number}
     *         Returns an rAF ID that gets used to identify the timeout. It can
     *         also be used in {@link Component#cancelAnimationFrame} to cancel
     *         the animation frame callback.
     *
     * @listens Component#dispose
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
     */


    Component.prototype.requestAnimationFrame = function requestAnimationFrame(fn) {
        var _this4 = this;

        // declare as variables so they are properly available in rAF function
        // eslint-disable-next-line
        var id, disposeFn;

        if (this.supportsRaf_) {
            fn = bind(this, fn);

            id = window$1.requestAnimationFrame(function () {
                _this4.off('dispose', disposeFn);
                fn();
            });

            disposeFn = function disposeFn() {
                return _this4.cancelAnimationFrame(id);
            };

            disposeFn.guid = 'play-raf-' + id;
            this.on('dispose', disposeFn);

            return id;
        }

        // Fall back to using a timer.
        return this.setTimeout(fn, 1000 / 60);
    };

    /**
     * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
     * (rAF).
     *
     * If you queue an rAF callback via {@link Component#requestAnimationFrame},
     * use this function instead of `window.cancelAnimationFrame`. If you don't,
     * your dispose listener will not get cleaned up until {@link Component#dispose}!
     *
     * @param {number} id
     *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
     *
     * @return {number}
     *         Returns the rAF ID that was cleared.
     *
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
     */


    Component.prototype.cancelAnimationFrame = function cancelAnimationFrame(id) {
        if (this.supportsRaf_) {
            window$1.cancelAnimationFrame(id);

            var disposeFn = function disposeFn() {};

            disposeFn.guid = 'play-raf-' + id;

            this.off('dispose', disposeFn);

            return id;
        }

        // Fall back to using a timer.
        return this.clearTimeout(id);
    };

    /**
     * Register a `Component` with `videojs` given the name and the component.
     *
     * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
     *         should be registered using {@link Tech.registerTech} or
     *         {@link videojs:videojs.registerTech}.
     *
     * > NOTE: This function can also be seen on videojs as
     *         {@link videojs:videojs.registerComponent}.
     *
     * @param {string} name
     *        The name of the `Component` to register.
     *
     * @param {Component} ComponentToRegister
     *        The `Component` class to register.
     *
     * @return {Component}
     *         The `Component` that was registered.
     */


    Component.registerComponent = function registerComponent(name, ComponentToRegister) {
        if (typeof name !== 'string' || !name) {
            throw new Error('Illegal component name, "' + name + '"; must be a non-empty string.');
        }

        var Tech = Component.getComponent('Tech');

        // We need to make sure this check is only done if Tech has been registered.
        var isTech = Tech && Tech.isTech(ComponentToRegister);
        var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);

        if (isTech || !isComp) {
            var reason = void 0;

            if (isTech) {
                reason = 'techs must be registered using Tech.registerTech()';
            } else {
                reason = 'must be a Component subclass';
            }

            throw new Error('Illegal component, "' + name + '"; ' + reason + '.');
        }

        name = toTitleCase(name);

        if (!Component.components_) {
            Component.components_ = {};
        }

        var Player = Component.getComponent('Player');

        if (name === 'Player' && Player && Player.players) {
            var players = Player.players;
            var playerNames = Object.keys(players);

            // If we have players that were disposed, then their name will still be
            // in Players.players. So, we must loop through and verify that the value
            // for each item is not null. This allows registration of the Player component
            // after all players have been disposed or before any were created.
            if (players && playerNames.length > 0 && playerNames.map(function (pname) {
                return players[pname];
            }).every(Boolean)) {
                throw new Error('Can not register Player component after player has been created.');
            }
        }

        Component.components_[name] = ComponentToRegister;

        return ComponentToRegister;
    };

    /**
     * Get a `Component` based on the name it was registered with.
     *
     * @param {string} name
     *        The Name of the component to get.
     *
     * @return {Component}
     *         The `Component` that got registered under the given name.
     *
     * @deprecated In `videojs` 6 this will not return `Component`s that were not
     *             registered using {@link Component.registerComponent}. Currently we
     *             check the global `videojs` object for a `Component` name and
     *             return that if it exists.
     */


    Component.getComponent = function getComponent(name) {
        if (!name) {
            return;
        }

        name = toTitleCase(name);

        if (Component.components_ && Component.components_[name]) {
            return Component.components_[name];
        }
    };

    return Component;
}();

/**
 * Whether or not this component supports `requestAnimationFrame`.
 *
 * This is exposed primarily for testing purposes.
 *
 * @private
 * @type {Boolean}
 */


Component.prototype.supportsRaf_ = typeof window$1.requestAnimationFrame === 'function' && typeof window$1.cancelAnimationFrame === 'function';

Component.registerComponent('Component', Component);

/**
 * @file browser.js
 * @module browser
 */

var USER_AGENT = window$1.navigator && window$1.navigator.userAgent || '';
var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;

/*
 * Device is an iPhone
 *
 * @type {Boolean}
 * @constant
 * @private
 */
var IS_IPAD = /iPad/i.test(USER_AGENT);

// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
// to identify iPhones, we need to exclude iPads.
// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
var IS_IPOD = /iPod/i.test(USER_AGENT);
var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

var IOS_VERSION = function () {
  var match = USER_AGENT.match(/OS (\d+)_/i);

  if (match && match[1]) {
    return match[1];
  }
  return null;
}();

var IS_ANDROID = /Android/i.test(USER_AGENT);
var ANDROID_VERSION = function () {
  // This matches Android Major.Minor.Patch versions
  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);

  if (!match) {
    return null;
  }

  var major = match[1] && parseFloat(match[1]);
  var minor = match[2] && parseFloat(match[2]);

  if (major && minor) {
    return parseFloat(match[1] + '.' + match[2]);
  } else if (major) {
    return major;
  }
  return null;
}();

var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;

var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
var IS_EDGE = /Edge/i.test(USER_AGENT);
var IS_CHROME = !IS_EDGE && (/Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT));
var CHROME_VERSION = function () {
  var match = USER_AGENT.match(/(Chrome|CriOS)\/(\d+)/);

  if (match && match[2]) {
    return parseFloat(match[2]);
  }
  return null;
}();
var IE_VERSION = function () {
  var result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT);
  var version = result && parseFloat(result[1]);

  if (!version && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {
    // IE 11 has a different user agent string than other IE versions
    version = 11.0;
  }

  return version;
}();

var IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
var IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;

var TOUCH_ENABLED = isReal() && ('ontouchstart' in window$1 || window$1.navigator.maxTouchPoints || window$1.DocumentTouch && window$1.document instanceof window$1.DocumentTouch);

var browser = /*#__PURE__*/Object.freeze({
  IS_IPAD: IS_IPAD,
  IS_IPHONE: IS_IPHONE,
  IS_IPOD: IS_IPOD,
  IS_IOS: IS_IOS,
  IOS_VERSION: IOS_VERSION,
  IS_ANDROID: IS_ANDROID,
  ANDROID_VERSION: ANDROID_VERSION,
  IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,
  IS_FIREFOX: IS_FIREFOX,
  IS_EDGE: IS_EDGE,
  IS_CHROME: IS_CHROME,
  CHROME_VERSION: CHROME_VERSION,
  IE_VERSION: IE_VERSION,
  IS_SAFARI: IS_SAFARI,
  IS_ANY_SAFARI: IS_ANY_SAFARI,
  TOUCH_ENABLED: TOUCH_ENABLED
});

/**
 * @file time-ranges.js
 * @module time-ranges
 */

/**
 * Returns the time for the specified index at the start or end
 * of a TimeRange object.
 *
 * @function time-ranges:indexFunction
 *
 * @param {number} [index=0]
 *        The range number to return the time for.
 *
 * @return {number}
 *         The time that offset at the specified index.
 *
 * @depricated index must be set to a value, in the future this will throw an error.
 */

/**
 * An object that contains ranges of time for various reasons.
 *
 * @typedef {Object} TimeRange
 *
 * @property {number} length
 *           The number of time ranges represented by this Object
 *
 * @property {time-ranges:indexFunction} start
 *           Returns the time offset at which a specified time range begins.
 *
 * @property {time-ranges:indexFunction} end
 *           Returns the time offset at which a specified time range ends.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
 */

/**
 * Check if any of the time ranges are over the maximum index.
 *
 * @param {string} fnName
 *        The function name to use for logging
 *
 * @param {number} index
 *        The index to check
 *
 * @param {number} maxIndex
 *        The maximum possible index
 *
 * @throws {Error} if the timeRanges provided are over the maxIndex
 */
function rangeCheck(fnName, index, maxIndex) {
  if (typeof index !== 'number' || index < 0 || index > maxIndex) {
    /* eslint max-len: ["error", { "code": 800 }] */
    throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is non-numeric or out of bounds (0-' + maxIndex + ').');
  }
}

/**
 * Get the time for the specified index at the start or end
 * of a TimeRange object.
 *
 * @param {string} fnName
 *        The function name to use for logging
 *
 * @param {string} valueIndex
 *        The property that should be used to get the time. should be 'start' or 'end'
 *
 * @param {Array} ranges
 *        An array of time ranges
 *
 * @param {Array} [rangeIndex=0]
 *        The index to start the search at
 *
 * @return {number}
 *         The time that offset at the specified index.
 *
 *
 * @depricated rangeIndex must be set to a value, in the future this will throw an error.
 * @throws {Error} if rangeIndex is more than the length of ranges
 */
function getRange(fnName, valueIndex, ranges, rangeIndex) {
  rangeCheck(fnName, rangeIndex, ranges.length - 1);
  return ranges[rangeIndex][valueIndex];
}

/**
 * Create a time range object given ranges of time.
 *
 * @param {Array} [ranges]
 *        An array of time ranges.
 * @return {Object} object of length start and end
 */
function createTimeRangesObj(ranges) {
  if (ranges === undefined || ranges.length === 0) {
    return {
      length: 0,
      start: function start() {
        throw new Error('This TimeRanges object is empty');
      },
      end: function end() {
        throw new Error('This TimeRanges object is empty');
      }
    };
  }
  return {
    length: ranges.length,
    start: getRange.bind(null, 'start', 0, ranges),
    end: getRange.bind(null, 'end', 1, ranges)
  };
}

/**
 * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.
 *
 * @param {number|Array} start
 *        The start of a single range or an array of ranges
 *
 * @param {number} end
 *        The end of a single range.
 * @return {Object} time ranges in object
 * @private
 */
function createTimeRanges(start, end) {
  if (Array.isArray(start)) {
    return createTimeRangesObj(start);
  } else if (start === undefined || end === undefined) {
    return createTimeRangesObj();
  }
  return createTimeRangesObj([[start, end]]);
}

/**
 * @file buffer.js
 * @module buffer
 */

/**
 * Compute the percentage of the media that has been buffered.
 *
 * @param {TimeRange} buffered
 *        The current `TimeRange` object representing buffered time ranges
 *
 * @param {number} duration
 *        Total duration of the media
 *
 * @return {number}
 *         Percent buffered of the total duration in decimal form.
 */
function bufferedPercent(buffered, duration) {
  var bufferedDuration = 0;
  var start = void 0;
  var end = void 0;

  if (!duration) {
    return 0;
  }

  if (!buffered || !buffered.length) {
    buffered = createTimeRanges(0, 0);
  }

  for (var i = 0; i < buffered.length; i++) {
    start = buffered.start(i);
    end = buffered.end(i);

    // buffered end can be bigger than duration by a very small fraction
    if (end > duration) {
      end = duration;
    }

    bufferedDuration += end - start;
  }

  return bufferedDuration / duration;
}

/**
 * @file fullscreen-api.js
 * @module fullscreen-api
 * @private
 */

/**
 * Store the browser-specific methods for the fullscreen API.
 *
 * @type {Object}
 * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
 * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
 */
var FullscreenApi = {};

// browser API methods
var apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
// WebKit
['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Old WebKit (Safari 5.1)
['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Mozilla
['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
// Microsoft
['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

var specApi = apiMap[0];
var browserApi = void 0;

// determine the supported set of functions
for (var i = 0; i < apiMap.length; i++) {
  // check for exitFullscreen function
  if (apiMap[i][1] in document$1) {
    browserApi = apiMap[i];
    break;
  }
}

// map the browser API names to the spec API names
if (browserApi) {
  for (var _i = 0; _i < browserApi.length; _i++) {
    FullscreenApi[specApi[_i]] = browserApi[_i];
  }
}

/**
 * @file media-error.js
 */

/**
 * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
 *
 * @param {number|string|Object|MediaError} value
 *        This can be of multiple types:
 *        - number: should be a standard error code
 *        - string: an error message (the code will be 0)
 *        - Object: arbitrary properties
 *        - `MediaError` (native): used to populate a video.js `MediaError` object
 *        - `MediaError` (video.js): will return itself if it's already a
 *          video.js `MediaError` object.
 *
 * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
 * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
 *
 * @class MediaError
 */
function MediaError(value) {

  // Allow redundant calls to this constructor to avoid having `instanceof`
  // checks peppered around the code.
  if (value instanceof MediaError) {
    return value;
  }

  if (typeof value === 'number') {
    this.code = value;
  } else if (typeof value === 'string') {
    // default code is zero, so this is a custom error
    this.message = value;
  } else if (isObject(value)) {

    // We assign the `code` property manually because native `MediaError` objects
    // do not expose it as an own/enumerable property of the object.
    if (typeof value.code === 'number') {
      this.code = value.code;
    }

    assign(this, value);
  }

  if (!this.message) {
    this.message = MediaError.defaultMessages[this.code] || '';
  }
}

/**
 * The error code that refers two one of the defined `MediaError` types
 *
 * @type {Number}
 */
MediaError.prototype.code = 0;

/**
 * An optional message that to show with the error. Message is not part of the HTML5
 * video spec but allows for more informative custom errors.
 *
 * @type {String}
 */
MediaError.prototype.message = '';

/**
 * An optional status code that can be set by plugins to allow even more detail about
 * the error. For example a plugin might provide a specific HTTP status code and an
 * error message for that code. Then when the plugin gets that error this class will
 * know how to display an error message for it. This allows a custom message to show
 * up on the `Player` error overlay.
 *
 * @type {Array}
 */
MediaError.prototype.status = null;

/**
 * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
 * specification listed under {@link MediaError} for more information.
 *
 * @enum {array}
 * @readonly
 * @property {string} 0 - MEDIA_ERR_CUSTOM
 * @property {string} 1 - MEDIA_ERR_CUSTOM
 * @property {string} 2 - MEDIA_ERR_ABORTED
 * @property {string} 3 - MEDIA_ERR_NETWORK
 * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
 * @property {string} 5 - MEDIA_ERR_ENCRYPTED
 */
MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];

/**
 * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
 *
 * @type {Array}
 * @constant
 */
MediaError.defaultMessages = {
  1: 'You aborted the media playback',
  2: 'A network error caused the media download to fail part-way.',
  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
  5: 'The media is encrypted and we do not have the keys to decrypt it.'
};

// Add types as properties on MediaError
// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
  MediaError[MediaError.errorTypes[errNum]] = errNum;
  // values should be accessible on both the class and instance
  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
}

/**
 * Returns whether an object is `Promise`-like (i.e. has a `then` method).
 *
 * @param  {Object}  value
 *         An object that may or may not be `Promise`-like.
 *
 * @return {boolean}
 *         Whether or not the object is `Promise`-like.
 */
function isPromise(value) {
  return value !== undefined && value !== null && typeof value.then === 'function';
}

/**
 * Silence a Promise-like object.
 *
 * This is useful for avoiding non-harmful, but potentially confusing "uncaught
 * play promise" rejection error messages.
 *
 * @param  {Object} value
 *         An object that may or may not be `Promise`-like.
 */
function silencePromise(value) {
  if (isPromise(value)) {
    value.then(null, function (e) {});
  }
}

/**
 * @file text-track-list-converter.js Utilities for capturing text track state and
 * re-creating tracks based on a capture.
 *
 * @module text-track-list-converter
 */

/**
 * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
 * represents the {@link TextTrack}'s state.
 *
 * @param {TextTrack} track
 *        The text track to query.
 *
 * @return {Object}
 *         A serializable javascript representation of the TextTrack.
 * @private
 */
var trackToJson_ = function trackToJson_(track) {
  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {

    if (track[prop]) {
      acc[prop] = track[prop];
    }

    return acc;
  }, {
    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
      return {
        startTime: cue.startTime,
        endTime: cue.endTime,
        text: cue.text,
        id: cue.id
      };
    })
  });

  return ret;
};

/**
 * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
 * state of all {@link TextTrack}s currently configured. The return array is compatible with
 * {@link text-track-list-converter:jsonToTextTracks}.
 *
 * @param {Tech} tech
 *        The tech object to query
 *
 * @return {Array}
 *         A serializable javascript representation of the {@link Tech}s
 *         {@link TextTrackList}.
 */
var textTracksToJson = function textTracksToJson(tech) {

  var trackEls = tech.$$('track');

  var trackObjs = Array.prototype.map.call(trackEls, function (t) {
    return t.track;
  });
  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
    var json = trackToJson_(trackEl.track);

    if (trackEl.src) {
      json.src = trackEl.src;
    }
    return json;
  });

  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
    return trackObjs.indexOf(track) === -1;
  }).map(trackToJson_));
};

/**
 * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript
 * object {@link TextTrack} representations.
 *
 * @param {Array} json
 *        An array of `TextTrack` representation objects, like those that would be
 *        produced by `textTracksToJson`.
 *
 * @param {Tech} tech
 *        The `Tech` to create the `TextTrack`s on.
 */
var jsonToTextTracks = function jsonToTextTracks(json, tech) {
  json.forEach(function (track) {
    var addedTrack = tech.addRemoteTextTrack(track).track;

    if (!track.src && track.cues) {
      track.cues.forEach(function (cue) {
        return addedTrack.addCue(cue);
      });
    }
  });

  return tech.textTracks();
};

var textTrackConverter = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };

/**
 * @file modal-dialog.js
 */

var MODAL_CLASS_NAME = 'play-modal-dialog';
var ESC = 27;

/**
 * The `ModalDialog` displays over the video and its controls, which blocks
 * interaction with the player until it is closed.
 *
 * Modal dialogs include a "Close" button and will close when that button
 * is activated - or when ESC is pressed anywhere.
 *
 * @extends Component
 */

var ModalDialog = function (_Component) {
  inherits(ModalDialog, _Component);

  /**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Mixed} [options.content=undefined]
   *        Provide customized content for this modal.
   *
   * @param {string} [options.description]
   *        A text description for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.fillAlways=false]
   *        Normally, modals are automatically filled only the first time
   *        they open. This tells the modal to refresh its content
   *        every time it opens.
   *
   * @param {string} [options.label]
   *        A text label for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.temporary=true]
   *        If `true`, the modal can only be opened once; it will be
   *        disposed as soon as it's closed.
   *
   * @param {boolean} [options.uncloseable=false]
   *        If `true`, the user will not be able to close the modal
   *        through the UI in the normal ways. Programmatic closing is
   *        still possible.
   */
  function ModalDialog(player, options) {
    classCallCheck(this, ModalDialog);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;

    _this.closeable(!_this.options_.uncloseable);
    _this.content(_this.options_.content);

    // Make sure the contentEl is defined AFTER any children are initialized
    // because we only want the contents of the modal in the contentEl
    // (not the UI elements like the close button).
    _this.contentEl_ = createEl('div', {
      className: MODAL_CLASS_NAME + '-content'
    }, {
      role: 'document'
    });

    _this.descEl_ = createEl('p', {
      className: MODAL_CLASS_NAME + '-description play-control-text',
      id: _this.el().getAttribute('aria-describedby')
    });

    textContent(_this.descEl_, _this.description());
    _this.el_.appendChild(_this.descEl_);
    _this.el_.appendChild(_this.contentEl_);
    return _this;
  }

  /**
   * Create the `ModalDialog`'s DOM element
   *
   * @return {Element}
   *         The DOM element that gets created.
   */


  ModalDialog.prototype.createEl = function createEl$$1() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: this.buildCSSClass(),
      tabIndex: -1
    }, {
      'aria-describedby': this.id() + '_description',
      'aria-hidden': 'true',
      'aria-label': this.label(),
      'role': 'dialog'
    });
  };

  ModalDialog.prototype.dispose = function dispose() {
    this.contentEl_ = null;
    this.descEl_ = null;
    this.previouslyActiveEl_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
    return MODAL_CLASS_NAME + ' play-hidden ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Handles `keydown` events on the document, looking for ESC, which closes
   * the modal.
   *
   * @param {EventTarget~Event} e
   *        The keypress that triggered this event.
   *
   * @listens keydown
   */


  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
    if (e.which === ESC && this.closeable()) {
      this.close();
    }
  };

  /**
   * Returns the label string for this modal. Primarily used for accessibility.
   *
   * @return {string}
   *         the localized or raw label of this modal.
   */


  ModalDialog.prototype.label = function label() {
    return this.localize(this.options_.label || 'Modal Window');
  };

  /**
   * Returns the description string for this modal. Primarily used for
   * accessibility.
   *
   * @return {string}
   *         The localized or raw description of this modal.
   */


  ModalDialog.prototype.description = function description() {
    var desc = this.options_.description || this.localize('This is a modal window.');

    // Append a universal closeability message if the modal is closeable.
    if (this.closeable()) {
      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
    }

    return desc;
  };

  /**
   * Opens the modal.
   *
   * @fires ModalDialog#beforemodalopen
   * @fires ModalDialog#modalopen
   */


  ModalDialog.prototype.open = function open() {
    if (!this.opened_) {
      var player = this.player();

      /**
        * Fired just before a `ModalDialog` is opened.
        *
        * @event ModalDialog#beforemodalopen
        * @type {EventTarget~Event}
        */
      this.trigger('beforemodalopen');
      this.opened_ = true;

      // Fill content if the modal has never opened before and
      // never been filled.
      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
        this.fill();
      }

      // If the player was playing, pause it and take note of its previously
      // playing state.
      this.wasPlaying_ = !player.paused();

      if (this.options_.pauseOnOpen && this.wasPlaying_) {
        player.pause();
      }

      if (this.closeable()) {
        this.on(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
      }

      // Hide controls and note if they were enabled.
      this.hadControls_ = player.controls();
      player.controls(false);

      this.show();
      this.conditionalFocus_();
      this.el().setAttribute('aria-hidden', 'false');

      /**
        * Fired just after a `ModalDialog` is opened.
        *
        * @event ModalDialog#modalopen
        * @type {EventTarget~Event}
        */
      this.trigger('modalopen');
      this.hasBeenOpened_ = true;
    }
  };

  /**
   * If the `ModalDialog` is currently open or closed.
   *
   * @param  {boolean} [value]
   *         If given, it will open (`true`) or close (`false`) the modal.
   *
   * @return {boolean}
   *         the current open state of the modaldialog
   */


  ModalDialog.prototype.opened = function opened(value) {
    if (typeof value === 'boolean') {
      this[value ? 'open' : 'close']();
    }
    return this.opened_;
  };

  /**
   * Closes the modal, does nothing if the `ModalDialog` is
   * not open.
   *
   * @fires ModalDialog#beforemodalclose
   * @fires ModalDialog#modalclose
   */


  ModalDialog.prototype.close = function close() {
    if (!this.opened_) {
      return;
    }
    var player = this.player();

    /**
      * Fired just before a `ModalDialog` is closed.
      *
      * @event ModalDialog#beforemodalclose
      * @type {EventTarget~Event}
      */
    this.trigger('beforemodalclose');
    this.opened_ = false;

    if (this.wasPlaying_ && this.options_.pauseOnOpen) {
      player.play();
    }

    if (this.closeable()) {
      this.off(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
    }

    if (this.hadControls_) {
      player.controls(true);
    }

    this.hide();
    this.el().setAttribute('aria-hidden', 'true');

    /**
      * Fired just after a `ModalDialog` is closed.
      *
      * @event ModalDialog#modalclose
      * @type {EventTarget~Event}
      */
    this.trigger('modalclose');
    this.conditionalBlur_();

    if (this.options_.temporary) {
      this.dispose();
    }
  };

  /**
   * Check to see if the `ModalDialog` is closeable via the UI.
   *
   * @param  {boolean} [value]
   *         If given as a boolean, it will set the `closeable` option.
   *
   * @return {boolean}
   *         Returns the final value of the closable option.
   */


  ModalDialog.prototype.closeable = function closeable(value) {
    if (typeof value === 'boolean') {
      var closeable = this.closeable_ = !!value;
      var close = this.getChild('closeButton');

      // If this is being made closeable and has no close button, add one.
      if (closeable && !close) {

        // The close button should be a child of the modal - not its
        // content element, so temporarily change the content element.
        var temp = this.contentEl_;

        this.contentEl_ = this.el_;
        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
        this.contentEl_ = temp;
        this.on(close, 'close', this.close);
      }

      // If this is being made uncloseable and has a close button, remove it.
      if (!closeable && close) {
        this.off(close, 'close', this.close);
        this.removeChild(close);
        close.dispose();
      }
    }
    return this.closeable_;
  };

  /**
   * Fill the modal's content element with the modal's "content" option.
   * The content element will be emptied before this change takes place.
   */


  ModalDialog.prototype.fill = function fill() {
    this.fillWith(this.content());
  };

  /**
   * Fill the modal's content element with arbitrary content.
   * The content element will be emptied before this change takes place.
   *
   * @fires ModalDialog#beforemodalfill
   * @fires ModalDialog#modalfill
   *
   * @param {Mixed} [content]
   *        The same rules apply to this as apply to the `content` option.
   */


  ModalDialog.prototype.fillWith = function fillWith(content) {
    var contentEl = this.contentEl();
    var parentEl = contentEl.parentNode;
    var nextSiblingEl = contentEl.nextSibling;

    /**
     * Fired just before a `ModalDialog` is filled with content.
     *
     * @event ModalDialog#beforemodalfill
     * @type {EventTarget~Event}
     */
    this.trigger('beforemodalfill');
    this.hasBeenFilled_ = true;

    // Detach the content element from the DOM before performing
    // manipulation to avoid modifying the live DOM multiple times.
    parentEl.removeChild(contentEl);
    this.empty();
    insertContent(contentEl, content);
    /**
     * Fired just after a `ModalDialog` is filled with content.
     *
     * @event ModalDialog#modalfill
     * @type {EventTarget~Event}
     */
    this.trigger('modalfill');

    // Re-inject the re-filled content element.
    if (nextSiblingEl) {
      parentEl.insertBefore(contentEl, nextSiblingEl);
    } else {
      parentEl.appendChild(contentEl);
    }

    // make sure that the close button is last in the dialog DOM
    var closeButton = this.getChild('closeButton');

    if (closeButton) {
      parentEl.appendChild(closeButton.el_);
    }
  };

  /**
   * Empties the content element. This happens anytime the modal is filled.
   *
   * @fires ModalDialog#beforemodalempty
   * @fires ModalDialog#modalempty
   */


  ModalDialog.prototype.empty = function empty() {
    /**
     * Fired just before a `ModalDialog` is emptied.
     *
     * @event ModalDialog#beforemodalempty
     * @type {EventTarget~Event}
     */
    this.trigger('beforemodalempty');
    emptyEl(this.contentEl());

    /**
     * Fired just after a `ModalDialog` is emptied.
     *
     * @event ModalDialog#modalempty
     * @type {EventTarget~Event}
     */
    this.trigger('modalempty');
  };

  /**
   * Gets or sets the modal content, which gets normalized before being
   * rendered into the DOM.
   *
   * This does not update the DOM or fill the modal, but it is called during
   * that process.
   *
   * @param  {Mixed} [value]
   *         If defined, sets the internal content value to be used on the
   *         next call(s) to `fill`. This value is normalized before being
   *         inserted. To "clear" the internal content value, pass `null`.
   *
   * @return {Mixed}
   *         The current content of the modal dialog
   */


  ModalDialog.prototype.content = function content(value) {
    if (typeof value !== 'undefined') {
      this.content_ = value;
    }
    return this.content_;
  };

  /**
   * conditionally focus the modal dialog if focus was previously on the player.
   *
   * @private
   */


  ModalDialog.prototype.conditionalFocus_ = function conditionalFocus_() {
    var activeEl = document$1.activeElement;
    var playerEl = this.player_.el_;

    this.previouslyActiveEl_ = null;

    if (playerEl.contains(activeEl) || playerEl === activeEl) {
      this.previouslyActiveEl_ = activeEl;

      this.focus();

      this.on(document$1, 'keydown', this.handleKeyDown);
    }
  };

  /**
   * conditionally blur the element and refocus the last focused element
   *
   * @private
   */


  ModalDialog.prototype.conditionalBlur_ = function conditionalBlur_() {
    if (this.previouslyActiveEl_) {
      this.previouslyActiveEl_.focus();
      this.previouslyActiveEl_ = null;
    }

    this.off(document$1, 'keydown', this.handleKeyDown);
  };

  /**
   * Keydown handler. Attached when modal is focused.
   *
   * @listens keydown
   */


  ModalDialog.prototype.handleKeyDown = function handleKeyDown(event) {
    // exit early if it isn't a tab key
    if (event.which !== 9) {
      return;
    }

    var focusableEls = this.focusableEls_();
    var activeEl = this.el_.querySelector(':focus');
    var focusIndex = void 0;

    for (var i = 0; i < focusableEls.length; i++) {
      if (activeEl === focusableEls[i]) {
        focusIndex = i;
        break;
      }
    }

    if (document$1.activeElement === this.el_) {
      focusIndex = 0;
    }

    if (event.shiftKey && focusIndex === 0) {
      focusableEls[focusableEls.length - 1].focus();
      event.preventDefault();
    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {
      focusableEls[0].focus();
      event.preventDefault();
    }
  };

  /**
   * get all focusable elements
   *
   * @private
   */


  ModalDialog.prototype.focusableEls_ = function focusableEls_() {
    var allChildren = this.el_.querySelectorAll('*');

    return Array.prototype.filter.call(allChildren, function (child) {
      return (child instanceof window$1.HTMLAnchorElement || child instanceof window$1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window$1.HTMLInputElement || child instanceof window$1.HTMLSelectElement || child instanceof window$1.HTMLTextAreaElement || child instanceof window$1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window$1.HTMLIFrameElement || child instanceof window$1.HTMLObjectElement || child instanceof window$1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');
    });
  };

  return ModalDialog;
}(Component);

/**
 * Default options for `ModalDialog` default options.
 *
 * @type {Object}
 * @private
 */


ModalDialog.prototype.options_ = {
  pauseOnOpen: true,
  temporary: true
};

Component.registerComponent('ModalDialog', ModalDialog);

/**
 * @file track-list.js
 */

/**
 * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
 * {@link VideoTrackList}
 *
 * @extends EventTarget
 */

var TrackList = function (_EventTarget) {
  inherits(TrackList, _EventTarget);

  /**
   * Create an instance of this class
   *
   * @param {Track[]} tracks
   *        A list of tracks to initialize the list with.
   *
   * @abstract
   */
  function TrackList() {
    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    classCallCheck(this, TrackList);

    var _this = possibleConstructorReturn(this, _EventTarget.call(this));

    _this.tracks_ = [];

    /**
     * @memberof TrackList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */
    Object.defineProperty(_this, 'length', {
      get: function get$$1() {
        return this.tracks_.length;
      }
    });

    for (var i = 0; i < tracks.length; i++) {
      _this.addTrack(tracks[i]);
    }
    return _this;
  }

  /**
   * Add a {@link Track} to the `TrackList`
   *
   * @param {Track} track
   *        The audio, video, or text track to add to the list.
   *
   * @fires TrackList#addtrack
   */


  TrackList.prototype.addTrack = function addTrack(track) {
    var index = this.tracks_.length;

    if (!('' + index in this)) {
      Object.defineProperty(this, index, {
        get: function get$$1() {
          return this.tracks_[index];
        }
      });
    }

    // Do not add duplicate tracks
    if (this.tracks_.indexOf(track) === -1) {
      this.tracks_.push(track);
      /**
       * Triggered when a track is added to a track list.
       *
       * @event TrackList#addtrack
       * @type {EventTarget~Event}
       * @property {Track} track
       *           A reference to track that was added.
       */
      this.trigger({
        track: track,
        type: 'addtrack'
      });
    }
  };

  /**
   * Remove a {@link Track} from the `TrackList`
   *
   * @param {Track} rtrack
   *        The audio, video, or text track to remove from the list.
   *
   * @fires TrackList#removetrack
   */


  TrackList.prototype.removeTrack = function removeTrack(rtrack) {
    var track = void 0;

    for (var i = 0, l = this.length; i < l; i++) {
      if (this[i] === rtrack) {
        track = this[i];
        if (track.off) {
          track.off();
        }

        this.tracks_.splice(i, 1);

        break;
      }
    }

    if (!track) {
      return;
    }

    /**
     * Triggered when a track is removed from track list.
     *
     * @event TrackList#removetrack
     * @type {EventTarget~Event}
     * @property {Track} track
     *           A reference to track that was removed.
     */
    this.trigger({
      track: track,
      type: 'removetrack'
    });
  };

  /**
   * Get a Track from the TrackList by a tracks id
   *
   * @param {String} id - the id of the track to get
   * @method getTrackById
   * @return {Track}
   * @private
   */


  TrackList.prototype.getTrackById = function getTrackById(id) {
    var result = null;

    for (var i = 0, l = this.length; i < l; i++) {
      var track = this[i];

      if (track.id === id) {
        result = track;
        break;
      }
    }

    return result;
  };

  return TrackList;
}(EventTarget);

/**
 * Triggered when a different track is selected/enabled.
 *
 * @event TrackList#change
 * @type {EventTarget~Event}
 */

/**
 * Events that can be called with on + eventName. See {@link EventHandler}.
 *
 * @property {Object} TrackList#allowedEvents_
 * @private
 */


TrackList.prototype.allowedEvents_ = {
  change: 'change',
  addtrack: 'addtrack',
  removetrack: 'removetrack'
};

// emulate attribute EventHandler support to allow for feature detection
for (var event in TrackList.prototype.allowedEvents_) {
  TrackList.prototype['on' + event] = null;
}

/**
 * @file audio-track-list.js
 */

/**
 * Anywhere we call this function we diverge from the spec
 * as we only support one enabled audiotrack at a time
 *
 * @param {AudioTrackList} list
 *        list to work on
 *
 * @param {AudioTrack} track
 *        The track to skip
 *
 * @private
 */
var disableOthers = function disableOthers(list, track) {
  for (var i = 0; i < list.length; i++) {
    if (!Object.keys(list[i]).length || track.id === list[i].id) {
      continue;
    }
    // another audio track is enabled, disable it
    list[i].enabled = false;
  }
};

/**
 * The current list of {@link AudioTrack} for a media file.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
 * @extends TrackList
 */

var AudioTrackList = function (_TrackList) {
  inherits(AudioTrackList, _TrackList);

  /**
   * Create an instance of this class.
   *
   * @param {AudioTrack[]} [tracks=[]]
   *        A list of `AudioTrack` to instantiate the list with.
   */
  function AudioTrackList() {
    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    classCallCheck(this, AudioTrackList);

    // make sure only 1 track is enabled
    // sorted from last index to first index
    for (var i = tracks.length - 1; i >= 0; i--) {
      if (tracks[i].enabled) {
        disableOthers(tracks, tracks[i]);
        break;
      }
    }

    var _this = possibleConstructorReturn(this, _TrackList.call(this, tracks));

    _this.changing_ = false;
    return _this;
  }

  /**
   * Add an {@link AudioTrack} to the `AudioTrackList`.
   *
   * @param {AudioTrack} track
   *        The AudioTrack to add to the list
   *
   * @fires TrackList#addtrack
   */


  AudioTrackList.prototype.addTrack = function addTrack(track) {
    var _this2 = this;

    if (track.enabled) {
      disableOthers(this, track);
    }

    _TrackList.prototype.addTrack.call(this, track);
    // native tracks don't have this
    if (!track.addEventListener) {
      return;
    }

    /**
     * @listens AudioTrack#enabledchange
     * @fires TrackList#change
     */
    track.addEventListener('enabledchange', function () {
      // when we are disabling other tracks (since we don't support
      // more than one track at a time) we will set changing_
      // to true so that we don't trigger additional change events
      if (_this2.changing_) {
        return;
      }
      _this2.changing_ = true;
      disableOthers(_this2, track);
      _this2.changing_ = false;
      _this2.trigger('change');
    });
  };

  return AudioTrackList;
}(TrackList);

/**
 * @file video-track-list.js
 */

/**
 * Un-select all other {@link VideoTrack}s that are selected.
 *
 * @param {VideoTrackList} list
 *        list to work on
 *
 * @param {VideoTrack} track
 *        The track to skip
 *
 * @private
 */
var disableOthers$1 = function disableOthers(list, track) {
  for (var i = 0; i < list.length; i++) {
    if (!Object.keys(list[i]).length || track.id === list[i].id) {
      continue;
    }
    // another video track is enabled, disable it
    list[i].selected = false;
  }
};

/**
 * The current list of {@link VideoTrack} for a video.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
 * @extends TrackList
 */

var VideoTrackList = function (_TrackList) {
  inherits(VideoTrackList, _TrackList);

  /**
   * Create an instance of this class.
   *
   * @param {VideoTrack[]} [tracks=[]]
   *        A list of `VideoTrack` to instantiate the list with.
   */
  function VideoTrackList() {
    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    classCallCheck(this, VideoTrackList);

    // make sure only 1 track is enabled
    // sorted from last index to first index
    for (var i = tracks.length - 1; i >= 0; i--) {
      if (tracks[i].selected) {
        disableOthers$1(tracks, tracks[i]);
        break;
      }
    }

    var _this = possibleConstructorReturn(this, _TrackList.call(this, tracks));

    _this.changing_ = false;

    /**
     * @member {number} VideoTrackList#selectedIndex
     *         The current index of the selected {@link VideoTrack`}.
     */
    Object.defineProperty(_this, 'selectedIndex', {
      get: function get$$1() {
        for (var _i = 0; _i < this.length; _i++) {
          if (this[_i].selected) {
            return _i;
          }
        }
        return -1;
      },
      set: function set$$1() {}
    });
    return _this;
  }

  /**
   * Add a {@link VideoTrack} to the `VideoTrackList`.
   *
   * @param {VideoTrack} track
   *        The VideoTrack to add to the list
   *
   * @fires TrackList#addtrack
   */


  VideoTrackList.prototype.addTrack = function addTrack(track) {
    var _this2 = this;

    if (track.selected) {
      disableOthers$1(this, track);
    }

    _TrackList.prototype.addTrack.call(this, track);
    // native tracks don't have this
    if (!track.addEventListener) {
      return;
    }

    /**
     * @listens VideoTrack#selectedchange
     * @fires TrackList#change
     */
    track.addEventListener('selectedchange', function () {
      if (_this2.changing_) {
        return;
      }
      _this2.changing_ = true;
      disableOthers$1(_this2, track);
      _this2.changing_ = false;
      _this2.trigger('change');
    });
  };

  return VideoTrackList;
}(TrackList);

/**
 * @file text-track-list.js
 */

/**
 * The current list of {@link TextTrack} for a media file.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
 * @extends TrackList
 */

var TextTrackList = function (_TrackList) {
  inherits(TextTrackList, _TrackList);

  function TextTrackList() {
    classCallCheck(this, TextTrackList);
    return possibleConstructorReturn(this, _TrackList.apply(this, arguments));
  }

  /**
   * Add a {@link TextTrack} to the `TextTrackList`
   *
   * @param {TextTrack} track
   *        The text track to add to the list.
   *
   * @fires TrackList#addtrack
   */
  TextTrackList.prototype.addTrack = function addTrack(track) {
    _TrackList.prototype.addTrack.call(this, track);

    /**
     * @listens TextTrack#modechange
     * @fires TrackList#change
     */
    track.addEventListener('modechange', bind(this, function () {
      this.queueTrigger('change');
    }));

    var nonLanguageTextTrackKind = ['metadata', 'chapters'];

    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {
      track.addEventListener('modechange', bind(this, function () {
        this.trigger('selectedlanguagechange');
      }));
    }
  };

  return TextTrackList;
}(TrackList);

/**
 * @file html-track-element-list.js
 */

/**
 * The current list of {@link HtmlTrackElement}s.
 */
var HtmlTrackElementList = function () {

  /**
   * Create an instance of this class.
   *
   * @param {HtmlTrackElement[]} [tracks=[]]
   *        A list of `HtmlTrackElement` to instantiate the list with.
   */
  function HtmlTrackElementList() {
    var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    classCallCheck(this, HtmlTrackElementList);

    this.trackElements_ = [];

    /**
     * @memberof HtmlTrackElementList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */
    Object.defineProperty(this, 'length', {
      get: function get$$1() {
        return this.trackElements_.length;
      }
    });

    for (var i = 0, length = trackElements.length; i < length; i++) {
      this.addTrackElement_(trackElements[i]);
    }
  }

  /**
   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to add to the list.
   *
   * @private
   */


  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
    var index = this.trackElements_.length;

    if (!('' + index in this)) {
      Object.defineProperty(this, index, {
        get: function get$$1() {
          return this.trackElements_[index];
        }
      });
    }

    // Do not add duplicate elements
    if (this.trackElements_.indexOf(trackElement) === -1) {
      this.trackElements_.push(trackElement);
    }
  };

  /**
   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
   * {@link TextTrack}.
   *
   * @param {TextTrack} track
   *        The track associated with a track element.
   *
   * @return {HtmlTrackElement|undefined}
   *         The track element that was found or undefined.
   *
   * @private
   */


  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
    var trackElement_ = void 0;

    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
      if (track === this.trackElements_[i].track) {
        trackElement_ = this.trackElements_[i];

        break;
      }
    }

    return trackElement_;
  };

  /**
   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to remove from the list.
   *
   * @private
   */


  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
      if (trackElement === this.trackElements_[i]) {
        this.trackElements_.splice(i, 1);

        break;
      }
    }
  };

  return HtmlTrackElementList;
}();

/**
 * @file text-track-cue-list.js
 */

/**
 * @typedef {Object} TextTrackCueList~TextTrackCue
 *
 * @property {string} id
 *           The unique id for this text track cue
 *
 * @property {number} startTime
 *           The start time for this text track cue
 *
 * @property {number} endTime
 *           The end time for this text track cue
 *
 * @property {boolean} pauseOnExit
 *           Pause when the end time is reached if true.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
 */

/**
 * A List of TextTrackCues.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
 */
var TextTrackCueList = function () {

  /**
   * Create an instance of this class..
   *
   * @param {Array} cues
   *        A list of cues to be initialized with
   */
  function TextTrackCueList(cues) {
    classCallCheck(this, TextTrackCueList);

    TextTrackCueList.prototype.setCues_.call(this, cues);

    /**
     * @memberof TextTrackCueList
     * @member {number} length
     *         The current number of `TextTrackCue`s in the TextTrackCueList.
     * @instance
     */
    Object.defineProperty(this, 'length', {
      get: function get$$1() {
        return this.length_;
      }
    });
  }

  /**
   * A setter for cues in this list. Creates getters
   * an an index for the cues.
   *
   * @param {Array} cues
   *        An array of cues to set
   *
   * @private
   */


  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
    var oldLength = this.length || 0;
    var i = 0;
    var l = cues.length;

    this.cues_ = cues;
    this.length_ = cues.length;

    var defineProp = function defineProp(index) {
      if (!('' + index in this)) {
        Object.defineProperty(this, '' + index, {
          get: function get$$1() {
            return this.cues_[index];
          }
        });
      }
    };

    if (oldLength < l) {
      i = oldLength;

      for (; i < l; i++) {
        defineProp.call(this, i);
      }
    }
  };

  /**
   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
   *
   * @param {string} id
   *        The id of the cue that should be searched for.
   *
   * @return {TextTrackCueList~TextTrackCue|null}
   *         A single cue or null if none was found.
   */


  TextTrackCueList.prototype.getCueById = function getCueById(id) {
    var result = null;

    for (var i = 0, l = this.length; i < l; i++) {
      var cue = this[i];

      if (cue.id === id) {
        result = cue;
        break;
      }
    }

    return result;
  };

  return TextTrackCueList;
}();

/**
 * @file track-kinds.js
 */

/**
 * All possible `VideoTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
 * @typedef VideoTrack~Kind
 * @enum
 */
var VideoTrackKind = {
  alternative: 'alternative',
  captions: 'captions',
  main: 'main',
  sign: 'sign',
  subtitles: 'subtitles',
  commentary: 'commentary'
};

/**
 * All possible `AudioTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
 * @typedef AudioTrack~Kind
 * @enum
 */
var AudioTrackKind = {
  'alternative': 'alternative',
  'descriptions': 'descriptions',
  'main': 'main',
  'main-desc': 'main-desc',
  'translation': 'translation',
  'commentary': 'commentary'
};

/**
 * All possible `TextTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind
 * @typedef TextTrack~Kind
 * @enum
 */
var TextTrackKind = {
  subtitles: 'subtitles',
  captions: 'captions',
  descriptions: 'descriptions',
  chapters: 'chapters',
  metadata: 'metadata'
};

/**
 * All possible `TextTrackMode`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
 * @typedef TextTrack~Mode
 * @enum
 */
var TextTrackMode = {
  disabled: 'disabled',
  hidden: 'hidden',
  showing: 'showing'
};

/**
 * @file track.js
 */

/**
 * A Track class that contains all of the common functionality for {@link AudioTrack},
 * {@link VideoTrack}, and {@link TextTrack}.
 *
 * > Note: This class should not be used directly
 *
 * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
 * @extends EventTarget
 * @abstract
 */

var Track = function (_EventTarget) {
  inherits(Track, _EventTarget);

  /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid kind for the track type you are creating.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @abstract
   */
  function Track() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, Track);

    var _this = possibleConstructorReturn(this, _EventTarget.call(this));

    var trackProps = {
      id: options.id || 'vjs_track_' + newGUID(),
      kind: options.kind || '',
      label: options.label || '',
      language: options.language || ''
    };

    /**
     * @memberof Track
     * @member {string} id
     *         The id of this track. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */

    /**
     * @memberof Track
     * @member {string} kind
     *         The kind of track that this is. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */

    /**
     * @memberof Track
     * @member {string} label
     *         The label of this track. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */

    /**
     * @memberof Track
     * @member {string} language
     *         The two letter language code for this track. Cannot be changed after
     *         creation.
     * @instance
     *
     * @readonly
     */

    var _loop = function _loop(key) {
      Object.defineProperty(_this, key, {
        get: function get$$1() {
          return trackProps[key];
        },
        set: function set$$1() {}
      });
    };

    for (var key in trackProps) {
      _loop(key);
    }
    return _this;
  }

  return Track;
}(EventTarget);

/**
 * @file url.js
 * @module url
 */

/**
 * @typedef {Object} url:URLObject
 *
 * @property {string} protocol
 *           The protocol of the url that was parsed.
 *
 * @property {string} hostname
 *           The hostname of the url that was parsed.
 *
 * @property {string} port
 *           The port of the url that was parsed.
 *
 * @property {string} pathname
 *           The pathname of the url that was parsed.
 *
 * @property {string} search
 *           The search query of the url that was parsed.
 *
 * @property {string} hash
 *           The hash of the url that was parsed.
 *
 * @property {string} host
 *           The host of the url that was parsed.
 */

/**
 * Resolve and parse the elements of a URL.
 *
 * @param  {string} url
 *         The url to parse
 *
 * @return {Object} details
 *         An object of url details
 */
var parseUrl = function parseUrl(url) {
  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

  // add the url to an anchor and let the browser parse the URL
  var a = document$1.createElement('a');

  a.href = url;

  // IE8 (and 9?) Fix
  // ie8 doesn't parse the URL correctly until the anchor is actually
  // added to the body, and an innerHTML is needed to trigger the parsing
  var addToBody = a.host === '' && a.protocol !== 'file:';
  var div = void 0;

  if (addToBody) {
    div = document$1.createElement('div');
    div.innerHTML = '<a href="' + url + '"></a>';
    a = div.firstChild;
    // prevent the div from affecting layout
    div.setAttribute('style', 'display:none; position:absolute;');
    document$1.body.appendChild(div);
  }

  // Copy the specific URL properties to a new object
  // This is also needed for IE8 because the anchor loses its
  // properties when it's removed from the dom
  var details = {};

  for (var i = 0; i < props.length; i++) {
    details[props[i]] = a[props[i]];
  }

  // IE9 adds the port to the host property unlike everyone else. If
  // a port identifier is added for standard ports, strip it.
  if (details.protocol === 'http:') {
    details.host = details.host.replace(/:80$/, '');
  }

  if (details.protocol === 'https:') {
    details.host = details.host.replace(/:443$/, '');
  }

  if (!details.protocol) {
    details.protocol = window$1.location.protocol;
  }

  if (addToBody) {
    document$1.body.removeChild(div);
  }

  return details;
};

/**
 * Get absolute version of relative URL. Used to tell flash correct URL.
 *
 *
 * @param  {string} url
 *         URL to make absolute
 *
 * @return {string}
 *         Absolute URL
 *
 * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
 */
var getAbsoluteURL = function getAbsoluteURL(url) {
  // Check if absolute URL
  if (!url.match(/^https?:\/\//)) {
    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
    var div = document$1.createElement('div');

    div.innerHTML = '<a href="' + url + '">x</a>';
    url = div.firstChild.href;
  }

  return url;
};

/**
 * Returns the extension of the passed file name. It will return an empty string
 * if passed an invalid path.
 *
 * @param {string} path
 *        The fileName path like '/path/to/file.mp4'
 *
 * @return {string}
 *          The extension in lower case or an empty string if no
 *          extension could be found.
 */
var getFileExtension = function getFileExtension(path) {
  if (typeof path === 'string') {
    /* eslint max-len: ["error", { "code": 800 }] */
    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
    var pathParts = splitPathRe.exec(path);

    if (pathParts) {
      return pathParts.pop().toLowerCase();
    }
  }

  return '';
};

/**
 * Returns whether the url passed is a cross domain request or not.
 *
 * @param {string} url
 *        The url to check.
 *
 * @return {boolean}
 *         Whether it is a cross domain request or not.
 */
var isCrossOrigin = function isCrossOrigin(url) {
  var winLoc = window$1.location;
  var urlInfo = parseUrl(url);

  // IE8 protocol relative urls will return ':' for protocol
  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

  // Check if url is for another domain/origin
  // IE8 doesn't know location.origin, so we won't rely on it here
  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;

  return crossOrigin;
};

var Url = /*#__PURE__*/Object.freeze({
  parseUrl: parseUrl,
  getAbsoluteURL: getAbsoluteURL,
  getFileExtension: getFileExtension,
  isCrossOrigin: isCrossOrigin
});

/**
 * @file text-track.js
 */

/**
 * Takes a webvtt file contents and parses it into cues
 *
 * @param {string} srcContent
 *        webVTT file contents
 *
 * @param {TextTrack} track
 *        TextTrack to add cues to. Cues come from the srcContent.
 *
 * @private
 */
var parseCues = function parseCues(srcContent, track) {
  var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, window$1.WebVTT.StringDecoder());
  var errors = [];

  parser.oncue = function (cue) {
    track.addCue(cue);
  };

  parser.onparsingerror = function (error) {
    errors.push(error);
  };

  parser.onflush = function () {
    track.trigger({
      type: 'loadeddata',
      target: track
    });
  };

  parser.parse(srcContent);
  if (errors.length > 0) {
    if (window$1.console && window$1.console.groupCollapsed) {
      window$1.console.groupCollapsed('Text Track parsing errors for ' + track.src);
    }
    errors.forEach(function (error) {
      return log$1.error(error);
    });
    if (window$1.console && window$1.console.groupEnd) {
      window$1.console.groupEnd();
    }
  }

  parser.flush();
};

/**
 * Load a `TextTrack` from a specified url.
 *
 * @param {string} src
 *        Url to load track from.
 *
 * @param {TextTrack} track
 *        Track to add cues to. Comes from the content at the end of `url`.
 *
 * @private
 */
var loadTrack = function loadTrack(src, track) {
  var opts = {
    uri: src
  };
  var crossOrigin = isCrossOrigin(src);

  if (crossOrigin) {
    opts.cors = crossOrigin;
  }

  xhr(opts, bind(this, function (err, response, responseBody) {
    if (err) {
      return log$1.error(err, response);
    }

    track.loaded_ = true;

    // Make sure that vttjs has loaded, otherwise, wait till it finished loading
    // NOTE: this is only used for the alt/video.novtt.js build
    if (typeof window$1.WebVTT !== 'function') {
      if (track.tech_) {
        var loadHandler = function loadHandler() {
          return parseCues(responseBody, track);
        };

        track.tech_.on('vttjsloaded', loadHandler);
        track.tech_.on('vttjserror', function () {
          log$1.error('vttjs failed to load, stopping trying to process ' + track.src);
          track.tech_.off('vttjsloaded', loadHandler);
        });
      }
    } else {
      parseCues(responseBody, track);
    }
  }));
};

/**
 * A representation of a single `TextTrack`.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
 * @extends Track
 */

var TextTrack = function (_Track) {
  inherits(TextTrack, _Track);

  /**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param {Tech} options.tech
   *        A reference to the tech that owns this TextTrack.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        version of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */
  function TextTrack() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, TextTrack);

    if (!options.tech) {
      throw new Error('A tech was not provided.');
    }

    var settings = mergeOptions(options, {
      kind: TextTrackKind[options.kind] || 'subtitles',
      language: options.language || options.srclang || ''
    });
    var mode = TextTrackMode[settings.mode] || 'disabled';
    var default_ = settings.default;

    if (settings.kind === 'metadata' || settings.kind === 'chapters') {
      mode = 'hidden';
    }

    var _this = possibleConstructorReturn(this, _Track.call(this, settings));

    _this.tech_ = settings.tech;

    _this.cues_ = [];
    _this.activeCues_ = [];

    var cues = new TextTrackCueList(_this.cues_);
    var activeCues = new TextTrackCueList(_this.activeCues_);
    var changed = false;
    var timeupdateHandler = bind(_this, function () {

      // Accessing this.activeCues for the side-effects of updating itself
      // due to it's nature as a getter function. Do not remove or cues will
      // stop updating!
      // Use the setter to prevent deletion from uglify (pure_getters rule)
      this.activeCues = this.activeCues;
      if (changed) {
        this.trigger('cuechange');
        changed = false;
      }
    });

    if (mode !== 'disabled') {
      _this.tech_.ready(function () {
        _this.tech_.on('timeupdate', timeupdateHandler);
      }, true);
    }

    Object.defineProperties(_this, {
      /**
       * @memberof TextTrack
       * @member {boolean} default
       *         If this track was set to be on or off by default. Cannot be changed after
       *         creation.
       * @instance
       *
       * @readonly
       */
      default: {
        get: function get$$1() {
          return default_;
        },
        set: function set$$1() {}
      },

      /**
       * @memberof TextTrack
       * @member {string} mode
       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
       *         not be set if setting to an invalid mode.
       * @instance
       *
       * @fires TextTrack#modechange
       */
      mode: {
        get: function get$$1() {
          return mode;
        },
        set: function set$$1(newMode) {
          var _this2 = this;

          if (!TextTrackMode[newMode]) {
            return;
          }
          mode = newMode;
          if (mode === 'showing') {

            this.tech_.ready(function () {
              _this2.tech_.on('timeupdate', timeupdateHandler);
            }, true);
          }
          /**
           * An event that fires when mode changes on this track. This allows
           * the TextTrackList that holds this track to act accordingly.
           *
           * > Note: This is not part of the spec!
           *
           * @event TextTrack#modechange
           * @type {EventTarget~Event}
           */
          this.trigger('modechange');
        }
      },

      /**
       * @memberof TextTrack
       * @member {TextTrackCueList} cues
       *         The text track cue list for this TextTrack.
       * @instance
       */
      cues: {
        get: function get$$1() {
          if (!this.loaded_) {
            return null;
          }

          return cues;
        },
        set: function set$$1() {}
      },

      /**
       * @memberof TextTrack
       * @member {TextTrackCueList} activeCues
       *         The list text track cues that are currently active for this TextTrack.
       * @instance
       */
      activeCues: {
        get: function get$$1() {
          if (!this.loaded_) {
            return null;
          }

          // nothing to do
          if (this.cues.length === 0) {
            return activeCues;
          }

          var ct = this.tech_.currentTime();
          var active = [];

          for (var i = 0, l = this.cues.length; i < l; i++) {
            var cue = this.cues[i];

            if (cue.startTime <= ct && cue.endTime >= ct) {
              active.push(cue);
            } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
              active.push(cue);
            }
          }

          changed = false;

          if (active.length !== this.activeCues_.length) {
            changed = true;
          } else {
            for (var _i = 0; _i < active.length; _i++) {
              if (this.activeCues_.indexOf(active[_i]) === -1) {
                changed = true;
              }
            }
          }

          this.activeCues_ = active;
          activeCues.setCues_(this.activeCues_);

          return activeCues;
        },


        // /!\ Keep this setter empty (see the timeupdate handler above)
        set: function set$$1() {}
      }
    });

    if (settings.src) {
      _this.src = settings.src;
      loadTrack(settings.src, _this);
    } else {
      _this.loaded_ = true;
    }
    return _this;
  }

  /**
   * Add a cue to the internal list of cues.
   *
   * @param {TextTrack~Cue} originalCue
   *        The cue to add to our internal list
   */


  TextTrack.prototype.addCue = function addCue(originalCue) {
    var cue = originalCue;

    if (window$1.vttjs && !(originalCue instanceof window$1.vttjs.VTTCue)) {
      cue = new window$1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);

      for (var prop in originalCue) {
        if (!(prop in cue)) {
          cue[prop] = originalCue[prop];
        }
      }

      // make sure that `id` is copied over
      cue.id = originalCue.id;
      cue.originalCue_ = originalCue;
    }

    var tracks = this.tech_.textTracks();

    for (var i = 0; i < tracks.length; i++) {
      if (tracks[i] !== this) {
        tracks[i].removeCue(cue);
      }
    }

    this.cues_.push(cue);
    this.cues.setCues_(this.cues_);
  };

  /**
   * Remove a cue from our internal list
   *
   * @param {TextTrack~Cue} removeCue
   *        The cue to remove from our internal list
   */


  TextTrack.prototype.removeCue = function removeCue(_removeCue) {
    var i = this.cues_.length;

    while (i--) {
      var cue = this.cues_[i];

      if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {
        this.cues_.splice(i, 1);
        this.cues.setCues_(this.cues_);
        break;
      }
    }
  };

  return TextTrack;
}(Track);

/**
 * cuechange - One or more cues in the track have become active or stopped being active.
 */


TextTrack.prototype.allowedEvents_ = {
  cuechange: 'cuechange'
};

/**
 * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
 * only one `AudioTrack` in the list will be enabled at a time.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
 * @extends Track
 */

var AudioTrack = function (_Track) {
  inherits(AudioTrack, _Track);

  /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {AudioTrack~Kind} [options.kind='']
   *        A valid audio track kind
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.enabled]
   *        If this track is the one that is currently playing. If this track is part of
   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
   */
  function AudioTrack() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, AudioTrack);

    var settings = mergeOptions(options, {
      kind: AudioTrackKind[options.kind] || ''
    });

    var _this = possibleConstructorReturn(this, _Track.call(this, settings));

    var enabled = false;

    /**
     * @memberof AudioTrack
     * @member {boolean} enabled
     *         If this `AudioTrack` is enabled or not. When setting this will
     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */
    Object.defineProperty(_this, 'enabled', {
      get: function get$$1() {
        return enabled;
      },
      set: function set$$1(newEnabled) {
        // an invalid or unchanged value
        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
          return;
        }
        enabled = newEnabled;

        /**
         * An event that fires when enabled changes on this track. This allows
         * the AudioTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event AudioTrack#enabledchange
         * @type {EventTarget~Event}
         */
        this.trigger('enabledchange');
      }
    });

    // if the user sets this track to selected then
    // set selected to that true value otherwise
    // we keep it false
    if (settings.enabled) {
      _this.enabled = settings.enabled;
    }
    _this.loaded_ = true;
    return _this;
  }

  return AudioTrack;
}(Track);

/**
 * A representation of a single `VideoTrack`.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
 * @extends Track
 */

var VideoTrack = function (_Track) {
  inherits(VideoTrack, _Track);

  /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid {@link VideoTrack~Kind}
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.selected]
   *        If this track is the one that is currently playing.
   */
  function VideoTrack() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, VideoTrack);

    var settings = mergeOptions(options, {
      kind: VideoTrackKind[options.kind] || ''
    });

    var _this = possibleConstructorReturn(this, _Track.call(this, settings));

    var selected = false;

    /**
     * @memberof VideoTrack
     * @member {boolean} selected
     *         If this `VideoTrack` is selected or not. When setting this will
     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */
    Object.defineProperty(_this, 'selected', {
      get: function get$$1() {
        return selected;
      },
      set: function set$$1(newSelected) {
        // an invalid or unchanged value
        if (typeof newSelected !== 'boolean' || newSelected === selected) {
          return;
        }
        selected = newSelected;

        /**
         * An event that fires when selected changes on this track. This allows
         * the VideoTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event VideoTrack#selectedchange
         * @type {EventTarget~Event}
         */
        this.trigger('selectedchange');
      }
    });

    // if the user sets this track to selected then
    // set selected to that true value otherwise
    // we keep it false
    if (settings.selected) {
      _this.selected = settings.selected;
    }
    return _this;
  }

  return VideoTrack;
}(Track);

/**
 * @file html-track-element.js
 */

/**
 * @memberof HTMLTrackElement
 * @typedef {HTMLTrackElement~ReadyState}
 * @enum {number}
 */
var NONE = 0;
var LOADING = 1;
var LOADED = 2;
var ERROR = 3;

/**
 * A single track represented in the DOM.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
 * @extends EventTarget
 */

var HTMLTrackElement = function (_EventTarget) {
  inherits(HTMLTrackElement, _EventTarget);

  /**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param {Tech} options.tech
   *        A reference to the tech that owns this HTMLTrackElement.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        vesion of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */
  function HTMLTrackElement() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, HTMLTrackElement);

    var _this = possibleConstructorReturn(this, _EventTarget.call(this));

    var readyState = void 0;

    var track = new TextTrack(options);

    _this.kind = track.kind;
    _this.src = track.src;
    _this.srclang = track.language;
    _this.label = track.label;
    _this.default = track.default;

    Object.defineProperties(_this, {

      /**
       * @memberof HTMLTrackElement
       * @member {HTMLTrackElement~ReadyState} readyState
       *         The current ready state of the track element.
       * @instance
       */
      readyState: {
        get: function get$$1() {
          return readyState;
        }
      },

      /**
       * @memberof HTMLTrackElement
       * @member {TextTrack} track
       *         The underlying TextTrack object.
       * @instance
       *
       */
      track: {
        get: function get$$1() {
          return track;
        }
      }
    });

    readyState = NONE;

    /**
     * @listens TextTrack#loadeddata
     * @fires HTMLTrackElement#load
     */
    track.addEventListener('loadeddata', function () {
      readyState = LOADED;

      _this.trigger({
        type: 'load',
        target: _this
      });
    });
    return _this;
  }

  return HTMLTrackElement;
}(EventTarget);

HTMLTrackElement.prototype.allowedEvents_ = {
  load: 'load'
};

HTMLTrackElement.NONE = NONE;
HTMLTrackElement.LOADING = LOADING;
HTMLTrackElement.LOADED = LOADED;
HTMLTrackElement.ERROR = ERROR;

/*
 * This file contains all track properties that are used in
 * player.js, tech.js, html5.js and possibly other techs in the future.
 */

var NORMAL = {
  audio: {
    ListClass: AudioTrackList,
    TrackClass: AudioTrack,
    capitalName: 'Audio'
  },
  video: {
    ListClass: VideoTrackList,
    TrackClass: VideoTrack,
    capitalName: 'Video'
  },
  text: {
    ListClass: TextTrackList,
    TrackClass: TextTrack,
    capitalName: 'Text'
  }
};

Object.keys(NORMAL).forEach(function (type) {
  NORMAL[type].getterName = type + 'Tracks';
  NORMAL[type].privateName = type + 'Tracks_';
});

var REMOTE = {
  remoteText: {
    ListClass: TextTrackList,
    TrackClass: TextTrack,
    capitalName: 'RemoteText',
    getterName: 'remoteTextTracks',
    privateName: 'remoteTextTracks_'
  },
  remoteTextEl: {
    ListClass: HtmlTrackElementList,
    TrackClass: HTMLTrackElement,
    capitalName: 'RemoteTextTrackEls',
    getterName: 'remoteTextTrackEls',
    privateName: 'remoteTextTrackEls_'
  }
};

var ALL = mergeOptions(NORMAL, REMOTE);

REMOTE.names = Object.keys(REMOTE);
NORMAL.names = Object.keys(NORMAL);
ALL.names = [].concat(REMOTE.names).concat(NORMAL.names);

/**
 * @file tech.js
 */

/**
 * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
 * that just contains the src url alone.
 * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
   * `var SourceString = 'http://example.com/some-video.mp4';`
 *
 * @typedef {Object|string} Tech~SourceObject
 *
 * @property {string} src
 *           The url to the source
 *
 * @property {string} type
 *           The mime type of the source
 */

/**
 * A function used by {@link Tech} to create a new {@link TextTrack}.
 *
 * @private
 *
 * @param {Tech} self
 *        An instance of the Tech class.
 *
 * @param {string} kind
 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
 *
 * @param {string} [label]
 *        Label to identify the text track
 *
 * @param {string} [language]
 *        Two letter language abbreviation
 *
 * @param {Object} [options={}]
 *        An object with additional text track options
 *
 * @return {TextTrack}
 *          The text track that was created.
 */
function createTrackHelper(self, kind, label, language) {
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  var tracks = self.textTracks();

  options.kind = kind;

  if (label) {
    options.label = label;
  }
  if (language) {
    options.language = language;
  }
  options.tech = self;

  var track = new ALL.text.TrackClass(options);

  tracks.addTrack(track);

  return track;
}

/**
 * This is the base class for media playback technology controllers, such as
 * {@link Flash} and {@link HTML5}
 *
 * @extends Component
 */

var Tech = function (_Component) {
  inherits(Tech, _Component);

  /**
   * Create an instance of this Tech.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} ready
   *        Callback function to call when the `HTML5` Tech is ready.
   */
  function Tech() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
    classCallCheck(this, Tech);

    // we don't want the tech to report user activity automatically.
    // This is done manually in addControlsListeners
    options.reportTouchActivity = false;

    // keep track of whether the current source has played at all to
    // implement a very limited played()
    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));

    _this.hasStarted_ = false;
    _this.on('playing', function () {
      this.hasStarted_ = true;
    });
    _this.on('loadstart', function () {
      this.hasStarted_ = false;
    });

    ALL.names.forEach(function (name) {
      var props = ALL[name];

      if (options && options[props.getterName]) {
        _this[props.privateName] = options[props.getterName];
      }
    });

    // Manually track progress in cases where the browser/flash player doesn't report it.
    if (!_this.featuresProgressEvents) {
      _this.manualProgressOn();
    }

    // Manually track timeupdates in cases where the browser/flash player doesn't report it.
    if (!_this.featuresTimeupdateEvents) {
      _this.manualTimeUpdatesOn();
    }

    ['Text', 'Audio', 'Video'].forEach(function (track) {
      if (options['native' + track + 'Tracks'] === false) {
        _this['featuresNative' + track + 'Tracks'] = false;
      }
    });

    if (options.nativeCaptions === false || options.nativeTextTracks === false) {
      _this.featuresNativeTextTracks = false;
    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {
      _this.featuresNativeTextTracks = true;
    }

    if (!_this.featuresNativeTextTracks) {
      _this.emulateTextTracks();
    }

    _this.autoRemoteTextTracks_ = new ALL.text.ListClass();

    _this.initTrackListeners();

    // Turn on component tap events only if not using native controls
    if (!options.nativeControlsForTouch) {
      _this.emitTapEvents();
    }

    if (_this.constructor) {
      _this.name_ = _this.constructor.name || 'Unknown Tech';
    }
    return _this;
  }

  /**
   * A special function to trigger source set in a way that will allow player
   * to re-trigger if the player or tech are not ready yet.
   *
   * @fires Tech#sourceset
   * @param {string} src The source string at the time of the source changing.
   */


  Tech.prototype.triggerSourceset = function triggerSourceset(src) {
    var _this2 = this;

    if (!this.isReady_) {
      // on initial ready we have to trigger source set
      // 1ms after ready so that player can watch for it.
      this.one('ready', function () {
        return _this2.setTimeout(function () {
          return _this2.triggerSourceset(src);
        }, 1);
      });
    }

    /**
     * Fired when the source is set on the tech causing the media element
     * to reload.
     *
     * @see {@link Player#event:sourceset}
     * @event Tech#sourceset
     * @type {EventTarget~Event}
     */
    this.trigger({
      src: src,
      type: 'sourceset'
    });
  };

  /* Fallbacks for unsupported event types
  ================================================================================ */

  /**
   * Polyfill the `progress` event for browsers that don't support it natively.
   *
   * @see {@link Tech#trackProgress}
   */


  Tech.prototype.manualProgressOn = function manualProgressOn() {
    this.on('durationchange', this.onDurationChange);

    this.manualProgress = true;

    // Trigger progress watching when a source begins loading
    this.one('ready', this.trackProgress);
  };

  /**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   */


  Tech.prototype.manualProgressOff = function manualProgressOff() {
    this.manualProgress = false;
    this.stopTrackingProgress();

    this.off('durationchange', this.onDurationChange);
  };

  /**
   * This is used to trigger a `progress` event when the buffered percent changes. It
   * sets an interval function that will be called every 500 milliseconds to check if the
   * buffer end percent has changed.
   *
   * > This function is called by {@link Tech#manualProgressOn}
   *
   * @param {EventTarget~Event} event
   *        The `ready` event that caused this to run.
   *
   * @listens Tech#ready
   * @fires Tech#progress
   */


  Tech.prototype.trackProgress = function trackProgress(event) {
    this.stopTrackingProgress();
    this.progressInterval = this.setInterval(bind(this, function () {
      // Don't trigger unless buffered amount is greater than last time

      var numBufferedPercent = this.bufferedPercent();

      if (this.bufferedPercent_ !== numBufferedPercent) {
        /**
         * See {@link Player#progress}
         *
         * @event Tech#progress
         * @type {EventTarget~Event}
         */
        this.trigger('progress');
      }

      this.bufferedPercent_ = numBufferedPercent;

      if (numBufferedPercent === 1) {
        this.stopTrackingProgress();
      }
    }), 500);
  };

  /**
   * Update our internal duration on a `durationchange` event by calling
   * {@link Tech#duration}.
   *
   * @param {EventTarget~Event} event
   *        The `durationchange` event that caused this to run.
   *
   * @listens Tech#durationchange
   */


  Tech.prototype.onDurationChange = function onDurationChange(event) {
    this.duration_ = this.duration();
  };

  /**
   * Get and create a `TimeRange` object for buffering.
   *
   * @return {TimeRange}
   *         The time range object that was created.
   */


  Tech.prototype.buffered = function buffered() {
    return createTimeRanges(0, 0);
  };

  /**
   * Get the percentage of the current video that is currently buffered.
   *
   * @return {number}
   *         A number from 0 to 1 that represents the decimal percentage of the
   *         video that is buffered.
   *
   */


  Tech.prototype.bufferedPercent = function bufferedPercent$$1() {
    return bufferedPercent(this.buffered(), this.duration_);
  };

  /**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   * Stop manually tracking progress events by clearing the interval that was set in
   * {@link Tech#trackProgress}.
   */


  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
    this.clearInterval(this.progressInterval);
  };

  /**
   * Polyfill the `timeupdate` event for browsers that don't support it.
   *
   * @see {@link Tech#trackCurrentTime}
   */


  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
    this.manualTimeUpdates = true;

    this.on('play', this.trackCurrentTime);
    this.on('pause', this.stopTrackingCurrentTime);
  };

  /**
   * Turn off the polyfill for `timeupdate` events that was created in
   * {@link Tech#manualTimeUpdatesOn}
   */


  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
    this.manualTimeUpdates = false;
    this.stopTrackingCurrentTime();
    this.off('play', this.trackCurrentTime);
    this.off('pause', this.stopTrackingCurrentTime);
  };

  /**
   * Sets up an interval function to track current time and trigger `timeupdate` every
   * 250 milliseconds.
   *
   * @listens Tech#play
   * @triggers Tech#timeupdate
   */


  Tech.prototype.trackCurrentTime = function trackCurrentTime() {
    if (this.currentTimeInterval) {
      this.stopTrackingCurrentTime();
    }
    this.currentTimeInterval = this.setInterval(function () {
      /**
       * Triggered at an interval of 250ms to indicated that time is passing in the video.
       *
       * @event Tech#timeupdate
       * @type {EventTarget~Event}
       */
      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });

      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
    }, 250);
  };

  /**
   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
   * `timeupdate` event is no longer triggered.
   *
   * @listens {Tech#pause}
   */


  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
    this.clearInterval(this.currentTimeInterval);

    // #1002 - if the video ends right before the next timeupdate would happen,
    // the progress bar won't make it all the way to the end
    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
  };

  /**
   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
   *
   * @fires Component#dispose
   */


  Tech.prototype.dispose = function dispose() {

    // clear out all tracks because we can't reuse them between techs
    this.clearTracks(NORMAL.names);

    // Turn off any manual progress or timeupdate tracking
    if (this.manualProgress) {
      this.manualProgressOff();
    }

    if (this.manualTimeUpdates) {
      this.manualTimeUpdatesOff();
    }

    _Component.prototype.dispose.call(this);
  };

  /**
   * Clear out a single `TrackList` or an array of `TrackLists` given their names.
   *
   * > Note: Techs without source handlers should call this between sources for `video`
   *         & `audio` tracks. You don't want to use them between tracks!
   *
   * @param {string[]|string} types
   *        TrackList names to clear, valid names are `video`, `audio`, and
   *        `text`.
   */


  Tech.prototype.clearTracks = function clearTracks(types) {
    var _this3 = this;

    types = [].concat(types);
    // clear out all tracks because we can't reuse them between techs
    types.forEach(function (type) {
      var list = _this3[type + 'Tracks']() || [];
      var i = list.length;

      while (i--) {
        var track = list[i];

        if (type === 'text') {
          _this3.removeRemoteTextTrack(track);
        }
        list.removeTrack(track);
      }
    });
  };

  /**
   * Remove any TextTracks added via addRemoteTextTrack that are
   * flagged for automatic garbage collection
   */


  Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {
    var list = this.autoRemoteTextTracks_ || [];
    var i = list.length;

    while (i--) {
      var track = list[i];

      this.removeRemoteTextTrack(track);
    }
  };

  /**
   * Reset the tech, which will removes all sources and reset the internal readyState.
   *
   * @abstract
   */


  Tech.prototype.reset = function reset() {};

  /**
   * Get or set an error on the Tech.
   *
   * @param {MediaError} [err]
   *        Error to set on the Tech
   *
   * @return {MediaError|null}
   *         The current error object on the tech, or null if there isn't one.
   */


  Tech.prototype.error = function error(err) {
    if (err !== undefined) {
      this.error_ = new MediaError(err);
      this.trigger('error');
    }
    return this.error_;
  };

  /**
   * Returns the `TimeRange`s that have been played through for the current source.
   *
   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
   *         It only checks whether the source has played at all or not.
   *
   * @return {TimeRange}
   *         - A single time range if this video has played
   *         - An empty set of ranges if not.
   */


  Tech.prototype.played = function played() {
    if (this.hasStarted_) {
      return createTimeRanges(0, 0);
    }
    return createTimeRanges();
  };

  /**
   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
   * previously called.
   *
   * @fires Tech#timeupdate
   */


  Tech.prototype.setCurrentTime = function setCurrentTime() {
    // improve the accuracy of manual timeupdates
    if (this.manualTimeUpdates) {
      /**
       * A manual `timeupdate` event.
       *
       * @event Tech#timeupdate
       * @type {EventTarget~Event}
       */
      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
    }
  };

  /**
   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
   * {@link TextTrackList} events.
   *
   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
   *
   * @fires Tech#audiotrackchange
   * @fires Tech#videotrackchange
   * @fires Tech#texttrackchange
   */


  Tech.prototype.initTrackListeners = function initTrackListeners() {
    var _this4 = this;

    /**
     * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
     *
     * @event Tech#audiotrackchange
     * @type {EventTarget~Event}
     */

    /**
     * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
     *
     * @event Tech#videotrackchange
     * @type {EventTarget~Event}
     */

    /**
     * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
     *
     * @event Tech#texttrackchange
     * @type {EventTarget~Event}
     */
    NORMAL.names.forEach(function (name) {
      var props = NORMAL[name];
      var trackListChanges = function trackListChanges() {
        _this4.trigger(name + 'trackchange');
      };

      var tracks = _this4[props.getterName]();

      tracks.addEventListener('removetrack', trackListChanges);
      tracks.addEventListener('addtrack', trackListChanges);

      _this4.on('dispose', function () {
        tracks.removeEventListener('removetrack', trackListChanges);
        tracks.removeEventListener('addtrack', trackListChanges);
      });
    });
  };

  /**
   * Emulate TextTracks using vtt.js if necessary
   *
   * @fires Tech#vttjsloaded
   * @fires Tech#vttjserror
   */


  Tech.prototype.addWebVttScript_ = function addWebVttScript_() {
    var _this5 = this;

    if (window$1.WebVTT) {
      return;
    }

    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
    // signals that the Tech is ready at which point Tech.el_ is part of the DOM
    // before inserting the WebVTT script
    if (document$1.body.contains(this.el())) {

      // load via require if available and vtt.js script location was not passed in
      // as an option. novtt builds will turn the above require call into an empty object
      // which will cause this if check to always fail.
      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {
        this.trigger('vttjsloaded');
        return;
      }

      // load vtt.js via the script location option or the cdn of no location was
      // passed in
      var script = document$1.createElement('script');

      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';
      script.onload = function () {
        /**
         * Fired when vtt.js is loaded.
         *
         * @event Tech#vttjsloaded
         * @type {EventTarget~Event}
         */
        _this5.trigger('vttjsloaded');
      };
      script.onerror = function () {
        /**
         * Fired when vtt.js was not loaded due to an error
         *
         * @event Tech#vttjsloaded
         * @type {EventTarget~Event}
         */
        _this5.trigger('vttjserror');
      };
      this.on('dispose', function () {
        script.onload = null;
        script.onerror = null;
      });
      // but have not loaded yet and we set it to true before the inject so that
      // we don't overwrite the injected window.WebVTT if it loads right away
      window$1.WebVTT = true;
      this.el().parentNode.appendChild(script);
    } else {
      this.ready(this.addWebVttScript_);
    }
  };

  /**
   * Emulate texttracks
   *
   */


  Tech.prototype.emulateTextTracks = function emulateTextTracks() {
    var _this6 = this;

    var tracks = this.textTracks();
    var remoteTracks = this.remoteTextTracks();
    var handleAddTrack = function handleAddTrack(e) {
      return tracks.addTrack(e.track);
    };
    var handleRemoveTrack = function handleRemoveTrack(e) {
      return tracks.removeTrack(e.track);
    };

    remoteTracks.on('addtrack', handleAddTrack);
    remoteTracks.on('removetrack', handleRemoveTrack);

    this.addWebVttScript_();

    var updateDisplay = function updateDisplay() {
      return _this6.trigger('texttrackchange');
    };

    var textTracksChanges = function textTracksChanges() {
      updateDisplay();

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        track.removeEventListener('cuechange', updateDisplay);
        if (track.mode === 'showing') {
          track.addEventListener('cuechange', updateDisplay);
        }
      }
    };

    textTracksChanges();
    tracks.addEventListener('change', textTracksChanges);
    tracks.addEventListener('addtrack', textTracksChanges);
    tracks.addEventListener('removetrack', textTracksChanges);

    this.on('dispose', function () {
      remoteTracks.off('addtrack', handleAddTrack);
      remoteTracks.off('removetrack', handleRemoveTrack);
      tracks.removeEventListener('change', textTracksChanges);
      tracks.removeEventListener('addtrack', textTracksChanges);
      tracks.removeEventListener('removetrack', textTracksChanges);

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        track.removeEventListener('cuechange', updateDisplay);
      }
    });
  };

  /**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */


  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
    if (!kind) {
      throw new Error('TextTrack kind is required but was not provided');
    }

    return createTrackHelper(this, kind, label, language);
  };

  /**
   * Create an emulated TextTrack for use by addRemoteTextTrack
   *
   * This is intended to be overridden by classes that inherit from
   * Tech in order to create native or custom TextTracks.
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label].
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */


  Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
    var track = mergeOptions(options, {
      tech: this
    });

    return new REMOTE.remoteTextEl.TrackClass(track);
  };

  /**
   * Creates a remote text track object and returns an html track element.
   *
   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
   *
   * @param {Object} options
   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
   *
   * @param {boolean} [manualCleanup=true]
   *        - When false: the TextTrack will be automatically removed from the video
   *          element whenever the source changes
   *        - When True: The TextTrack will have to be cleaned up manually
   *
   * @return {HTMLTrackElement}
   *         An Html Track Element.
   *
   * @deprecated The default functionality for this function will be equivalent
   *             to "manualCleanup=false" in the future. The manualCleanup parameter will
   *             also be removed.
   */


  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
    var _this7 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var manualCleanup = arguments[1];

    var htmlTrackElement = this.createRemoteTextTrack(options);

    if (manualCleanup !== true && manualCleanup !== false) {
      // deprecation warning
      log$1.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
      manualCleanup = true;
    }

    // store HTMLTrackElement and TextTrack to remote list
    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
    this.remoteTextTracks().addTrack(htmlTrackElement.track);

    if (manualCleanup !== true) {
      // create the TextTrackList if it doesn't exist
      this.ready(function () {
        return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);
      });
    }

    return htmlTrackElement;
  };

  /**
   * Remove a remote text track from the remote `TextTrackList`.
   *
   * @param {TextTrack} track
   *        `TextTrack` to remove from the `TextTrackList`
   */


  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

    // remove HTMLTrackElement and TextTrack from remote list
    this.remoteTextTrackEls().removeTrackElement_(trackElement);
    this.remoteTextTracks().removeTrack(track);
    this.autoRemoteTextTracks_.removeTrack(track);
  };

  /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   *
   * @abstract
   */


  Tech.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
    return {};
  };

  /**
   * A method to set a poster from a `Tech`.
   *
   * @abstract
   */


  Tech.prototype.setPoster = function setPoster() {};

  /**
   * A method to check for the presence of the 'playsinline' <video> attribute.
   *
   * @abstract
   */


  Tech.prototype.playsinline = function playsinline() {};

  /**
   * A method to set or unset the 'playsinline' <video> attribute.
   *
   * @abstract
   */


  Tech.prototype.setPlaysinline = function setPlaysinline() {};

  /**
   * Attempt to force override of native audio tracks.
   *
   * @param {Boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   *
   * @abstract
   */


  Tech.prototype.overrideNativeAudioTracks = function overrideNativeAudioTracks() {};

  /**
   * Attempt to force override of native video tracks.
   *
   * @param {Boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   *
   * @abstract
   */


  Tech.prototype.overrideNativeVideoTracks = function overrideNativeVideoTracks() {};

  /*
   * Check if the tech can support the given mime-type.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param  {string} type
   *         The mimetype to check for support
   *
   * @return {string}
   *         'probably', 'maybe', or empty string
   *
   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
   *
   * @abstract
   */


  Tech.prototype.canPlayType = function canPlayType() {
    return '';
  };

  /**
   * Check if the type is supported by this tech.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param {string} type
   *        The media type to check
   * @return {string} Returns the native video element's response
   */


  Tech.canPlayType = function canPlayType() {
    return '';
  };

  /**
   * Check if the tech can support the given source
   *
   * @param {Object} srcObj
   *        The source object
   * @param {Object} options
   *        The options passed to the tech
   * @return {string} 'probably', 'maybe', or '' (empty string)
   */


  Tech.canPlaySource = function canPlaySource(srcObj, options) {
    return Tech.canPlayType(srcObj.type);
  };

  /*
   * Return whether the argument is a Tech or not.
   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
   *
   * @param {Object} component
   *        The item to check
   *
   * @return {boolean}
   *         Whether it is a tech or not
   *         - True if it is a tech
   *         - False if it is not
   */


  Tech.isTech = function isTech(component) {
    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
  };

  /**
   * Registers a `Tech` into a shared list for videojs.
   *
   * @param {string} name
   *        Name of the `Tech` to register.
   *
   * @param {Object} tech
   *        The `Tech` class to register.
   */


  Tech.registerTech = function registerTech(name, tech) {
    if (!Tech.techs_) {
      Tech.techs_ = {};
    }

    if (!Tech.isTech(tech)) {
      throw new Error('Tech ' + name + ' must be a Tech');
    }

    if (!Tech.canPlayType) {
      throw new Error('Techs must have a static canPlayType method on them');
    }
    if (!Tech.canPlaySource) {
      throw new Error('Techs must have a static canPlaySource method on them');
    }

    name = toTitleCase(name);

    Tech.techs_[name] = tech;
    if (name !== 'Tech') {
      // camel case the techName for use in techOrder
      Tech.defaultTechOrder_.push(name);
    }
    return tech;
  };

  /**
   * Get a `Tech` from the shared list by name.
   *
   * @param {string} name
   *        `camelCase` or `TitleCase` name of the Tech to get
   *
   * @return {Tech|undefined}
   *         The `Tech` or undefined if there was no tech with the name requested.
   */


  Tech.getTech = function getTech(name) {
    if (!name) {
      return;
    }

    name = toTitleCase(name);

    if (Tech.techs_ && Tech.techs_[name]) {
      return Tech.techs_[name];
    }

    if (window$1 && window$1.videojs && window$1.videojs[name]) {
      log$1.warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
      return window$1.videojs[name];
    }
  };

  return Tech;
}(Component);

/**
 * Get the {@link VideoTrackList}
 *
 * @returns {VideoTrackList}
 * @method Tech.prototype.videoTracks
 */

/**
 * Get the {@link AudioTrackList}
 *
 * @returns {AudioTrackList}
 * @method Tech.prototype.audioTracks
 */

/**
 * Get the {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.textTracks
 */

/**
 * Get the remote element {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.remoteTextTracks
 */

/**
 * Get the remote element {@link HtmlTrackElementList}
 *
 * @returns {HtmlTrackElementList}
 * @method Tech.prototype.remoteTextTrackEls
 */

ALL.names.forEach(function (name) {
  var props = ALL[name];

  Tech.prototype[props.getterName] = function () {
    this[props.privateName] = this[props.privateName] || new props.ListClass();
    return this[props.privateName];
  };
});

/**
 * List of associated text tracks
 *
 * @type {TextTrackList}
 * @private
 * @property Tech#textTracks_
 */

/**
 * List of associated audio tracks.
 *
 * @type {AudioTrackList}
 * @private
 * @property Tech#audioTracks_
 */

/**
 * List of associated video tracks.
 *
 * @type {VideoTrackList}
 * @private
 * @property Tech#videoTracks_
 */

/**
 * Boolean indicating whether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresVolumeControl = true;

/**
 * Boolean indicating whether the `Tech` supports muting volume.
 *
 * @type {bolean}
 * @default
 */
Tech.prototype.featuresMuteControl = true;

/**
 * Boolean indicating whether the `Tech` supports fullscreen resize control.
 * Resizing plugins using request fullscreen reloads the plugin
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresFullscreenResize = false;

/**
 * Boolean indicating whether the `Tech` supports changing the speed at which the video
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresPlaybackRate = false;

/**
 * Boolean indicating whether the `Tech` supports the `progress` event. This is currently
 * not triggered by video-js-swf. This will be used to determine if
 * {@link Tech#manualProgressOn} should be called.
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresProgressEvents = false;

/**
 * Boolean indicating whether the `Tech` supports the `sourceset` event.
 *
 * A tech should set this to `true` and then use {@link Tech#triggerSourceset}
 * to trigger a {@link Tech#event:sourceset} at the earliest time after getting
 * a new source.
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresSourceset = false;

/**
 * Boolean indicating whether the `Tech` supports the `timeupdate` event. This is currently
 * not triggered by video-js-swf. This will be used to determine if
 * {@link Tech#manualTimeUpdates} should be called.
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresTimeupdateEvents = false;

/**
 * Boolean indicating whether the `Tech` supports the native `TextTrack`s.
 * This will help us integrate with native `TextTrack`s if the browser supports them.
 *
 * @type {boolean}
 * @default
 */
Tech.prototype.featuresNativeTextTracks = false;

/**
 * A functional mixin for techs that want to use the Source Handler pattern.
 * Source handlers are scripts for handling specific formats.
 * The source handler pattern is used for adaptive formats (HLS, DASH) that
 * manually load video data and feed it into a Source Buffer (Media Source Extensions)
 * Example: `Tech.withSourceHandlers.call(MyTech);`
 *
 * @param {Tech} _Tech
 *        The tech to add source handler functions to.
 *
 * @mixes Tech~SourceHandlerAdditions
 */
Tech.withSourceHandlers = function (_Tech) {

  /**
   * Register a source handler
   *
   * @param {Function} handler
   *        The source handler class
   *
   * @param {number} [index]
   *        Register it at the following index
   */
  _Tech.registerSourceHandler = function (handler, index) {
    var handlers = _Tech.sourceHandlers;

    if (!handlers) {
      handlers = _Tech.sourceHandlers = [];
    }

    if (index === undefined) {
      // add to the end of the list
      index = handlers.length;
    }

    handlers.splice(index, 0, handler);
  };

  /**
   * Check if the tech can support the given type. Also checks the
   * Techs sourceHandlers.
   *
   * @param {string} type
   *         The mimetype to check.
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */
  _Tech.canPlayType = function (type) {
    var handlers = _Tech.sourceHandlers || [];
    var can = void 0;

    for (var i = 0; i < handlers.length; i++) {
      can = handlers[i].canPlayType(type);

      if (can) {
        return can;
      }
    }

    return '';
  };

  /**
   * Returns the first source handler that supports the source.
   *
   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
   *
   * @param {Tech~SourceObject} source
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {SourceHandler|null}
   *          The first source handler that supports the source or null if
   *          no SourceHandler supports the source
   */
  _Tech.selectSourceHandler = function (source, options) {
    var handlers = _Tech.sourceHandlers || [];
    var can = void 0;

    for (var i = 0; i < handlers.length; i++) {
      can = handlers[i].canHandleSource(source, options);

      if (can) {
        return handlers[i];
      }
    }

    return null;
  };

  /**
   * Check if the tech can support the given source.
   *
   * @param {Tech~SourceObject} srcObj
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */
  _Tech.canPlaySource = function (srcObj, options) {
    var sh = _Tech.selectSourceHandler(srcObj, options);

    if (sh) {
      return sh.canHandleSource(srcObj, options);
    }

    return '';
  };

  /**
   * When using a source handler, prefer its implementation of
   * any function normally provided by the tech.
   */
  var deferrable = ['seekable', 'seeking', 'duration'];

  /**
   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
   * function if it exists, with a fallback to the Techs seekable function.
   *
   * @method _Tech.seekable
   */

  /**
   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
   * function if it exists, otherwise it will fallback to the techs duration function.
   *
   * @method _Tech.duration
   */

  deferrable.forEach(function (fnName) {
    var originalFn = this[fnName];

    if (typeof originalFn !== 'function') {
      return;
    }

    this[fnName] = function () {
      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
      }
      return originalFn.apply(this, arguments);
    };
  }, _Tech.prototype);

  /**
   * Create a function for setting the source using a source object
   * and source handlers.
   * Should never be called unless a source handler was found.
   *
   * @param {Tech~SourceObject} source
   *        A source object with src and type keys
   */
  _Tech.prototype.setSource = function (source) {
    var sh = _Tech.selectSourceHandler(source, this.options_);

    if (!sh) {
      // Fall back to a native source hander when unsupported sources are
      // deliberately set
      if (_Tech.nativeSourceHandler) {
        sh = _Tech.nativeSourceHandler;
      } else {
        log$1.error('No source handler found for the current source.');
      }
    }

    // Dispose any existing source handler
    this.disposeSourceHandler();
    this.off('dispose', this.disposeSourceHandler);

    if (sh !== _Tech.nativeSourceHandler) {
      this.currentSource_ = source;
    }

    this.sourceHandler_ = sh.handleSource(source, this, this.options_);
    this.on('dispose', this.disposeSourceHandler);
  };

  /**
   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
   *
   * @listens Tech#dispose
   */
  _Tech.prototype.disposeSourceHandler = function () {
    // if we have a source and get another one
    // then we are loading something new
    // than clear all of our current tracks
    if (this.currentSource_) {
      this.clearTracks(['audio', 'video']);
      this.currentSource_ = null;
    }

    // always clean up auto-text tracks
    this.cleanupAutoTextTracks();

    if (this.sourceHandler_) {

      if (this.sourceHandler_.dispose) {
        this.sourceHandler_.dispose();
      }

      this.sourceHandler_ = null;
    }
  };
};

// The base Tech class needs to be registered as a Component. It is the only
// Tech that can be registered as a Component.
Component.registerComponent('Tech', Tech);
Tech.registerTech('Tech', Tech);

/**
 * A list of techs that should be added to techOrder on Players
 *
 * @private
 */
Tech.defaultTechOrder_ = [];

var middlewares = {};
var middlewareInstances = {};

var TERMINATOR = {};

function use(type, middleware) {
  middlewares[type] = middlewares[type] || [];
  middlewares[type].push(middleware);
}

function setSource(player, src, next) {
  player.setTimeout(function () {
    return setSourceHelper(src, middlewares[src.type], next, player);
  }, 1);
}

function setTech(middleware, tech) {
  middleware.forEach(function (mw) {
    return mw.setTech && mw.setTech(tech);
  });
}

/**
 * Calls a getter on the tech first, through each middleware
 * from right to left to the player.
 */
function get$1(middleware, tech, method) {
  return middleware.reduceRight(middlewareIterator(method), tech[method]());
}

/**
 * Takes the argument given to the player and calls the setter method on each
 * middleware from left to right to the tech.
 */
function set$1(middleware, tech, method, arg) {
  return tech[method](middleware.reduce(middlewareIterator(method), arg));
}

/**
 * Takes the argument given to the player and calls the `call` version of the method
 * on each middleware from left to right.
 * Then, call the passed in method on the tech and return the result unchanged
 * back to the player, through middleware, this time from right to left.
 */
function mediate(middleware, tech, method) {
  var arg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var callMethod = 'call' + toTitleCase(method);
  var middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);
  var terminated = middlewareValue === TERMINATOR;
  var returnValue = terminated ? null : tech[method](middlewareValue);

  executeRight(middleware, method, returnValue, terminated);

  return returnValue;
}

var allowedGetters = {
  buffered: 1,
  currentTime: 1,
  duration: 1,
  seekable: 1,
  played: 1,
  paused: 1
};

var allowedSetters = {
  setCurrentTime: 1
};

var allowedMediators = {
  play: 1,
  pause: 1
};

function middlewareIterator(method) {
  return function (value, mw) {
    // if the previous middleware terminated, pass along the termination
    if (value === TERMINATOR) {
      return TERMINATOR;
    }

    if (mw[method]) {
      return mw[method](value);
    }

    return value;
  };
}

function executeRight(mws, method, value, terminated) {
  for (var i = mws.length - 1; i >= 0; i--) {
    var mw = mws[i];

    if (mw[method]) {
      mw[method](terminated, value);
    }
  }
}

function clearCacheForPlayer(player) {
  middlewareInstances[player.id()] = null;
}

/**
 * {
 *  [playerId]: [[mwFactory, mwInstance], ...]
 * }
 */
function getOrCreateFactory(player, mwFactory) {
  var mws = middlewareInstances[player.id()];
  var mw = null;

  if (mws === undefined || mws === null) {
    mw = mwFactory(player);
    middlewareInstances[player.id()] = [[mwFactory, mw]];
    return mw;
  }

  for (var i = 0; i < mws.length; i++) {
    var _mws$i = mws[i],
        mwf = _mws$i[0],
        mwi = _mws$i[1];


    if (mwf !== mwFactory) {
      continue;
    }

    mw = mwi;
  }

  if (mw === null) {
    mw = mwFactory(player);
    mws.push([mwFactory, mw]);
  }

  return mw;
}

function setSourceHelper() {
  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var middleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var next = arguments[2];
  var player = arguments[3];
  var acc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var lastRun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var mwFactory = middleware[0],
      mwrest = middleware.slice(1);

  // if mwFactory is a string, then we're at a fork in the road

  if (typeof mwFactory === 'string') {
    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);

    // if we have an mwFactory, call it with the player to get the mw,
    // then call the mw's setSource method
  } else if (mwFactory) {
    var mw = getOrCreateFactory(player, mwFactory);

    // if setSource isn't present, implicitly select this middleware
    if (!mw.setSource) {
      acc.push(mw);
      return setSourceHelper(src, mwrest, next, player, acc, lastRun);
    }

    mw.setSource(assign({}, src), function (err, _src) {

      // something happened, try the next middleware on the current level
      // make sure to use the old src
      if (err) {
        return setSourceHelper(src, mwrest, next, player, acc, lastRun);
      }

      // we've succeeded, now we need to go deeper
      acc.push(mw);

      // if it's the same type, continue down the current chain
      // otherwise, we want to go down the new chain
      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);
    });
  } else if (mwrest.length) {
    setSourceHelper(src, mwrest, next, player, acc, lastRun);
  } else if (lastRun) {
    next(src, acc);
  } else {
    setSourceHelper(src, middlewares['*'], next, player, acc, true);
  }
}

/**
 * Mimetypes
 *
 * @see http://hul.harvard.edu/ois/////systems/wax/wax-public-help/mimetypes.htm
 * @typedef Mimetypes~Kind
 * @enum
 */
var MimetypesKind = {
  opus: 'video/ogg',
  ogv: 'video/ogg',
  mp4: 'video/mp4',
  mov: 'video/mp4',
  m4v: 'video/mp4',
  mkv: 'video/x-matroska',
  mp3: 'audio/mpeg',
  aac: 'audio/aac',
  oga: 'audio/ogg',
  m3u8: 'application/x-mpegURL'
};

/**
 * Get the mimetype of a given src url if possible
 *
 * @param {string} src
 *        The url to the src
 *
 * @return {string}
 *         return the mimetype if it was known or empty string otherwise
 */
var getMimetype = function getMimetype() {
  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var ext = getFileExtension(src);
  var mimetype = MimetypesKind[ext.toLowerCase()];

  return mimetype || '';
};

/**
 * Find the mime type of a given source string if possible. Uses the player
 * source cache.
 *
 * @param {Player} player
 *        The player object
 *
 * @param {string} src
 *        The source string
 *
 * @return {string}
 *         The type that was found
 */
var findMimetype = function findMimetype(player, src) {
  if (!src) {
    return '';
  }

  // 1. check for the type in the `source` cache
  if (player.cache_.source.src === src && player.cache_.source.type) {
    return player.cache_.source.type;
  }

  // 2. see if we have this source in our `currentSources` cache
  var matchingSources = player.cache_.sources.filter(function (s) {
    return s.src === src;
  });

  if (matchingSources.length) {
    return matchingSources[0].type;
  }

  // 3. look for the src url in source elements and use the type there
  var sources = player.$$('source');

  for (var i = 0; i < sources.length; i++) {
    var s = sources[i];

    if (s.type && s.src && s.src === src) {
      return s.type;
    }
  }

  // 4. finally fallback to our list of mime types based on src url extension
  return getMimetype(src);
};

/**
 * @module filter-source
 */

/**
 * Filter out single bad source objects or multiple source objects in an
 * array. Also flattens nested source object arrays into a 1 dimensional
 * array of source objects.
 *
 * @param {Tech~SourceObject|Tech~SourceObject[]} src
 *        The src object to filter
 *
 * @return {Tech~SourceObject[]}
 *         An array of sourceobjects containing only valid sources
 *
 * @private
 */
var filterSource = function filterSource(src) {
  // traverse array
  if (Array.isArray(src)) {
    var newsrc = [];

    src.forEach(function (srcobj) {
      srcobj = filterSource(srcobj);

      if (Array.isArray(srcobj)) {
        newsrc = newsrc.concat(srcobj);
      } else if (isObject(srcobj)) {
        newsrc.push(srcobj);
      }
    });

    src = newsrc;
  } else if (typeof src === 'string' && src.trim()) {
    // convert string into object
    src = [fixSource({ src: src })];
  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {
    // src is already valid
    src = [fixSource(src)];
  } else {
    // invalid source, turn it into an empty array
    src = [];
  }

  return src;
};

/**
 * Checks src mimetype, adding it when possible
 *
 * @param {Tech~SourceObject} src
 *        The src object to check
 * @return {Tech~SourceObject}
 *        src Object with known type
 */
function fixSource(src) {
  var mimetype = getMimetype(src.src);

  if (!src.type && mimetype) {
    src.type = mimetype;
  }

  return src;
}

/**
 * @file loader.js
 */

/**
 * The `MediaLoader` is the `Component` that decides which playback technology to load
 * when a player is initialized.
 *
 * @extends Component
 */

var MediaLoader = function (_Component) {
  inherits(MediaLoader, _Component);

  /**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function that is run when this component is ready.
   */
  function MediaLoader(player, options, ready) {
    classCallCheck(this, MediaLoader);

    // MediaLoader has no element
    var options_ = mergeOptions({ createEl: false }, options);

    // If there are no sources when the player is initialized,
    // load the first supported playback technology.

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_, ready));

    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
        var techName = toTitleCase(j[i]);
        var tech = Tech.getTech(techName);

        // Support old behavior of techs being registered as components.
        // Remove once that deprecated behavior is removed.
        if (!techName) {
          tech = Component.getComponent(techName);
        }

        // Check if the browser supports this technology
        if (tech && tech.isSupported()) {
          player.loadTech_(techName);
          break;
        }
      }
    } else {
      // Loop through playback technologies (HTML5, Flash) and check for support.
      // Then load the best source.
      // A few assumptions here:
      //   All playback technologies respect preload false.
      player.src(options.playerOptions.sources);
    }
    return _this;
  }

  return MediaLoader;
}(Component);

Component.registerComponent('MediaLoader', MediaLoader);

/**
 * @file clickable-component.js
 */

/**
 * Clickable Component which is clickable or keyboard actionable,
 * but is not a native HTML button.
 *
 * @extends Component
 */

var ClickableComponent = function (_Component) {
  inherits(ClickableComponent, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param  {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */
  function ClickableComponent(player, options) {
    classCallCheck(this, ClickableComponent);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.emitTapEvents();

    _this.enable();
    return _this;
  }

  /**
   * Create the `Component`s DOM element.
   *
   * @param {string} [tag=div]
   *        The element's node type.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */


  ClickableComponent.prototype.createEl = function createEl$$1() {
    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    props = assign({
      innerHTML: '<span aria-hidden="true" class="play-icon-placeholder"></span>',
      className: this.buildCSSClass(),
      tabIndex: 0
    }, props);

    if (tag === 'button') {
      log$1.error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
    }

    // Add ARIA attributes for clickable element which is not a native HTML button
    attributes = assign({
      role: 'button'
    }, attributes);

    this.tabIndex_ = props.tabIndex;

    var el = _Component.prototype.createEl.call(this, tag, props, attributes);

    this.createControlTextEl(el);

    return el;
  };

  /**
   * Function to dispose the event
   */


  ClickableComponent.prototype.dispose = function dispose() {
    // remove controlTextEl_ on dispose
    this.controlTextEl_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Create a control text element on this `Component`
   *
   * @param {Element} [el]
   *        Parent element for the control text.
   *
   * @return {Element}
   *         The control text element that gets created.
   */


  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
    this.controlTextEl_ = createEl('span', {
      className: 'play-control-text'
    }, {
      // let the screen reader user know that the text of the element may change
      'aria-live': 'polite'
    });

    if (el) {
      el.appendChild(this.controlTextEl_);
    }

    this.controlText(this.controlText_, el);

    return this.controlTextEl_;
  };

  /**
   * Get or set the localize text to use for the controls on the `Component`.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */


  ClickableComponent.prototype.controlText = function controlText(text) {
    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();

    if (text === undefined) {
      return this.controlText_ || 'Need Text';
    }

    var localizedText = this.localize(text);

    this.controlText_ = text;
    textContent(this.controlTextEl_, localizedText);
    if (!this.nonIconControl) {
      // Set title attribute if only an icon is shown
      el.setAttribute('title', localizedText);
    }
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-control play-button ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Enable this `Component`s element.
   */


  ClickableComponent.prototype.enable = function enable() {
    if (!this.enabled_) {
      this.enabled_ = true;
      this.removeClass('play-disabled');
      this.el_.setAttribute('aria-disabled', 'false');
      if (typeof this.tabIndex_ !== 'undefined') {
        this.el_.setAttribute('tabIndex', this.tabIndex_);
      }
      this.on(['tap', 'click'], this.handleClick);
      this.on('dblclick', this.handleDblClick);
      this.on('focus', this.handleFocus);
      this.on('blur', this.handleBlur);
    }
  };

  /**
   * Disable this `Component`s element.
   */


  ClickableComponent.prototype.disable = function disable() {
    this.enabled_ = false;
    this.addClass('play-disabled');
    this.el_.setAttribute('aria-disabled', 'true');
    if (typeof this.tabIndex_ !== 'undefined') {
      this.el_.removeAttribute('tabIndex');
    }
    this.off(['tap', 'click'], this.handleClick);
    this.off('focus', this.handleFocus);
    this.off('blur', this.handleBlur);
  };

  /**
   * This gets called when a `ClickableComponent` gets:
   * - Clicked (via the `click` event, listening starts in the constructor)
   * - Tapped (via the `tap` event, listening starts in the constructor)
   * - The following things happen in order:
   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the
   *      `ClickableComponent`.
   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using
   *      {@link ClickableComponent#handleKeyPress}.
   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses
   *      the space or enter key.
   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`
   *      event as a parameter.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   * @abstract
   */


  ClickableComponent.prototype.handleClick = function handleClick(event) {};

  /**
   * This gets called when a `ClickableComponent` gets:
   * - Clicked (via the `click` event, listening starts in the constructor)
   * - Tapped (via the `tap` event, listening starts in the constructor)
   * - The following things happen in order:
   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the
   *      `ClickableComponent`.
   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using
   *      {@link ClickableComponent#handleKeyPress}.
   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses
   *      the space or enter key.
   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`
   *      event as a parameter.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   * @abstract
   */


  ClickableComponent.prototype.handleDblClick = function handleDblClick(event) {};

  /**
   * This gets called when a `ClickableComponent` gains focus via a `focus` event.
   * Turns on listening for `keydown` events. When they happen it
   * calls `this.handleKeyPress`.
   *
   * @param {EventTarget~Event} event
   *        The `focus` event that caused this function to be called.
   *
   * @listens focus
   */


  ClickableComponent.prototype.handleFocus = function handleFocus(event) {
    on(document$1, 'keydown', bind(this, this.handleKeyPress));
  };

  /**
   * Called when this ClickableComponent has focus and a key gets pressed down. By
   * default it will call `this.handleClick` when the key is space or enter.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */


  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {

    // Support Space (32) or Enter (13) key operation to fire a click event
    if (event.which === 32 || event.which === 13) {
      event.preventDefault();
      this.trigger('click');
    } else if (_Component.prototype.handleKeyPress) {

      // Pass keypress handling up for unsupported keys
      _Component.prototype.handleKeyPress.call(this, event);
    }
  };

  /**
   * Called when a `ClickableComponent` loses focus. Turns off the listener for
   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
   *
   * @param {EventTarget~Event} event
   *        The `blur` event that caused this function to be called.
   *
   * @listens blur
   */


  ClickableComponent.prototype.handleBlur = function handleBlur(event) {
    off(document$1, 'keydown', bind(this, this.handleKeyPress));
  };

  return ClickableComponent;
}(Component);

Component.registerComponent('ClickableComponent', ClickableComponent);

/**
 * @file poster-image.js
 */

/**
 * A `ClickableComponent` that handles showing the poster image for the player.
 *
 * @extends ClickableComponent
 */

var PosterImage = function (_ClickableComponent) {
  inherits(PosterImage, _ClickableComponent);

  /**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function PosterImage(player, options) {
    classCallCheck(this, PosterImage);

    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

    _this.update();
    player.on('posterchange', bind(_this, _this.update));
    return _this;
  }

  /**
   * Clean up and dispose of the `PosterImage`.
   */


  PosterImage.prototype.dispose = function dispose() {
    this.player().off('posterchange', this.update);
    _ClickableComponent.prototype.dispose.call(this);
  };

  /**
   * Create the `PosterImage`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */


  PosterImage.prototype.createEl = function createEl$$1() {
    var el = createEl('div', {
      className: 'play-poster',

      // Don't want poster to be tabbable.
      tabIndex: -1
    });

    return el;
  };

  /**
   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
   *
   * @listens Player#posterchange
   *
   * @param {EventTarget~Event} [event]
   *        The `Player#posterchange` event that triggered this function.
   */


  PosterImage.prototype.update = function update(event) {
    var url = this.player().poster();

    this.setSrc(url);

    // If there's no poster source we should display:none on this component
    // so it's not still clickable or right-clickable
    if (url) {
      this.show();
    } else {
      this.hide();
    }
  };

  /**
   * Set the source of the `PosterImage` depending on the display method.
   *
   * @param {string} url
   *        The URL to the source for the `PosterImage`.
   */


  PosterImage.prototype.setSrc = function setSrc(url) {
    var backgroundImage = '';

    // Any falsy value should stay as an empty string, otherwise
    // this will throw an extra error
    if (url) {
      backgroundImage = 'url("' + url + '")';
    }

    this.el_.style.backgroundImage = backgroundImage;
  };

  /**
   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
   *
   * @listens tap
   * @listens click
   * @listens keydown
   *
   * @param {EventTarget~Event} event
   +        The `click`, `tap` or `keydown` event that caused this function to be called.
   */


  PosterImage.prototype.handleClick = function handleClick(event) {
    // We don't want a click to trigger playback when controls are disabled
    if (!this.player_.controls()) {
      return;
    }

    if (this.player_.paused()) {
      silencePromise(this.player_.play());
    } else {
      this.player_.pause();
    }
  };

  return PosterImage;
}(ClickableComponent);

Component.registerComponent('PosterImage', PosterImage);

/**
 * @file text-track-display.js
 */

var darkGray = '#222';
var lightGray = '#ccc';
var fontMap = {
  monospace: 'monospace',
  sansSerif: 'sans-serif',
  serif: 'serif',
  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
  monospaceSerif: '"Courier New", monospace',
  proportionalSansSerif: 'sans-serif',
  proportionalSerif: 'serif',
  casual: '"Comic Sans MS", Impact, fantasy',
  script: '"Monotype Corsiva", cursive',
  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
};

/**
 * Construct an rgba color from a given hex color code.
 *
 * @param {number} color
 *        Hex number for color, like #f0e or #f604e2.
 *
 * @param {number} opacity
 *        Value for opacity, 0.0 - 1.0.
 *
 * @return {string}
 *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
 */
function constructColor(color, opacity) {
  var hex = void 0;

  if (color.length === 4) {
    // color looks like "#f0e"
    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
  } else if (color.length === 7) {
    // color looks like "#f604e2"
    hex = color.slice(1);
  } else {
    throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');
  }
  return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';
}

/**
 * Try to update the style of a DOM element. Some style changes will throw an error,
 * particularly in IE8. Those should be noops.
 *
 * @param {Element} el
 *        The DOM element to be styled.
 *
 * @param {string} style
 *        The CSS property on the element that should be styled.
 *
 * @param {string} rule
 *        The style rule that should be applied to the property.
 *
 * @private
 */
function tryUpdateStyle(el, style, rule) {
  try {
    el.style[style] = rule;
  } catch (e) {

    // Satisfies linter.
    return;
  }
}

/**
 * The component for displaying text track cues.
 *
 * @extends Component
 */

var TextTrackDisplay = function (_Component) {
  inherits(TextTrackDisplay, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when `TextTrackDisplay` is ready.
   */
  function TextTrackDisplay(player, options, ready) {
    classCallCheck(this, TextTrackDisplay);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options, ready));

    player.on('loadstart', bind(_this, _this.toggleDisplay));
    player.on('texttrackchange', bind(_this, _this.updateDisplay));
    player.on('loadstart', bind(_this, _this.preselectTrack));

    // This used to be called during player init, but was causing an error
    // if a track should show by default and the display hadn't loaded yet.
    // Should probably be moved to an external track loader when we support
    // tracks that don't need a display.
    player.ready(bind(_this, function () {
      if (player.tech_ && player.tech_.featuresNativeTextTracks) {
        this.hide();
        return;
      }

      player.on('fullscreenchange', bind(this, this.updateDisplay));

      var tracks = this.options_.playerOptions.tracks || [];

      for (var i = 0; i < tracks.length; i++) {
        this.player_.addRemoteTextTrack(tracks[i], true);
      }

      this.preselectTrack();
    }));
    return _this;
  }

  /**
  * Preselect a track following this precedence:
  * - matches the previously selected {@link TextTrack}'s language and kind
  * - matches the previously selected {@link TextTrack}'s language only
  * - is the first default captions track
  * - is the first default descriptions track
  *
  * @listens Player#loadstart
  */


  TextTrackDisplay.prototype.preselectTrack = function preselectTrack() {
    var modes = { captions: 1, subtitles: 1 };
    var trackList = this.player_.textTracks();
    var userPref = this.player_.cache_.selectedLanguage;
    var firstDesc = void 0;
    var firstCaptions = void 0;
    var preferredTrack = void 0;

    for (var i = 0; i < trackList.length; i++) {
      var track = trackList[i];

      if (userPref && userPref.enabled && userPref.language === track.language) {
        // Always choose the track that matches both language and kind
        if (track.kind === userPref.kind) {
          preferredTrack = track;
          // or choose the first track that matches language
        } else if (!preferredTrack) {
          preferredTrack = track;
        }

        // clear everything if offTextTrackMenuItem was clicked
      } else if (userPref && !userPref.enabled) {
        preferredTrack = null;
        firstDesc = null;
        firstCaptions = null;
      } else if (track.default) {
        if (track.kind === 'descriptions' && !firstDesc) {
          firstDesc = track;
        } else if (track.kind in modes && !firstCaptions) {
          firstCaptions = track;
        }
      }
    }

    // The preferredTrack matches the user preference and takes
    // precedence over all the other tracks.
    // So, display the preferredTrack before the first default track
    // and the subtitles/captions track before the descriptions track
    if (preferredTrack) {
      preferredTrack.mode = 'showing';
    } else if (firstCaptions) {
      firstCaptions.mode = 'showing';
    } else if (firstDesc) {
      firstDesc.mode = 'showing';
    }
  };

  /**
   * Turn display of {@link TextTrack}'s from the current state into the other state.
   * There are only two states:
   * - 'shown'
   * - 'hidden'
   *
   * @listens Player#loadstart
   */


  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
      this.hide();
    } else {
      this.show();
    }
  };

  /**
   * Create the {@link Component}'s DOM element.
   *
   * @return {Element}
   *         The element that was created.
   */


  TextTrackDisplay.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'play-text-track-display'
    }, {
      'aria-live': 'off',
      'aria-atomic': 'true'
    });
  };

  /**
   * Clear all displayed {@link TextTrack}s.
   */


  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
    if (typeof window$1.WebVTT === 'function') {
      window$1.WebVTT.processCues(window$1, [], this.el_);
    }
  };

  /**
   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
   * a {@link Player#fullscreenchange} is fired.
   *
   * @listens Player#texttrackchange
   * @listens Player#fullscreenchange
   */


  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
    var tracks = this.player_.textTracks();

    this.clearDisplay();

    // Track display prioritization model: if multiple tracks are 'showing',
    //  display the first 'subtitles' or 'captions' track which is 'showing',
    //  otherwise display the first 'descriptions' track which is 'showing'

    var descriptionsTrack = null;
    var captionsSubtitlesTrack = null;
    var i = tracks.length;

    while (i--) {
      var track = tracks[i];

      if (track.mode === 'showing') {
        if (track.kind === 'descriptions') {
          descriptionsTrack = track;
        } else {
          captionsSubtitlesTrack = track;
        }
      }
    }

    if (captionsSubtitlesTrack) {
      if (this.getAttribute('aria-live') !== 'off') {
        this.setAttribute('aria-live', 'off');
      }
      this.updateForTrack(captionsSubtitlesTrack);
    } else if (descriptionsTrack) {
      if (this.getAttribute('aria-live') !== 'assertive') {
        this.setAttribute('aria-live', 'assertive');
      }
      this.updateForTrack(descriptionsTrack);
    }
  };

  /**
   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.
   *
   * @param {TextTrack} track
   *        Text track object to be added to the list.
   */


  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
    if (typeof window$1.WebVTT !== 'function' || !track.activeCues) {
      return;
    }

    var cues = [];

    for (var _i = 0; _i < track.activeCues.length; _i++) {
      cues.push(track.activeCues[_i]);
    }

    window$1.WebVTT.processCues(window$1, cues, this.el_);

    if (!this.player_.textTrackSettings) {
      return;
    }

    var overrides = this.player_.textTrackSettings.getValues();

    var i = cues.length;

    while (i--) {
      var cue = cues[i];

      if (!cue) {
        continue;
      }

      var cueDiv = cue.displayState;

      if (overrides.color) {
        cueDiv.firstChild.style.color = overrides.color;
      }
      if (overrides.textOpacity) {
        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
      }
      if (overrides.backgroundColor) {
        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
      }
      if (overrides.backgroundOpacity) {
        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
      }
      if (overrides.windowColor) {
        if (overrides.windowOpacity) {
          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
        } else {
          cueDiv.style.backgroundColor = overrides.windowColor;
        }
      }
      if (overrides.edgeStyle) {
        if (overrides.edgeStyle === 'dropshadow') {
          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
        } else if (overrides.edgeStyle === 'raised') {
          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
        } else if (overrides.edgeStyle === 'depressed') {
          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
        } else if (overrides.edgeStyle === 'uniform') {
          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
        }
      }
      if (overrides.fontPercent && overrides.fontPercent !== 1) {
        var fontSize = window$1.parseFloat(cueDiv.style.fontSize);

        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
        cueDiv.style.height = 'auto';
        cueDiv.style.top = 'auto';
        cueDiv.style.bottom = '2px';
      }
      if (overrides.fontFamily && overrides.fontFamily !== 'default') {
        if (overrides.fontFamily === 'small-caps') {
          cueDiv.firstChild.style.fontVariant = 'small-caps';
        } else {
          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
        }
      }
    }
  };

  return TextTrackDisplay;
}(Component);

Component.registerComponent('TextTrackDisplay', TextTrackDisplay);

/**
 * @file loading-spinner.js
 */

/**
 * A loading spinner for use during waiting/loading events.
 *
 * @extends Component
 */

var LoadingSpinner = function (_Component) {
  inherits(LoadingSpinner, _Component);

  function LoadingSpinner() {
    classCallCheck(this, LoadingSpinner);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Create the `LoadingSpinner`s DOM element.
   *
   * @return {Element}
   *         The dom element that gets created.
   */
  LoadingSpinner.prototype.createEl = function createEl$$1() {
    var isAudio = this.player_.isAudio();
    var playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');
    var controlText = createEl('span', {
      className: 'play-control-text',
      innerHTML: this.localize('{1} is loading.', [playerType])
    });

    var el = _Component.prototype.createEl.call(this, 'div', {
      className: 'play-loading-spinner',
      dir: 'ltr'
    });

    el.appendChild(controlText);

    return el;
  };

  return LoadingSpinner;
}(Component);

Component.registerComponent('LoadingSpinner', LoadingSpinner);

/**
 * @file button.js
 */

/**
 * Base class for all buttons.
 *
 * @extends ClickableComponent
 */

var Button = function (_ClickableComponent) {
  inherits(Button, _ClickableComponent);

  function Button() {
    classCallCheck(this, Button);
    return possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));
  }

  /**
   * Create the `Button`s DOM element.
   *
   * @param {string} [tag="button"]
   *        The element's node type. This argument is IGNORED: no matter what
   *        is passed, it will always create a `button` element.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */
  Button.prototype.createEl = function createEl(tag) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    tag = 'button';

    props = assign({
      innerHTML: '<span aria-hidden="true" class="play-icon-placeholder"></span>',
      className: this.buildCSSClass()
    }, props);

    // Add attributes for button element
    attributes = assign({

      // Necessary since the default button type is "submit"
      type: 'button'
    }, attributes);

    var el = Component.prototype.createEl.call(this, tag, props, attributes);

    this.createControlTextEl(el);

    return el;
  };

  /**
   * Add a child `Component` inside of this `Button`.
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   *
   * @deprecated since version 5
   */


  Button.prototype.addChild = function addChild(child) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var className = this.constructor.name;

    log$1.warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');

    // Avoid the error message generated by ClickableComponent's addChild method
    return Component.prototype.addChild.call(this, child, options);
  };

  /**
   * Enable the `Button` element so that it can be activated or clicked. Use this with
   * {@link Button#disable}.
   */


  Button.prototype.enable = function enable() {
    _ClickableComponent.prototype.enable.call(this);
    this.el_.removeAttribute('disabled');
  };

  /**
   * Disable the `Button` element so that it cannot be activated or clicked. Use this with
   * {@link Button#enable}.
   */


  Button.prototype.disable = function disable() {
    _ClickableComponent.prototype.disable.call(this);
    this.el_.setAttribute('disabled', 'disabled');
  };

  /**
   * This gets called when a `Button` has focus and `keydown` is triggered via a key
   * press.
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to get called.
   *
   * @listens keydown
   */


  Button.prototype.handleKeyPress = function handleKeyPress(event) {
    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
    if (event.which === 13) {
      return;
    } else if (event.which === 32) {
      event.preventDefault();
      event.stopPropagation();
      if (this.player_.paused()) {
        this.player_.play();
      } else {
        this.player_.pause();
      }
      return;
    }

    // Pass keypress handling up for unsupported keys
    _ClickableComponent.prototype.handleKeyPress.call(this, event);
  };

  return Button;
}(ClickableComponent);

Component.registerComponent('Button', Button);

/**
 * @file big-play-button.js
 */

/**
 * The initial play button that shows before the video has played. The hiding of the
 * `BigPlayButton` get done via CSS and `Player` states.
 *
 * @extends Button
 */

var BigPlayButton = function (_Button) {
  inherits(BigPlayButton, _Button);

  /**
   * QualityLevelList constructor
   *
   * @param {Object} player player object for the videojs
   * @param {Object} options default options for the videojs
   */
  function BigPlayButton(player, options) {
    classCallCheck(this, BigPlayButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.mouseused_ = false;
    _this.on('mousedown', _this.handleMouseDown);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object. Always returns 'play-big-play-button'.
   */


  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-big-play-button';
  };

  /**
   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  BigPlayButton.prototype.handleClick = function handleClick(event) {
    var playPromise = this.player_.play();

    // exit early if clicked via the mouse
    if (this.mouseused_ && event.clientX && event.clientY) {
      silencePromise(playPromise);
      return;
    }

    var cb = this.player_.getChild('controlBar');
    var playToggle = cb && cb.getChild('playToggle');

    if (!playToggle) {
      this.player_.focus();
      return;
    }

    var playFocus = function playFocus() {
      return playToggle.focus();
    };

    if (isPromise(playPromise)) {
      playPromise.then(playFocus, function () {});
    } else {
      this.setTimeout(playFocus, 1);
    }
  };

  /**
   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  BigPlayButton.prototype.handleDblClick = function handleDblClick(event) {
    if (this.player_.isFullscreen()) {
      this.player_.exitFullscreen();
    } else {
      this.player_.requestFullscreen();
    }
  };

  /**
   * Handle press key event
   *
   * @param {Object} event event object of the key press.
   */


  BigPlayButton.prototype.handleKeyPress = function handleKeyPress(event) {
    this.mouseused_ = false;

    _Button.prototype.handleKeyPress.call(this, event);
  };

  /**
   * Handle mouse down event
   *
   * @param {Object} event event object of the key press.
   */


  BigPlayButton.prototype.handleMouseDown = function handleMouseDown(event) {
    this.mouseused_ = true;
  };

  return BigPlayButton;
}(Button);

Component.registerComponent('BigPlayButton', BigPlayButton);

/**
 * @file close-button.js
 */

/**
 * The `CloseButton` is a `{@link Button}` that fires a `close` event when
 * it gets clicked.
 *
 * @extends Button
 */

var CloseButton = function (_Button) {
  inherits(CloseButton, _Button);

  /**
   * Creates an instance of the this class.
   *
   * @param  {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */
  function CloseButton(player, options) {
    classCallCheck(this, CloseButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.controlText(options && options.controlText || _this.localize('Close'));
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  CloseButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-close-button ' + _Button.prototype.buildCSSClass.call(this);
  };

  /**
   * This gets called when a `CloseButton` gets clicked. See
   * {@link ClickableComponent#handleClick} for more information on when this will be
   * triggered
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   * @fires CloseButton#close
   */


  CloseButton.prototype.handleClick = function handleClick(event) {
    this.player_.trigger('modelClose');
    /**
     * Triggered when the a `CloseButton` is clicked.
     *
     * @event CloseButton#close
     * @type {EventTarget~Event}
     *
     * @property {boolean} [bubbles=false]
     *           set to false so that the close event does not
     *           bubble up to parents if there is no listener
     */
    this.trigger({ type: 'close', bubbles: false });
  };

  return CloseButton;
}(Button);

Component.registerComponent('CloseButton', CloseButton);

/**
 * @file format-time.js
 * @module format-time
 */

/**
* Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)
* will force a number of leading zeros to cover the length of the guide.
*
* @param {number} seconds
*        Number of seconds to be turned into a string
*
* @param {number} guide
*        Number (in seconds) to model the string after
*
* @return {string}
*         Time formatted as H:MM:SS or M:SS
*/
var defaultImplementation = function defaultImplementation(seconds, guide) {
  seconds = seconds < 0 ? 0 : seconds;
  var s = Math.floor(seconds % 60);
  var m = Math.floor(seconds / 60 % 60);
  var h = Math.floor(seconds / 3600);
  var gm = Math.floor(guide / 60 % 60);
  var gh = Math.floor(guide / 3600);

  // handle invalid times
  if (seconds === Infinity) {
    // Online
    return ' ';
  }

  if (isNaN(seconds) || seconds === Infinity) {
    // '-' is false for all relational operators (e.g. <, >=) so this setting
    // will add the minimum number of fields specified by the guide
    h = m = s = '-';
  }

  // Check if we need to show hours
  h = h > 0 || gh > 0 ? h + ':' : '';

  // If hours are showing, we may need to add a leading zero.
  // Always show at least one digit of minutes.
  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

  // Check if leading zero is need for seconds
  s = s < 10 ? '0' + s : s;

  if (h === '-:' && m === '-:' && s === '-') {
    return '';
  } else {
    return h + m + s;
  }

  // return h + m + s;
};

var implementation = defaultImplementation;

/**
 * Replaces the default formatTime implementation with a custom implementation.
 *
 * @param {Function} customImplementation
 * A function which will be used in place of the default formatTime implementation.
 * Will receive the current time in seconds and the guide (in seconds) as arguments.
 */
function setFormatTime(customImplementation) {
  implementation = customImplementation;
}

/**
 * Resets formatTime to the default implementation.
 */
function resetFormatTime() {
  implementation = defaultImplementation;
}

/**
 * export default function
 *
 * @param {number} seconds get the seconds of the time
 * @param {number} guide get the seconds of the time
 * @return {Object} returns the formated time
 */
function formatTime (seconds) {
  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;

  return implementation(seconds, guide);
}

/**
 * @file time-display.js
 */

/**
 * Displays the time left in the video
 *
 * @extends Component
 */

var TimeDisplay = function (_Component) {
  inherits(TimeDisplay, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function TimeDisplay(player, options) {
    classCallCheck(this, TimeDisplay);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);
    _this.on(player, 'timeupdate', _this.throttledUpdateContent);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  TimeDisplay.prototype.createEl = function createEl$$1(plainName) {
    var className = this.buildCSSClass();

    var el = _Component.prototype.createEl.call(this, 'div', {
      className: className + ' play-time-control play-control',
      innerHTML: '<span class="play-control-text">' + this.localize(this.labelText_) + '\xA0</span>'
    });

    this.contentEl_ = createEl('span', {
      className: className + '-display'
    }, {
      // tell screen readers not to automatically read the time as it changes
      'aria-live': 'off'
    });

    this.updateTextNode_();
    el.appendChild(this.contentEl_);
    return el;
  };

  TimeDisplay.prototype.dispose = function dispose() {
    this.contentEl_ = null;
    this.textNode_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Updates the "remaining time" text node with new content using the
   * contents of the `formattedTime_` property.
   *
   * @private
   */


  TimeDisplay.prototype.updateTextNode_ = function updateTextNode_() {
    if (!this.contentEl_) {
      return;
    }

    while (this.contentEl_.firstChild) {
      this.contentEl_.removeChild(this.contentEl_.firstChild);
    }

    this.textNode_ = document$1.createTextNode(this.formattedTime_ || this.formatTime_(0));
    this.contentEl_.appendChild(this.textNode_);
  };

  /**
   * Generates a formatted time for this component to use in display.
   *
   * @param  {number} time
   *         A numeric time, in seconds.
   *
   * @return {string}
   *         A formatted time
   *
   * @private
   */


  TimeDisplay.prototype.formatTime_ = function formatTime_(time) {
    return formatTime(time);
  };

  /**
   * Updates the time display text node if it has what was passed in changed
   * the formatted time.
   *
   * @param {number} time
   *        The time to update to
   *
   * @private
   */


  TimeDisplay.prototype.updateFormattedTime_ = function updateFormattedTime_(time) {
    var formattedTime = this.formatTime_(time);

    if (formattedTime === this.formattedTime_) {
      return;
    }

    this.formattedTime_ = formattedTime;
    this.requestAnimationFrame(this.updateTextNode_);
  };

  /**
   * To be filled out in the child class, should update the displayed time
   * in accordance with the fact that the current time has changed.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate`  event that caused this to run.
   *
   * @listens Player#timeupdate
   */


  TimeDisplay.prototype.updateContent = function updateContent(event) {};

  return TimeDisplay;
}(Component);

/**
 * The text that is added to the `TimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */


TimeDisplay.prototype.labelText_ = 'Time';

/**
 * The text that should display over the `TimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */
TimeDisplay.prototype.controlText_ = 'Time';

Component.registerComponent('TimeDisplay', TimeDisplay);

/**
 * @file current-time-display.js
 */

/**
 * Displays the current time
 *
 * @extends Component
 */

var CurrentTimeDisplay = function (_TimeDisplay) {
  inherits(CurrentTimeDisplay, _TimeDisplay);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function CurrentTimeDisplay(player, options) {
    classCallCheck(this, CurrentTimeDisplay);

    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

    _this.on(player, 'ended', _this.handleEnded);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  CurrentTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-current-time';
  };

  /**
   * Update current time display
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` event that caused this function to run.
   *
   * @listens Player#timeupdate
   */


  CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {
    // Allows for smooth scrubbing, when player can't keep up.
    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();

    this.updateFormattedTime_(time);
  };

  /**
   * When the player fires ended there should be no time left. Sadly
   * this is not always the case, lets make it seem like that is the case
   * for users.
   *
   * @param {EventTarget~Event} [event]
   *        The `ended` event that caused this to run.
   *
   * @listens Player#ended
   */


  CurrentTimeDisplay.prototype.handleEnded = function handleEnded(event) {
    if (!this.player_.duration()) {
      return;
    }
    this.updateFormattedTime_(this.player_.duration());
  };

  return CurrentTimeDisplay;
}(TimeDisplay);

/**
 * The text that is added to the `CurrentTimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */


CurrentTimeDisplay.prototype.labelText_ = 'Current Time';

/**
 * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */
CurrentTimeDisplay.prototype.controlText_ = 'Current Time';

Component.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);

/**
 * @file duration-display.js
 */

/**
 * Displays the duration
 *
 * @extends Component
 */

var DurationDisplay = function (_TimeDisplay) {
  inherits(DurationDisplay, _TimeDisplay);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function DurationDisplay(player, options) {
    classCallCheck(this, DurationDisplay);

    // we do not want to/need to throttle duration changes,
    // as they should always display the changed duration as
    // it has changed
    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

    _this.on(player, 'durationchange', _this.updateContent);

    // Also listen for timeupdate (in the parent) and loadedmetadata because removing those
    // listeners could have broken dependent applications/libraries. These
    // can likely be removed for 7.0.
    _this.on(player, 'loadedmetadata', _this.throttledUpdateContent);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  DurationDisplay.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-duration';
  };

  /**
   * Update duration time display.
   *
   * @param {EventTarget~Event} [event]
   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
   *        this function to be called.
   *
   * @listens Player#durationchange
   * @listens Player#timeupdate
   * @listens Player#loadedmetadata
   */


  DurationDisplay.prototype.updateContent = function updateContent(event) {
    var duration = this.player_.duration();

    if (duration && this.duration_ !== duration) {
      this.duration_ = duration;
      this.updateFormattedTime_(duration);
    }
  };

  return DurationDisplay;
}(TimeDisplay);

/**
 * The text that is added to the `DurationDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */


DurationDisplay.prototype.labelText_ = 'Duration';

/**
 * The text that should display over the `DurationDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */
DurationDisplay.prototype.controlText_ = 'Duration';

Component.registerComponent('DurationDisplay', DurationDisplay);

/**
 * @file time-divider.js
 */

/**
 * The separator between the current time and duration.
 * Can be hidden if it's not needed in the design.
 *
 * @extends Component
 */

var TimeDivider = function (_Component) {
  inherits(TimeDivider, _Component);

  function TimeDivider() {
    classCallCheck(this, TimeDivider);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Create the component's DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  TimeDivider.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'play-time-control play-time-divider',
      innerHTML: '<div><span>/</span></div>'
    });
  };

  return TimeDivider;
}(Component);

Component.registerComponent('TimeDivider', TimeDivider);

/**
 * @file remaining-time-display.js
 */
/**
 * Displays the time left in the video
 *
 * @extends Component
 */

var RemainingTimeDisplay = function (_TimeDisplay) {
  inherits(RemainingTimeDisplay, _TimeDisplay);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function RemainingTimeDisplay(player, options) {
    classCallCheck(this, RemainingTimeDisplay);

    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

    _this.on(player, 'durationchange', _this.throttledUpdateContent);
    _this.on(player, 'ended', _this.handleEnded);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  RemainingTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-remaining-time';
  };

  /**
   * The remaining time display prefixes numbers with a "minus" character.
   *
   * @param  {number} time
   *         A numeric time, in seconds.
   *
   * @return {string}
   *         A formatted time
   *
   * @private
   */


  RemainingTimeDisplay.prototype.formatTime_ = function formatTime_(time) {
    // TODO: The "-" should be decorative, and not announced by a screen reader
    return '-' + _TimeDisplay.prototype.formatTime_.call(this, time);
  };

  /**
   * Update remaining time display.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` or `durationchange` event that caused this to run.
   *
   * @listens Player#timeupdate
   * @listens Player#durationchange
   */


  RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {
    if (!this.player_.duration()) {
      return;
    }

    // @deprecated We should only use remainingTimeDisplay
    // as of video.js 7
    if (this.player_.remainingTimeDisplay) {
      this.updateFormattedTime_(this.player_.remainingTimeDisplay());
    } else {
      this.updateFormattedTime_(this.player_.remainingTime());
    }
  };

  /**
   * When the player fires ended there should be no time left. Sadly
   * this is not always the case, lets make it seem like that is the case
   * for users.
   *
   * @param {EventTarget~Event} [event]
   *        The `ended` event that caused this to run.
   *
   * @listens Player#ended
   */


  RemainingTimeDisplay.prototype.handleEnded = function handleEnded(event) {
    if (!this.player_.duration()) {
      return;
    }
    this.updateFormattedTime_(0);
  };

  return RemainingTimeDisplay;
}(TimeDisplay);

/**
 * The text that is added to the `RemainingTimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */


RemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';

/**
 * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */
RemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';

Component.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);

/**
 * @file live-display.js
 */

// TODO - Future make it click to snap to live

/**
 * Displays the live indicator when duration is Infinity.
 *
 * @extends Component
 */

var LiveDisplay = function (_Component) {
  inherits(LiveDisplay, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function LiveDisplay(player, options) {
    classCallCheck(this, LiveDisplay);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.updateShowing();
    _this.on(_this.player(), 'durationchange', _this.updateShowing);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  LiveDisplay.prototype.createEl = function createEl$$1() {
    var el = _Component.prototype.createEl.call(this, 'div', {
      className: 'play-live-control play-control'
    });

    this.contentEl_ = createEl('div', {
      className: 'play-live-display',
      innerHTML: '<span class="play-control-text">' + this.localize('Stream Type') + '\xA0</span>' + this.localize('LIVE')
    }, {
      'aria-live': 'off'
    });

    el.appendChild(this.contentEl_);
    return el;
  };

  LiveDisplay.prototype.dispose = function dispose() {
    this.contentEl_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
   * it accordingly
   *
   * @param {EventTarget~Event} [event]
   *        The {@link Player#durationchange} event that caused this function to run.
   *
   * @listens Player#durationchange
   */


  LiveDisplay.prototype.updateShowing = function updateShowing(event) {
    if (this.player().duration() === Infinity) {
      this.show();
    } else {
      this.hide();
    }
  };

  return LiveDisplay;
}(Component);

Component.registerComponent('LiveDisplay', LiveDisplay);

/**
 * @file slider.js
 */

/**
 * The base functionality for a slider. Can be vertical or horizontal.
 * For instance the volume bar or the seek bar on a video is a slider.
 *
 * @extends Component
 */

var Slider = function (_Component) {
  inherits(Slider, _Component);

  /**
   * Create an instance of this class
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function Slider(player, options) {
    classCallCheck(this, Slider);

    // Set property names to bar to match with the child Slider class is looking for
    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.bar = _this.getChild(_this.options_.barName);

    // Set a horizontal or vertical class on the slider depending on the slider type
    _this.vertical(!!_this.options_.vertical);

    _this.enable();
    return _this;
  }

  /**
   * Are controls are currently enabled for this slider or not.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */


  Slider.prototype.enabled = function enabled() {
    return this.enabled_;
  };

  /**
   * Enable controls for this slider if they are disabled
   */


  Slider.prototype.enable = function enable() {
    if (this.enabled()) {
      return;
    }

    this.on('mousedown', this.handleMouseDown);
    this.on('touchstart', this.handleMouseDown);
    this.on('focus', this.handleFocus);
    this.on('blur', this.handleBlur);
    this.on('click', this.handleClick);

    this.on(this.player_, 'controlsvisible', this.update);

    if (this.playerEvent) {
      this.on(this.player_, this.playerEvent, this.update);
    }

    this.removeClass('disabled');
    this.setAttribute('tabindex', 0);

    this.enabled_ = true;
  };

  /**
   * Disable controls for this slider if they are enabled
   */


  Slider.prototype.disable = function disable() {
    if (!this.enabled()) {
      return;
    }
    var doc = this.bar.el_.ownerDocument;

    this.off('mousedown', this.handleMouseDown);
    this.off('touchstart', this.handleMouseDown);
    this.off('focus', this.handleFocus);
    this.off('blur', this.handleBlur);
    this.off('click', this.handleClick);
    this.off(this.player_, 'controlsvisible', this.update);
    this.off(doc, 'mousemove', this.handleMouseMove);
    this.off(doc, 'mouseup', this.handleMouseUp);
    this.off(doc, 'touchmove', this.handleMouseMove);
    this.off(doc, 'touchend', this.handleMouseUp);
    this.removeAttribute('tabindex');

    this.addClass('disabled');

    if (this.playerEvent) {
      this.off(this.player_, this.playerEvent, this.update);
    }
    this.enabled_ = false;
  };

  /**
   * Create the `Slider`s DOM element.
   *
   * @param {string} type
   *        Type of element to create.
   *
   * @param {Object} [props={}]
   *        List of properties in Object form.
   *
   * @param {Object} [attributes={}]
   *        list of attributes in Object form.
   *
   * @return {Element}
   *         The element that gets created.
   */


  Slider.prototype.createEl = function createEl$$1(type) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // Add the slider element class to all sub classes
    props.className = props.className + ' play-slider';
    props = assign({
      tabIndex: 0
    }, props);

    attributes = assign({
      'role': 'slider',
      'aria-valuenow': 0,
      'aria-valuemin': 0,
      'aria-valuemax': 100,
      'tabIndex': 0
    }, attributes);

    return _Component.prototype.createEl.call(this, type, props, attributes);
  };

  /**
   * Handle `mousedown` or `touchstart` events on the `Slider`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   * @fires Slider#slideractive
   */


  Slider.prototype.handleMouseDown = function handleMouseDown(event) {
    var doc = this.bar.el_.ownerDocument;

    if (event.type === 'mousedown') {
      event.preventDefault();
    }
    // Do not call preventDefault() on touchstart in Chrome
    // to avoid console warnings. Use a 'touch-action: none' style
    // instead to prevent unintented scrolling.
    // https://developers.google.com/web/updates/2017/01/scrolling-intervention
    if (event.type === 'touchstart' && !IS_CHROME) {
      event.preventDefault();
    }
    blockTextSelection();

    this.addClass('play-sliding');
    /**
     * Triggered when the slider is in an active state
     *
     * @event Slider#slideractive
     * @type {EventTarget~Event}
     */
    this.trigger('slideractive');

    this.on(doc, 'mousemove', this.handleMouseMove);
    this.on(doc, 'mouseup', this.handleMouseUp);
    this.on(doc, 'touchmove', this.handleMouseMove);
    this.on(doc, 'touchend', this.handleMouseUp);

    this.handleMouseMove(event);
  };

  /**
   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
   * The `mousemove` and `touchmove` events will only only trigger this function during
   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
   * {@link Slider#handleMouseUp}.
   *
   * @param {EventTarget~Event} event
   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
   *        this function
   *
   * @listens mousemove
   * @listens touchmove
   */


  Slider.prototype.handleMouseMove = function handleMouseMove(event) {};

  /**
   * Handle `mouseup` or `touchend` events on the `Slider`.
   *
   * @param {EventTarget~Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   * @fires Slider#sliderinactive
   */


  Slider.prototype.handleMouseUp = function handleMouseUp() {
    var doc = this.bar.el_.ownerDocument;

    unblockTextSelection();

    this.removeClass('play-sliding');
    /**
     * Triggered when the slider is no longer in an active state.
     *
     * @event Slider#sliderinactive
     * @type {EventTarget~Event}
     */
    this.trigger('sliderinactive');

    this.off(doc, 'mousemove', this.handleMouseMove);
    this.off(doc, 'mouseup', this.handleMouseUp);
    this.off(doc, 'touchmove', this.handleMouseMove);
    this.off(doc, 'touchend', this.handleMouseUp);

    this.update();
  };

  /**
   * Update the progress bar of the `Slider`.
   *
   * @returns {number}
   *          The percentage of progress the progress bar represents as a
   *          number from 0 to 1.
   */


  Slider.prototype.update = function update() {

    // In VolumeBar init we have a setTimeout for update that pops and update
    // to the end of the execution stack. The player is destroyed before then
    // update will cause an error
    if (!this.el_) {
      return;
    }

    // If scrubbing, we could use a cached value to make the handle keep up
    // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but
    // some flash players are slow, so we might want to utilize this later.
    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
    var progress = this.getPercent();
    var bar = this.bar;

    // If there's no bar...
    if (!bar) {
      return;
    }

    // Protect against no duration and other division issues
    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
      progress = 0;
    }

    // Convert to a percentage for setting
    var percentage = (progress * 100).toFixed(2) + '%';
    var style = bar.el().style;

    // Set the new bar width or height
    if (this.vertical()) {
      style.height = percentage;
    } else {
      style.width = percentage;
    }

    return progress;
  };

  /**
   * Calculate distance for slider
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run.
   *
   * @return {number}
   *         The current position of the Slider.
   *         - position.x for vertical `Slider`s
   *         - position.y for horizontal `Slider`s
   */


  Slider.prototype.calculateDistance = function calculateDistance(event) {
    var position = getPointerPosition(this.el_, event);

    if (this.vertical()) {
      return position.y;
    }
    return position.x;
  };

  /**
   * Handle a `focus` event on this `Slider`.
   *
   * @param {EventTarget~Event} event
   *        The `focus` event that caused this function to run.
   *
   * @listens focus
   */


  Slider.prototype.handleFocus = function handleFocus() {
    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
  };

  /**
   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down
   * arrow keys. This function will only be called when the slider has focus. See
   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
   *
   * @param {EventTarget~Event} event
   *        the `keydown` event that caused this function to run.
   *
   * @listens keydown
   */


  Slider.prototype.handleKeyPress = function handleKeyPress(event) {
    // Left and Down Arrows
    if (event.which === 37 || event.which === 40) {
      event.preventDefault();
      this.stepBack();

      // Up and Right Arrows
    } else if (event.which === 38 || event.which === 39) {
      event.preventDefault();
      this.stepForward();
    }
  };

  /**
   * Handle a `blur` event on this `Slider`.
   *
   * @param {EventTarget~Event} event
   *        The `blur` event that caused this function to run.
   *
   * @listens blur
   */

  Slider.prototype.handleBlur = function handleBlur() {
    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
  };

  /**
   * Listener for click events on slider, used to prevent clicks
   *   from bubbling up to parent elements like button menus.
   *
   * @param {Object} event
   *        Event that caused this object to run
   */


  Slider.prototype.handleClick = function handleClick(event) {
    event.stopImmediatePropagation();
    event.preventDefault();
  };

  /**
   * Get/set if slider is horizontal for vertical
   *
   * @param {boolean} [bool]
   *        - true if slider is vertical,
   *        - false is horizontal
   *
   * @return {boolean}
   *         - true if slider is vertical, and getting
   *         - false if the slider is horizontal, and getting
   */


  Slider.prototype.vertical = function vertical(bool) {
    if (bool === undefined) {
      return this.vertical_ || false;
    }

    this.vertical_ = !!bool;

    if (this.vertical_) {
      this.addClass('play-slider-vertical');
    } else {
      this.addClass('play-slider-horizontal');
    }
  };

  return Slider;
}(Component);

Component.registerComponent('Slider', Slider);

/**
 * @file load-progress-bar.js
 */

/**
 * Shows loading progress
 *
 * @extends Component
 */

var LoadProgressBar = function (_Component) {
  inherits(LoadProgressBar, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function LoadProgressBar(player, options) {
    classCallCheck(this, LoadProgressBar);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.partEls_ = [];
    _this.on(player, 'progress', _this.update);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  LoadProgressBar.prototype.createEl = function createEl$$1() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'play-load-progress',
      innerHTML: '<span class="play-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
    });
  };

  LoadProgressBar.prototype.dispose = function dispose() {
    this.partEls_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Update progress bar
   *
   * @param {EventTarget~Event} [event]
   *        The `progress` event that caused this function to run.
   *
   * @listens Player#progress
   */


  LoadProgressBar.prototype.update = function update(event) {
    var buffered = this.player_.buffered();
    var duration = this.player_.duration();
    var bufferedEnd = this.player_.bufferedEnd();
    var children = this.partEls_;

    // get the percent width of a time compared to the total end
    var percentify = function percentify(time, end) {
      // no NaN
      var percent = time / end || 0;

      return (percent >= 1 ? 1 : percent) * 100 + '%';
    };

    // update the width of the progress bar
    this.el_.style.width = percentify(bufferedEnd, duration);

    // add child elements to represent the individual buffered time ranges
    for (var i = 0; i < buffered.length; i++) {
      var start = buffered.start(i);
      var end = buffered.end(i);
      var part = children[i];

      if (!part) {
        part = this.el_.appendChild(createEl());
        children[i] = part;
      }

      // set the percent based on the width of the progress bar (bufferedEnd)
      part.style.left = percentify(start, bufferedEnd);
      part.style.width = percentify(end - start, bufferedEnd);
    }

    // remove unused buffered range elements
    for (var _i = children.length; _i > buffered.length; _i--) {
      this.el_.removeChild(children[_i - 1]);
    }
    children.length = buffered.length;
  };

  return LoadProgressBar;
}(Component);

Component.registerComponent('LoadProgressBar', LoadProgressBar);

/**
 * @file time-tooltip.js
 */
//import { document } from 'global/document';

/**
 * Time tooltips display a time above the progress bar.
 *
 * @extends Component
 */

var TimeTooltip = function (_Component) {
    inherits(TimeTooltip, _Component);

    function TimeTooltip() {
        classCallCheck(this, TimeTooltip);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
    }

    /**
     * Create the time tooltip DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    TimeTooltip.prototype.createEl = function createEl$$1() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'play-time-tooltip tool'
        });
    };

    /**
     * Updates the position of the time tooltip relative to the `SeekBar`.
     *
     * @param {Object} seekBarRect
     *        The `ClientRect` for the {@link SeekBar} element.
     *
     * @param {number} seekBarPoint
     *        A number from 0 to 1, representing a horizontal reference point
     *        from the left edge of the {@link SeekBar}
     */


    TimeTooltip.prototype.update = function update(seekBarRect, seekBarPoint, content) {
        var tooltipRect = getBoundingClientRect(this.el_);
        var playerRect = getBoundingClientRect(this.player_.el());
        var seekBarPointPx = seekBarRect.width * seekBarPoint;

        // do nothing if either rect isn't available
        // for example, if the player isn't in the DOM for testing
        if (!playerRect || !tooltipRect) {
            return;
        }

        // This is the space left of the `seekBarPoint` available within the bounds
        // of the player. We calculate any gap between the left edge of the player
        // and the left edge of the `SeekBar` and add the number of pixels in the
        // `SeekBar` before hitting the `seekBarPoint`
        var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;

        // This is the space right of the `seekBarPoint` available within the bounds
        // of the player. We calculate the number of pixels from the `seekBarPoint`
        // to the right edge of the `SeekBar` and add to that any gap between the
        // right edge of the `SeekBar` and the player.
        var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);

        // This is the number of pixels by which the tooltip will need to be pulled
        // further to the right to center it over the `seekBarPoint`.
        var pullTooltipBy = tooltipRect.width / 2;

        // Adjust the `pullTooltipBy` distance to the left or right depending on
        // the results of the space calculations above.
        if (spaceLeftOfPoint < pullTooltipBy) {
            pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
        } else if (spaceRightOfPoint < pullTooltipBy) {
            pullTooltipBy = spaceRightOfPoint;
        }

        // Due to the imprecision of decimal/ratio based calculations and varying
        // rounding behaviors, there are cases where the spacing adjustment is off
        // by a pixel or two. This adds insurance to these calculations.
        if (pullTooltipBy < 0) {
            pullTooltipBy = 0;
        } else if (pullTooltipBy > tooltipRect.width) {
            pullTooltipBy = tooltipRect.width;
        }

        this.el_.style.right = '-' + pullTooltipBy + 'px';

        var tool = document.getElementsByClassName('tool');
        if (tool.length == 2) {
            tool[1].style.display = 'none';
        }
        var bg = tool[0].style['background-image'];
        if (!isNaN(bg)) {
            tool[0].classList.add('play-time-tooltip-no');
            tool[0].classList.remove('play-time-tooltip');
            this.el_.innerHTML = "<span class='toolSpan'>" + content + "</span>";
        } else {
            tool[0].classList.remove('play-time-tooltip-no');
            tool[0].classList.add('play-time-tooltip');
            this.el_.innerHTML = "<span class='play-time-tooltip-span'>" + content + "</span>";
        }
    };

    return TimeTooltip;
}(Component);

Component.registerComponent('TimeTooltip', TimeTooltip);

/**
 * @file play-progress-bar.js
 */

/**
 * Used by {@link SeekBar} to display media playback progress as part of the
 * {@link ProgressControl}.
 *
 * @extends Component
 */

var PlayProgressBar = function (_Component) {
    inherits(PlayProgressBar, _Component);

    function PlayProgressBar() {
        classCallCheck(this, PlayProgressBar);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
    }

    /**
     * Create the the DOM element for this class.
     *
     * @return {Element}
     *         The element that was created.
     */
    PlayProgressBar.prototype.createEl = function createEl() {
        //debugger

        return _Component.prototype.createEl.call(this, 'div', {
            className: 'play-play-progress play-slider-bar',
            innerHTML: '<span class="play-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span> <span class="scrubber-head"></span>\n            '
        });
    };

    /**
     * Enqueues updates to its own DOM as well as the DOM of its
     * {@link TimeTooltip} child.
     *
     * @param {Object} seekBarRect
     *        The `ClientRect` for the {@link SeekBar} element.
     *
     * @param {number} seekBarPoint
     *        A number from 0 to 1, representing a horizontal reference point
     *        from the left edge of the {@link SeekBar}
     */


    PlayProgressBar.prototype.update = function update(seekBarRect, seekBarPoint) {
        var _this2 = this;

        var progressWidth = document.getElementsByClassName('play-play-progress')[0];
        if (typeof progressWidth != 'undefined') {
            var _progressWidth = document.getElementsByClassName('play-play-progress')[0].offsetWidth;
            var scrubberHead = document.getElementsByClassName('scrubber-head')[0].offsetWidth;
            if (_progressWidth >= scrubberHead) {
                this.player_.trigger({
                    type: 'progressWidth',
                    currentSrc: this.player_.getCache().src,
                    progressFinal: this.player_.getCache().currentTime / this.player_.getCache().duration * 100
                });
                if (this.player_.options_.seekEventPercentage && Math.round(this.player_.getCache().currentTime / this.player_.getCache().duration * 100) >= this.player_.options_.seekEventPercentage) {
                    this.player_.trigger({
                        type: 'progressEvent',
                        currentSrc: this.player_.getCache().src,
                        seekEventPercentage: Math.round(this.player_.getCache().currentTime / this.player_.getCache().duration * 100)
                    });
                }
                document.getElementsByClassName('scrubber-head')[0].style.left = _progressWidth - scrubberHead + 'px';
            } else {
                document.getElementsByClassName('scrubber-head')[0].style.left = '0px';
            }
        }

        // If there is an existing rAF ID, cancel it so we don't over-queue.
        if (this.rafId_) {
            this.cancelAnimationFrame(this.rafId_);
        }

        this.rafId_ = this.requestAnimationFrame(function () {
            var time = _this2.player_.scrubbing() ? _this2.player_.getCache().currentTime : _this2.player_.currentTime();

            var content = formatTime(time, _this2.player_.duration());
            var timeTooltip = _this2.getChild('timeTooltip');

            if (timeTooltip) {
                timeTooltip.update(seekBarRect, seekBarPoint, content);
            }
        });
    };

    return PlayProgressBar;
}(Component);

/**
 * Default options for {@link PlayProgressBar}.
 *
 * @type {Object}
 * @private
 */


PlayProgressBar.prototype.options_ = {
    children: []
};

// Time tooltips should not be added to a player on mobile devices
if (!IS_IOS && !IS_ANDROID) {
    PlayProgressBar.prototype.options_.children.push('timeTooltip');
}

Component.registerComponent('PlayProgressBar', PlayProgressBar);

/**
 * @file mouse-time-display.js
 */

/**
 * The {@link MouseTimeDisplay} component tracks mouse movement over the
 * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
 * indicating the time which is represented by a given point in the
 * {@link ProgressControl}.
 *
 * @extends Component
 */

var MouseTimeDisplay = function (_Component) {
    inherits(MouseTimeDisplay, _Component);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The {@link Player} that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function MouseTimeDisplay(player, options) {
        classCallCheck(this, MouseTimeDisplay);

        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

        _this.update = throttle(bind(_this, _this.update), 25);
        return _this;
    }

    /**
     * Create the DOM element for this class.
     *
     * @return {Element}
     *         The element that was created.
     */


    MouseTimeDisplay.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'play-mouse-display'
        });
    };

    /**
     * Enqueues updates to its own DOM as well as the DOM of its
     * {@link TimeTooltip} child.
     *
     * @param {Object} seekBarRect
     *        The `ClientRect` for the {@link SeekBar} element.
     *
     * @param {number} seekBarPoint
     *        A number from 0 to 1, representing a horizontal reference point
     *        from the left edge of the {@link SeekBar}
     */


    MouseTimeDisplay.prototype.update = function update(seekBarRect, seekBarPoint) {
        var _this2 = this;

        // If there is an existing rAF ID, cancel it so we don't over-queue.
        if (this.rafId_) {
            this.cancelAnimationFrame(this.rafId_);
        }

        this.rafId_ = this.requestAnimationFrame(function () {
            var duration = _this2.player_.duration();
            var content = formatTime(seekBarPoint * duration, duration);

            _this2.el_.style.left = seekBarRect.width * seekBarPoint + 'px';
            _this2.getChild('timeTooltip').update(seekBarRect, seekBarPoint, content);
        });
    };

    return MouseTimeDisplay;
}(Component);

/**
 * Default options for `MouseTimeDisplay`
 *
 * @type {Object}
 * @private
 */


MouseTimeDisplay.prototype.options_ = {
    children: ['timeTooltip']
};

Component.registerComponent('MouseTimeDisplay', MouseTimeDisplay);

/**
 * @file seek-bar.js
 */
//import { document } from 'global/document';

// The number of seconds the `step*` functions move the timeline.
var STEP_SECONDS = 5;

// The interval at which the bar should update as it progresses.
var UPDATE_REFRESH_INTERVAL = 30;

/**
 * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
 * as its `bar`.
 *
 * @extends Slider
 */

var SeekBar = function (_Slider) {
    inherits(SeekBar, _Slider);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function SeekBar(player, options) {
        classCallCheck(this, SeekBar);

        var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));

        _this.setEventHandlers_();
        return _this;
    }

    /**
     * Sets the event handlers
     *
     * @private
     */


    SeekBar.prototype.setEventHandlers_ = function setEventHandlers_() {
        var _this2 = this;

        this.update = throttle(bind(this, this.update), UPDATE_REFRESH_INTERVAL);

        this.on(this.player_, 'timeupdate', this.update);
        this.on(this.player_, 'ended', this.handleEnded);

        // when playing, let's ensure we smoothly update the play progress bar
        // via an interval
        this.updateInterval = null;

        this.on(this.player_, ['playing'], function () {
            _this2.clearInterval(_this2.updateInterval);

            _this2.updateInterval = _this2.setInterval(function () {
                _this2.requestAnimationFrame(function () {
                    _this2.update();
                });
            }, UPDATE_REFRESH_INTERVAL);
        });

        this.on(this.player_, ['ended', 'pause', 'waiting'], function () {
            _this2.clearInterval(_this2.updateInterval);
        });

        this.on(this.player_, ['timeupdate', 'ended'], this.update);
    };

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    SeekBar.prototype.createEl = function createEl$$1() {
        return _Slider.prototype.createEl.call(this, 'div', {
            className: 'play-progress-holder'
        }, {
            'aria-label': this.localize('Progress Bar')
        });
    };

    /**
     * This function updates the play progress bar and accessibility
     * attributes to whatever is passed in.
     *
     * @param {number} currentTime
     *        The currentTime value that should be used for accessibility
     *
     * @param {number} percent
     *        The percentage as a decimal that the bar should be filled from 0-1.
     *
     * @private
     */


    SeekBar.prototype.update_ = function update_(currentTime, percent) {
        var duration = this.player_.duration();

        // machine readable value of progress bar (percentage complete)
        this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));

        // human readable value of progress bar (time complete)
        this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));

        // Update the `PlayProgressBar`.
        this.bar.update(getBoundingClientRect(this.el_), percent);
    };

    /**
     * Update the seek bar's UI.
     *
     * @param {EventTarget~Event} [event]
     *        The `timeupdate` or `ended` event that caused this to run.
     *
     * @listens Player#timeupdate
     *
     * @returns {number}
     *          The current percent at a number from 0-1
     */


    SeekBar.prototype.update = function update(event) {
        var percent = _Slider.prototype.update.call(this);

        this.update_(this.getCurrentTime_(), percent);
        return percent;
    };

    /**
     * Get the value of current time but allows for smooth scrubbing,
     * when player can't keep up.
     *
     * @return {number}
     *         The current time value to display
     *
     * @private
     */


    SeekBar.prototype.getCurrentTime_ = function getCurrentTime_() {
        return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    };

    /**
     * We want the seek bar to be full on ended
     * no matter what the actual internal values are. so we force it.
     *
     * @param {EventTarget~Event} [event]
     *        The `timeupdate` or `ended` event that caused this to run.
     *
     * @listens Player#ended
     */


    SeekBar.prototype.handleEnded = function handleEnded(event) {
        this.update_(this.player_.duration(), 1);
    };

    /**
     * Get the percentage of media played so far.
     *
     * @return {number}
     *         The percentage of media played so far (0 to 1).
     */


    SeekBar.prototype.getPercent = function getPercent() {
        var percent = this.getCurrentTime_() / this.player_.duration();

        return percent >= 1 ? 1 : percent || 0;
    };

    /**
     * Handle mouse down on seek bar
     *
     * @param {EventTarget~Event} event
     *        The `mousedown` event that caused this to run.
     *
     * @listens mousedown
     */


    SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
        var ad = document.getElementsByClassName('play-ads-label').length;
        if (ad == 0) {
            if (!isSingleLeftClick(event)) {
                return;
            }

            // Stop event propagation to prevent double fire in progress-control.js
            event.stopPropagation();
            this.player_.scrubbing(true);

            this.videoWasPlaying = !this.player_.paused();
            this.player_.pause();

            _Slider.prototype.handleMouseDown.call(this, event);
        } else {
            var skipBack = document.getElementsByClassName('skip-back').length;
            if (skipBack > 0) {
                document.getElementsByClassName('skip-back')[0].style.display = 'none';
                document.getElementsByClassName('skip-forward')[0].style.display = 'none';
            }
        }
    };

    /**
     * Handle mouse move on seek bar
     *
     * @param {EventTarget~Event} event
     *        The `mousemove` event that caused this to run.
     *
     * @listens mousemove
     */


    SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
        var ad = document.getElementsByClassName('play-ads-label').length;
        if (ad == 0) {
            if (!isSingleLeftClick(event)) {
                return;
            }

            var newTime = this.calculateDistance(event) * this.player_.duration();

            // Don't let video end while scrubbing.
            if (newTime === this.player_.duration()) {
                newTime = newTime - 0.1;
            }

            // Set new time (tell player to seek to new time)
            this.player_.currentTime(newTime);
        } else {
            var skipBack = document.getElementsByClassName('skip-back').length;
            if (skipBack > 0) {
                document.getElementsByClassName('skip-back')[0].style.display = 'none';
                document.getElementsByClassName('skip-forward')[0].style.display = 'none';
            }
        }
    };

    SeekBar.prototype.enable = function enable() {
        _Slider.prototype.enable.call(this);
        var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

        if (!mouseTimeDisplay) {
            return;
        }

        mouseTimeDisplay.show();
    };

    SeekBar.prototype.disable = function disable() {
        _Slider.prototype.disable.call(this);
        var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

        if (!mouseTimeDisplay) {
            return;
        }

        mouseTimeDisplay.hide();
    };

    /**
     * Handle mouse up on seek bar
     *
     * @param {EventTarget~Event} event
     *        The `mouseup` event that caused this to run.
     *
     * @listens mouseup
     */


    SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
        _Slider.prototype.handleMouseUp.call(this, event);

        // Stop event propagation to prevent double fire in progress-control.js
        if (event) {
            event.stopPropagation();
        }
        this.player_.scrubbing(false);

        /**
         * Trigger timeupdate because we're done seeking and the time has changed.
         * This is particularly useful for if the player is paused to time the time displays.
         *
         * @event Tech#timeupdate
         * @type {EventTarget~Event}
         */
        this.player_.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
        if (this.videoWasPlaying) {
            silencePromise(this.player_.play());
        }
    };

    /**
     * Move more quickly fast forward for keyboard-only users
     */


    SeekBar.prototype.stepForward = function stepForward() {
        this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);
    };

    /**
     * Move more quickly rewind for keyboard-only users
     */


    SeekBar.prototype.stepBack = function stepBack() {
        this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);
    };

    /**
     * Toggles the playback state of the player
     * This gets called when enter or space is used on the seekbar
     *
     * @param {EventTarget~Event} event
     *        The `keydown` event that caused this function to be called
     *
     */


    SeekBar.prototype.handleAction = function handleAction(event) {
        if (this.player_.paused()) {
            this.player_.play();
        } else {
            this.player_.pause();
        }
    };

    /**
     * Called when this SeekBar has focus and a key gets pressed down. By
     * default it will call `this.handleAction` when the key is space or enter.
     *
     * @param {EventTarget~Event} event
     *        The `keydown` event that caused this function to be called.
     *
     * @listens keydown
     */


    SeekBar.prototype.handleKeyPress = function handleKeyPress(event) {

        // Support Space (32) or Enter (13) key operation to fire a click event
        if (event.which === 32 || event.which === 13) {
            event.preventDefault();
            this.handleAction(event);
        } else if (_Slider.prototype.handleKeyPress) {

            // Pass keypress handling up for unsupported keys
            _Slider.prototype.handleKeyPress.call(this, event);
        }
    };

    return SeekBar;
}(Slider);

/**
 * Default options for the `SeekBar`
 *
 * @type {Object}
 * @private
 */


SeekBar.prototype.options_ = {
    children: ['loadProgressBar', 'playProgressBar'],
    barName: 'playProgressBar'
};

// MouseTimeDisplay tooltips should not be added to a player on mobile devices
if (!IS_IOS && !IS_ANDROID) {
    SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');
}

/**
 * Call the update event for this Slider when this event happens on the player.
 *
 * @type {string}
 */
SeekBar.prototype.playerEvent = 'timeupdate';

Component.registerComponent('SeekBar', SeekBar);

/**
 * @file progress-control.js
 */

/**
 * The Progress Control component contains the seek bar, load progress,
 * and play progress.
 *
 * @extends Component
 */

var ProgressControl = function (_Component) {
    inherits(ProgressControl, _Component);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function ProgressControl(player, options) {
        classCallCheck(this, ProgressControl);

        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

        _this.handleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);
        _this.throttledHandleMouseSeek = throttle(bind(_this, _this.handleMouseSeek), 25);

        _this.enable();
        return _this;
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    ProgressControl.prototype.createEl = function createEl$$1() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'play-progress-control play-control'
        });
    };

    /**
     * When the mouse moves over the `ProgressControl`, the pointer position
     * gets passed down to the `MouseTimeDisplay` component.
     *
     * @param {EventTarget~Event} event
     *        The `mousemove` event that caused this function to run.
     *
     * @listen mousemove
     */


    ProgressControl.prototype.handleMouseMove = function handleMouseMove(event) {
        var seekBar = this.getChild('seekBar');

        if (seekBar) {
            var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');
            var seekBarEl = seekBar.el();
            var seekBarRect = getBoundingClientRect(seekBarEl);
            var seekBarPoint = getPointerPosition(seekBarEl, event).x;

            // The default skin has a gap on either side of the `SeekBar`. This means
            // that it's possible to trigger this behavior outside the boundaries of
            // the `SeekBar`. This ensures we stay within it at all times.
            if (seekBarPoint > 1) {
                seekBarPoint = 1;
            } else if (seekBarPoint < 0) {
                seekBarPoint = 0;
            }

            if (mouseTimeDisplay) {
                mouseTimeDisplay.update(seekBarRect, seekBarPoint);
            }
        }
    };

    /**
     * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
     *
     * @method ProgressControl#throttledHandleMouseSeek
     * @param {EventTarget~Event} event
     *        The `mousemove` event that caused this function to run.
     *
     * @listen mousemove
     * @listen touchmove
     */

    /**
     * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
     *
     * @param {EventTarget~Event} event
     *        `mousedown` or `touchstart` event that triggered this function
     *
     * @listens mousemove
     * @listens touchmove
     */


    ProgressControl.prototype.handleMouseSeek = function handleMouseSeek(event) {
        var seekBar = this.getChild('seekBar');

        if (seekBar) {
            seekBar.handleMouseMove(event);
        }
    };

    /**
     * Are controls are currently enabled for this progress control.
     *
     * @return {boolean}
     *         true if controls are enabled, false otherwise
     */


    ProgressControl.prototype.enabled = function enabled() {
        return this.enabled_;
    };

    /**
     * Disable all controls on the progress control and its children
     */


    ProgressControl.prototype.disable = function disable() {
        this.children().forEach(function (child) {
            return child.disable && child.disable();
        });

        if (!this.enabled()) {
            return;
        }

        this.off(['mousedown', 'touchstart'], this.handleMouseDown);
        this.off(this.el_, 'mousemove', this.handleMouseMove);
        this.handleMouseUp();

        this.addClass('disabled');

        this.enabled_ = false;
    };

    /**
     * Enable all controls on the progress control and its children
     */


    ProgressControl.prototype.enable = function enable() {
        this.children().forEach(function (child) {
            return child.enable && child.enable();
        });

        if (this.enabled()) {
            return;
        }

        this.on(['mousedown', 'touchstart'], this.handleMouseDown);
        this.on(this.el_, 'mousemove', this.handleMouseMove);
        this.removeClass('disabled');

        this.enabled_ = true;
    };

    /**
     * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
     *
     * @param {EventTarget~Event} event
     *        `mousedown` or `touchstart` event that triggered this function
     *
     * @listens mousedown
     * @listens touchstart
     */


    ProgressControl.prototype.handleMouseDown = function handleMouseDown(event) {
        var doc = this.el_.ownerDocument;
        var seekBar = this.getChild('seekBar');

        if (seekBar) {
            seekBar.handleMouseDown(event);
        }

        this.on(doc, 'mousemove', this.throttledHandleMouseSeek);
        this.on(doc, 'touchmove', this.throttledHandleMouseSeek);
        this.on(doc, 'mouseup', this.handleMouseUp);
        this.on(doc, 'touchend', this.handleMouseUp);
    };

    /**
     * Handle `mouseup` or `touchend` events on the `ProgressControl`.
     *
     * @param {EventTarget~Event} event
     *        `mouseup` or `touchend` event that triggered this function.
     *
     * @listens touchend
     * @listens mouseup
     */


    ProgressControl.prototype.handleMouseUp = function handleMouseUp(event) {
        var doc = this.el_.ownerDocument;
        var seekBar = this.getChild('seekBar');

        if (seekBar) {
            seekBar.handleMouseUp(event);
        }

        this.off(doc, 'mousemove', this.throttledHandleMouseSeek);
        this.off(doc, 'touchmove', this.throttledHandleMouseSeek);
        this.off(doc, 'mouseup', this.handleMouseUp);
        this.off(doc, 'touchend', this.handleMouseUp);
    };

    return ProgressControl;
}(Component);

/**
 * Default options for `ProgressControl`
 *
 * @type {Object}
 * @private
 */


ProgressControl.prototype.options_ = {
    children: ['seekBar']
};

Component.registerComponent('ProgressControl', ProgressControl);

/**
 * @file fullscreen-toggle.js
 */

/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var FullscreenToggle = function (_Button) {
    inherits(FullscreenToggle, _Button);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function FullscreenToggle(player, options) {
        classCallCheck(this, FullscreenToggle);

        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

        _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);

        if (document$1[FullscreenApi.fullscreenEnabled] === false) {
            _this.disable();
        }
        return _this;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
    };

    /**
     * Handles fullscreenchange on the player and change control text accordingly.
     *
     * @param {EventTarget~Event} [event]
     *        The {@link Player#fullscreenchange} event that caused this function to be
     *        called.
     *
     * @listens Player#fullscreenchange
     */


    FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
            this.controlText('Non-Fullscreen');
        } else {
            this.controlText('Fullscreen');
        }
    };

    /**
     * This gets called when an `FullscreenToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */


    FullscreenToggle.prototype.handleClick = function handleClick(event) {
        if (!this.player_.isFullscreen()) {
            this.player_.requestFullscreen();
        } else {
            this.player_.exitFullscreen();
        }
    };

    return FullscreenToggle;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


FullscreenToggle.prototype.controlText_ = 'Fullscreen';

Component.registerComponent('FullscreenToggle', FullscreenToggle);

/**
 * @file fullscreen-toggle.js
 */
var track = {
    'index': 0,
    'mode': 'defaultMode'
};
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var nextButton = function (_Button) {
    inherits(nextButton, _Button);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function nextButton(player, options) {
        classCallCheck(this, nextButton);

        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

        _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);

        if (document$1[FullscreenApi.fullscreenEnabled] === false) {
            _this.disable();
        }
        return _this;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    nextButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-next-control ' + _Button.prototype.buildCSSClass.call(this);
    };

    /**
     * Handles fullscreenchange on the player and change control text accordingly.
     *
     * @param {EventTarget~Event} [event]
     *        The {@link Player#fullscreenchange} event that caused this function to be
     *        called.
     *
     * @listens Player#fullscreenchange
     */


    nextButton.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
            this.controlText('Non-Fullscreen');
        } else {
            this.controlText('Fullscreen');
        }
    };

    /**
     * This gets called when an `FullscreenToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */


    nextButton.prototype.getTrackIndex = function getTrackIndex() {
        return track;
    };

    nextButton.prototype.setTrackIndex = function setTrackIndex(index, mode) {
        track = {
            'index': index,
            'mode': mode
        };
        audioTitleBanner.prototype.updateElement();
    };

    nextButton.prototype.handleClick = function handleClick(event) {
        var trackList = this.options_.playerOptions.trackList;

        if (trackList.length <= track.index + 1) {
            track.index = 0;
        } else {
            track.index++;
        }
        this.setTrackIndex(track.index, track.mode);
        player.src({
            src: trackList[track.index].src,
            type: trackList[track.index].trackList
        });
        player.play();
    };

    return nextButton;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


nextButton.prototype.controlText_ = 'Next';

Component.registerComponent('nextButton', nextButton);

/**
 * @file fullscreen-toggle.js
 */
var trackOptions = [];
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var audioTitleBanner = function (_Button) {
    inherits(audioTitleBanner, _Button);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function audioTitleBanner(player, options) {
        classCallCheck(this, audioTitleBanner);

        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

        trackOptions = options.playerOptions;
        if (document$1[FullscreenApi.fullscreenEnabled] === false) {
            _this.disable();
        }
        return _this;
    }

    audioTitleBanner.prototype.createEl = function createEl() {
        var audioOptions = {
            thumbnails: '',
            title: ''
        };
        if (typeof this.options_.playerOptions.trackList != 'undefined') {
            audioOptions = {
                thumbnails: this.options_.playerOptions.trackList[0].thumbnails,
                title: this.options_.playerOptions.trackList[0].title
            };
        }
        return _Button.prototype.createEl.call(this, 'div', {
            className: 'play-bar',
            innerHTML: '<div><img id="thumb" width="60px" src="' + audioOptions.thumbnails + '"></div><div class="track-title"><div id="trackTitle">' + audioOptions.title + '</div></div>'
        });
    };
    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    audioTitleBanner.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-banner-control ' + _Button.prototype.buildCSSClass.call(this);
    };

    audioTitleBanner.prototype.updateElement = function updateElement() {
        var trackList = trackOptions.trackList;
        var track = nextButton.prototype.getTrackIndex();
        document$1.getElementById('thumb').src = trackList[track.index].thumbnails;
        document$1.getElementById('trackTitle').innerHTML = trackList[track.index].title;
    };
    /**
     * Handles fullscreenchange on the player and change control text accordingly.
     *
     * @param {EventTarget~Event} [event]
     *        The {@link Player#fullscreenchange} event that caused this function to be
     *        called.
     *
     * @listens Player#fullscreenchange
     */


    audioTitleBanner.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
            this.controlText('Non-Fullscreen');
        } else {
            this.controlText('Fullscreen');
        }
    };

    /**
     * This gets called when an `FullscreenToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */

    audioTitleBanner.prototype.handleClick = function handleClick(event) {};

    return audioTitleBanner;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


audioTitleBanner.prototype.controlText_ = 'Fullscreen';

Component.registerComponent('audioTitleBanner', audioTitleBanner);

/**
 * Check if volume control is supported and if it isn't hide the
 * `Component` that was passed  using the `play-hidden` class.
 *
 * @param {Component} self
 *        The component that should be hidden if volume is unsupported
 *
 * @param {Player} player
 *        A reference to the player
 *
 * @private
 */
var checkVolumeSupport = function checkVolumeSupport(self, player) {
  // hide volume controls when they're not supported by the current tech
  if (player.tech_ && !player.tech_.featuresVolumeControl) {
    self.addClass('play-hidden');
  }

  self.on(player, 'loadstart', function () {
    if (!player.tech_.featuresVolumeControl) {
      self.addClass('play-hidden');
    } else {
      self.removeClass('play-hidden');
    }
  });
};

/**
 * @file volume-level.js
 */

/**
 * Shows volume level
 *
 * @extends Component
 */

var VolumeLevel = function (_Component) {
  inherits(VolumeLevel, _Component);

  function VolumeLevel() {
    classCallCheck(this, VolumeLevel);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */
  VolumeLevel.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: 'play-volume-level',
      innerHTML: '<span class="play-control-text"></span>'
    });
  };

  return VolumeLevel;
}(Component);

Component.registerComponent('VolumeLevel', VolumeLevel);

/**
 * @file volume-bar.js
 */

/**
 * The bar that contains the volume level and can be clicked on to adjust the level
 *
 * @extends Slider
 */

var VolumeBar = function (_Slider) {
  inherits(VolumeBar, _Slider);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function VolumeBar(player, options) {
    classCallCheck(this, VolumeBar);

    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));

    _this.on('slideractive', _this.updateLastVolume_);
    _this.on(player, 'volumechange', _this.updateARIAAttributes);
    player.ready(function () {
      return _this.updateARIAAttributes();
    });
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  VolumeBar.prototype.createEl = function createEl$$1() {
    return _Slider.prototype.createEl.call(this, 'div', {
      className: 'play-volume-bar play-slider-bar'
    }, {
      'aria-label': this.localize('Volume Level'),
      'aria-live': 'polite'
    });
  };

  /**
   * Handle mouse down on volume bar
   *
   * @param {EventTarget~Event} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */


  VolumeBar.prototype.handleMouseDown = function handleMouseDown(event) {
    if (!isSingleLeftClick(event)) {
      return;
    }

    _Slider.prototype.handleMouseDown.call(this, event);
  };

  /**
   * Handle movement events on the {@link VolumeMenuButton}.
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run.
   *
   * @listens mousemove
   */


  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
    if (!isSingleLeftClick(event)) {
      return;
    }

    this.checkMuted();
    this.player_.volume(this.calculateDistance(event));
  };

  /**
   * If the player is muted unmute it.
   */


  VolumeBar.prototype.checkMuted = function checkMuted() {
    if (this.player_.muted()) {
      this.player_.muted(false);
    }
  };

  /**
   * Get percent of volume level
   *
   * @return {number}
   *         Volume level percent as a decimal number.
   */


  VolumeBar.prototype.getPercent = function getPercent() {
    if (this.player_.muted()) {
      return 0;
    }
    return this.player_.volume();
  };

  /**
   * Increase volume level for keyboard users
   */


  VolumeBar.prototype.stepForward = function stepForward() {
    this.checkMuted();
    this.player_.volume(this.player_.volume() + 0.1);
  };

  /**
   * Decrease volume level for keyboard users
   */


  VolumeBar.prototype.stepBack = function stepBack() {
    this.checkMuted();
    this.player_.volume(this.player_.volume() - 0.1);
  };

  /**
   * Update ARIA accessibility attributes
   *
   * @param {EventTarget~Event} [event]
   *        The `volumechange` event that caused this function to run.
   *
   * @listens Player#volumechange
   */


  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {
    var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();

    this.el_.setAttribute('aria-valuenow', ariaValue);
    this.el_.setAttribute('aria-valuetext', ariaValue + '%');
  };

  /**
   * Returns the current value of the player volume as a percentage
   *
   * @private
   */


  VolumeBar.prototype.volumeAsPercentage_ = function volumeAsPercentage_() {
    return Math.round(this.player_.volume() * 100);
  };

  /**
   * When user starts dragging the VolumeBar, store the volume and listen for
   * the end of the drag. When the drag ends, if the volume was set to zero,
   * set lastVolume to the stored volume.
   *
   * @listens slideractive
   * @private
   */


  VolumeBar.prototype.updateLastVolume_ = function updateLastVolume_() {
    var _this2 = this;

    var volumeBeforeDrag = this.player_.volume();

    this.one('sliderinactive', function () {
      if (_this2.player_.volume() === 0) {
        _this2.player_.lastVolume_(volumeBeforeDrag);
      }
    });
  };

  return VolumeBar;
}(Slider);

/**
 * Default options for the `VolumeBar`
 *
 * @type {Object}
 * @private
 */


VolumeBar.prototype.options_ = {
  children: ['volumeLevel'],
  barName: 'volumeLevel'
};

/**
 * Call the update event for this Slider when this event happens on the player.
 *
 * @type {string}
 */
VolumeBar.prototype.playerEvent = 'volumechange';

Component.registerComponent('VolumeBar', VolumeBar);

/**
 * @file volume-control.js
 */

/**
 * The component for controlling the volume level
 *
 * @extends Component
 */

var VolumeControl = function (_Component) {
    inherits(VolumeControl, _Component);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     */
    function VolumeControl(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, VolumeControl);

        options.vertical = options.vertical || true;

        // Pass the vertical option down to the VolumeBar if
        // the VolumeBar is turned on.
        if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {
            options.volumeBar = options.volumeBar || {};
            options.volumeBar.vertical = options.vertical;
        }

        // hide this control if volume support is missing
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

        checkVolumeSupport(_this, player);

        _this.throttledHandleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);

        _this.on('mousedown', _this.handleMouseDown);
        _this.on('touchstart', _this.handleMouseDown);

        // while the slider is active (the mouse has been pressed down and
        // is dragging) or in focus we do not want to hide the VolumeBar
        _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {
            _this.volumeBar.addClass('play-slider-active');
            _this.addClass('play-slider-active');
            _this.trigger('slideractive');
        });

        _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {
            _this.volumeBar.removeClass('play-slider-active');
            _this.removeClass('play-slider-active');
            _this.trigger('sliderinactive');
        });
        return _this;
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    VolumeControl.prototype.createEl = function createEl() {
        var orientationClass = 'play-volume-horizontal';

        if (this.options_.vertical) {
            orientationClass = 'play-volume-vertical';
        }

        return _Component.prototype.createEl.call(this, 'div', {
            className: 'play-volume-control play-control ' + orientationClass
        });
    };

    /**
     * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
     *
     * @param {EventTarget~Event} event
     *        `mousedown` or `touchstart` event that triggered this function
     *
     * @listens mousedown
     * @listens touchstart
     */


    VolumeControl.prototype.handleMouseDown = function handleMouseDown(event) {
        var doc = this.el_.ownerDocument;

        this.on(doc, 'mousemove', this.throttledHandleMouseMove);
        this.on(doc, 'touchmove', this.throttledHandleMouseMove);
        this.on(doc, 'mouseup', this.handleMouseUp);
        this.on(doc, 'touchend', this.handleMouseUp);
    };

    /**
     * Handle `mouseup` or `touchend` events on the `VolumeControl`.
     *
     * @param {EventTarget~Event} event
     *        `mouseup` or `touchend` event that triggered this function.
     *
     * @listens touchend
     * @listens mouseup
     */


    VolumeControl.prototype.handleMouseUp = function handleMouseUp(event) {
        var doc = this.el_.ownerDocument;

        this.off(doc, 'mousemove', this.throttledHandleMouseMove);
        this.off(doc, 'touchmove', this.throttledHandleMouseMove);
        this.off(doc, 'mouseup', this.handleMouseUp);
        this.off(doc, 'touchend', this.handleMouseUp);
    };

    /**
     * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
     *
     * @param {EventTarget~Event} event
     *        `mousedown` or `touchstart` event that triggered this function
     *
     * @listens mousedown
     * @listens touchstart
     */


    VolumeControl.prototype.handleMouseMove = function handleMouseMove(event) {
        this.volumeBar.handleMouseMove(event);
    };

    return VolumeControl;
}(Component);

/**
 * Default options for the `VolumeControl`
 *
 * @type {Object}
 * @private
 */


VolumeControl.prototype.options_ = {
    children: ['volumeBar']
};

Component.registerComponent('VolumeControl', VolumeControl);

/**
 * Check if muting volume is supported and if it isn't hide the mute toggle
 * button.
 *
 * @param {Component} self
 *        A reference to the mute toggle button
 *
 * @param {Player} player
 *        A reference to the player
 *
 * @private
 */
var checkMuteSupport = function checkMuteSupport(self, player) {
  // hide mute toggle button if it's not supported by the current tech
  if (player.tech_ && !player.tech_.featuresMuteControl) {
    self.addClass('play-hidden');
  }

  self.on(player, 'loadstart', function () {
    if (!player.tech_.featuresMuteControl) {
      self.addClass('play-hidden');
    } else {
      self.removeClass('play-hidden');
    }
  });
};

/**
 * @file mute-toggle.js
 */

/**
 * A button component for muting the audio.
 *
 * @extends Button
 */

var MuteToggle = function (_Button) {
  inherits(MuteToggle, _Button);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function MuteToggle(player, options) {
    classCallCheck(this, MuteToggle);

    // hide this control if volume support is missing
    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    checkMuteSupport(_this, player);

    _this.on(player, ['loadstart', 'volumechange'], _this.update);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-mute-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  /**
   * This gets called when an `MuteToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  MuteToggle.prototype.handleClick = function handleClick(event) {
    var vol = this.player_.volume();
    var lastVolume = this.player_.lastVolume_();

    if (vol === 0) {
      var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;

      this.player_.volume(volumeToSet);
      this.player_.muted(false);
    } else {
      this.player_.muted(this.player_.muted() ? false : true);
    }
  };

  /**
   * Update the `MuteToggle` button based on the state of `volume` and `muted`
   * on the player.
   *
   * @param {EventTarget~Event} [event]
   *        The {@link Player#loadstart} event if this function was called
   *        through an event.
   *
   * @listens Player#loadstart
   * @listens Player#volumechange
   */


  MuteToggle.prototype.update = function update(event) {
    this.updateIcon_();
    this.updateControlText_();
  };

  /**
   * Update the appearance of the `MuteToggle` icon.
   *
   * Possible states (given `level` variable below):
   * - 0: crossed out
   * - 1: zero bars of volume
   * - 2: one bar of volume
   * - 3: two bars of volume
   *
   * @private
   */


  MuteToggle.prototype.updateIcon_ = function updateIcon_() {
    var vol = this.player_.volume();
    var level = 3;

    // in iOS when a player is loaded with muted attribute
    // and volume is changed with a native mute button
    // we want to make sure muted state is updated
    if (IS_IOS) {
      this.player_.muted(this.player_.tech_.el_.muted);
    }

    if (vol === 0 || this.player_.muted()) {
      level = 0;
    } else if (vol < 0.33) {
      level = 1;
    } else if (vol < 0.67) {
      level = 2;
    }

    // TODO improve muted icon classes
    for (var i = 0; i < 4; i++) {
      removeClass(this.el_, 'play-vol-' + i);
    }
    addClass(this.el_, 'play-vol-' + level);
  };

  /**
   * If `muted` has changed on the player, update the control text
   * (`title` attribute on `play-mute-control` element and content of
   * `play-control-text` element).
   *
   * @private
   */


  MuteToggle.prototype.updateControlText_ = function updateControlText_() {
    var soundOff = this.player_.muted() || this.player_.volume() === 0;
    var text = soundOff ? 'Unmute' : 'Mute';

    if (this.controlText() !== text) {
      this.controlText(text);
    }
  };

  return MuteToggle;
}(Button);

/**
 * The text that should display over the `MuteToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


MuteToggle.prototype.controlText_ = 'Mute';

Component.registerComponent('MuteToggle', MuteToggle);

/**
 * @file volume-control.js
 */

/**
 * A Component to contain the MuteToggle and VolumeControl so that
 * they can work together.
 *
 * @extends Component
 */

var VolumePanel = function (_Component) {
  inherits(VolumePanel, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  function VolumePanel(player) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, VolumePanel);

    if (typeof options.inline !== 'undefined') {
      options.inline = options.inline;
    } else {
      options.inline = false;
    }

    // pass the inline option down to the VolumeControl as vertical if
    // the VolumeControl is on.
    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {
      options.volumeControl = options.volumeControl || {};
      options.volumeControl.vertical = !options.inline;
    }

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.on(player, ['loadstart'], _this.volumePanelState_);

    // while the slider is active (the mouse has been pressed down and
    // is dragging) we do not want to hide the VolumeBar
    _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);

    _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);
    return _this;
  }

  /**
   * Add play-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#slideractive
   * @private
   */


  VolumePanel.prototype.sliderActive_ = function sliderActive_() {
    this.addClass('play-slider-active');
  };

  /**
   * Removes play-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#sliderinactive
   * @private
   */


  VolumePanel.prototype.sliderInactive_ = function sliderInactive_() {
    this.removeClass('play-slider-active');
  };

  /**
   * Adds play-hidden or play-mute-toggle-only to the VolumePanel
   * depending on MuteToggle and VolumeControl state
   *
   * @listens Player#loadstart
   * @private
   */


  VolumePanel.prototype.volumePanelState_ = function volumePanelState_() {
    // hide volume panel if neither volume control or mute toggle
    // are displayed
    if (this.volumeControl.hasClass('play-hidden') && this.muteToggle.hasClass('play-hidden')) {
      this.addClass('play-hidden');
    }

    // if only mute toggle is visible we don't want
    // volume panel expanding when hovered or active
    if (this.volumeControl.hasClass('play-hidden') && !this.muteToggle.hasClass('play-hidden')) {
      this.addClass('play-mute-toggle-only');
    }
  };

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  VolumePanel.prototype.createEl = function createEl() {
    var orientationClass = 'play-volume-panel-horizontal';

    if (!this.options_.inline) {
      orientationClass = 'play-volume-panel-vertical';
    }

    return _Component.prototype.createEl.call(this, 'div', {
      className: 'play-volume-panel play-control ' + orientationClass
    });
  };

  return VolumePanel;
}(Component);

/**
 * Default options for the `VolumeControl`
 *
 * @type {Object}
 * @private
 */


VolumePanel.prototype.options_ = {
  children: ['muteToggle', 'volumeControl']
};

Component.registerComponent('VolumePanel', VolumePanel);

/**
 * @file setting.js
 */
// TODO - Future make it click to snap to live

/**
 * Displays the live indicator when duration is Infinity.
 *
 * @extends Button
 */

var Settings = function (_Component) {
    inherits(Settings, _Component);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function Settings(player, options) {
        classCallCheck(this, Settings);
        return possibleConstructorReturn(this, _Component.call(this, player, options));
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    Settings.prototype.createEl = function createEl$$1() {
        var _this2 = this;

        var el = _Component.prototype.createEl.call(this, 'div', {
            className: 'play-settings play-control'
        });

        this.contentEl_ = createEl('div', {
            className: 'play-control'
        }, {
            'aria-live': 'off'
        });

        el.appendChild(this.contentEl_);
        this.buttonEl_ = createEl('button', {
            className: 'play-button',
            innerHTML: '<span class="play-icon-placeholder"></span><div class ="hdbox"> </div>'
        });
        this.contentEl_.classList.add('play-hidden');
        this.buttonEl_.onclick = function (event) {
            event.stopPropagation();
            if (_this2.contentEl_.classList.value.search('play-hidden') === -1) {
                _this2.contentEl_.classList.add('play-hidden');
                _this2.resetMenuList(_this2.contentEl_);
            } else {
                _this2.contentEl_.classList.remove('play-hidden');
                _this2.resetMenuList(_this2.contentEl_);
            }
        };
        this.player().el_.onclick = function (event) {
            if (_this2.contentEl_.classList.value.search('play-hidden') === -1) {
                _this2.contentEl_.classList.add('play-hidden');
            }
        };
        el.appendChild(this.buttonEl_);
        return el;
    };

    /**
     * Update back to settings.
     *
     * @param {Object} [contentEl_]
     *        The key/value store of player options.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    Settings.prototype.resetMenuList = function resetMenuList(contentEl_) {
        contentEl_.querySelectorAll('.play-menu-title').forEach(function (element) {
            element.click();
        });
    };

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    Settings.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-settings play-control';
    };

    return Settings;
}(Component);

/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */


Settings.prototype.options_ = {
    children: ['playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'MultipleAudioMenu']
};
Component.registerComponent('Settings', Settings);

/**
 * @file spacer.js
 */

/**
 * Just an empty spacer element that can be used as an append point for plugins, etc.
 * Also can be used to create space between elements when necessary.
 *
 * @extends Component
 */

var Spacer = function (_Component) {
  inherits(Spacer, _Component);

  function Spacer() {
    classCallCheck(this, Spacer);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  Spacer.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-spacer ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  Spacer.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: this.buildCSSClass()
    });
  };

  return Spacer;
}(Component);

Component.registerComponent('Spacer', Spacer);

/**
 * @file custom-control-spacer.js
 */

/**
 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
 *
 * @extends Spacer
 */

var CustomControlSpacer = function (_Spacer) {
  inherits(CustomControlSpacer, _Spacer);

  function CustomControlSpacer() {
    classCallCheck(this, CustomControlSpacer);
    return possibleConstructorReturn(this, _Spacer.apply(this, arguments));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */
  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
  };

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  CustomControlSpacer.prototype.createEl = function createEl() {
    var el = _Spacer.prototype.createEl.call(this, {
      className: this.buildCSSClass()
    });

    // No-flex/table-cell mode requires there be some content
    // in the cell to fill the remaining space of the table.
    el.innerHTML = '\xA0';
    return el;
  };

  return CustomControlSpacer;
}(Spacer);

Component.registerComponent('CustomControlSpacer', CustomControlSpacer);

/**
 * @file fullscreen-toggle.js
 */
//var previousTrackIndex = ;
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var autoPlayButton = function (_Button) {
    inherits(autoPlayButton, _Button);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function autoPlayButton(player, options) {
        classCallCheck(this, autoPlayButton);

        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
        _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);
        _this.on(player, 'ended', _this.handleEnded);
        if (document$1[FullscreenApi.fullscreenEnabled] === false) {
            _this.disable();
        }
        return _this;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    autoPlayButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'auto-play-control ' + _Button.prototype.buildCSSClass.call(this);
    };

    autoPlayButton.prototype.createEl = function createEl() {
        return _Button.prototype.createEl.call(this, 'div', {
            className: 'auto-play'
            // innerHTML: '<span class="auto-play">AUTO PLAY</span><span class="auto-play-on">ON</span><span class="auto-play-off">OFF</span>'
        });
    };
    /**
     * Handles fullscreenchange on the player and change control text accordingly.
     *
     * @param {EventTarget~Event} [event]
     *        The {@link Player#fullscreenchange} event that caused this function to be
     *        called.
     *
     * @listens Player#fullscreenchange
     */


    autoPlayButton.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
            this.controlText('Non-Fullscreen');
        } else {
            this.controlText('Fullscreen');
        }
    };

    autoPlayButton.prototype.handleEnded = function handleEnded() {
        var track = nextButton.prototype.getTrackIndex();
        if (track.mode == 'shuffleMode') {
            this.shuffleMode();
        }
    };
    /**
     * This gets called when an `FullscreenToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */


    autoPlayButton.prototype.handleClick = function handleClick(event) {
        var track = nextButton.prototype.getTrackIndex();
        var mode = void 0;
        track.mode == 'shuffleMode' ? mode = 'defaultMode' : mode = 'shuffleMode';
        nextButton.prototype.setTrackIndex(track.index, mode);
    };

    autoPlayButton.prototype.shuffleIndex = function shuffleIndex(index, trackLength) {
        var shuffleRandom = Math.floor(Math.random() * trackLength);
        if (index != shuffleRandom) {
            return shuffleRandom;
        } else {
            return this.shuffleIndex(index, trackLength);
        }
    };

    autoPlayButton.prototype.shuffleMode = function shuffleMode() {
        var track = nextButton.prototype.getTrackIndex();
        var trackList = this.options_.playerOptions.trackList;
        var shuffleTrackIndex = this.shuffleIndex(track.index, trackList.length);
        nextButton.prototype.setTrackIndex(shuffleTrackIndex, 'shuffleMode');
        player.src({
            src: trackList[shuffleTrackIndex].src,
            type: trackList[shuffleTrackIndex].trackList
        });
        player.play();
    };

    return autoPlayButton;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


autoPlayButton.prototype.controlText_ = 'Auto play';

Component.registerComponent('autoPlayButton', autoPlayButton);

/**
 * @file control-bar.js
 */

var SeekBarSettingButtonGroup = function (_Component) {
    inherits(SeekBarSettingButtonGroup, _Component);

    function SeekBarSettingButtonGroup(player, options) {
        classCallCheck(this, SeekBarSettingButtonGroup);

        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

        if (options.playerOptions.srcType == 'audio') {
            _this.options.children = 'audioTitleBanner';
        }

        return _this;
    }
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    SeekBarSettingButtonGroup.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'seek-bar-setting-button-group audioDiv',
            dir: 'ltr'
        });
    };

    return SeekBarSettingButtonGroup;
}(Component);

/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */


SeekBarSettingButtonGroup.prototype.options_ = {
    children: ['volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'customControlSpacer', 'Settings', 'autoPlayButton']
};

Component.registerComponent('SeekBarSettingButtonGroup', SeekBarSettingButtonGroup);

/**
 * @file fullscreen-toggle.js
 */
//var previousTrackIndex = ;
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var shareButton = function (_Button) {
  inherits(shareButton, _Button);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function shareButton(player, options) {
    classCallCheck(this, shareButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
    if (document$1[FullscreenApi.fullscreenEnabled] === false) {
      _this.disable();
    }
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  shareButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-share-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  /**
   * This gets called when an `FullscreenToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  shareButton.prototype.handleClick = function handleClick(event) {
    player.trigger('share');
  };

  return shareButton;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


shareButton.prototype.controlText_ = 'Share';

Component.registerComponent('shareButton', shareButton);

/**
 * @file fullscreen-toggle.js
 */
//var previousTrackIndex = ;
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var playlistButton = function (_Button) {
  inherits(playlistButton, _Button);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function playlistButton(player, options) {
    classCallCheck(this, playlistButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
    if (document$1[FullscreenApi.fullscreenEnabled] === false) {
      _this.disable();
    }

    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  playlistButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-playlist-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  playlistButton.prototype.handleClick = function handleClick(event) {
    player.trigger('playlist');
  };

  return playlistButton;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


playlistButton.prototype.controlText_ = 'Play list';

Component.registerComponent('playlistButton', playlistButton);

/**
 * @file fullscreen-toggle.js
 */
//var previousTrackIndex = ;
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var favouriteButton = function (_Button) {
  inherits(favouriteButton, _Button);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function favouriteButton(player, options) {
    classCallCheck(this, favouriteButton);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    if (document$1[FullscreenApi.fullscreenEnabled] === false) {
      _this.disable();
    }
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  favouriteButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-favourite-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  favouriteButton.prototype.handleClick = function handleClick(event) {
    player.trigger('favourite');
  };

  return favouriteButton;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


favouriteButton.prototype.controlText_ = 'Favourite';

Component.registerComponent('favouriteButton', favouriteButton);

/**
 * @file control-bar.js
 */
//import './audio-track-controls/'
/**
 * Container of main controls.
 *
 * @extends Component
 */

var AudioGroupButtonBar = function (_Component) {
    inherits(AudioGroupButtonBar, _Component);

    function AudioGroupButtonBar(player, options) {
        classCallCheck(this, AudioGroupButtonBar);

        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

        if (options.playerOptions.srcType == 'audio') {
            _this.options.children = 'audioTitleBanner';
        }

        return _this;
    }
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    AudioGroupButtonBar.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'audio-group-bar audioDiv',
            dir: 'ltr'
        });
    };

    return AudioGroupButtonBar;
}(Component);

/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */


AudioGroupButtonBar.prototype.options_ = {
    children: ['audioTitleBanner', 'favouriteButton', 'shareButton', 'playlistButton']
};

Component.registerComponent('AudioGroupButtonBar', AudioGroupButtonBar);

/**
 * @file play-toggle.js
 */

/**
 * Button to toggle between play and pause.
 *
 * @extends Button
 */

var PlayToggle = function (_Button) {
  inherits(PlayToggle, _Button);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function PlayToggle(player, options) {
    classCallCheck(this, PlayToggle);

    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

    _this.on(player, 'play', _this.handlePlay);
    _this.on(player, 'pause', _this.handlePause);
    _this.on(player, 'ended', _this.handleEnded);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-play-control ' + _Button.prototype.buildCSSClass.call(this);
  };

  /**
   * This gets called when an `PlayToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  PlayToggle.prototype.handleClick = function handleClick(event) {
    if (this.player_.paused()) {
      this.player_.play();
    } else {
      this.player_.pause();
    }
  };

  /**
   * This gets called once after the video has ended and the user seeks so that
   * we can change the replay button back to a play button.
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#seeked
   */


  PlayToggle.prototype.handleSeeked = function handleSeeked(event) {
    this.removeClass('play-ended');

    if (this.player_.paused()) {
      this.handlePause(event);
    } else {
      this.handlePlay(event);
    }
  };

  /**
   * Add the play-playing class to the element so it can change appearance.
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#play
   */


  PlayToggle.prototype.handlePlay = function handlePlay(event) {
    var _this2 = this;

    this.removeClass('play-ended');
    this.removeClass('play-paused');
    this.addClass('play-playing');
    this.addClass('play-play-toggle');
    setTimeout(function () {
      _this2.removeClass('play-play-toggle');
    }, 400);
    // change the button text to "Pause"
    this.controlText('Pause');
  };

  /**
   * Add the play-paused class to the element so it can change appearance.
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#pause
   */


  PlayToggle.prototype.handlePause = function handlePause(event) {
    var _this3 = this;

    this.removeClass('play-playing');
    this.addClass('play-paused');
    this.addClass('play-play-toggle');
    setTimeout(function () {
      _this3.removeClass('play-play-toggle');
    }, 400);
    // change the button text to "Play"
    this.controlText('Play');
  };

  /**
   * Add the play-ended class to the element so it can change appearance
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ended
   */


  PlayToggle.prototype.handleEnded = function handleEnded(event) {
    this.removeClass('play-playing');
    this.addClass('play-ended');
    // change the button text to "Replay"
    this.controlText('Replay');
    // on the next seek remove the replay button
    this.one(this.player_, 'seeked', this.handleSeeked);
  };

  return PlayToggle;
}(Button);

/**
 * The text that should display over the `PlayToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


PlayToggle.prototype.controlText_ = 'Play';

Component.registerComponent('PlayToggle', PlayToggle);

/**
 * @file fullscreen-toggle.js
 */

//var previousTrackIndex = ;
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var previousButton = function (_Button) {
    inherits(previousButton, _Button);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function previousButton(player, options) {
        classCallCheck(this, previousButton);

        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
        _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);

        if (document$1[FullscreenApi.fullscreenEnabled] === false) {
            _this.disable();
        }
        return _this;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    previousButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-previous-control ' + _Button.prototype.buildCSSClass.call(this);
    };

    /**
     * Handles fullscreenchange on the player and change control text accordingly.
     *
     * @param {EventTarget~Event} [event]
     *        The {@link Player#fullscreenchange} event that caused this function to be
     *        called.
     *
     * @listens Player#fullscreenchange
     */


    previousButton.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
            this.controlText('Non-Fullscreen');
        } else {
            this.controlText('Fullscreen');
        }
    };

    /**
     * This gets called when an `FullscreenToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */


    previousButton.prototype.handleClick = function handleClick(event) {
        var track = nextButton.prototype.getTrackIndex();

        var trackList = this.options_.playerOptions.trackList;

        if (track.index > 0) {
            track.index--;
        }
        nextButton.prototype.setTrackIndex(track.index, track.mode);
        player.src({
            src: trackList[track.index].src,
            type: trackList[track.index].trackList
        });
        player.play();
    };

    return previousButton;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


previousButton.prototype.controlText_ = 'Previous';

Component.registerComponent('previousButton', previousButton);

/**
 * @file fullscreen-toggle.js
 */
//var previousTrackIndex = ;
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var shuffleButton = function (_Button) {
    inherits(shuffleButton, _Button);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function shuffleButton(player, options) {
        classCallCheck(this, shuffleButton);

        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
        _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);
        _this.on(player, 'ended', _this.handleEnded);
        if (document$1[FullscreenApi.fullscreenEnabled] === false) {
            _this.disable();
        }
        return _this;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    shuffleButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-shuffle-control ' + _Button.prototype.buildCSSClass.call(this);
    };

    /**
     * Handles fullscreenchange on the player and change control text accordingly.
     *
     * @param {EventTarget~Event} [event]
     *        The {@link Player#fullscreenchange} event that caused this function to be
     *        called.
     *
     * @listens Player#fullscreenchange
     */


    shuffleButton.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
            this.controlText('Non-Fullscreen');
        } else {
            this.controlText('Fullscreen');
        }
    };

    shuffleButton.prototype.handleEnded = function handleEnded() {
        var track = nextButton.prototype.getTrackIndex();
        if (track.mode == 'shuffleMode') {
            this.shuffleMode();
        }
    };
    /**
     * This gets called when an `FullscreenToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */


    shuffleButton.prototype.handleClick = function handleClick(event) {
        var track = nextButton.prototype.getTrackIndex();
        var mode = void 0;
        track.mode == 'shuffleMode' ? mode = 'defaultMode' : mode = 'shuffleMode';
        nextButton.prototype.setTrackIndex(track.index, mode);
    };

    shuffleButton.prototype.shuffleIndex = function shuffleIndex(index, trackLength) {
        var shuffleRandom = Math.floor(Math.random() * trackLength);
        if (index != shuffleRandom) {
            return shuffleRandom;
        } else {
            return this.shuffleIndex(index, trackLength);
        }
    };

    shuffleButton.prototype.shuffleMode = function shuffleMode() {
        var track = nextButton.prototype.getTrackIndex();
        var trackList = this.options_.playerOptions.trackList;
        var shuffleTrackIndex = this.shuffleIndex(track.index, trackList.length);
        nextButton.prototype.setTrackIndex(shuffleTrackIndex, 'shuffleMode');
        player.src({
            src: trackList[shuffleTrackIndex].src,
            type: trackList[shuffleTrackIndex].trackList
        });
        player.play();
    };

    return shuffleButton;
}(Button);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


shuffleButton.prototype.controlText_ = 'Shuffle';

Component.registerComponent('shuffleButton', shuffleButton);

/**
 * @file fullscreen-toggle.js
 */

//var previousTrackIndex = ;
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var repeatButton = function (_Button) {
    inherits(repeatButton, _Button);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function repeatButton(player, options) {
        classCallCheck(this, repeatButton);

        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

        if (options.playerOptions.srcType && options.playerOptions.srcType == 'audio') ;
        _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);

        if (document$1[FullscreenApi.fullscreenEnabled] === false) {
            _this.disable();
        }

        _this.on(player, 'ended', _this.handleEnded);
        return _this;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    repeatButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-repeat-control ' + _Button.prototype.buildCSSClass.call(this);
    };

    repeatButton.prototype.handleEnded = function handleEnded() {
        var track = nextButton.prototype.getTrackIndex();
        if (track.mode == 'repeatMode') {
            this.TrackPlayRepeatMode();
        }
    };
    /**
     * Handles fullscreenchange on the player and change control text accordingly.
     *
     * @param {EventTarget~Event} [event]
     *        The {@link Player#fullscreenchange} event that caused this function to be
     *        called.
     *
     * @listens Player#fullscreenchange
     */


    repeatButton.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
            this.controlText('Non-Fullscreen');
        } else {
            this.controlText('Fullscreen');
        }
    };

    /**
     * This gets called when an `FullscreenToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */


    repeatButton.prototype.handleClick = function handleClick(event) {
        var track = nextButton.prototype.getTrackIndex();
        var mode = void 0;
        track.mode == 'repeatMode' ? mode = 'defaultMode' : mode = 'repeatMode';
        nextButton.prototype.setTrackIndex(track.index, 'repeatMode');
    };

    repeatButton.prototype.TrackPlayRepeatMode = function TrackPlayRepeatMode() {
        var track = nextButton.prototype.getTrackIndex();
        var trackList = this.options_.playerOptions.trackList;
        if (trackList.length > track.index + 1) {
            track.index++;
        } else {
            track.index = 0;
        }
        nextButton.prototype.setTrackIndex(track.index, 'repeatMode');
        player.src({
            src: trackList[track.index].src,
            type: trackList[track.index].trackList
        });
        player.play();
    };

    return repeatButton;
}(Button);
/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


repeatButton.prototype.controlText_ = 'Repeat';

Component.registerComponent('repeatButton', repeatButton);

/**
 * @file fullscreen-toggle.js
 */

//var previousTrackIndex = ;
/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

var repeatOneButton = function (_Button) {
    inherits(repeatOneButton, _Button);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function repeatOneButton(player, options) {
        classCallCheck(this, repeatOneButton);

        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

        if (options.playerOptions.srcType && options.playerOptions.srcType == 'audio') ;
        _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);

        if (document$1[FullscreenApi.fullscreenEnabled] === false) {
            _this.disable();
        }

        _this.on(player, 'ended', _this.handleEnded);
        return _this;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    repeatOneButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-repeat-control ' + _Button.prototype.buildCSSClass.call(this);
    };

    repeatOneButton.prototype.handleEnded = function handleEnded() {
        var track = nextButton.prototype.getTrackIndex();
        if (track.mode == 'repeatOneMode') {
            this.TrackPlayRepeatOneMode();
        }
    };
    /**
     * Handles fullscreenchange on the player and change control text accordingly.
     *
     * @param {EventTarget~Event} [event]
     *        The {@link Player#fullscreenchange} event that caused this function to be
     *        called.
     *
     * @listens Player#fullscreenchange
     */


    repeatOneButton.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
            this.controlText('Non-Fullscreen');
        } else {
            this.controlText('Fullscreen');
        }
    };

    /**
     * This gets called when an `FullscreenToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */


    repeatOneButton.prototype.handleClick = function handleClick(event) {
        var track = nextButton.prototype.getTrackIndex();
        var mode = void 0;
        track.mode == 'repeatOneMode' ? mode = 'defaultMode' : mode = 'repeatOneMode';
        nextButton.prototype.setTrackIndex(track.index, 'repeatOneMode');
    };

    repeatOneButton.prototype.TrackPlayRepeatOneMode = function TrackPlayRepeatOneMode() {
        var track = nextButton.prototype.getTrackIndex();
        var trackList = this.options_.playerOptions.trackList;
        // if (trackList.length > (track.index + 1)) {
        //     track.index++;
        // } else {
        //     track.index = 0;
        // }
        nextButton.prototype.setTrackIndex(track.index, 'repeatOneMode');
        player.src({
            src: trackList[track.index].src,
            type: trackList[track.index].trackList
        });
        player.play();
    };

    return repeatOneButton;
}(Button);
/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


repeatOneButton.prototype.controlText_ = 'Repeat current track';

Component.registerComponent('repeatOneButton', repeatOneButton);

/**
 * @file control-bar.js
 */
//import './audio-track-controls/'
/**
 * Container of main controls.
 *
 * @extends Component
 */

var AudioPlayButtonGroup = function (_Component) {
    inherits(AudioPlayButtonGroup, _Component);

    function AudioPlayButtonGroup(player, options) {
        classCallCheck(this, AudioPlayButtonGroup);

        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

        if (options.playerOptions.srcType == 'audio') {
            _this.options.children = 'audioTitleBanner';
        }

        return _this;
    }
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    AudioPlayButtonGroup.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'audio-play-button-group',
            dir: 'ltr'
        });
    };

    return AudioPlayButtonGroup;
}(Component);

/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */


AudioPlayButtonGroup.prototype.options_ = {
    children: ['repeatButton', 'previousButton', 'playToggle', 'nextButton', 'shuffleButton', 'repeatOneButton']
};

Component.registerComponent('AudioPlayButtonGroup', AudioPlayButtonGroup);

/**
 * @file menu.js
 */

/**
 * The Menu component is used to build popup menus, including subtitle and
 * captions selection menus.
 *
 * @extends Component
 */

var Menu = function (_Component) {
  inherits(Menu, _Component);

  /**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        the player that this component should attach to
   *
   * @param {Object} [options]
   *        Object of option names and values
   *
   */
  function Menu(player, options) {
    classCallCheck(this, Menu);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    if (options) {
      _this.menuButton_ = options.menuButton;
      if (_this.menuButton_.buttonPressed_) {
        _this.menuButton_.unpressButton();
      }
    }

    _this.focusedChild_ = -1;

    _this.on('keydown', _this.handleKeyPress);
    return _this;
  }

  /**
   * Add a {@link MenuItem} to the menu.
   *
   * @param {Object|string} component
   *        The name or instance of the `MenuItem` to add.
   *
   */


  Menu.prototype.addItem = function addItem(component) {
    this.addChild(component);
    component.on('click', bind(this, function (event) {
      // Unpress the associated MenuButton, and move focus back to it
      if (this.menuButton_) {
        this.menuButton_.unpressButton();

        // don't focus menu button if item is a caption settings item
        // because focus will move elsewhere
        if (component.name() !== 'CaptionSettingsMenuItem') {
          this.menuButton_.focus();
        }
      }
    }));
  };

  /**
   * Create the `Menu`s DOM element.
   *
   * @return {Element}
   *         the element that was created
   */


  Menu.prototype.createEl = function createEl$$1() {
    var contentElType = this.options_.contentElType || 'ul';

    this.contentEl_ = createEl(contentElType, {
      className: 'play-menu-content'
    });

    this.contentEl_.setAttribute('role', 'menu');
    var el = _Component.prototype.createEl.call(this, 'div', {
      append: this.contentEl_,
      className: 'play-menu'
    });

    el.appendChild(this.contentEl_);

    // Prevent clicks from bubbling up. Needed for Menu Buttons,
    // where a click on the parent is significant
    on(el, 'click', function (event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    });

    return el;
  };

  Menu.prototype.dispose = function dispose() {
    this.contentEl_ = null;

    _Component.prototype.dispose.call(this);
  };

  /**
   * Handle a `keydown` event on this menu. This listener is added in the constructor.
   *
   * @param {EventTarget~Event} event
   *        A `keydown` event that happened on the menu.
   *
   * @listens keydown
   */


  Menu.prototype.handleKeyPress = function handleKeyPress(event) {
    // Left and Down Arrows
    if (event.which === 37 || event.which === 40) {
      event.preventDefault();
      this.stepForward();

      // Up and Right Arrows
    } else if (event.which === 38 || event.which === 39) {
      event.preventDefault();
      this.stepBack();
    }
  };

  /**
   * Move to next (lower) menu item for keyboard users.
   */


  Menu.prototype.stepForward = function stepForward() {
    var stepChild = 0;

    if (this.focusedChild_ !== undefined) {
      stepChild = this.focusedChild_ + 1;
    }
    this.focus(stepChild);
  };

  /**
   * Move to previous (higher) menu item for keyboard users.
   */


  Menu.prototype.stepBack = function stepBack() {
    var stepChild = 0;

    if (this.focusedChild_ !== undefined) {
      stepChild = this.focusedChild_ - 1;
    }
    this.focus(stepChild);
  };

  /**
   * Set focus on a {@link MenuItem} in the `Menu`.
   *
   * @param {Object|string} [item=0]
   *        Index of child item set focus on.
   */


  Menu.prototype.focus = function focus() {
    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var children = this.children().slice();
    var haveTitle = children.length && children[0].className && /play-menu-title/.test(children[0].className);

    if (haveTitle) {
      children.shift();
    }

    if (children.length > 0) {
      if (item < 0) {
        item = 0;
      } else if (item >= children.length) {
        item = children.length - 1;
      }

      this.focusedChild_ = item;

      children[item].el_.focus();
    }
  };

  return Menu;
}(Component);

Component.registerComponent('Menu', Menu);

/**
 * @file menu-button.js
 */

/**
 * A `MenuButton` class for any popup {@link Menu}.
 *
 * @extends Component
 */

var MenuButton = function (_Component) {
  inherits(MenuButton, _Component);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */
  function MenuButton(player) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, MenuButton);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

    _this.menuButton_ = new Button(player, options);

    _this.menuButton_.controlText(_this.controlText_);
    _this.subMenu(_this.subMenu_);
    _this.menuButton_.el_.setAttribute('aria-haspopup', 'true');

    // Add buildCSSClass values to the button, not the wrapper
    var buttonClass = Button.prototype.buildCSSClass();

    _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;
    _this.menuButton_.removeClass('play-control');

    _this.addChild(_this.menuButton_);

    _this.update();

    _this.enabled_ = true;

    _this.on(_this.menuButton_, 'tap', _this.handleClick);
    _this.on(_this.menuButton_, 'click', _this.handleClick);
    _this.on(_this.menuButton_, 'focus', _this.handleFocus);
    _this.on(_this.menuButton_, 'blur', _this.handleBlur);

    _this.on('keydown', _this.handleSubmenuKeyPress);
    return _this;
  }

  /**
   * Update the menu based on the current state of its items.
   */


  MenuButton.prototype.update = function update() {
    var menu = this.createMenu();

    if (this.menu) {
      this.menu.dispose();
      this.removeChild(this.menu);
    }

    this.menu = menu;
    this.addChild(menu);

    /**
     * Track the state of the menu button
     *
     * @type {Boolean}
     * @private
     */
    this.buttonPressed_ = false;
    this.menuButton_.el_.setAttribute('aria-expanded', 'false');

    if (this.items && this.items.length <= this.hideThreshold_) {
      this.hide();
    } else {
      this.show();
    }
  };

  /**
   * Create the menu and add all items to it.
   *
   * @return {Menu}
   *         The constructed menu
   */


  MenuButton.prototype.createMenu = function createMenu() {
    var _this2 = this;

    var menu = new Menu(this.player_, { menuButton: this });

    /**
     * Hide the menu if the number of items is less than or equal to this threshold. This defaults
     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
     * it here because every time we run `createMenu` we need to reset the value.
     *
     * @protected
     * @type {Number}
     */
    this.hideThreshold_ = 0;

    // Add a title list item to the top
    if (this.options_.title) {
      var title = createEl('li', {
        className: 'play-menu-title',
        innerHTML: toTitleCase(this.options_.title),
        tabIndex: -1
      });

      this.hideThreshold_ += 1;

      menu.children_.unshift(title);
      title.addEventListener('click', function () {
        _this2.unpressButton();
      });
      prependTo(title, menu.contentEl());
    }

    this.items = this.createItems();

    if (this.items) {
      // Add menu items to the menu
      for (var i = 0; i < this.items.length; i++) {
        menu.addItem(this.items[i]);
      }
    }

    return menu;
  };

  /**
   * Create the list of menu items. Specific to each subclass.
   *
   * @abstract
   */


  MenuButton.prototype.createItems = function createItems() {};

  /**
   * Create the `MenuButtons`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */


  MenuButton.prototype.createEl = function createEl$$1() {
    return _Component.prototype.createEl.call(this, 'div', {
      className: this.buildWrapperCSSClass()
    }, {});
  };

  /**
   * Allow sub components to stack CSS class names for the wrapper element
   *
   * @return {string}
   *         The constructed wrapper DOM `className`
   */


  MenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    var menuButtonClass = 'play-menu-button';

    // If the inline option is passed, we want to use different styles altogether.
    if (this.options_.inline === true) {
      menuButtonClass += '-inline';
    } else {
      menuButtonClass += '-popup';
    }

    // TODO: Fix the CSS so that this isn't necessary
    var buttonClass = Button.prototype.buildCSSClass();

    return 'play-menu-button ' + menuButtonClass + ' ' + buttonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  MenuButton.prototype.buildCSSClass = function buildCSSClass() {
    var menuButtonClass = 'play-menu-button';

    // If the inline option is passed, we want to use different styles altogether.
    if (this.options_.inline === true) {
      menuButtonClass += '-inline';
    } else {
      menuButtonClass += '-popup';
    }

    return 'play-menu-button ' + menuButtonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
  };

  /**
   * Get or set the localized control text that will be used for accessibility.
   *
   * > NOTE: This will come from the internal `menuButton_` element.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.menuButton_.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */


  MenuButton.prototype.controlText = function controlText(text) {
    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.menuButton_.el();

    return this.menuButton_.controlText(text, el);
  };

  /**
   * Get or set the localized control text that will be used for accessibility.
   *
   * > NOTE: This will come from the internal `menuButton_` element.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.menuButton_.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */


  MenuButton.prototype.subMenu = function subMenu(bool) {
    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.menuButton_.el();

    if (bool) {
      var labelEl_ = createEl('span', {
        className: 'play-control-value',
        innerHTML: ''
      });

      el.appendChild(labelEl_);
      return el;
    }
    return;
  };

  /**
   * Handle a click on a `MenuButton`.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  MenuButton.prototype.handleClick = function handleClick(event) {
    // When you click the button it adds focus, which will show the menu.
    // So we'll remove focus when the mouse leaves the button. Focus is needed
    // for tab navigation.

    event.stopPropagation();
    if (this.buttonPressed_) {
      this.unpressButton();
    } else {
      this.pressButton();
    }
  };

  /**
   * Set the focus to the actual button, not to this element
   */


  MenuButton.prototype.focus = function focus() {
    this.menuButton_.focus();
  };

  /**
   * Remove the focus from the actual button, not this element
   */


  MenuButton.prototype.blur = function blur() {
    this.menuButton_.blur();
  };

  /**
   * This gets called when a `MenuButton` gains focus via a `focus` event.
   * Turns on listening for `keydown` events. When they happen it
   * calls `this.handleKeyPress`.
   *
   * @param {EventTarget~Event} event
   *        The `focus` event that caused this function to be called.
   *
   * @listens focus
   */


  MenuButton.prototype.handleFocus = function handleFocus() {
    on(document$1, 'keydown', bind(this, this.handleKeyPress));
  };

  /**
   * Called when a `MenuButton` loses focus. Turns off the listener for
   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
   *
   * @param {EventTarget~Event} event
   *        The `blur` event that caused this function to be called.
   *
   * @listens blur
   */


  MenuButton.prototype.handleBlur = function handleBlur() {
    off(document$1, 'keydown', bind(this, this.handleKeyPress));
  };

  /**
   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
   * {@link ClickableComponent#handleKeyPress} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */


  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {

    // Escape (27) key or Tab (9) key unpress the 'button'
    if (event.which === 27 || event.which === 9) {
      if (this.buttonPressed_) {
        this.unpressButton();
      }
      // Don't preventDefault for Tab key - we still want to lose focus
      if (event.which !== 9) {
        event.preventDefault();
        // Set focus back to the menu button's button
        this.menuButton_.el_.focus();
      }
      // Up (38) key or Down (40) key press the 'button'
    } else if (event.which === 38 || event.which === 40) {
      if (!this.buttonPressed_) {
        this.pressButton();
        event.preventDefault();
      }
    }
  };

  /**
   * Handle a `keydown` event on a sub-menu. The listener for this is added in
   * the constructor.
   *
   * @param {EventTarget~Event} event
   *        Key press event
   *
   * @listens keydown
   */


  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {

    // Escape (27) key or Tab (9) key unpress the 'button'
    if (event.which === 27 || event.which === 9) {
      if (this.buttonPressed_) {
        this.unpressButton();
      }
      // Don't preventDefault for Tab key - we still want to lose focus
      if (event.which !== 9) {
        event.preventDefault();
        // Set focus back to the menu button's button
        this.menuButton_.el_.focus();
      }
    }
  };

  /**
   * Put the current `MenuButton` into a pressed state.
   */


  MenuButton.prototype.pressButton = function pressButton() {
    if (this.enabled_) {
      this.buttonPressed_ = true;
      this.menu.lockShowing();
      this.menuButton_.el_.parentNode.parentNode.classList.add('play-settings-clicked');
      this.menuButton_.el_.parentNode.classList.add('play-settings-clicked');
      this.menuButton_.el_.setAttribute('aria-expanded', 'true');

      // set the focus into the submenu, except on iOS where it is resulting in
      // undesired scrolling behavior when the player is in an iframe
      if (IS_IOS && isInFrame()) {
        // Return early so that the menu isn't focused
        return;
      }

      // this.menu.focus();
    }
  };

  /**
   * Take the current `MenuButton` out of a pressed state.
   */


  MenuButton.prototype.unpressButton = function unpressButton() {
    if (this.enabled_) {
      this.buttonPressed_ = false;
      this.menu.unlockShowing();
      if (this.menuButton_.el_.parentNode.parentNode.classList.remove('play-settings-clicked') !== -1) {
        this.menuButton_.el_.parentNode.parentNode.classList.remove('play-settings-clicked');
        if (this.menuButton_.el_.parentNode.className.search('play-settings-clicked') !== -1) {
          this.menuButton_.el_.parentNode.classList.remove('play-settings-clicked');
        }
      }
      this.menuButton_.el_.setAttribute('aria-expanded', 'false');
    }
  };

  /**
   * Disable the `MenuButton`. Don't allow it to be clicked.
   */


  MenuButton.prototype.disable = function disable() {
    this.unpressButton();

    this.enabled_ = false;
    this.addClass('play-disabled');

    this.menuButton_.disable();
  };

  /**
   * Enable the `MenuButton`. Allow it to be clicked.
   */


  MenuButton.prototype.enable = function enable() {
    this.enabled_ = true;
    this.removeClass('play-disabled');

    this.menuButton_.enable();
  };

  return MenuButton;
}(Component);

Component.registerComponent('MenuButton', MenuButton);

/**
 * @file track-button.js
 */

/**
 * The base class for buttons that toggle specific  track types (e.g. subtitles).
 *
 * @extends MenuButton
 */

var TrackButton = function (_MenuButton) {
  inherits(TrackButton, _MenuButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function TrackButton(player, options) {
    classCallCheck(this, TrackButton);

    var tracks = options.tracks;

    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));

    _this.labelEl_ = _this.subMenu(true);

    if (_this.items.length <= 1) {
      _this.hide();
    }

    if (!tracks) {
      return possibleConstructorReturn(_this);
    }

    var updateHandler = bind(_this, _this.update);

    tracks.addEventListener('removetrack', updateHandler);
    tracks.addEventListener('addtrack', updateHandler);
    _this.player_.on('ready', updateHandler);

    _this.player_.on('dispose', function () {
      tracks.removeEventListener('removetrack', updateHandler);
      tracks.removeEventListener('addtrack', updateHandler);
    });
    return _this;
  }

  return TrackButton;
}(MenuButton);

Component.registerComponent('TrackButton', TrackButton);

/**
 * @file menu-item.js
 */

/**
 * The component for a menu item. `<li>`
 *
 * @extends ClickableComponent
 */

var MenuItem = function (_ClickableComponent) {
  inherits(MenuItem, _ClickableComponent);

  /**
   * Creates an instance of the this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   *
   */
  function MenuItem(player, options) {
    classCallCheck(this, MenuItem);

    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

    _this.selectable = options.selectable;
    _this.isSelected_ = options.selected || false;
    _this.multiSelectable = options.multiSelectable;

    _this.selected(_this.isSelected_);

    if (_this.selectable) {
      if (_this.multiSelectable) {
        _this.el_.setAttribute('role', 'menuitemcheckbox');
      } else {
        _this.el_.setAttribute('role', 'menuitemradio');
      }
    } else {
      _this.el_.setAttribute('role', 'menuitem');
    }
    return _this;
  }

  /**
   * Create the `MenuItem's DOM element
   *
   * @param {string} [type=li]
   *        Element's node type, not actually used, always set to `li`.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element
   *
   * @param {Object} [attrs={}]
   *        An object of attributes that should be set on the element
   *
   * @return {Element}
   *         The element that gets created.
   */


  MenuItem.prototype.createEl = function createEl(type, props, attrs) {
    // The control is textual, not just an icon
    this.nonIconControl = true;

    return _ClickableComponent.prototype.createEl.call(this, 'li', assign({
      className: 'play-menu-item',
      innerHTML: '<span class="play-menu-item-text">' + this.localize(this.options_.label) + '</span>',
      tabIndex: -1
    }, props), attrs);
  };

  /**
   * Any click on a `MenuItem` puts it into the selected state.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  MenuItem.prototype.handleClick = function handleClick(event) {
    this.selected(true);
  };

  /**
   * Set the state for this menu item as selected or not.
   *
   * @param {boolean} selected
   *        if the menu item is selected or not
   */


  MenuItem.prototype.selected = function selected(_selected) {
    if (this.selectable) {
      if (_selected) {
        this.addClass('play-selected');
        this.el_.setAttribute('aria-checked', 'true');
        // aria-checked isn't fully supported by browsers/screen readers,
        // so indicate selected state to screen reader in the control text.
        this.controlText(', selected');
        this.isSelected_ = true;
      } else {
        this.removeClass('play-selected');
        this.el_.setAttribute('aria-checked', 'false');
        // Indicate un-selected state to screen reader
        this.controlText('');
        this.isSelected_ = false;
      }
    }
  };

  return MenuItem;
}(ClickableComponent);

Component.registerComponent('MenuItem', MenuItem);

/**
 * @file text-track-menu-item.js
 */

/**
 * The specific menu item type for selecting a language within a text track kind
 *
 * @extends MenuItem
 */

var TextTrackMenuItem = function (_MenuItem) {
    inherits(TextTrackMenuItem, _MenuItem);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function TextTrackMenuItem(player, options) {
        classCallCheck(this, TextTrackMenuItem);

        var track = options.track;
        var tracks = player.textTracks();

        // Modify options for parent MenuItem class's init.
        options.label = track.label || track.language || 'Unknown';
        options.selected = track.mode === 'showing';

        var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

        _this.afterTrigger = options.afterTrigger;

        _this.track = track;
        var changeHandler = function changeHandler() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            _this.handleTracksChange.apply(_this, args);
        };
        var selectedLanguageChangeHandler = function selectedLanguageChangeHandler() {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            _this.handleSelectedLanguageChange.apply(_this, args);
        };

        player.on(['loadstart', 'texttrackchange'], changeHandler);
        tracks.addEventListener('change', changeHandler);
        tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
        _this.on('dispose', function () {
            player.off(['loadstart', 'texttrackchange'], changeHandler);
            tracks.removeEventListener('change', changeHandler);
            tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
        });

        // iOS7 doesn't dispatch change events to TextTrackLists when an
        // associated track's mode changes. Without something like
        // Object.observe() (also not present on iOS7), it's not
        // possible to detect changes to the mode attribute and polyfill
        // the change event. As a poor substitute, we manually dispatch
        // change events whenever the controls modify the mode.
        if (tracks.onchange === undefined) {
            var event = void 0;

            _this.on(['tap', 'click'], function () {
                if (_typeof(window$1.Event) !== 'object') {
                    // Android 2.3 throws an Illegal Constructor error for window.Event
                    try {
                        event = new window$1.Event('change');
                    } catch (err) {
                        // continue regardless of error
                    }
                }

                if (!event) {
                    event = document$1.createEvent('Event');
                    event.initEvent('change', true, true);
                }

                tracks.dispatchEvent(event);
            });
        }

        // set the default state based on current tracks
        _this.handleTracksChange();
        return _this;
    }

    /**
     * This gets called when an `TextTrackMenuItem` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} event
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */


    TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
        var kind = this.track.kind;
        var kinds = this.track.kinds;
        var tracks = this.player_.textTracks();

        if (!kinds) {
            kinds = [kind];
        }
        _MenuItem.prototype.handleClick.call(this, event);

        if (!tracks) {
            return;
        }

        for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];

            if (track === this.track && kinds.indexOf(track.kind) > -1) {
                if (track.mode !== 'showing') {
                    track.mode = 'showing';
                }
            } else if (track.mode !== 'disabled') {
                track.mode = 'disabled';
            }
        }
        if (this.afterTrigger) {
            this.afterTrigger(this);
        }
    };

    /**
     * Handle text track list change
     *
     * @param {EventTarget~Event} event
     *        The `change` event that caused this function to be called.
     *
     * @listens TextTrackList#change
     */


    TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
        var shouldBeSelected = this.track.mode === 'showing';

        // Prevent redundant selected() calls because they may cause
        // screen readers to read the appended control text unnecessarily
        if (shouldBeSelected !== this.isSelected_) {
            this.selected(shouldBeSelected);
        }
    };

    TextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
        if (this.track.mode === 'showing') {
            var selectedLanguage = this.player_.cache_.selectedLanguage;

            // Don't replace the kind of track across the same language
            if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {
                return;
            }

            this.player_.cache_.selectedLanguage = {
                enabled: true,
                language: this.track.language,
                kind: this.track.kind
            };
        }
    };

    TextTrackMenuItem.prototype.dispose = function dispose() {
        // remove reference to track object on dispose
        this.track = null;

        _MenuItem.prototype.dispose.call(this);
    };

    return TextTrackMenuItem;
}(MenuItem);

Component.registerComponent('TextTrackMenuItem', TextTrackMenuItem);

/**
 * @file off-text-track-menu-item.js
 */

/**
 * A special menu item for turning of a specific type of text track
 *
 * @extends TextTrackMenuItem
 */

var OffTextTrackMenuItem = function (_TextTrackMenuItem) {
    inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function OffTextTrackMenuItem(player, options) {
        classCallCheck(this, OffTextTrackMenuItem);

        // Create pseudo track info
        // Requires options['kind']
        options.track = {
            player: player,
            kind: options.kind,
            kinds: options.kinds,
            default: false,
            mode: 'disabled'
        };

        if (!options.kinds) {
            options.kinds = [options.kind];
        }

        if (options.label) {
            options.track.label = options.label;
        } else {
            options.track.label = options.kinds.join(' and ') + ' off';
        }

        // MenuItem is selectable
        options.selectable = true;
        // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
        options.multiSelectable = false;

        var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));

        _this.afterTrigger = options.afterTrigger;
        return _this;
    }

    /**
     * Handle text track change
     *
     * @param {EventTarget~Event} event
     *        The event that caused this function to run
     */


    OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
        var tracks = this.player().textTracks();
        var shouldBeSelected = true;

        for (var i = 0, l = tracks.length; i < l; i++) {
            var track = tracks[i];

            if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {
                shouldBeSelected = false;
                break;
            }
        }

        // Prevent redundant selected() calls because they may cause
        // screen readers to read the appended control text unnecessarily
        if (shouldBeSelected !== this.isSelected_) {
            this.selected(shouldBeSelected);
        }
    };

    OffTextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
        var tracks = this.player().textTracks();
        var allHidden = true;

        for (var i = 0, l = tracks.length; i < l; i++) {
            var track = tracks[i];

            if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {
                allHidden = false;
                break;
            }
        }

        if (allHidden) {
            this.player_.cache_.selectedLanguage = {
                enabled: false
            };
        }
    };

    return OffTextTrackMenuItem;
}(TextTrackMenuItem);

Component.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);

/**
 * @file text-track-button.js
 */

/**
 * The base class for buttons that toggle specific text track types (e.g. subtitles)
 *
 * @extends MenuButton
 */

var TextTrackButton = function (_TrackButton) {
    inherits(TextTrackButton, _TrackButton);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     */
    function TextTrackButton(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, TextTrackButton);

        options.tracks = player.textTracks();
        options.title = player.localize('Subtitles');

        var _this = possibleConstructorReturn(this, _TrackButton.call(this, player, options));

        _this.labelEl_ = _this.labelEl_.querySelector('.play-control-value');
        return _this;
    }

    /**
     * Create a menu item for each text track
     *
     * @param {TextTrackMenuItem[]} [items=[]]
     *        Existing array of items to use during creation
     *
     * @return {TextTrackMenuItem[]}
     *         Array of menu items that were created
     */


    TextTrackButton.prototype.createItems = function createItems() {
        var _this2 = this;

        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var TrackMenuItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TextTrackMenuItem;


        // Label is an override for the [track] off label
        // USed to localise captions/subtitles
        var label = void 0;

        if (this.label_) {
            //  label = `${this.label_} off`;
            label = 'Off';
        }
        // Add an OFF menu item to turn all tracks off
        items.push(new OffTextTrackMenuItem(this.player_, {
            kinds: this.kinds_,
            kind: this.kind_,
            afterTrigger: function afterTrigger(comp) {
                _this2.updateDisplayText(comp);
            },
            label: label
        }));

        this.hideThreshold_ += 1;

        var tracks = this.player_.textTracks();

        if (!Array.isArray(this.kinds_)) {
            this.kinds_ = [this.kind_];
        }

        for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];

            // only add tracks that are of an appropriate kind and have a label
            if (this.kinds_.indexOf(track.kind) > -1) {

                var item = new TrackMenuItem(this.player_, {
                    track: track,
                    // MenuItem is selectable
                    selectable: true,
                    // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
                    multiSelectable: false,
                    afterTrigger: function afterTrigger(comp) {
                        _this2.updateDisplayText(comp);
                    }
                });

                item.addClass('play-' + track.kind + '-menu-item');
                items.push(item);
            }
            if (items[i] && items[i].isSelected_) {
                this.updateDisplayText(items[i]);
            }
        }
        return items;
    };

    TextTrackButton.prototype.updateDisplayText = function updateDisplayText(selectedItem) {
        this.labelEl_.innerHTML = selectedItem.options_.label;
        var playControl = document.querySelector('.play-settings > .play-control');
        playControl.classList.add("play-hidden");
    };

    return TextTrackButton;
}(TrackButton);

Component.registerComponent('TextTrackButton', TextTrackButton);

/**
 * @file chapters-track-menu-item.js
 */

/**
 * The chapter track menu item
 *
 * @extends MenuItem
 */

var ChaptersTrackMenuItem = function (_MenuItem) {
  inherits(ChaptersTrackMenuItem, _MenuItem);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function ChaptersTrackMenuItem(player, options) {
    classCallCheck(this, ChaptersTrackMenuItem);

    var track = options.track;
    var cue = options.cue;
    var currentTime = player.currentTime();

    // Modify options for parent MenuItem class's init.
    options.selectable = true;
    options.multiSelectable = false;
    options.label = cue.text;
    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;

    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

    _this.track = track;
    _this.cue = cue;
    track.addEventListener('cuechange', bind(_this, _this.update));
    return _this;
  }

  /**
   * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {
    _MenuItem.prototype.handleClick.call(this);
    this.player_.currentTime(this.cue.startTime);
    this.update(this.cue.startTime);
  };

  /**
   * Update chapter menu item
   *
   * @param {EventTarget~Event} [event]
   *        The `cuechange` event that caused this function to run.
   *
   * @listens TextTrack#cuechange
   */


  ChaptersTrackMenuItem.prototype.update = function update(event) {
    var cue = this.cue;
    var currentTime = this.player_.currentTime();

    // vjs.log(currentTime, cue.startTime);
    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
  };

  return ChaptersTrackMenuItem;
}(MenuItem);

Component.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);

/**
 * @file chapters-button.js
 */

/**
 * The button component for toggling and selecting chapters
 * Chapters act much differently than other text tracks
 * Cues are navigation vs. other tracks of alternative languages
 *
 * @extends TextTrackButton
 */

var ChaptersButton = function (_TextTrackButton) {
    inherits(ChaptersButton, _TextTrackButton);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {Component~ReadyCallback} [ready]
     *        The function to call when this function is ready.
     */
    function ChaptersButton(player, options, ready) {
        classCallCheck(this, ChaptersButton);
        return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
    };

    ChaptersButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'play-chapters-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
    };

    /**
     * Update the menu based on the current state of its items.
     *
     * @param {EventTarget~Event} [event]
     *        An event that triggered this function to run.
     *
     * @listens TextTrackList#addtrack
     * @listens TextTrackList#removetrack
     * @listens TextTrackList#change
     */


    ChaptersButton.prototype.update = function update(event) {
        if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {
            this.setTrack(this.findChaptersTrack());
        }
        _TextTrackButton.prototype.update.call(this);
    };

    /**
     * Set the currently selected track for the chapters button.
     *
     * @param {TextTrack} track
     *        The new track to select. Nothing will change if this is the currently selected
     *        track.
     */


    ChaptersButton.prototype.setTrack = function setTrack(track) {
        if (this.track_ === track) {
            return;
        }

        if (!this.updateHandler_) {
            this.updateHandler_ = this.update.bind(this);
        }

        // here this.track_ refers to the old track instance
        if (this.track_) {
            var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

            if (remoteTextTrackEl) {
                remoteTextTrackEl.removeEventListener('load', this.updateHandler_);
            }

            this.track_ = null;
        }

        this.track_ = track;

        // here this.track_ refers to the new track instance
        if (this.track_) {
            this.track_.mode = 'hidden';

            var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

            if (_remoteTextTrackEl) {
                _remoteTextTrackEl.addEventListener('load', this.updateHandler_);
            }
        }
    };

    /**
     * Find the track object that is currently in use by this ChaptersButton
     *
     * @return {TextTrack|undefined}
     *         The current track or undefined if none was found.
     */


    ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {
        var tracks = this.player_.textTracks() || [];

        for (var i = tracks.length - 1; i >= 0; i--) {
            // We will always choose the last track as our chaptersTrack
            var track = tracks[i];

            if (track.kind === this.kind_) {
                return track;
            }
        }
    };

    /**
     * Get the caption for the ChaptersButton based on the track label. This will also
     * use the current tracks localized kind as a fallback if a label does not exist.
     *
     * @return {string}
     *         The tracks current label or the localized track kind.
     */


    ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {
        if (this.track_ && this.track_.label) {
            return this.track_.label;
        }
        return this.localize(toTitleCase(this.kind_));
    };

    /**
     * Create menu from chapter track
     *
     * @return {Menu}
     *         New menu for the chapter buttons
     */


    ChaptersButton.prototype.createMenu = function createMenu() {
        this.options_.title = this.getMenuCaption();
        return _TextTrackButton.prototype.createMenu.call(this);
    };

    /**
     * Create a menu item for each text track
     *
     * @return {TextTrackMenuItem[]}
     *         Array of menu items
     */


    ChaptersButton.prototype.createItems = function createItems() {
        var items = [];

        if (!this.track_) {
            return items;
        }

        var cues = this.track_.cues;

        if (!cues) {
            return items;
        }

        for (var i = 0, l = cues.length; i < l; i++) {
            var cue = cues[i];
            var mi = new ChaptersTrackMenuItem(this.player_, { track: this.track_, cue: cue });

            items.push(mi);
        }

        return items;
    };

    return ChaptersButton;
}(TextTrackButton);

/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */


ChaptersButton.prototype.kind_ = 'chapters';

/**
 * The text that should display over the `ChaptersButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */
ChaptersButton.prototype.controlText_ = 'Chapters';

Component.registerComponent('ChaptersButton', ChaptersButton);

/**
 * @file descriptions-button.js
 */

/**
 * The button component for toggling and selecting descriptions
 *
 * @extends TextTrackButton
 */

var DescriptionsButton = function (_TextTrackButton) {
  inherits(DescriptionsButton, _TextTrackButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when this component is ready.
   */
  function DescriptionsButton(player, options, ready) {
    classCallCheck(this, DescriptionsButton);

    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

    var tracks = player.textTracks();
    var changeHandler = bind(_this, _this.handleTracksChange);

    tracks.addEventListener('change', changeHandler);
    _this.on('dispose', function () {
      tracks.removeEventListener('change', changeHandler);
    });
    return _this;
  }

  /**
   * Handle text track change
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run
   *
   * @listens TextTrackList#change
   */


  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
    var tracks = this.player().textTracks();
    var disabled = false;

    // Check whether a track of a different kind is showing
    for (var i = 0, l = tracks.length; i < l; i++) {
      var track = tracks[i];

      if (track.kind !== this.kind_ && track.mode === 'showing') {
        disabled = true;
        break;
      }
    }

    // If another track is showing, disable this menu button
    if (disabled) {
      this.disable();
    } else {
      this.enable();
    }
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
  };

  DescriptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'play-descriptions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
  };

  return DescriptionsButton;
}(TextTrackButton);

/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */


DescriptionsButton.prototype.kind_ = 'descriptions';

/**
 * The text that should display over the `DescriptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */
DescriptionsButton.prototype.controlText_ = 'Descriptions';

Component.registerComponent('DescriptionsButton', DescriptionsButton);

/**
 * @file subtitles-button.js
 */

/**
 * The button component for toggling and selecting subtitles
 *
 * @extends TextTrackButton
 */

var SubtitlesButton = function (_TextTrackButton) {
  inherits(SubtitlesButton, _TextTrackButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when this component is ready.
   */
  function SubtitlesButton(player, options, ready) {
    classCallCheck(this, SubtitlesButton);
    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
  };

  SubtitlesButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'play-subtitles-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
  };

  return SubtitlesButton;
}(TextTrackButton);

/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */


SubtitlesButton.prototype.kind_ = 'subtitles';

/**
 * The text that should display over the `SubtitlesButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */
SubtitlesButton.prototype.controlText_ = 'Subtitles';

Component.registerComponent('SubtitlesButton', SubtitlesButton);

/**
 * @file caption-settings-menu-item.js
 */

/**
 * The menu item for caption track settings menu
 *
 * @extends TextTrackMenuItem
 */

var CaptionSettingsMenuItem = function (_TextTrackMenuItem) {
  inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function CaptionSettingsMenuItem(player, options) {
    classCallCheck(this, CaptionSettingsMenuItem);

    options.track = {
      player: player,
      kind: options.kind,
      //  label: options.kind + ' settings',
      label: 'Settings',
      selectable: false,
      default: false,
      mode: 'disabled'
    };

    // CaptionSettingsMenuItem has no concept of 'selected'
    options.selectable = false;

    options.name = 'CaptionSettingsMenuItem';

    var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));

    _this.addClass('play-texttrack-settings');
    _this.controlText(', opens ' + options.kind + ' settings dialog');
    return _this;
  }

  /**
   * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {
    this.player_.trigger('modelOpen');
    this.player().getChild('textTrackSettings').open();
  };

  return CaptionSettingsMenuItem;
}(TextTrackMenuItem);

Component.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);

/**
 * @file captions-button.js
 */

/**
 * The button component for toggling and selecting captions
 *
 * @extends TextTrackButton
 */

var CaptionsButton = function (_TextTrackButton) {
  inherits(CaptionsButton, _TextTrackButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when this component is ready.
   */
  function CaptionsButton(player, options, ready) {
    classCallCheck(this, CaptionsButton);
    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
  };

  CaptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'play-captions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
  };

  /**
   * Create caption menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */


  CaptionsButton.prototype.createItems = function createItems() {
    var items = [];

    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {
      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.kind_ }));

      this.hideThreshold_ += 1;
    }

    return _TextTrackButton.prototype.createItems.call(this, items);
  };

  return CaptionsButton;
}(TextTrackButton);

/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */


CaptionsButton.prototype.kind_ = 'captions';

/**
 * The text that should display over the `CaptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */
CaptionsButton.prototype.controlText_ = 'Captions';

Component.registerComponent('CaptionsButton', CaptionsButton);

/**
 * @file subs-caps-menu-item.js
 */

/**
 * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
 * in the SubsCapsMenu.
 *
 * @extends TextTrackMenuItem
 */

var SubsCapsMenuItem = function (_TextTrackMenuItem) {
    inherits(SubsCapsMenuItem, _TextTrackMenuItem);

    function SubsCapsMenuItem() {
        classCallCheck(this, SubsCapsMenuItem);
        return possibleConstructorReturn(this, _TextTrackMenuItem.apply(this, arguments));
    }

    SubsCapsMenuItem.prototype.createEl = function createEl(type, props, attrs) {
        var innerHTML = '<span class="play-menu-item-text">' + this.localize(this.options_.label);

        if (this.options_.track.kind === 'captions') {
            innerHTML += '\n        <span aria-hidden="true" class="play-icon-placeholder"></span>\n        <span class="play-control-text"> ' + this.localize('Captions') + '</span>\n      ';
        }

        innerHTML += '</span>';

        var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({
            innerHTML: innerHTML
        }, props), attrs);

        return el;
    };

    return SubsCapsMenuItem;
}(TextTrackMenuItem);

Component.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);

/**
 * @file sub-caps-button.js
 */
/**
 * The button component for toggling and selecting captions and/or subtitles
 *
 * @extends TextTrackButton
 */

var SubsCapsButton = function (_TextTrackButton) {
    inherits(SubsCapsButton, _TextTrackButton);

    function SubsCapsButton(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, SubsCapsButton);

        // Although North America uses "captions" in most cases for
        // "captions and subtitles" other locales use "subtitles"
        var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options));

        _this.label_ = 'subtitles';
        if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {
            _this.label_ = 'Subtitles';
        }
        _this.menuButton_.controlText(toTitleCase(_this.label_));
        return _this;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    SubsCapsButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-subs-caps-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
    };

    SubsCapsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'play-subs-caps-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
    };

    /**
     * Create caption/subtitles menu items
     *
     * @return {CaptionSettingsMenuItem[]}
     *         The array of current menu items.
     */


    SubsCapsButton.prototype.createItems = function createItems() {
        var items = [];

        if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {
            items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.label_ }));

            this.hideThreshold_ += 1;
        }

        items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);
        return items;
    };

    return SubsCapsButton;
}(TextTrackButton);

/**
 * `kind`s of TextTrack to look for to associate it with this menu.
 *
 * @type {array}
 * @private
 */


SubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];

/**
 * The text that should display over the `SubsCapsButton`s controls.
 *
 *
 * @type {string}
 * @private
 */
SubsCapsButton.prototype.controlText_ = 'Subtitles';

Component.registerComponent('SubsCapsButton', SubsCapsButton);

/**
 * @file audio-track-menu-item.js
 */

/**
 * An {@link AudioTrack} {@link MenuItem}
 *
 * @extends MenuItem
 */

var AudioTrackMenuItem = function (_MenuItem) {
    inherits(AudioTrackMenuItem, _MenuItem);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    function AudioTrackMenuItem(player, options) {
        classCallCheck(this, AudioTrackMenuItem);

        var track = options.track;
        var tracks = player.audioTracks();

        // Modify options for parent MenuItem class's init.
        options.label = track.label || track.language || 'Unknown';
        options.selected = track.enabled;

        var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

        _this.track = track;

        _this.addClass('play-' + track.kind + '-menu-item');
        _this.afterTrigger = options.afterTrigger;

        var changeHandler = function changeHandler() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            _this.handleTracksChange.apply(_this, args);
        };

        tracks.addEventListener('change', changeHandler);
        _this.on('dispose', function () {
            tracks.removeEventListener('change', changeHandler);
        });
        return _this;
    }

    AudioTrackMenuItem.prototype.createEl = function createEl(type, props, attrs) {
        var innerHTML = '<span class="play-menu-item-text">' + this.localize(this.options_.label);

        if (this.options_.track.kind === 'main-desc') {
            innerHTML += '\n        <span aria-hidden="true" class="play-icon-placeholder"></span>\n        <span class="play-control-text"> ' + this.localize('Descriptions') + '</span>\n      ';
        }

        innerHTML += '</span>';

        var el = _MenuItem.prototype.createEl.call(this, type, assign({
            innerHTML: innerHTML
        }, props), attrs);

        return el;
    };

    /**
     * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
     * for more detailed information on what a click can be.
     *
     * @param {EventTarget~Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */


    AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
        player.src({
            src: 'https://d6inq6b33hd48.cloudfront.net/encoded/music/Te-Aki1524835081.m3u8',
            type: 'application/x-mpegURL'
        });
        player.play();
        var tracks = this.player_.audioTracks();

        _MenuItem.prototype.handleClick.call(this, event);

        for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];

            track.enabled = track === this.track;
        }
        if (this.afterTrigger) {
            this.afterTrigger(this);
        }
        this.selected(this.track.enabled);
    };

    /**
     * Handle any {@link AudioTrack} change.
     *
     * @param {EventTarget~Event} [event]
     *        The {@link AudioTrackList#change} event that caused this to run.
     *
     * @listens AudioTrackList#change
     */


    AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
        this.selected(this.track.enabled);
    };

    return AudioTrackMenuItem;
}(MenuItem);

Component.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);

/**
 * @file audio-track-button.js
 */

/**
 * The base class for buttons that toggle specific {@link AudioTrack} types.
 *
 * @extends TrackButton
 */

var AudioTrackButton = function (_TrackButton) {
    inherits(AudioTrackButton, _TrackButton);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     */
    function AudioTrackButton(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, AudioTrackButton);

        options.tracks = player.audioTracks();
        options.title = player.localize('Audio Tracks');

        var _this = possibleConstructorReturn(this, _TrackButton.call(this, player, options));

        _this.labelEl_ = _this.labelEl_.querySelector('.play-control-value');
        return _this;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */


    AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
    };

    AudioTrackButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'play-audio-button ' + _TrackButton.prototype.buildWrapperCSSClass.call(this);
    };

    /**
     * Create a menu item for each audio track
     *
     * @param {AudioTrackMenuItem[]} [items=[]]
     *        An array of existing menu items to use.
     *
     * @return {AudioTrackMenuItem[]}
     *         An array of menu items
     */


    AudioTrackButton.prototype.createItems = function createItems() {
        var _this2 = this;

        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        // if there's only one audio track, there no point in showing it
        this.hideThreshold_ = 1;

        var tracks = this.player_.audioTracks();

        for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];

            items.push(new AudioTrackMenuItem(this.player_, {
                track: track,
                // MenuItem is selectable
                selectable: true,
                // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
                multiSelectable: false,
                afterTrigger: function afterTrigger(comp) {
                    _this2.updateDisplayText(comp);
                }
            }));
            if (items[i].isSelected_) {
                this.updateDisplayText(items[i]);
            }
        }
        return items;
    };

    AudioTrackButton.prototype.updateDisplayText = function updateDisplayText(selectedItem) {
        this.labelEl_.innerHTML = selectedItem.options_.label;
    };

    return AudioTrackButton;
}(TrackButton);

/**
 * The text that should display over the `AudioTrackButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


AudioTrackButton.prototype.controlText_ = 'Audio Track';
Component.registerComponent('AudioTrackButton', AudioTrackButton);

var MultipleAudioMenuItem = function (_MenuItem) {
    inherits(MultipleAudioMenuItem, _MenuItem);

    function MultipleAudioMenuItem(player, options) {
        classCallCheck(this, MultipleAudioMenuItem);

        var track = options.track;
        var tracks = player.audioTracks();

        options.label = track.label || track.language || 'Unknown';
        options.selected = track.enabled;

        var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

        _this.track = track;

        _this.addClass('play-' + track.kind + '-menu-item');
        _this.afterTrigger = options.afterTrigger;

        var changeHandler = function changeHandler() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            _this.handleTracksChange.apply(_this, args);
        };

        tracks.addEventListener('change', changeHandler);
        _this.on('dispose', function () {
            tracks.removeEventListener('change', changeHandler);
        });
        return _this;
    }

    MultipleAudioMenuItem.prototype.createEl = function createEl(type, props, attrs) {
        var innerHTML = '<span class="play-menu-item-text">' + this.localize(this.options_.label);

        if (this.options_.track.kind === 'main-desc') {
            innerHTML += '\n        <span aria-hidden="true" class="play-icon-placeholder"></span>\n        <span class="play-control-text"> ' + this.localize('Descriptions') + '</span>\n      ';
        }

        innerHTML += '</span>';

        var el = _MenuItem.prototype.createEl.call(this, type, assign({
            innerHTML: innerHTML
        }, props), attrs);

        return el;
    };

    MultipleAudioMenuItem.prototype.handleClick = function handleClick(event) {
        var tracks = this.player_.audioTracks();

        _MenuItem.prototype.handleClick.call(this, event);

        for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];

            track.enabled = track === this.track;
        }
        if (this.afterTrigger) {
            this.afterTrigger(this);
        }
        this.selected(this.track.enabled);
    };

    MultipleAudioMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
        this.selected(this.track.enabled);
    };

    return MultipleAudioMenuItem;
}(MenuItem);

Component.registerComponent('MultipleAudioMenuItem', MultipleAudioMenuItem);

var MultipleAudioMenu = function (_TrackButton) {
    inherits(MultipleAudioMenu, _TrackButton);

    function MultipleAudioMenu(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, MultipleAudioMenu);

        options.tracks = player.audioTracks();
        options.title = player.localize('Audio Tracks');

        var _this = possibleConstructorReturn(this, _TrackButton.call(this, player, options));

        _this.labelEl_ = _this.labelEl_.querySelector('.play-control-value');
        return _this;
    }

    MultipleAudioMenu.prototype.buildCSSClass = function buildCSSClass() {
        return 'play-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
    };

    MultipleAudioMenu.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'play-audio-button ' + _TrackButton.prototype.buildWrapperCSSClass.call(this);
    };

    MultipleAudioMenu.prototype.createItems = function createItems() {
        var _this2 = this;

        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        this.hideThreshold_ = 1;

        var tracks = this.player_.audioTracks();

        for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];

            items.push(new MultipleAudioMenuItem(this.player_, {
                track: track,
                selectable: true,
                multiSelectable: false,
                afterTrigger: function afterTrigger(comp) {
                    _this2.updateDisplayText(comp);
                }
            }));
            if (items[i].isSelected_) {
                this.updateDisplayText(items[i]);
            }
        }
        return items;
    };

    MultipleAudioMenu.prototype.updateDisplayText = function updateDisplayText(selectedItem) {
        this.labelEl_.innerHTML = selectedItem.options_.label;
    };

    return MultipleAudioMenu;
}(TrackButton);

MultipleAudioMenu.prototype.controlText_ = 'Audio Track';
Component.registerComponent('MultipleAudioMenu', MultipleAudioMenu);

/**
 * @file playback-rate-menu-item.js
 */

/**
 * The specific menu item type for selecting a playback rate.
 *
 * @extends MenuItem
 */

var PlaybackRateMenuItem = function (_MenuItem) {
  inherits(PlaybackRateMenuItem, _MenuItem);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function PlaybackRateMenuItem(player, options, parentComponent) {
    classCallCheck(this, PlaybackRateMenuItem);

    var label = options.rate;
    var rate = parseFloat(label, 10);

    // Modify options for parent MenuItem class's init.
    options.label = label === '1x' ? 'Normal' : label;
    options.selected = rate === 1;
    options.selectable = true;
    options.multiSelectable = false;
    options.title = 'Speed';

    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

    _this.parentComponent = parentComponent;
    _this.label = label === '1x' ? 'Normal' : label;
    _this.rate = rate;

    _this.on(player, 'ratechange', _this.update);
    return _this;
  }

  /**
   * This gets called when an `PlaybackRateMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {
    _MenuItem.prototype.handleClick.call(this);
    this.parentComponent.unpressButton();
    this.player().playbackRate(this.rate);
    var playControl = document.querySelector('.play-settings > .play-control');
    playControl.classList.add("play-hidden");
  };

  /**
   * Update the PlaybackRateMenuItem when the playbackrate changes.
   *
   * @param {EventTarget~Event} [event]
   *        The `ratechange` event that caused this function to run.
   *
   * @listens Player#ratechange
   */


  PlaybackRateMenuItem.prototype.update = function update(event) {
    this.selected(this.player().playbackRate() === this.rate);
  };

  return PlaybackRateMenuItem;
}(MenuItem);

/**
 * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


PlaybackRateMenuItem.prototype.contentElType = 'button';

Component.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);

/**
 * @file playback-rate-menu-button.js
 */

/**
 * The component for controlling the playback rate.
 *
 * @extends MenuButton
 */

var PlaybackRateMenuButton = function (_MenuButton) {
  inherits(PlaybackRateMenuButton, _MenuButton);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function PlaybackRateMenuButton(player, options) {
    classCallCheck(this, PlaybackRateMenuButton);

    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));

    _this.labelEl_ = _this.subMenu(true);
    _this.labelEl_ = _this.labelEl_.querySelector('.play-control-value');
    _this.labelEl_.classList.add('play-playback-rate-value');
    _this.labelEl_.innerHTML = 'Normal';
    _this.updateVisibility();
    _this.updateLabel();

    _this.on(player, 'loadstart', _this.updateVisibility);
    _this.on(player, 'ratechange', _this.updateLabel);
    return _this;
  }

  /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */


  PlaybackRateMenuButton.prototype.createEl = function createEl$$1() {
    var el = _MenuButton.prototype.createEl.call(this);

    return el;
  };

  PlaybackRateMenuButton.prototype.dispose = function dispose() {
    this.labelEl_ = null;

    _MenuButton.prototype.dispose.call(this);
  };

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
  };

  PlaybackRateMenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
    return 'play-playback-rate ' + _MenuButton.prototype.buildWrapperCSSClass.call(this);
  };

  /**
   * Create the playback rate menu
   *
   * @return {Menu}
   *         Menu object populated with {@link PlaybackRateMenuItem}s
   */


  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
    var _this2 = this;

    var menu = new Menu(this.player());
    var rates = this.playbackRates();

    if (rates) {
      for (var i = rates.length - 1; i >= 0; i--) {
        menu.addChild(new PlaybackRateMenuItem(this.player(), { rate: rates[i] + 'x' }, this));
      }
    }
    var title = createEl('li', {
      className: 'play-menu-title',
      innerHTML: toTitleCase('Speed'),
      tabIndex: -1
    });

    this.hideThreshold_ += 1;

    menu.children_.unshift(title);
    title.addEventListener('click', function () {
      _this2.unpressButton();
    });
    prependTo(title, menu.contentEl());

    return menu;
  };

  /**
   * Updates ARIA accessibility attributes
   */


  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
    // Current playback rate
    this.el().setAttribute('aria-valuenow', this.player().playbackRate());
  };

  /**
   * This gets called when an `PlaybackRateMenuButton` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */


  PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {
    _MenuButton.prototype.handleClick.call(this, event);
  };

  /**
   * Get possible playback rates
   *
   * @return {Array}
   *         All possible playback rates
   */


  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
  };

  /**
   * Get whether playback rates is supported by the tech
   * and an array of playback rates exists
   *
   * @return {boolean}
   *         Whether changing playback rate is supported
   */


  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
  };

  /**
   * Hide playback rate controls when they're no playback rate options to select
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#loadstart
   */


  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {
    if (this.playbackRateSupported()) {
      this.removeClass('play-hidden');
    } else {
      this.addClass('play-hidden');
    }
  };

  /**
   * Update button label when rate changed
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ratechange
   */


  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {
    if (this.playbackRateSupported()) {
      this.labelEl_.innerHTML = this.player().playbackRate() === 1 ? 'Normal' : this.player().playbackRate() + 'x';
    }
  };

  return PlaybackRateMenuButton;
}(MenuButton);

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */


PlaybackRateMenuButton.prototype.controlText_ = 'Speed';

Component.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);

/**
 * @file control-bar.js
 */
var audioSource;

/**
 * Container of main controls.
 *
 * @extends Component
 */

var AudioPlayerElement = function (_Component) {
    inherits(AudioPlayerElement, _Component);

    function AudioPlayerElement(player, options) {
        classCallCheck(this, AudioPlayerElement);

        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

        audioSource = options.playerOptions.srcType;
        if (options.playerOptions.srcType == 'audio') {
            _this.options.children = 'audioTitleBanner';
        }

        return _this;
    }
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    AudioPlayerElement.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'audio-player-element play-control-bar',
            dir: 'ltr'
        });
    };

    return AudioPlayerElement;
}(Component);

/**
 * Default options for `AudioPlayerElement`
 *
 * @type {Object}
 * @private
 */

AudioPlayerElement.prototype.options_ = {
    children: ['AudioGroupButtonBar', 'AudioPlayButtonGroup', 'SeekBarSettingButtonGroup']
};

Component.registerComponent('AudioPlayerElement', AudioPlayerElement);

/**
 * @file control-bar.js
 */
var audioSource$1;

var VideoPlayerElement = function (_Component) {
    inherits(VideoPlayerElement, _Component);

    function VideoPlayerElement(player, options) {
        classCallCheck(this, VideoPlayerElement);

        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

        audioSource$1 = options.playerOptions.srcType;
        if (options.playerOptions.srcType == 'audio') {
            _this.options.children = 'audioTitleBanner';
        }

        return _this;
    }
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    VideoPlayerElement.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'play-control-bar video-player-element',
            dir: 'ltr'
        });
    };

    return VideoPlayerElement;
}(Component);

/**
 * Default options for `VideoPlayerElement`
 *
 * @type {Object}
 * @private
 */

VideoPlayerElement.prototype.options_ = {
    children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'customControlSpacer', 'Settings', 'fullscreenToggle']
};

Component.registerComponent('VideoPlayerElement', VideoPlayerElement);

/**
 * @file control-bar.js
 */

var VolumnTimeControlGroup = function (_Component) {
    inherits(VolumnTimeControlGroup, _Component);

    function VolumnTimeControlGroup(player, options) {
        classCallCheck(this, VolumnTimeControlGroup);
        return possibleConstructorReturn(this, _Component.call(this, player, options));
    }
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    VolumnTimeControlGroup.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'volumn-time-control-group',
            dir: 'ltr'
        });
    };

    return VolumnTimeControlGroup;
}(Component);

/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */


VolumnTimeControlGroup.prototype.options_ = {

    children: ['playToggle', 'currentTimeDisplay', 'timeDivider', 'durationDisplay',
    //  'progressControl',
    'liveDisplay', 'customControlSpacer']
};

Component.registerComponent('VolumnTimeControlGroup', VolumnTimeControlGroup);

/**
 * @file control-bar.js
 */

var SettingsGroup = function (_Component) {
    inherits(SettingsGroup, _Component);

    function SettingsGroup(player, options) {
        classCallCheck(this, SettingsGroup);
        return possibleConstructorReturn(this, _Component.call(this, player, options));
    }
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */


    SettingsGroup.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
            className: 'settings-group',
            dir: 'ltr'
        });
    };

    return SettingsGroup;
}(Component);

/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */


SettingsGroup.prototype.options_ = {
    children: ['volumePanel', 'Settings', 'fullscreenToggle']
};

Component.registerComponent('SettingsGroup', SettingsGroup);

/**
 * @file control-bar.js
 */

var ControlBar = function (_Component) {
    inherits(ControlBar, _Component);

    function ControlBar(player, options) {
        classCallCheck(this, ControlBar);
        return possibleConstructorReturn(this, _Component.call(this, player, options));
    }
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */

    ControlBar.prototype.createEl = function createEl$$1() {
        var element = _Component.prototype.createEl.call(this, 'div', {
            //   className: 'player-div',
            className: 'play-control-bar',
            dir: 'ltr'
        });
        return element;
    };

    return ControlBar;
}(Component);

/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */


ControlBar.prototype.options_ = {
    children: [
    //'AudioPlayerElement',
    //'VideoPlayerElement'
    // 'playToggle',
    // 'volumePanel',
    // 'currentTimeDisplay',
    // 'timeDivider',
    // 'durationDisplay',
    'progressControl',
    // 'liveDisplay',
    // 'customControlSpacer',
    'VolumnTimeControlGroup', 'SettingsGroup']
};

Component.registerComponent('ControlBar', ControlBar);

/**
 * @file error-display.js
 */

/**
 * A display that indicates an error has occurred. This means that the video
 * is unplayable.
 *
 * @extends ModalDialog
 */

var ErrorDisplay = function (_ModalDialog) {
  inherits(ErrorDisplay, _ModalDialog);

  /**
   * Creates an instance of this class.
   *
   * @param  {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */
  function ErrorDisplay(player, options) {
    classCallCheck(this, ErrorDisplay);

    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

    _this.on(player, 'error', _this.open);
    return _this;
  }

  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   *
   * @deprecated Since version 5.
   */


  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
    return 'play-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
  };

  /**
   * Gets the localized error message based on the `Player`s error.
   *
   * @return {string}
   *         The `Player`s error message localized or an empty string.
   */


  ErrorDisplay.prototype.content = function content() {
    var error = this.player().error();

    return error ? this.localize(error.message) : '';
  };

  return ErrorDisplay;
}(ModalDialog);

/**
 * The default options for an `ErrorDisplay`.
 *
 * @private
 */


ErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {
  pauseOnOpen: false,
  fillAlways: true,
  temporary: false,
  uncloseable: true
});

Component.registerComponent('ErrorDisplay', ErrorDisplay);

/**
 * @file text-track-settings.js
 */

var LOCAL_STORAGE_KEY = 'play-text-track-settings';

var COLOR_BLACK = ['#000', 'Black'];
var COLOR_BLUE = ['#00F', 'Blue'];
var COLOR_CYAN = ['#0FF', 'Cyan'];
var COLOR_GREEN = ['#0F0', 'Green'];
var COLOR_MAGENTA = ['#F0F', 'Magenta'];
var COLOR_RED = ['#F00', 'Red'];
var COLOR_WHITE = ['#FFF', 'White'];
var COLOR_YELLOW = ['#FF0', 'Yellow'];

var OPACITY_OPAQUE = ['1', 'Opaque'];
var OPACITY_SEMI = ['0.5', 'Semi-Transparent'];
var OPACITY_TRANS = ['0', 'Transparent'];

// Configuration for the various <select> elements in the DOM of this component.
//
// Possible keys include:
//
// `default`:
//   The default option index. Only needs to be provided if not zero.
// `parser`:
//   A function which is used to parse the value from the selected option in
//   a customized way.
// `selector`:
//   The selector used to find the associated <select> element.
var selectConfigs = {
    backgroundColor: {
        selector: '.play-bg-color > select',
        id: 'captions-background-color-%s',
        label: 'Color',
        options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
    },

    backgroundOpacity: {
        selector: '.play-bg-opacity > select',
        id: 'captions-background-opacity-%s',
        label: 'Transparency',
        options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
    },

    color: {
        selector: '.play-fg-color > select',
        id: 'captions-foreground-color-%s',
        label: 'Color',
        options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
    },

    edgeStyle: {
        selector: '.play-edge-style > select',
        id: '%s',
        label: 'Text Edge Style',
        options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]
    },

    fontFamily: {
        selector: '.play-font-family > select',
        id: 'captions-font-family-%s',
        label: 'Font Family',
        options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]
    },

    fontPercent: {
        selector: '.play-font-percent > select',
        id: 'captions-font-size-%s',
        label: 'Font Size',
        options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],
        default: 2,
        parser: function parser(v) {
            return v === '1.00' ? null : Number(v);
        }
    },

    textOpacity: {
        selector: '.play-text-opacity > select',
        id: 'captions-foreground-opacity-%s',
        label: 'Transparency',
        options: [OPACITY_OPAQUE, OPACITY_SEMI]
    },

    // Options for this object are defined below.
    windowColor: {
        selector: '.play-window-color > select',
        id: 'captions-window-color-%s',
        label: 'Color'
    },

    // Options for this object are defined below.
    windowOpacity: {
        selector: '.play-window-opacity > select',
        id: 'captions-window-opacity-%s',
        label: 'Transparency',
        options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
    }
};

selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;

/**
 * Get the actual value of an option.
 *
 * @param  {string} value
 *         The value to get
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {Mixed}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */
function parseOptionValue(value, parser) {
    if (parser) {
        value = parser(value);
    }

    if (value && value !== 'none') {
        return value;
    }
}

/**
 * Gets the value of the selected <option> element within a <select> element.
 *
 * @param  {Element} el
 *         the element to look in
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {Mixed}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */
function getSelectedOptionValue(el, parser) {
    var value = el.options[el.options.selectedIndex].value;

    return parseOptionValue(value, parser);
}

/**
 * Sets the selected <option> element within a <select> element based on a
 * given value.
 *
 * @param {Element} el
 *        The element to look in.
 *
 * @param {string} value
 *        the property to look on.
 *
 * @param {Function} [parser]
 *        Optional function to adjust the value before comparing.
 *
 * @private
 */
function setSelectedOption(el, value, parser) {
    if (!value) {
        return;
    }

    for (var i = 0; i < el.options.length; i++) {
        if (parseOptionValue(el.options[i].value, parser) === value) {
            el.selectedIndex = i;
            break;
        }
    }
}

/**
 * Manipulate Text Tracks settings.
 *
 * @extends ModalDialog
 */

var TextTrackSettings = function (_ModalDialog) {
    inherits(TextTrackSettings, _ModalDialog);

    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *         The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *         The key/value store of player options.
     */
    function TextTrackSettings(player, options) {
        classCallCheck(this, TextTrackSettings);

        options.temporary = false;

        var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

        _this.updateDisplay = bind(_this, _this.updateDisplay);

        // fill the modal and pretend we have opened it
        _this.fill();
        _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;

        _this.endDialog = createEl('p', {
            className: 'play-control-text',
            textContent: _this.localize('End of dialog window.')
        });
        _this.el().appendChild(_this.endDialog);

        _this.setDefaults();

        // Grab `persistTextTrackSettings` from the player options if not passed in child options
        if (options.persistTextTrackSettings === undefined) {
            _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;
        }

        _this.on(_this.$('.play-done-button'), 'click', function () {
            _this.player_.trigger('modelClose');
            _this.saveSettings();
            _this.close();
        });

        _this.on(_this.$('.play-default-button'), 'click', function () {
            _this.setDefaults();
            _this.updateDisplay();
        });

        each(selectConfigs, function (config) {
            _this.on(_this.$(config.selector), 'change', _this.updateDisplay);
        });

        if (_this.options_.persistTextTrackSettings) {
            _this.restoreSettings();
        }
        return _this;
    }

    TextTrackSettings.prototype.dispose = function dispose() {
        this.endDialog = null;

        _ModalDialog.prototype.dispose.call(this);
    };

    /**
     * Create a <select> element with configured options.
     *
     * @param {string} key
     *        Configuration key to use during creation.
     *
     * @return {string}
     *         An HTML string.
     *
     * @private
     */


    TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {
        var _this2 = this;

        var legendId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';

        var config = selectConfigs[key];
        var id = config.id.replace('%s', this.id_);
        var selectLabelledbyIds = [legendId, id].join(' ').trim();

        return ['<' + type + ' id="' + id + '" class="' + (type === 'label' ? 'play-label' : '') + '">', this.localize(config.label), '</' + type + '>', '<select aria-labelledby="' + selectLabelledbyIds + '">'].concat(config.options.map(function (o) {
            var optionId = id + '-' + o[1].replace(/\W+/g, '');

            return ['<option id="' + optionId + '" value="' + o[0] + '" ', 'aria-labelledby="' + selectLabelledbyIds + ' ' + optionId + '">', _this2.localize(o[1]), '</option>'].join('');
        })).concat('</select>').join('');
    };

    /**
     * Create foreground color element for the component
     *
     * @return {string}
     *         An HTML string.
     *
     * @private
     */


    TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {
        var legendId = 'captions-text-legend-' + this.id_;

        return ['<fieldset class="play-fg-color play-track-setting">', '<legend id="' + legendId + '">', this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class="play-text-opacity play-opacity">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');
    };

    /**
     * Create background color element for the component
     *
     * @return {string}
     *         An HTML string.
     *
     * @private
     */


    TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {
        var legendId = 'captions-background-' + this.id_;

        return ['<fieldset class="play-bg-color play-track-setting">', '<legend id="' + legendId + '">', this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class="play-bg-opacity play-opacity">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');
    };

    /**
     * Create window color element for the component
     *
     * @return {string}
     *         An HTML string.
     *
     * @private
     */


    TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {
        var legendId = 'captions-window-' + this.id_;

        return ['<fieldset class="play-window-color play-track-setting">', '<legend id="' + legendId + '">', this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class="play-window-opacity play-opacity">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');
    };

    /**
     * Create color elements for the component
     *
     * @return {Element}
     *         The element that was created
     *
     * @private
     */


    TextTrackSettings.prototype.createElColors_ = function createElColors_() {
        return createEl('div', {
            className: 'play-track-settings-colors',
            innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')
        });
    };

    /**
     * Create font elements for the component
     *
     * @return {Element}
     *         The element that was created.
     *
     * @private
     */


    TextTrackSettings.prototype.createElFont_ = function createElFont_() {
        return createEl('div', {
            className: 'play-track-settings-font',
            innerHTML: ['<fieldset class="play-font-percent play-track-setting">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class="play-edge-style play-track-setting">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class="play-font-family play-track-setting">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')
        });
    };

    /**
     * Create controls for the component
     *
     * @return {Element}
     *         The element that was created.
     *
     * @private
     */


    TextTrackSettings.prototype.createElControls_ = function createElControls_() {
        var defaultsDescription = this.localize('restore all settings to the default values');

        return createEl('div', {
            className: 'play-track-settings-controls',
            innerHTML: ['<button class="play-default-button" title="' + defaultsDescription + '">', this.localize('Reset'), '<span class="play-control-text"> ' + defaultsDescription + '</span>', '</button>', '<button class="play-done-button">' + this.localize('Done') + '</button>'].join('')
        });
    };

    TextTrackSettings.prototype.content = function content() {
        return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
    };

    TextTrackSettings.prototype.label = function label() {
        return this.localize('Caption Settings Dialog');
    };

    TextTrackSettings.prototype.description = function description() {
        return this.localize('Beginning of dialog window. Escape will cancel and close the window.');
    };

    TextTrackSettings.prototype.buildCSSClass = function buildCSSClass() {
        return _ModalDialog.prototype.buildCSSClass.call(this) + ' play-text-track-settings';
    };

    /**
     * Gets an object of text track settings (or null).
     *
     * @return {Object}
     *         An object with config values parsed from the DOM or localStorage.
     */


    TextTrackSettings.prototype.getValues = function getValues() {
        var _this3 = this;

        return reduce(selectConfigs, function (accum, config, key) {
            var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);

            if (value !== undefined) {
                accum[key] = value;
            }

            return accum;
        }, {});
    };

    /**
     * Sets text track settings from an object of values.
     *
     * @param {Object} values
     *        An object with config values parsed from the DOM or localStorage.
     */


    TextTrackSettings.prototype.setValues = function setValues(values) {
        var _this4 = this;

        each(selectConfigs, function (config, key) {
            setSelectedOption(_this4.$(config.selector), values[key], config.parser);
        });
    };

    /**
     * Sets all `<select>` elements to their default values.
     */


    TextTrackSettings.prototype.setDefaults = function setDefaults() {
        var _this5 = this;

        each(selectConfigs, function (config) {
            var index = config.hasOwnProperty('default') ? config.default : 0;

            _this5.$(config.selector).selectedIndex = index;
        });
    };

    /**
     * Restore texttrack settings from localStorage
     */


    TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
        var values = void 0;

        try {
            values = JSON.parse(window$1.localStorage.getItem(LOCAL_STORAGE_KEY));
        } catch (err) {
            log$1.warn(err);
        }

        if (values) {
            this.setValues(values);
        }
    };

    /**
     * Save text track settings to localStorage
     */


    TextTrackSettings.prototype.saveSettings = function saveSettings() {
        if (!this.options_.persistTextTrackSettings) {
            return;
        }

        var values = this.getValues();

        try {
            if (Object.keys(values).length) {
                window$1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));
            } else {
                window$1.localStorage.removeItem(LOCAL_STORAGE_KEY);
            }
        } catch (err) {
            log$1.warn(err);
        }
    };

    /**
     * Update display of text track settings
     */


    TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
        var ttDisplay = this.player_.getChild('textTrackDisplay');

        if (ttDisplay) {
            ttDisplay.updateDisplay();
        }
    };

    /**
     * conditionally blur the element and refocus the captions button
     *
     * @private
     */


    TextTrackSettings.prototype.conditionalBlur_ = function conditionalBlur_() {
        this.previouslyActiveEl_ = null;
        this.off(document$1, 'keydown', this.handleKeyDown);

        var cb = this.player_.controlBar;
        var subsCapsBtn = cb && cb.subsCapsButton;
        var ccBtn = cb && cb.captionsButton;

        if (subsCapsBtn) {
            subsCapsBtn.focus();
        } else if (ccBtn) {
            ccBtn.focus();
        }
    };

    return TextTrackSettings;
}(ModalDialog);

Component.registerComponent('TextTrackSettings', TextTrackSettings);

/**
 * @file resize-manager.js
 */

/**
 * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.
 *
 * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.
 *
 * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.
 * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.
 * @example <caption>How to disable the resize manager</caption>
 * const player = videojs('#vid', {
 *   resizeManager: false
 * });
 *
 * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}
 *
 * @extends Component
 */

var ResizeManager = function (_Component) {
  inherits(ResizeManager, _Component);

  /**
   * Create the ResizeManager.
   *
   * @param {Object} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of ResizeManager options.
   *
   * @param {Object} [options.ResizeObserver]
   *        A polyfill for ResizeObserver can be passed in here.
   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.
   */
  function ResizeManager(player, options) {
    classCallCheck(this, ResizeManager);

    var RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window$1.ResizeObserver;

    // if `null` was passed, we want to disable the ResizeObserver
    if (options.ResizeObserver === null) {
      RESIZE_OBSERVER_AVAILABLE = false;
    }

    // Only create an element when ResizeObserver isn't available
    var options_ = mergeOptions({ createEl: !RESIZE_OBSERVER_AVAILABLE }, options);

    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_));

    _this.ResizeObserver = options.ResizeObserver || window$1.ResizeObserver;
    _this.loadListener_ = null;
    _this.resizeObserver_ = null;
    _this.debouncedHandler_ = debounce(function () {
      _this.resizeHandler();
    }, 100, false, player);

    if (RESIZE_OBSERVER_AVAILABLE) {
      _this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_);
      _this.resizeObserver_.observe(player.el());
    } else {
      _this.loadListener_ = function () {
        if (_this.el_.contentWindow) {
          on(_this.el_.contentWindow, 'resize', _this.debouncedHandler_);
        }
        _this.off('load', _this.loadListener_);
      };

      _this.on('load', _this.loadListener_);
    }
    return _this;
  }

  ResizeManager.prototype.createEl = function createEl() {
    return _Component.prototype.createEl.call(this, 'iframe', {
      className: 'play-resize-manager'
    });
  };

  /**
   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver
   *
   * @fires Player#playerresize
   */


  ResizeManager.prototype.resizeHandler = function resizeHandler() {
    /**
     * Called when the player size has changed
     *
     * @event Player#playerresize
     * @type {EventTarget~Event}
     */
    this.player_.trigger('playerresize');
  };

  ResizeManager.prototype.dispose = function dispose() {
    if (this.resizeObserver_) {
      if (this.player_.el()) {
        this.resizeObserver_.unobserve(this.player_.el());
      }
      this.resizeObserver_.disconnect();
    }

    if (this.el_ && this.el_.contentWindow) {
      off(this.el_.contentWindow, 'resize', this.debouncedHandler_);
    }

    if (this.loadListener_) {
      this.off('load', this.loadListener_);
    }

    this.ResizeObserver = null;
    this.resizeObserver = null;
    this.debouncedHandler_ = null;
    this.loadListener_ = null;
  };

  return ResizeManager;
}(Component);

Component.registerComponent('ResizeManager', ResizeManager);

/**
 * This function is used to fire a sourceset when there is something
 * similar to `mediaEl.load()` being called. It will try to find the source via
 * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`
 * with the source that was found or empty string if we cannot know. If it cannot
 * find a source then `sourceset` will not be fired.
 *
 * @param {Html5} tech
 *        The tech object that sourceset was setup on
 *
 * @return {boolean}
 *         returns false if the sourceset was not fired and true otherwise.
 */
var sourcesetLoad = function sourcesetLoad(tech) {
  var el = tech.el();

  // if `el.src` is set, that source will be loaded.
  if (el.hasAttribute('src')) {
    tech.triggerSourceset(el.src);
    return true;
  }

  /**
   * Since there isn't a src property on the media element, source elements will be used for
   * implementing the source selection algorithm. This happens asynchronously and
   * for most cases were there is more than one source we cannot tell what source will
   * be loaded, without re-implementing the source selection algorithm. At this time we are not
   * going to do that. There are three special cases that we do handle here though:
   *
   * 1. If there are no sources, do not fire `sourceset`.
   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`
   * 3. If there is more than one `<source>` but all of them have the same `src` url.
   *    That will be our src.
   */
  var sources = tech.$$('source');
  var srcUrls = [];
  var src = '';

  // if there are no sources, do not fire sourceset
  if (!sources.length) {
    return false;
  }

  // only count valid/non-duplicate source elements
  for (var i = 0; i < sources.length; i++) {
    var url = sources[i].src;

    if (url && srcUrls.indexOf(url) === -1) {
      srcUrls.push(url);
    }
  }

  // there were no valid sources
  if (!srcUrls.length) {
    return false;
  }

  // there is only one valid source element url
  // use that
  if (srcUrls.length === 1) {
    src = srcUrls[0];
  }

  tech.triggerSourceset(src);
  return true;
};

/**
 * our implementation of an `innerHTML` descriptor for browsers
 * that do not have one.
 */
var innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {
  get: function get() {
    return this.cloneNode(true).innerHTML;
  },
  set: function set(v) {
    // make a dummy node to use innerHTML on
    var dummy = document$1.createElement(this.nodeName.toLowerCase());

    // set innerHTML to the value provided
    dummy.innerHTML = v;

    // make a document fragment to hold the nodes from dummy
    var docFrag = document$1.createDocumentFragment();

    // copy all of the nodes created by the innerHTML on dummy
    // to the document fragment
    while (dummy.childNodes.length) {
      docFrag.appendChild(dummy.childNodes[0]);
    }

    // remove content
    this.innerText = '';

    // now we add all of that html in one by appending the
    // document fragment. This is how innerHTML does it.
    window$1.Element.prototype.appendChild.call(this, docFrag);

    // then return the result that innerHTML's setter would
    return this.innerHTML;
  }
});

/**
 * Get a property descriptor given a list of priorities and the
 * property to get.
 */
var getDescriptor = function getDescriptor(priority, prop) {
  var descriptor = {};

  for (var i = 0; i < priority.length; i++) {
    descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);

    if (descriptor && descriptor.set && descriptor.get) {
      break;
    }
  }

  descriptor.enumerable = true;
  descriptor.configurable = true;

  return descriptor;
};

var getInnerHTMLDescriptor = function getInnerHTMLDescriptor(tech) {
  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, window$1.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');
};

/**
 * Patches browser internal functions so that we can tell synchronously
 * if a `<source>` was appended to the media element. For some reason this
 * causes a `sourceset` if the the media element is ready and has no source.
 * This happens when:
 * - The page has just loaded and the media element does not have a source.
 * - The media element was emptied of all sources, then `load()` was called.
 *
 * It does this by patching the following functions/properties when they are supported:
 *
 * - `append()` - can be used to add a `<source>` element to the media element
 * - `appendChild()` - can be used to add a `<source>` element to the media element
 * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element
 * - `innerHTML` -  can be used to add a `<source>` element to the media element
 *
 * @param {Html5} tech
 *        The tech object that sourceset is being setup on.
 */
var firstSourceWatch = function firstSourceWatch(tech) {
  var el = tech.el();

  // make sure firstSourceWatch isn't setup twice.
  if (el.resetSourceWatch_) {
    return;
  }

  var old = {};
  var innerDescriptor = getInnerHTMLDescriptor(tech);
  var appendWrapper = function appendWrapper(appendFn) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var retval = appendFn.apply(el, args);

      sourcesetLoad(tech);

      return retval;
    };
  };

  ['append', 'appendChild', 'insertAdjacentHTML'].forEach(function (k) {
    if (!el[k]) {
      return;
    }

    // store the old function
    old[k] = el[k];

    // call the old function with a sourceset if a source
    // was loaded
    el[k] = appendWrapper(old[k]);
  });

  Object.defineProperty(el, 'innerHTML', mergeOptions(innerDescriptor, {
    set: appendWrapper(innerDescriptor.set)
  }));

  el.resetSourceWatch_ = function () {
    el.resetSourceWatch_ = null;
    Object.keys(old).forEach(function (k) {
      el[k] = old[k];
    });

    Object.defineProperty(el, 'innerHTML', innerDescriptor);
  };

  // on the first sourceset, we need to revert our changes
  tech.one('sourceset', el.resetSourceWatch_);
};

/**
 * our implementation of a `src` descriptor for browsers
 * that do not have one.
 */
var srcDescriptorPolyfill = Object.defineProperty({}, 'src', {
  get: function get() {
    if (this.hasAttribute('src')) {
      return getAbsoluteURL(window$1.Element.prototype.getAttribute.call(this, 'src'));
    }

    return '';
  },
  set: function set(v) {
    window$1.Element.prototype.setAttribute.call(this, 'src', v);

    return v;
  }
});

var getSrcDescriptor = function getSrcDescriptor(tech) {
  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');
};

/**
 * setup `sourceset` handling on the `Html5` tech. This function
 * patches the following element properties/functions:
 *
 * - `src` - to determine when `src` is set
 * - `setAttribute()` - to determine when `src` is set
 * - `load()` - this re-triggers the source selection algorithm, and can
 *              cause a sourceset.
 *
 * If there is no source when we are adding `sourceset` support or during a `load()`
 * we also patch the functions listed in `firstSourceWatch`.
 *
 * @param {Html5} tech
 *        The tech to patch
 */
var setupSourceset = function setupSourceset(tech) {
  if (!tech.featuresSourceset) {
    return;
  }

  var el = tech.el();

  // make sure sourceset isn't setup twice.
  if (el.resetSourceset_) {
    return;
  }

  var srcDescriptor = getSrcDescriptor(tech);
  var oldSetAttribute = el.setAttribute;
  var oldLoad = el.load;

  Object.defineProperty(el, 'src', mergeOptions(srcDescriptor, {
    set: function set(v) {
      var retval = srcDescriptor.set.call(el, v);

      // we use the getter here to get the actual value set on src
      tech.triggerSourceset(el.src);

      return retval;
    }
  }));

  el.setAttribute = function (n, v) {
    var retval = oldSetAttribute.call(el, n, v);

    if (/src/i.test(n)) {
      tech.triggerSourceset(el.src);
    }

    return retval;
  };

  el.load = function () {
    var retval = oldLoad.call(el);

    // if load was called, but there was no source to fire
    // sourceset on. We have to watch for a source append
    // as that can trigger a `sourceset` when the media element
    // has no source
    if (!sourcesetLoad(tech)) {
      tech.triggerSourceset('');
      firstSourceWatch(tech);
    }

    return retval;
  };

  if (el.currentSrc) {
    tech.triggerSourceset(el.currentSrc);
  } else if (!sourcesetLoad(tech)) {
    firstSourceWatch(tech);
  }

  el.resetSourceset_ = function () {
    el.resetSourceset_ = null;
    el.load = oldLoad;
    el.setAttribute = oldSetAttribute;
    Object.defineProperty(el, 'src', srcDescriptor);
    if (el.resetSourceWatch_) {
      el.resetSourceWatch_();
    }
  };
};

var _templateObject$1 = taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.']);

/**
 * HTML5 Media Controller - Wrapper for HTML5 Media API
 *
 * @mixes Tech~SourceHandlerAdditions
 * @extends Tech
 */

var Html5 = function (_Tech) {
  inherits(Html5, _Tech);

  /**
   * Create an instance of this Tech.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} ready
   *        Callback function to call when the `HTML5` Tech is ready.
   */
  function Html5(options, ready) {
    classCallCheck(this, Html5);

    var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));

    var source = options.source;
    var crossoriginTracks = false;

    // Set the source if one is provided
    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
    // anyway so the error gets fired.
    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
      _this.setSource(source);
    } else {
      _this.handleLateInit_(_this.el_);
    }

    // setup sourceset after late sourceset/init
    if (options.enableSourceset) {
      _this.setupSourcesetHandling_();
    }

    if (_this.el_.hasChildNodes()) {

      var nodes = _this.el_.childNodes;
      var nodesLength = nodes.length;
      var removeNodes = [];

      while (nodesLength--) {
        var node = nodes[nodesLength];
        var nodeName = node.nodeName.toLowerCase();

        if (nodeName === 'track') {
          if (!_this.featuresNativeTextTracks) {
            // Empty video tag tracks so the built-in player doesn't use them also.
            // This may not be fast enough to stop HTML5 browsers from reading the tags
            // so we'll need to turn off any default tracks if we're manually doing
            // captions and subtitles. videoElement.textTracks
            removeNodes.push(node);
          } else {
            // store HTMLTrackElement and TextTrack to remote list
            _this.remoteTextTrackEls().addTrackElement_(node);
            _this.remoteTextTracks().addTrack(node.track);
            _this.textTracks().addTrack(node.track);
            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {
              crossoriginTracks = true;
            }
          }
        }
      }

      for (var i = 0; i < removeNodes.length; i++) {
        _this.el_.removeChild(removeNodes[i]);
      }
    }

    _this.proxyNativeTracks_();
    if (_this.featuresNativeTextTracks && crossoriginTracks) {
      log$1.warn(tsml(_templateObject$1));
    }

    // prevent iOS Safari from disabling metadata text tracks during native playback
    _this.restoreMetadataTracksInIOSNativePlayer_();

    // Determine if native controls should be used
    // Our goal should be to get the custom controls on mobile solid everywhere
    // so we can remove this all together. Right now this will block custom
    // controls on touch enabled laptops like the Chrome Pixel
    if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
      _this.setControls(true);
    }

    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
    // into a `fullscreenchange` event
    _this.proxyWebkitFullscreen_();

    _this.triggerReady();
    return _this;
  }

  /**
   * Dispose of `HTML5` media element and remove all tracks.
   */


  Html5.prototype.dispose = function dispose() {
    if (this.el_ && this.el_.resetSourceset_) {
      this.el_.resetSourceset_();
    }
    Html5.disposeMediaElement(this.el_);
    this.options_ = null;

    // tech will handle clearing of the emulated track list
    _Tech.prototype.dispose.call(this);
  };

  /**
   * Modify the media element so that we can detect when
   * the source is changed. Fires `sourceset` just after the source has changed
   */


  Html5.prototype.setupSourcesetHandling_ = function setupSourcesetHandling_() {
    setupSourceset(this);
  };

  /**
   * When a captions track is enabled in the iOS Safari native player, all other
   * tracks are disabled (including metadata tracks), which nulls all of their
   * associated cue points. This will restore metadata tracks to their pre-fullscreen
   * state in those cases so that cue points are not needlessly lost.
   *
   * @private
   */


  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {
    var textTracks = this.textTracks();
    var metadataTracksPreFullscreenState = void 0;

    // captures a snapshot of every metadata track's current state
    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {
      metadataTracksPreFullscreenState = [];

      for (var i = 0; i < textTracks.length; i++) {
        var track = textTracks[i];

        if (track.kind === 'metadata') {
          metadataTracksPreFullscreenState.push({
            track: track,
            storedMode: track.mode
          });
        }
      }
    };

    // snapshot each metadata track's initial state, and update the snapshot
    // each time there is a track 'change' event
    takeMetadataTrackSnapshot();
    textTracks.addEventListener('change', takeMetadataTrackSnapshot);

    this.on('dispose', function () {
      return textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
    });

    var restoreTrackMode = function restoreTrackMode() {
      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {
        var storedTrack = metadataTracksPreFullscreenState[i];

        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {
          storedTrack.track.mode = storedTrack.storedMode;
        }
      }
      // we only want this handler to be executed on the first 'change' event
      textTracks.removeEventListener('change', restoreTrackMode);
    };

    // when we enter fullscreen playback, stop updating the snapshot and
    // restore all track modes to their pre-fullscreen state
    this.on('webkitbeginfullscreen', function () {
      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);

      // remove the listener before adding it just in case it wasn't previously removed
      textTracks.removeEventListener('change', restoreTrackMode);
      textTracks.addEventListener('change', restoreTrackMode);
    });

    // start updating the snapshot again after leaving fullscreen
    this.on('webkitendfullscreen', function () {
      // remove the listener before adding it just in case it wasn't previously removed
      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
      textTracks.addEventListener('change', takeMetadataTrackSnapshot);

      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback
      textTracks.removeEventListener('change', restoreTrackMode);
    });
  };

  /**
   * Attempt to force override of tracks for the given type
   *
   * @param {String} type - Track type to override, possible values include 'Audio',
   * 'Video', and 'Text'.
   * @param {Boolean} override - If set to true native audio/video will be overridden,
   * otherwise native audio/video will potentially be used.
   * @private
   */


  Html5.prototype.overrideNative_ = function overrideNative_(type, override) {
    var _this2 = this;

    // If there is no behavioral change don't add/remove listeners
    if (override !== this['featuresNative' + type + 'Tracks']) {
      return;
    }

    var lowerCaseType = type.toLowerCase();

    if (this[lowerCaseType + 'TracksListeners_']) {
      Object.keys(this[lowerCaseType + 'TracksListeners_']).forEach(function (eventName) {
        var elTracks = _this2.el()[lowerCaseType + 'Tracks'];

        elTracks.removeEventListener(eventName, _this2[lowerCaseType + 'TracksListeners_'][eventName]);
      });
    }

    this['featuresNative' + type + 'Tracks'] = !override;
    this[lowerCaseType + 'TracksListeners_'] = null;

    this.proxyNativeTracksForType_(lowerCaseType);
  };

  /**
   * Attempt to force override of native audio tracks.
   *
   * @param {Boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   */


  Html5.prototype.overrideNativeAudioTracks = function overrideNativeAudioTracks(override) {
    this.overrideNative_('Audio', override);
  };

  /**
   * Attempt to force override of native video tracks.
   *
   * @param {Boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   */


  Html5.prototype.overrideNativeVideoTracks = function overrideNativeVideoTracks(override) {
    this.overrideNative_('Video', override);
  };

  /**
    * Proxy native track list events for the given type to our track
    * lists if the browser we are playing in supports that type of track list.
    *
    * @param {string} name - Track type; values include 'audio', 'video', and 'text'
    * @private
    */


  Html5.prototype.proxyNativeTracksForType_ = function proxyNativeTracksForType_(name) {
    var _this3 = this;

    var props = NORMAL[name];
    var elTracks = this.el()[props.getterName];
    var techTracks = this[props.getterName]();

    if (!this['featuresNative' + props.capitalName + 'Tracks'] || !elTracks || !elTracks.addEventListener) {
      return;
    }
    var listeners = {
      change: function change(e) {
        techTracks.trigger({
          type: 'change',
          target: techTracks,
          currentTarget: techTracks,
          srcElement: techTracks
        });
      },
      addtrack: function addtrack(e) {
        techTracks.addTrack(e.track);
      },
      removetrack: function removetrack(e) {
        techTracks.removeTrack(e.track);
      }
    };
    var removeOldTracks = function removeOldTracks() {
      var removeTracks = [];

      for (var i = 0; i < techTracks.length; i++) {
        var found = false;

        for (var j = 0; j < elTracks.length; j++) {
          if (elTracks[j] === techTracks[i]) {
            found = true;
            break;
          }
        }

        if (!found) {
          removeTracks.push(techTracks[i]);
        }
      }

      while (removeTracks.length) {
        techTracks.removeTrack(removeTracks.shift());
      }
    };

    this[props.getterName + 'Listeners_'] = listeners;

    Object.keys(listeners).forEach(function (eventName) {
      var listener = listeners[eventName];

      elTracks.addEventListener(eventName, listener);
      _this3.on('dispose', function (e) {
        return elTracks.removeEventListener(eventName, listener);
      });
    });

    // Remove (native) tracks that are not used anymore
    this.on('loadstart', removeOldTracks);
    this.on('dispose', function (e) {
      return _this3.off('loadstart', removeOldTracks);
    });
  };

  /**
   * Proxy all native track list events to our track lists if the browser we are playing
   * in supports that type of track list.
   *
   * @private
   */


  Html5.prototype.proxyNativeTracks_ = function proxyNativeTracks_() {
    var _this4 = this;

    NORMAL.names.forEach(function (name) {
      _this4.proxyNativeTracksForType_(name);
    });
  };

  /**
   * Create the `Html5` Tech's DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */


  Html5.prototype.createEl = function createEl$$1() {
    var el = this.options_.tag;

    // Check if this browser supports moving the element into the box.
    // On the iPhone video will break if you move the element,
    // So we have to create a brand new element.
    // If we ingested the player div, we do not need to move the media element.
    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {

      // If the original tag is still there, clone and remove it.
      if (el) {
        var clone = el.cloneNode(true);

        if (el.parentNode) {
          el.parentNode.insertBefore(clone, el);
        }
        Html5.disposeMediaElement(el);
        el = clone;
      } else {
        el = document$1.createElement('video');

        // determine if native controls should be used
        var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);
        var attributes = mergeOptions({}, tagAttributes);

        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
          delete attributes.controls;
        }

        setAttributes(el, assign(attributes, {
          id: this.options_.techId,
          class: 'play-tech'
        }));
      }

      el.playerId = this.options_.playerId;
    }

    if (typeof this.options_.preload !== 'undefined') {
      setAttribute(el, 'preload', this.options_.preload);
    }

    // Update specific tag settings, in case they were overridden
    // `autoplay` has to be *last* so that `muted` and `playsinline` are present
    // when iOS/Safari or other browsers attempt to autoplay.
    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];

    for (var i = 0; i < settingsAttrs.length; i++) {
      var attr = settingsAttrs[i];
      var value = this.options_[attr];

      if (typeof value !== 'undefined') {
        if (value) {
          setAttribute(el, attr, attr);
        } else {
          removeAttribute(el, attr);
        }
        el[attr] = value;
      }
    }

    return el;
  };

  /**
   * This will be triggered if the loadstart event has already fired, before videojs was
   * ready. Two known examples of when this can happen are:
   * 1. If we're loading the playback object after it has started loading
   * 2. The media is already playing the (often with autoplay on) then
   *
   * This function will fire another loadstart so that videojs can catchup.
   *
   * @fires Tech#loadstart
   *
   * @return {undefined}
   *         returns nothing.
   */


  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
    if (el.networkState === 0 || el.networkState === 3) {
      // The video element hasn't started loading the source yet
      // or didn't find a source
      return;
    }

    if (el.readyState === 0) {
      // NetworkState is set synchronously BUT loadstart is fired at the
      // end of the current stack, usually before setInterval(fn, 0).
      // So at this point we know loadstart may have already fired or is
      // about to fire, and either way the player hasn't seen it yet.
      // We don't want to fire loadstart prematurely here and cause a
      // double loadstart so we'll wait and see if it happens between now
      // and the next loop, and fire it if not.
      // HOWEVER, we also want to make sure it fires before loadedmetadata
      // which could also happen between now and the next loop, so we'll
      // watch for that also.
      var loadstartFired = false;
      var setLoadstartFired = function setLoadstartFired() {
        loadstartFired = true;
      };

      this.on('loadstart', setLoadstartFired);

      var triggerLoadstart = function triggerLoadstart() {
        // We did miss the original loadstart. Make sure the player
        // sees loadstart before loadedmetadata
        if (!loadstartFired) {
          this.trigger('loadstart');
        }
      };

      this.on('loadedmetadata', triggerLoadstart);

      this.ready(function () {
        this.off('loadstart', setLoadstartFired);
        this.off('loadedmetadata', triggerLoadstart);

        if (!loadstartFired) {
          // We did miss the original native loadstart. Fire it now.
          this.trigger('loadstart');
        }
      });

      return;
    }

    // From here on we know that loadstart already fired and we missed it.
    // The other readyState events aren't as much of a problem if we double
    // them, so not going to go to as much trouble as loadstart to prevent
    // that unless we find reason to.
    var eventsToTrigger = ['loadstart'];

    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
    eventsToTrigger.push('loadedmetadata');

    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
    if (el.readyState >= 2) {
      eventsToTrigger.push('loadeddata');
    }

    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
    if (el.readyState >= 3) {
      eventsToTrigger.push('canplay');
    }

    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
    if (el.readyState >= 4) {
      eventsToTrigger.push('canplaythrough');
    }

    // We still need to give the player time to add event listeners
    this.ready(function () {
      eventsToTrigger.forEach(function (type) {
        this.trigger(type);
      }, this);
    });
  };

  /**
   * Set current time for the `HTML5` tech.
   *
   * @param {number} seconds
   *        Set the current time of the media to this.
   */


  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
    try {
      this.el_.currentTime = seconds;
    } catch (e) {
      log$1(e, 'Video is not ready. (Video.js)');
      // this.warning(VideoJS.warnings.videoNotReady);
    }
  };

  /**
   * Get the current duration of the HTML5 media element.
   *
   * @return {number}
   *         The duration of the media or 0 if there is no duration.
   */


  Html5.prototype.duration = function duration() {
    var _this5 = this;

    // Android Chrome will report duration as Infinity for VOD HLS until after
    // playback has started, which triggers the live display erroneously.
    // Return NaN if playback has not started and trigger a durationupdate once
    // the duration can be reliably known.
    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {
      // Wait for the first `timeupdate` with currentTime > 0 - there may be
      // several with 0
      var checkProgress = function checkProgress() {
        if (_this5.el_.currentTime > 0) {
          // Trigger durationchange for genuinely live video
          if (_this5.el_.duration === Infinity) {
            _this5.trigger('durationchange');
          }
          _this5.off('timeupdate', checkProgress);
        }
      };

      this.on('timeupdate', checkProgress);
      return NaN;
    }
    return this.el_.duration || NaN;
  };

  /**
   * Get the current width of the HTML5 media element.
   *
   * @return {number}
   *         The width of the HTML5 media element.
   */


  Html5.prototype.width = function width() {
    return this.el_.offsetWidth;
  };

  /**
   * Get the current height of the HTML5 media element.
   *
   * @return {number}
   *         The height of the HTML5 media element.
   */


  Html5.prototype.height = function height() {
    return this.el_.offsetHeight;
  };

  /**
   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
   * `fullscreenchange` event.
   *
   * @private
   * @fires fullscreenchange
   * @listens webkitendfullscreen
   * @listens webkitbeginfullscreen
   * @listens webkitbeginfullscreen
   */


  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {
    var _this6 = this;

    if (!('webkitDisplayingFullscreen' in this.el_)) {
      return;
    }

    var endFn = function endFn() {
      this.trigger('fullscreenchange', { isFullscreen: false });
    };

    var beginFn = function beginFn() {
      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {
        this.one('webkitendfullscreen', endFn);

        this.trigger('fullscreenchange', { isFullscreen: true });
      }
    };

    this.on('webkitbeginfullscreen', beginFn);
    this.on('dispose', function () {
      _this6.off('webkitbeginfullscreen', beginFn);
      _this6.off('webkitendfullscreen', endFn);
    });
  };

  /**
   * Check if fullscreen is supported on the current playback device.
   *
   * @return {boolean}
   *         - True if fullscreen is supported.
   *         - False if fullscreen is not supported.
   */


  Html5.prototype.supportsFullScreen = function supportsFullScreen() {
    if (typeof this.el_.webkitEnterFullScreen === 'function') {
      var userAgent = window$1.navigator && window$1.navigator.userAgent || '';

      // Seems to be broken in Chromium/Chrome && Safari in Leopard
      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
        return true;
      }
    }
    return false;
  };

  /**
   * Request that the `HTML5` Tech enter fullscreen.
   */


  Html5.prototype.enterFullScreen = function enterFullScreen() {
    var video = this.el_;

    if (video.paused && video.networkState <= video.HAVE_METADATA) {
      // attempt to prime the video element for programmatic access
      // this isn't necessary on the desktop but shouldn't hurt
      this.el_.play();

      // playing and pausing synchronously during the transition to fullscreen
      // can get iOS ~6.1 devices into a play/pause loop
      this.setTimeout(function () {
        video.pause();
        video.webkitEnterFullScreen();
      }, 0);
    } else {
      video.webkitEnterFullScreen();
    }
  };

  /**
   * Request that the `HTML5` Tech exit fullscreen.
   */


  Html5.prototype.exitFullScreen = function exitFullScreen() {
    this.el_.webkitExitFullScreen();
  };

  /**
   * A getter/setter for the `Html5` Tech's source object.
   * > Note: Please use {@link Html5#setSource}
   *
   * @param {Tech~SourceObject} [src]
   *        The source object you want to set on the `HTML5` techs element.
   *
   * @return {Tech~SourceObject|undefined}
   *         - The current source object when a source is not passed in.
   *         - undefined when setting
   *
   * @deprecated Since version 5.
   */


  Html5.prototype.src = function src(_src) {
    if (_src === undefined) {
      return this.el_.src;
    }

    // Setting src through `src` instead of `setSrc` will be deprecated
    this.setSrc(_src);
  };

  /**
   * Reset the tech by removing all sources and then calling
   * {@link Html5.resetMediaElement}.
   */


  Html5.prototype.reset = function reset() {
    Html5.resetMediaElement(this.el_);
  };

  /**
   * Get the current source on the `HTML5` Tech. Falls back to returning the source from
   * the HTML5 media element.
   *
   * @return {Tech~SourceObject}
   *         The current source object from the HTML5 tech. With a fallback to the
   *         elements source.
   */


  Html5.prototype.currentSrc = function currentSrc() {
    if (this.currentSource_) {
      return this.currentSource_.src;
    }
    return this.el_.currentSrc;
  };

  /**
   * Set controls attribute for the HTML5 media Element.
   *
   * @param {string} val
   *        Value to set the controls attribute to
   */


  Html5.prototype.setControls = function setControls(val) {
    this.el_.controls = !!val;
  };

  /**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */


  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
    if (!this.featuresNativeTextTracks) {
      return _Tech.prototype.addTextTrack.call(this, kind, label, language);
    }

    return this.el_.addTextTrack(kind, label, language);
  };

  /**
   * Creates either native TextTrack or an emulated TextTrack depending
   * on the value of `featuresNativeTextTracks`
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label]
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @param {boolean} [options.default]
   *        Default this track to on.
   *
   * @param {string} [options.id]
   *        The internal id to assign this track.
   *
   * @param {string} [options.src]
   *        A source url for the track.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */


  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
    if (!this.featuresNativeTextTracks) {
      return _Tech.prototype.createRemoteTextTrack.call(this, options);
    }
    var htmlTrackElement = document$1.createElement('track');

    if (options.kind) {
      htmlTrackElement.kind = options.kind;
    }
    if (options.label) {
      htmlTrackElement.label = options.label;
    }
    if (options.language || options.srclang) {
      htmlTrackElement.srclang = options.language || options.srclang;
    }
    if (options.default) {
      htmlTrackElement.default = options.default;
    }
    if (options.id) {
      htmlTrackElement.id = options.id;
    }
    if (options.src) {
      htmlTrackElement.src = options.src;
    }

    return htmlTrackElement;
  };

  /**
   * Creates a remote text track object and returns an html track element.
   *
   * @param {Object} options The object should contain values for
   * kind, language, label, and src (location of the WebVTT file)
   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be
   * automatically removed from the video element whenever the source changes
   * @return {HTMLTrackElement} An Html Track Element.
   * This can be an emulated {@link HTMLTrackElement} or a native one.
   * @deprecated The default value of the "manualCleanup" parameter will default
   * to "false" in upcoming versions of Video.js
   */


  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);

    if (this.featuresNativeTextTracks) {
      this.el().appendChild(htmlTrackElement);
    }

    return htmlTrackElement;
  };

  /**
   * Remove remote `TextTrack` from `TextTrackList` object
   *
   * @param {TextTrack} track
   *        `TextTrack` object to remove
   */


  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
    _Tech.prototype.removeRemoteTextTrack.call(this, track);

    if (this.featuresNativeTextTracks) {
      var tracks = this.$$('track');

      var i = tracks.length;

      while (i--) {
        if (track === tracks[i] || track === tracks[i].track) {
          this.el().removeChild(tracks[i]);
        }
      }
    }
  };

  /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   */


  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
    if (typeof this.el().getVideoPlaybackQuality === 'function') {
      return this.el().getVideoPlaybackQuality();
    }

    var videoPlaybackQuality = {};

    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {
      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;
      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;
    }

    if (window$1.performance && typeof window$1.performance.now === 'function') {
      videoPlaybackQuality.creationTime = window$1.performance.now();
    } else if (window$1.performance && window$1.performance.timing && typeof window$1.performance.timing.navigationStart === 'number') {
      videoPlaybackQuality.creationTime = window$1.Date.now() - window$1.performance.timing.navigationStart;
    }

    return videoPlaybackQuality;
  };

  return Html5;
}(Tech);

/* HTML5 Support Testing ---------------------------------------------------- */

if (isReal()) {

  /**
   * Element for testing browser HTML5 media capabilities
   *
   * @type {Element}
   * @constant
   * @private
   */
  Html5.TEST_VID = document$1.createElement('video');
  var track$1 = document$1.createElement('track');

  track$1.kind = 'captions';
  track$1.srclang = 'en';
  track$1.label = 'English';
  Html5.TEST_VID.appendChild(track$1);
}

/**
 * Check if HTML5 media is supported by this browser/device.
 *
 * @return {boolean}
 *         - True if HTML5 media is supported.
 *         - False if HTML5 media is not supported.
 */
Html5.isSupported = function () {
  // IE with no Media Player is a LIAR! (#984)
  try {
    Html5.TEST_VID.volume = 0.5;
  } catch (e) {
    return false;
  }

  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
};

/**
 * Check if the tech can support the given type
 *
 * @param {string} type
 *        The mimetype to check
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */
Html5.canPlayType = function (type) {
  return Html5.TEST_VID.canPlayType(type);
};

/**
 * Check if the tech can support the given source
 *
 * @param {Object} srcObj
 *        The source object
 * @param {Object} options
 *        The options passed to the tech
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */
Html5.canPlaySource = function (srcObj, options) {
  return Html5.canPlayType(srcObj.type);
};

/**
 * Check if the volume can be changed in this browser/device.
 * Volume cannot be changed in a lot of mobile devices.
 * Specifically, it can't be changed from 1 on iOS.
 *
 * @return {boolean}
 *         - True if volume can be controlled
 *         - False otherwise
 */
Html5.canControlVolume = function () {
  // IE will error if Windows Media Player not installed #3315
  try {
    var volume = Html5.TEST_VID.volume;

    Html5.TEST_VID.volume = volume / 2 + 0.1;
    return volume !== Html5.TEST_VID.volume;
  } catch (e) {
    return false;
  }
};

/**
 * Check if the volume can be muted in this browser/device.
 * Some devices, e.g. iOS, don't allow changing volume
 * but permits muting/unmuting.
 *
 * @return {bolean}
 *      - True if volume can be muted
 *      - False otherwise
 */
Html5.canMuteVolume = function () {
  try {
    var muted = Html5.TEST_VID.muted;

    // in some versions of iOS muted property doesn't always
    // work, so we want to set both property and attribute
    Html5.TEST_VID.muted = !muted;
    if (Html5.TEST_VID.muted) {
      setAttribute(Html5.TEST_VID, 'muted', 'muted');
    } else {
      removeAttribute(Html5.TEST_VID, 'muted', 'muted');
    }
    return muted !== Html5.TEST_VID.muted;
  } catch (e) {
    return false;
  }
};

/**
 * Check if the playback rate can be changed in this browser/device.
 *
 * @return {boolean}
 *         - True if playback rate can be controlled
 *         - False otherwise
 */
Html5.canControlPlaybackRate = function () {
  // Playback rate API is implemented in Android Chrome, but doesn't do anything
  // https://github.com/videojs/video.js/issues/3180
  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {
    return false;
  }
  // IE will error if Windows Media Player not installed #3315
  try {
    var playbackRate = Html5.TEST_VID.playbackRate;

    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
    return playbackRate !== Html5.TEST_VID.playbackRate;
  } catch (e) {
    return false;
  }
};

/**
 * Check if we can override a video/audio elements attributes, with
 * Object.defineProperty.
 *
 * @return {boolean}
 *         - True if builtin attributes can be overridden
 *         - False otherwise
 */
Html5.canOverrideAttributes = function () {
  // if we cannot overwrite the src/innerHTML property, there is no support
  // iOS 7 safari for instance cannot do this.
  try {
    var noop = function noop() {};

    Object.defineProperty(document$1.createElement('video'), 'src', { get: noop, set: noop });
    Object.defineProperty(document$1.createElement('audio'), 'src', { get: noop, set: noop });
    Object.defineProperty(document$1.createElement('video'), 'innerHTML', { get: noop, set: noop });
    Object.defineProperty(document$1.createElement('audio'), 'innerHTML', { get: noop, set: noop });
  } catch (e) {
    return false;
  }

  return true;
};

/**
 * Check to see if native `TextTrack`s are supported by this browser/device.
 *
 * @return {boolean}
 *         - True if native `TextTrack`s are supported.
 *         - False otherwise
 */
Html5.supportsNativeTextTracks = function () {
  return IS_ANY_SAFARI || IS_IOS && IS_CHROME;
};

/**
 * Check to see if native `VideoTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `VideoTrack`s are supported.
 *        - False otherwise
 */
Html5.supportsNativeVideoTracks = function () {
  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
};

/**
 * Check to see if native `AudioTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `AudioTrack`s are supported.
 *        - False otherwise
 */
Html5.supportsNativeAudioTracks = function () {
  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
};

/**
 * An array of events available on the Html5 tech.
 *
 * @private
 * @type {Array}
 */
Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];

/**
 * Boolean indicating whether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default {@link Html5.canControlVolume}
 */
Html5.prototype.featuresVolumeControl = Html5.canControlVolume();

/**
 * Boolean indicating whether the `Tech` supports muting volume.
 *
 * @type {bolean}
 * @default {@link Html5.canMuteVolume}
 */
Html5.prototype.featuresMuteControl = Html5.canMuteVolume();

/**
 * Boolean indicating whether the `Tech` supports changing the speed at which the media
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default {@link Html5.canControlPlaybackRate}
 */
Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();

/**
 * Boolean indicating whether the `Tech` supports the `sourceset` event.
 *
 * @type {boolean}
 * @default
 */
Html5.prototype.featuresSourceset = Html5.canOverrideAttributes();

/**
 * Boolean indicating whether the `HTML5` tech currently supports the media element
 * moving in the DOM. iOS breaks if you move the media element, so this is set this to
 * false there. Everywhere else this should be true.
 *
 * @type {boolean}
 * @default
 */
Html5.prototype.movingMediaElementInDOM = !IS_IOS;

// TODO: Previous comment: No longer appears to be used. Can probably be removed.
//       Is this true?
/**
 * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
 * when going into fullscreen.
 *
 * @type {boolean}
 * @default
 */
Html5.prototype.featuresFullscreenResize = true;

/**
 * Boolean indicating whether the `HTML5` tech currently supports the progress event.
 * If this is false, manual `progress` events will be triggered instead.
 *
 * @type {boolean}
 * @default
 */
Html5.prototype.featuresProgressEvents = true;

/**
 * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
 * If this is false, manual `timeupdate` events will be triggered instead.
 *
 * @default
 */
Html5.prototype.featuresTimeupdateEvents = true;

/**
 * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeTextTracks}
 */
Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();

/**
 * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeVideoTracks}
 */
Html5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();

/**
 * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeAudioTracks}
 */
Html5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();

// HTML5 Feature detection and Device Fixes --------------------------------- //
var canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;
var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;

Html5.patchCanPlayType = function () {

  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
  // Firefox and Chrome report correctly
  if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX && !IS_CHROME) {
    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
      if (type && mpegurlRE.test(type)) {
        return 'maybe';
      }
      return canPlayType.call(this, type);
    };
  }
};

Html5.unpatchCanPlayType = function () {
  var r = Html5.TEST_VID.constructor.prototype.canPlayType;

  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
  return r;
};

// by default, patch the media element
Html5.patchCanPlayType();

Html5.disposeMediaElement = function (el) {
  if (!el) {
    return;
  }

  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }

  // remove any child track or source nodes to prevent their loading
  while (el.hasChildNodes()) {
    el.removeChild(el.firstChild);
  }

  // remove any src reference. not setting `src=''` because that causes a warning
  // in firefox
  el.removeAttribute('src');

  // force the media element to update its loading state by calling load()
  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
  if (typeof el.load === 'function') {
    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
    (function () {
      try {
        el.load();
      } catch (e) {
        // not supported
      }
    })();
  }
};

Html5.resetMediaElement = function (el) {
  if (!el) {
    return;
  }

  var sources = el.querySelectorAll('source');
  var i = sources.length;

  while (i--) {
    el.removeChild(sources[i]);
  }

  // remove any src reference.
  // not setting `src=''` because that throws an error
  el.removeAttribute('src');

  if (typeof el.load === 'function') {
    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
    (function () {
      try {
        el.load();
      } catch (e) {
        // satisfy linter
      }
    })();
  }
};

/* Native HTML5 element property wrapping ----------------------------------- */
// Wrap native boolean attributes with getters that check both property and attribute
// The list is as followed:
// muted, defaultMuted, autoplay, controls, loop, playsinline
[
/**
 * Get the value of `muted` from the media element. `muted` indicates
 * that the volume for the media should be set to silent. This does not actually change
 * the `volume` attribute.
 *
 * @method Html5#muted
 * @return {boolean}
 *         - True if the value of `volume` should be ignored and the audio set to silent.
 *         - False if the value of `volume` should be used.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */
'muted',

/**
 * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
 * whether the media should start muted or not. Only changes the default state of the
 * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
 * current state.
 *
 * @method Html5#defaultMuted
 * @return {boolean}
 *         - The value of `defaultMuted` from the media element.
 *         - True indicates that the media should start muted.
 *         - False indicates that the media should not start muted
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */
'defaultMuted',

/**
 * Get the value of `autoplay` from the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#autoplay
 * @return {boolean}
 *         - The value of `autoplay` from the media element.
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */
'autoplay',

/**
 * Get the value of `controls` from the media element. `controls` indicates
 * whether the native media controls should be shown or hidden.
 *
 * @method Html5#controls
 * @return {boolean}
 *         - The value of `controls` from the media element.
 *         - True indicates that native controls should be showing.
 *         - False indicates that native controls should be hidden.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
 */
'controls',

/**
 * Get the value of `loop` from the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#loop
 * @return {boolean}
 *         - The value of `loop` from the media element.
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */
'loop',

/**
 * Get the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#playsinline
 * @return {boolean}
 *         - The value of `playsinline` from the media element.
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */
'playsinline'].forEach(function (prop) {
  Html5.prototype[prop] = function () {
    return this.el_[prop] || this.el_.hasAttribute(prop);
  };
});

// Wrap native boolean attributes with setters that set both property and attribute
// The list is as followed:
// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline
// setControls is special-cased above
[
/**
 * Set the value of `muted` on the media element. `muted` indicates that the current
 * audio level should be silent.
 *
 * @method Html5#setMuted
 * @param {boolean} muted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */
'muted',

/**
 * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
 * audio level should be silent, but will only effect the muted level on intial playback..
 *
 * @method Html5.prototype.setDefaultMuted
 * @param {boolean} defaultMuted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */
'defaultMuted',

/**
 * Set the value of `autoplay` on the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#setAutoplay
 * @param {boolean} autoplay
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */
'autoplay',

/**
 * Set the value of `loop` on the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#setLoop
 * @param {boolean} loop
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */
'loop',

/**
 * Set the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#setPlaysinline
 * @param {boolean} playsinline
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */
'playsinline'].forEach(function (prop) {
  Html5.prototype['set' + toTitleCase(prop)] = function (v) {
    this.el_[prop] = v;

    if (v) {
      this.el_.setAttribute(prop, prop);
    } else {
      this.el_.removeAttribute(prop);
    }
  };
});

// Wrap native properties with a getter
// The list is as followed
// paused, currentTime, buffered, volume, poster, preload, error, seeking
// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState
// readyState, videoWidth, videoHeight
[
/**
 * Get the value of `paused` from the media element. `paused` indicates whether the media element
 * is currently paused or not.
 *
 * @method Html5#paused
 * @return {boolean}
 *         The value of `paused` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
 */
'paused',

/**
 * Get the value of `currentTime` from the media element. `currentTime` indicates
 * the current second that the media is at in playback.
 *
 * @method Html5#currentTime
 * @return {number}
 *         The value of `currentTime` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
 */
'currentTime',

/**
 * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
 * object that represents the parts of the media that are already downloaded and
 * available for playback.
 *
 * @method Html5#buffered
 * @return {TimeRange}
 *         The value of `buffered` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
 */
'buffered',

/**
 * Get the value of `volume` from the media element. `volume` indicates
 * the current playback volume of audio for a media. `volume` will be a value from 0
 * (silent) to 1 (loudest and default).
 *
 * @method Html5#volume
 * @return {number}
 *         The value of `volume` from the media element. Value will be between 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */
'volume',

/**
 * Get the value of `poster` from the media element. `poster` indicates
 * that the url of an image file that can/will be shown when no media data is available.
 *
 * @method Html5#poster
 * @return {string}
 *         The value of `poster` from the media element. Value will be a url to an
 *         image.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
 */
'poster',

/**
 * Get the value of `preload` from the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#preload
 * @return {string}
 *         The value of `preload` from the media element. Will be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */
'preload',

/**
 * Get the value of the `error` from the media element. `error` indicates any
 * MediaError that may have occurred during playback. If error returns null there is no
 * current error.
 *
 * @method Html5#error
 * @return {MediaError|null}
 *         The value of `error` from the media element. Will be `MediaError` if there
 *         is a current error and null otherwise.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
 */
'error',

/**
 * Get the value of `seeking` from the media element. `seeking` indicates whether the
 * media is currently seeking to a new position or not.
 *
 * @method Html5#seeking
 * @return {boolean}
 *         - The value of `seeking` from the media element.
 *         - True indicates that the media is currently seeking to a new position.
 *         - False indicates that the media is not seeking to a new position at this time.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
 */
'seeking',

/**
 * Get the value of `seekable` from the media element. `seekable` returns a
 * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
 *
 * @method Html5#seekable
 * @return {TimeRange}
 *         The value of `seekable` from the media element. A `TimeRange` object
 *         indicating the current ranges of time that can be seeked to.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
 */
'seekable',

/**
 * Get the value of `ended` from the media element. `ended` indicates whether
 * the media has reached the end or not.
 *
 * @method Html5#ended
 * @return {boolean}
 *         - The value of `ended` from the media element.
 *         - True indicates that the media has ended.
 *         - False indicates that the media has not ended.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
 */
'ended',

/**
 * Get the value of `playbackRate` from the media element. `playbackRate` indicates
 * the rate at which the media is currently playing back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#playbackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */
'playbackRate',

/**
 * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
 * the rate at which the media is currently playing back. This value will not indicate the current
 * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
 *
 * Examples:
 *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
 *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.defaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */
'defaultPlaybackRate',

/**
 * Get the value of `played` from the media element. `played` returns a `TimeRange`
 * object representing points in the media timeline that have been played.
 *
 * @method Html5#played
 * @return {TimeRange}
 *         The value of `played` from the media element. A `TimeRange` object indicating
 *         the ranges of time that have been played.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
 */
'played',

/**
 * Get the value of `networkState` from the media element. `networkState` indicates
 * the current network state. It returns an enumeration from the following list:
 * - 0: NETWORK_EMPTY
 * - 1: NETWORK_IDLE
 * - 2: NETWORK_LOADING
 * - 3: NETWORK_NO_SOURCE
 *
 * @method Html5#networkState
 * @return {number}
 *         The value of `networkState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
 */
'networkState',

/**
 * Get the value of `readyState` from the media element. `readyState` indicates
 * the current state of the media element. It returns an enumeration from the
 * following list:
 * - 0: HAVE_NOTHING
 * - 1: HAVE_METADATA
 * - 2: HAVE_CURRENT_DATA
 * - 3: HAVE_FUTURE_DATA
 * - 4: HAVE_ENOUGH_DATA
 *
 * @method Html5#readyState
 * @return {number}
 *         The value of `readyState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
 */
'readyState',

/**
 * Get the value of `videoWidth` from the video element. `videoWidth` indicates
 * the current width of the video in css pixels.
 *
 * @method Html5#videoWidth
 * @return {number}
 *         The value of `videoWidth` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */
'videoWidth',

/**
 * Get the value of `videoHeight` from the video element. `videoHeight` indicates
 * the current height of the video in css pixels.
 *
 * @method Html5#videoHeight
 * @return {number}
 *         The value of `videoHeight` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */
'videoHeight'].forEach(function (prop) {
  Html5.prototype[prop] = function () {
    return this.el_[prop];
  };
});

// Wrap native properties with a setter in this format:
// set + toTitleCase(name)
// The list is as follows:
// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate
[
/**
 * Set the value of `volume` on the media element. `volume` indicates the current
 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
 * so on.
 *
 * @method Html5#setVolume
 * @param {number} percentAsDecimal
 *        The volume percent as a decimal. Valid range is from 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */
'volume',

/**
 * Set the value of `src` on the media element. `src` indicates the current
 * {@link Tech~SourceObject} for the media.
 *
 * @method Html5#setSrc
 * @param {Tech~SourceObject} src
 *        The source object to set as the current source.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
 */
'src',

/**
 * Set the value of `poster` on the media element. `poster` is the url to
 * an image file that can/will be shown when no media data is available.
 *
 * @method Html5#setPoster
 * @param {string} poster
 *        The url to an image that should be used as the `poster` for the media
 *        element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
 */
'poster',

/**
 * Set the value of `preload` on the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#setPreload
 * @param {string} preload
 *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */
'preload',

/**
 * Set the value of `playbackRate` on the media element. `playbackRate` indicates
 * the rate at which the media should play back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#setPlaybackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */
'playbackRate',

/**
 * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
 * the rate at which the media should play back upon initial startup. Changing this value
 * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
 *
 * Example Values:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.setDefaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
 */
'defaultPlaybackRate'].forEach(function (prop) {
  Html5.prototype['set' + toTitleCase(prop)] = function (v) {
    this.el_[prop] = v;
  };
});

// wrap native functions with a function
// The list is as follows:
// pause, load, play
[
/**
 * A wrapper around the media elements `pause` function. This will call the `HTML5`
 * media elements `pause` function.
 *
 * @method Html5#pause
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
 */
'pause',

/**
 * A wrapper around the media elements `load` function. This will call the `HTML5`s
 * media element `load` function.
 *
 * @method Html5#load
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
 */
'load',

/**
 * A wrapper around the media elements `play` function. This will call the `HTML5`s
 * media element `play` function.
 *
 * @method Html5#play
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
 */
'play'].forEach(function (prop) {
  Html5.prototype[prop] = function () {
    return this.el_[prop]();
  };
});

Tech.withSourceHandlers(Html5);

/**
 * Native source handler for Html5, simply passes the source to the media element.
 *
 * @property {Tech~SourceObject} source
 *        The source object
 *
 * @property {Html5} tech
 *        The instance of the HTML5 tech.
 */
Html5.nativeSourceHandler = {};

/**
 * Check if the media element can play the given mime type.
 *
 * @param {string} type
 *        The mimetype to check
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string)
 */
Html5.nativeSourceHandler.canPlayType = function (type) {
  // IE without MediaPlayer throws an error (#519)
  try {
    return Html5.TEST_VID.canPlayType(type);
  } catch (e) {
    return '';
  }
};

/**
 * Check if the media element can handle a source natively.
 *
 * @param {Tech~SourceObject} source
 *         The source object
 *
 * @param {Object} [options]
 *         Options to be passed to the tech.
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string).
 */
Html5.nativeSourceHandler.canHandleSource = function (source, options) {

  // If a type was provided we should rely on that
  if (source.type) {
    return Html5.nativeSourceHandler.canPlayType(source.type);

    // If no type, fall back to checking 'video/[EXTENSION]'
  } else if (source.src) {
    var ext = getFileExtension(source.src);

    return Html5.nativeSourceHandler.canPlayType('video/' + ext);
  }

  return '';
};

/**
 * Pass the source to the native media element.
 *
 * @param {Tech~SourceObject} source
 *        The source object
 *
 * @param {Html5} tech
 *        The instance of the Html5 tech
 *
 * @param {Object} [options]
 *        The options to pass to the source
 */
Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
  tech.setSrc(source.src);
};

/**
 * A noop for the native dispose function, as cleanup is not needed.
 */
Html5.nativeSourceHandler.dispose = function () {};

// Register the native source handler
Html5.registerSourceHandler(Html5.nativeSourceHandler);

Tech.registerTech('Html5', Html5);

var _templateObject$2 = taggedTemplateLiteralLoose(['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      '], ['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      ']);

// The following tech events are simply re-triggered
// on the player when they happen
var TECH_EVENTS_RETRIGGER = [
/**
 * Fired while the user agent is downloading media data.
 *
 * @event Player#progress
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `progress` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechProgress_
 * @fires Player#progress
 * @listens Tech#progress
 */
'progress',

/**
 * Fires when the loading of an audio/video is aborted.
 *
 * @event Player#abort
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `abort` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechAbort_
 * @fires Player#abort
 * @listens Tech#abort
 */
'abort',

/**
 * Fires when the browser is intentionally not getting media data.
 *
 * @event Player#suspend
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `suspend` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechSuspend_
 * @fires Player#suspend
 * @listens Tech#suspend
 */
'suspend',

/**
 * Fires when the current playlist is empty.
 *
 * @event Player#emptied
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `emptied` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechEmptied_
 * @fires Player#emptied
 * @listens Tech#emptied
 */
'emptied',
/**
 * Fires when the browser is trying to get media data, but data is not available.
 *
 * @event Player#stalled
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechStalled_
 * @fires Player#stalled
 * @listens Tech#stalled
 */
'stalled',

/**
 * Fires when the browser has loaded meta data for the audio/video.
 *
 * @event Player#loadedmetadata
 * @type {EventTarget~Event}
 */
/**
 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoadedmetadata_
 * @fires Player#loadedmetadata
 * @listens Tech#loadedmetadata
 */
'loadedmetadata',

/**
 * Fires when the browser has loaded the current frame of the audio/video.
 *
 * @event Player#loadeddata
 * @type {event}
 */
/**
 * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoaddeddata_
 * @fires Player#loadeddata
 * @listens Tech#loadeddata
 */
'loadeddata',

/**
 * Fires when the current playback position has changed.
 *
 * @event Player#timeupdate
 * @type {event}
 */
/**
 * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTimeUpdate_
 * @fires Player#timeupdate
 * @listens Tech#timeupdate
 */
'timeupdate',
/**
 * Fires when the video's intrinsic dimensions change
 *
 * @event Player#resize
 * @type {event}
 */
/**
 * Retrigger the `resize` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechResize_
 * @fires Player#resize
 * @listens Tech#resize
 */
'resize',

/**
 * Fires when the volume has been changed
 *
 * @event Player#volumechange
 * @type {event}
 */
/**
 * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechVolumechange_
 * @fires Player#volumechange
 * @listens Tech#volumechange
 */
'volumechange',

/**
 * Fires when the text track has been changed
 *
 * @event Player#texttrackchange
 * @type {event}
 */
/**
 * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTexttrackchange_
 * @fires Player#texttrackchange
 * @listens Tech#texttrackchange
 */
'texttrackchange'];

// events to queue when playback rate is zero
// this is a hash for the sole purpose of mapping non-camel-cased event names
// to camel-cased function names
var TECH_EVENTS_QUEUE = {
    canplay: 'CanPlay',
    canplaythrough: 'CanPlayThrough',
    playing: 'Playing',
    seeked: 'Seeked'
};

/**
 * An instance of the `Player` class is created when any of the Video.js setup methods
 * are used to initialize a video.
 *
 * After an instance has been created it can be accessed globally in two ways:
 * 1. By calling `videojs('example_video_1');`
 * 2. By using it directly via  `videojs.players.example_video_1;`
 *
 * @extends Component
 */

var Player = function (_Component) {
    inherits(Player, _Component);

    /**
     * Create an instance of this class.
     *
     * @param {Element} tag
     *        The original video DOM element used for configuring options.
     *
     * @param {Object} [options]
     *        Object of option names and values.
     *
     * @param {Component~ReadyCallback} [ready]
     *        Ready callback function.
     */
    function Player(tag, options, ready) {
        classCallCheck(this, Player);

        // Make sure tag ID exists
        tag.id = tag.id || options.id || 'vjs_video_' + newGUID();

        // Set Options
        // The options argument overrides options set in the video tag
        // which overrides globally set options.
        // This latter part coincides with the load order
        // (tag must exist before Player)
        options = assign(Player.getTagSettings(tag), options);

        // Delay the initialization of children because we need to set up
        // player properties first, and can't use `this` before `super()`
        options.initChildren = false;

        // Same with creating the element
        options.createEl = false;

        // don't auto mixin the evented mixin
        options.evented = false;

        // we don't want the player to report touch activity on itself
        // see enableTouchActivity in Component
        options.reportTouchActivity = false;

        // If language is not set, get the closest lang attribute
        if (!options.language) {
            if (typeof tag.closest === 'function') {
                var closest = tag.closest('[lang]');

                if (closest && closest.getAttribute) {
                    options.language = closest.getAttribute('lang');
                }
            } else {
                var element = tag;

                while (element && element.nodeType === 1) {
                    if (getAttributes(element).hasOwnProperty('lang')) {
                        options.language = element.getAttribute('lang');
                        break;
                    }
                    element = element.parentNode;
                }
            }
        }

        // Run base component initializing with new options

        // Tracks when a tech changes the poster
        var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));

        _this.isPosterFromTech_ = false;

        // Holds callback info that gets queued when playback rate is zero
        // and a seek is happening
        _this.queuedCallbacks_ = [];

        // Turn off API access because we're loading a new tech that might load asynchronously
        _this.isReady_ = false;

        // Init state hasStarted_
        _this.hasStarted_ = false;

        // Init state userActive_
        _this.userActive_ = false;

        // if the global option object was accidentally blown away by
        // someone, bail early with an informative error
        if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {
            throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
        }

        // Store the original tag used to set options
        _this.tag = tag;

        // Store the tag attributes used to restore html5 element
        _this.tagAttributes = tag && getAttributes(tag);

        // Update current language
        _this.language(_this.options_.language);

        // Update Supported Languages
        if (options.languages) {
            // Normalise player option languages to lowercase
            var languagesToLower = {};

            Object.getOwnPropertyNames(options.languages).forEach(function (name$$1) {
                languagesToLower[name$$1.toLowerCase()] = options.languages[name$$1];
            });
            _this.languages_ = languagesToLower;
        } else {
            _this.languages_ = Player.prototype.options_.languages;
        }

        // Cache for video property values.
        _this.cache_ = {};

        // Set poster
        _this.poster_ = options.poster || '';
        // Set controls
        _this.controls_ = !!options.controls;

        // Set default values for lastVolume
        _this.cache_.lastVolume = 1;

        // Original tag settings stored in options
        // now remove immediately so native controls don't flash.
        // May be turned back on by HTML5 tech if nativeControlsForTouch is true
        tag.controls = false;
        tag.removeAttribute('controls');

        // the attribute overrides the option
        if (tag.hasAttribute('autoplay')) {
            _this.options_.autoplay = true;
        } else {
            // otherwise use the setter to validate and
            // set the correct value.
            _this.autoplay(_this.options_.autoplay);
        }

        /*
         * Store the internal state of scrubbing
         *
         * @private
         * @return {Boolean} True if the user is scrubbing
         */
        _this.scrubbing_ = false;

        _this.el_ = _this.createEl();

        // Set default value for lastPlaybackRate
        _this.cache_.lastPlaybackRate = _this.defaultPlaybackRate();

        // Make this an evented object and use `el_` as its event bus.
        evented(_this, { eventBusKey: 'el_' });

        // We also want to pass the original player options to each component and plugin
        // as well so they don't need to reach back into the player for options later.
        // We also need to do another copy of this.options_ so we don't end up with
        // an infinite loop.
        var playerOptionsCopy = mergeOptions(_this.options_);

        // Load plugins
        if (options.plugins) {
            var plugins = options.plugins;

            Object.keys(plugins).forEach(function (name$$1) {
                if (typeof this[name$$1] === 'function') {
                    this[name$$1](plugins[name$$1]);
                } else {
                    throw new Error('plugin "' + name$$1 + '" does not exist');
                }
            }, _this);
        }

        _this.options_.playerOptions = playerOptionsCopy;

        _this.middleware_ = [];

        _this.initChildren();

        // Set isAudio based on whether or not an audio tag was used
        _this.isAudio(tag.nodeName.toLowerCase() === 'audio');

        // Update controls className. Can't do this when the controls are initially
        // set because the element doesn't exist yet.
        if (_this.controls()) {
            _this.addClass('play-controls-enabled');
        } else {
            _this.addClass('play-controls-disabled');
        }

        // Set ARIA label and region role depending on player type
        _this.el_.setAttribute('role', 'region');
        if (_this.isAudio()) {
            _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));
        } else {
            _this.el_.setAttribute('aria-label', _this.localize('Video Player'));
        }

        if (_this.isAudio()) {
            _this.addClass('play-audio');
        }

        if (_this.flexNotSupported_()) {
            _this.addClass('play-no-flex');
        }

        // TODO: Make this smarter. Toggle user state between touching/mousing
        // using events, since devices can have both touch and mouse events.
        // if (browser.TOUCH_ENABLED) {
        //   this.addClass('play-touch-enabled');
        // }

        // iOS Safari has broken hover handling
        if (!IS_IOS) {
            _this.addClass('play-workinghover');
        }

        // Make player easily findable by ID
        Player.players[_this.id_] = _this;

        // Add a major version class to aid css in plugins
        var majorVersion = version.split('.')[0];

        _this.addClass('play-v' + majorVersion);
        _this.addClass('play-js');

        // When the player is first initialized, trigger activity so components
        // like the control bar show themselves if needed
        _this.userActive(true);
        _this.reportUserActivity();

        _this.one('play', _this.listenForUserActivity_);
        _this.on('fullscreenchange', _this.handleFullscreenChange_);
        _this.on('stageclick', _this.handleStageClick_);

        _this.changingSrc_ = false;
        _this.playWaitingForReady_ = false;
        _this.playOnLoadstart_ = null;
        return _this;
    }

    /**
     * Destroys the video player and does any necessary cleanup.
     *
     * This is especially helpful if you are dynamically adding and removing videos
     * to/from the DOM.
     *
     * @fires Player#dispose
     */


    Player.prototype.dispose = function dispose() {
        /**
         * Called when the player is being disposed of.
         *
         * @event Player#dispose
         * @type {EventTarget~Event}
         */
        this.trigger('dispose');
        // prevent dispose from being called twice
        this.off('dispose');

        if (this.styleEl_ && this.styleEl_.parentNode) {
            this.styleEl_.parentNode.removeChild(this.styleEl_);
            this.styleEl_ = null;
        }

        // Kill reference to this player
        Player.players[this.id_] = null;

        if (this.tag && this.tag.player) {
            this.tag.player = null;
        }

        if (this.el_ && this.el_.player) {
            this.el_.player = null;
        }

        if (this.tech_) {
            this.tech_.dispose();
            this.isPosterFromTech_ = false;
            this.poster_ = '';
        }

        if (this.playerElIngest_) {
            this.playerElIngest_ = null;
        }

        if (this.tag) {
            this.tag = null;
        }

        clearCacheForPlayer(this);

        // the actual .el_ is removed here
        _Component.prototype.dispose.call(this);
    };

    /**
     * Create the `Player`'s DOM element.
     *
     * @return {Element}
     *         The DOM element that gets created.
     */


    Player.prototype.createEl = function createEl$$1() {
        var tag = this.tag;
        var el = void 0;
        var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-play-player');
        var divEmbed = this.tag.tagName.toLowerCase() === 'video-js';

        if (playerElIngest) {
            el = this.el_ = tag.parentNode;
        } else if (!divEmbed) {
            el = this.el_ = _Component.prototype.createEl.call(this, 'div');
        }

        // Copy over all the attributes from the tag, including ID and class
        // ID will now reference player box, not the video tag
        var attrs = getAttributes(tag);

        if (divEmbed) {
            el = this.el_ = tag;
            tag = this.tag = document$1.createElement('video');
            while (el.children.length) {
                tag.appendChild(el.firstChild);
            }

            if (!hasClass(el, 'video-js')) {
                addClass(el, 'video-js');
            }

            el.appendChild(tag);

            playerElIngest = this.playerElIngest_ = el;
            // move properties over from our custom `video-js` element
            // to our new `video` element. This will move things like
            // `src` or `controls` that were set via js before the player
            // was initialized.
            Object.keys(el).forEach(function (k) {
                tag[k] = el[k];
            });
        }

        // set tabindex to -1 to remove the video element from the focus order
        tag.setAttribute('tabindex', '-1');
        // Workaround for #4583 (JAWS+IE doesn't announce BPB or play button)
        // See https://github.com/FreedomScientific/VFO-standards-support/issues/78
        // Note that we can't detect if JAWS is being used, but this ARIA attribute
        //  doesn't change behavior of IE11 if JAWS is not being used
        if (IE_VERSION) {
            tag.setAttribute('role', 'application');
        }

        // Remove width/height attrs from tag so CSS can make it 100% width/height
        tag.removeAttribute('width');
        tag.removeAttribute('height');

        Object.getOwnPropertyNames(attrs).forEach(function (attr) {
            // don't copy over the class attribute to the player element when we're in a div embed
            // the class is already set up properly in the divEmbed case
            // and we want to make sure that the `video-js` class doesn't get lost
            if (!(divEmbed && attr === 'class')) {
                el.setAttribute(attr, attrs[attr]);
            }

            if (divEmbed) {
                tag.setAttribute(attr, attrs[attr]);
            }
        });

        // Update tag id/class for use as HTML5 playback tech
        // Might think we should do this after embedding in container so .play-tech class
        // doesn't flash 100% width/height, but class only applies with .play-js parent
        tag.playerId = tag.id;
        tag.id += '_html5_api';
        tag.className = 'play-tech';

        // Make player findable on elements
        tag.player = el.player = this;
        // Default state of video is paused
        this.addClass('play-paused');

        // Add a style element in the player that we'll use to set the width/height
        // of the player in a way that's still overrideable by CSS, just like the
        // video element
        if (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {
            this.styleEl_ = createStyleElement('play-styles-dimensions');
            var defaultsStyleEl = $('.play-styles-defaults');
            var head = $('head');

            head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
        }

        // Pass in the width/height/aspectRatio options which will update the style el
        this.width(this.options_.width);
        this.height(this.options_.height);
        this.fluid(this.options_.fluid);
        this.aspectRatio(this.options_.aspectRatio);

        // Hide any links within the video/audio tag,
        // because IE doesn't hide them completely from screen readers.
        var links = tag.getElementsByTagName('a');

        for (var i = 0; i < links.length; i++) {
            var linkEl = links.item(i);

            addClass(linkEl, 'play-hidden');
            linkEl.setAttribute('hidden', 'hidden');
        }

        // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
        // keep track of the original for later so we can know if the source originally failed
        tag.initNetworkState_ = tag.networkState;

        // Wrap video tag in div (el/box) container
        if (tag.parentNode && !playerElIngest) {
            tag.parentNode.insertBefore(el, tag);
        }

        // insert the tag as the first child of the player element
        // then manually add it to the children array so that this.addChild
        // will work properly for other components
        //
        // Breaks iPhone, fixed in HTML5 setup.
        prependTo(tag, el);
        this.children_.unshift(tag);

        // Set lang attr on player to ensure CSS :lang() in consistent with player
        // if it's been set to something different to the doc
        this.el_.setAttribute('lang', this.language_);

        this.el_ = el;

        return el;
    };

    /**
     * A getter/setter for the `Player`'s width. Returns the player's configured value.
     * To get the current width use `currentWidth()`.
     *
     * @param {number} [value]
     *        The value to set the `Player`'s width to.
     *
     * @return {number}
     *         The current width of the `Player` when getting.
     */


    Player.prototype.width = function width(value) {
        return this.dimension('width', value);
    };

    /**
     * A getter/setter for the `Player`'s height. Returns the player's configured value.
     * To get the current height use `currentheight()`.
     *
     * @param {number} [value]
     *        The value to set the `Player`'s heigth to.
     *
     * @return {number}
     *         The current height of the `Player` when getting.
     */


    Player.prototype.height = function height(value) {
        return this.dimension('height', value);
    };

    /**
     * A getter/setter for the `Player`'s width & height.
     *
     * @param {string} dimension
     *        This string can be:
     *        - 'width'
     *        - 'height'
     *
     * @param {number} [value]
     *        Value for dimension specified in the first argument.
     *
     * @return {number}
     *         The dimension arguments value when getting (width/height).
     */


    Player.prototype.dimension = function dimension(_dimension, value) {
        var privDimension = _dimension + '_';

        if (value === undefined) {
            return this[privDimension] || 0;
        }

        if (value === '') {
            // If an empty string is given, reset the dimension to be automatic
            this[privDimension] = undefined;
            this.updateStyleEl_();
            return;
        }

        var parsedVal = parseFloat(value);

        if (isNaN(parsedVal)) {
            log$1.error('Improper value "' + value + '" supplied for for ' + _dimension);
            return;
        }

        this[privDimension] = parsedVal;
        this.updateStyleEl_();
    };

    /**
     * A getter/setter/toggler for the play-fluid `className` on the `Player`.
     *
     * @param {boolean} [bool]
     *        - A value of true adds the class.
     *        - A value of false removes the class.
     *        - No value will toggle the fluid class.
     *
     * @return {boolean|undefined}
     *         - The value of fluid when getting.
     *         - `undefined` when setting.
     */


    Player.prototype.fluid = function fluid(bool) {
        if (bool === undefined) {
            return !!this.fluid_;
        }

        this.fluid_ = !!bool;

        if (bool) {
            this.addClass('play-fluid');
        } else {
            this.removeClass('play-fluid');
        }

        this.updateStyleEl_();
    };

    /**
     * Get/Set the aspect ratio
     *
     * @param {string} [ratio]
     *        Aspect ratio for player
     *
     * @return {string|undefined}
     *         returns the current aspect ratio when getting
     */

    /**
     * A getter/setter for the `Player`'s aspect ratio.
     *
     * @param {string} [ratio]
     *        The value to set the `Player's aspect ratio to.
     *
     * @return {string|undefined}
     *         - The current aspect ratio of the `Player` when getting.
     *         - undefined when setting
     */


    Player.prototype.aspectRatio = function aspectRatio(ratio) {
        if (ratio === undefined) {
            return this.aspectRatio_;
        }

        // Check for width:height format
        if (!/^\d+\:\d+$/.test(ratio)) {
            throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
        }
        this.aspectRatio_ = ratio;

        // We're assuming if you set an aspect ratio you want fluid mode,
        // because in fixed mode you could calculate width and height yourself.
        this.fluid(true);

        this.updateStyleEl_();
    };

    /**
     * Update styles of the `Player` element (height, width and aspect ratio).
     *
     * @private
     * @listens Tech#loadedmetadata
     */


    Player.prototype.updateStyleEl_ = function updateStyleEl_() {
        if (window$1.VIDEOJS_NO_DYNAMIC_STYLE === true) {
            var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
            var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
            var techEl = this.tech_ && this.tech_.el();

            if (techEl) {
                if (_width >= 0) {
                    techEl.width = _width;
                }
                if (_height >= 0) {
                    techEl.height = _height;
                }
            }

            return;
        }

        var width = void 0;
        var height = void 0;
        var aspectRatio = void 0;
        var idClass = void 0;

        // The aspect ratio is either used directly or to calculate width and height.
        if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
            // Use any aspectRatio that's been specifically set
            aspectRatio = this.aspectRatio_;
        } else if (this.videoWidth() > 0) {
            // Otherwise try to get the aspect ratio from the video metadata
            aspectRatio = this.videoWidth() + ':' + this.videoHeight();
        } else {
            // Or use a default. The video element's is 2:1, but 16:9 is more common.
            aspectRatio = '16:9';
        }

        // Get the ratio as a decimal we can use to calculate dimensions
        var ratioParts = aspectRatio.split(':');
        var ratioMultiplier = ratioParts[1] / ratioParts[0];

        if (this.width_ !== undefined) {
            // Use any width that's been specifically set
            width = this.width_;
        } else if (this.height_ !== undefined) {
            // Or calulate the width from the aspect ratio if a height has been set
            width = this.height_ / ratioMultiplier;
        } else {
            // Or use the video's metadata, or use the video el's default of 300
            width = this.videoWidth() || 300;
        }

        if (this.height_ !== undefined) {
            // Use any height that's been specifically set
            height = this.height_;
        } else {
            // Otherwise calculate the height from the ratio and the width
            height = width * ratioMultiplier;
        }

        // Ensure the CSS class is valid by starting with an alpha character
        if (/^[^a-zA-Z]/.test(this.id())) {
            idClass = 'dimensions-' + this.id();
        } else {
            idClass = this.id() + '-dimensions';
        }

        // Ensure the right class is still on the player for the style element
        this.addClass(idClass);

        setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.play-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
    };

    /**
     * Load/Create an instance of playback {@link Tech} including element
     * and API methods. Then append the `Tech` element in `Player` as a child.
     *
     * @param {string} techName
     *        name of the playback technology
     *
     * @param {string} source
     *        video source
     *
     * @private
     */


    Player.prototype.loadTech_ = function loadTech_(techName, source) {
        var _this2 = this;

        // Pause and remove current playback technology
        if (this.tech_) {
            this.unloadTech_();
        }

        var titleTechName = toTitleCase(techName);
        var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);

        // get rid of the HTML5 video tag as soon as we are using another tech
        if (titleTechName !== 'Html5' && this.tag) {
            Tech.getTech('Html5').disposeMediaElement(this.tag);
            this.tag.player = null;
            this.tag = null;
        }

        this.techName_ = titleTechName;

        // Turn off API access because we're loading a new tech that might load asynchronously
        this.isReady_ = false;

        // if autoplay is a string we pass false to the tech
        // because the player is going to handle autoplay on `loadstart`
        var autoplay = typeof this.autoplay() === 'string' ? false : this.autoplay();

        // Grab tech-specific options from player options and add source and parent element to use.
        var techOptions = {
            source: source,
            autoplay: autoplay,
            'nativeControlsForTouch': this.options_.nativeControlsForTouch,
            'playerId': this.id(),
            'techId': this.id() + '_' + titleTechName + '_api',
            'playsinline': this.options_.playsinline,
            'preload': this.options_.preload,
            'loop': this.options_.loop,
            'muted': this.options_.muted,
            'poster': this.poster(),
            'language': this.language(),
            'playerElIngest': this.playerElIngest_ || false,
            'vtt.js': this.options_['vtt.js'],
            'canOverridePoster': !!this.options_.techCanOverridePoster,
            'enableSourceset': this.options_.enableSourceset
        };

        ALL.names.forEach(function (name$$1) {
            var props = ALL[name$$1];

            techOptions[props.getterName] = _this2[props.privateName];
        });

        assign(techOptions, this.options_[titleTechName]);
        assign(techOptions, this.options_[camelTechName]);
        assign(techOptions, this.options_[techName.toLowerCase()]);

        if (this.tag) {
            techOptions.tag = this.tag;
        }

        if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {
            techOptions.startTime = this.cache_.currentTime;
        }

        // Initialize tech instance
        var TechClass = Tech.getTech(techName);

        if (!TechClass) {
            throw new Error('No Tech named \'' + titleTechName + '\' exists! \'' + titleTechName + '\' should be registered using videojs.registerTech()\'');
        }

        this.tech_ = new TechClass(techOptions);

        // player.triggerReady is always async, so don't need this to be async
        this.tech_.ready(bind(this, this.handleTechReady_), true);

        textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

        // Listen to all HTML5-defined events and trigger them on the player
        TECH_EVENTS_RETRIGGER.forEach(function (event) {
            _this2.on(_this2.tech_, event, _this2['handleTech' + toTitleCase(event) + '_']);
        });

        Object.keys(TECH_EVENTS_QUEUE).forEach(function (event) {
            _this2.on(_this2.tech_, event, function (eventObj) {
                if (_this2.tech_.playbackRate() === 0 && _this2.tech_.seeking()) {
                    _this2.queuedCallbacks_.push({
                        callback: _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'].bind(_this2),
                        event: eventObj
                    });
                    return;
                }
                _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'](eventObj);
            });
        });

        this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
        this.on(this.tech_, 'sourceset', this.handleTechSourceset_);
        this.on(this.tech_, 'waiting', this.handleTechWaiting_);
        this.on(this.tech_, 'ended', this.handleTechEnded_);
        this.on(this.tech_, 'seeking', this.handleTechSeeking_);
        this.on(this.tech_, 'play', this.handleTechPlay_);
        this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
        this.on(this.tech_, 'pause', this.handleTechPause_);
        this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
        this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
        this.on(this.tech_, 'error', this.handleTechError_);
        this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
        this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
        this.on(this.tech_, 'textdata', this.handleTechTextData_);
        this.on(this.tech_, 'ratechange', this.handleTechRateChange_);
        this.on(this.tech_, 'contextmenu', function (e) {
            e.preventDefault();
        });

        this.usingNativeControls(this.techGet_('controls'));

        if (this.controls() && !this.usingNativeControls()) {
            this.addTechControlsListeners_();
        }

        // Add the tech element in the DOM if it was not already there
        // Make sure to not insert the original video element if using Html5
        if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {
            prependTo(this.tech_.el(), this.el());
        }

        // Get rid of the original video tag reference after the first tech is loaded
        if (this.tag) {
            this.tag.player = null;
            this.tag = null;
        }
    };

    /**
     * Unload and dispose of the current playback {@link Tech}.
     *
     * @private
     */


    Player.prototype.unloadTech_ = function unloadTech_() {
        var _this3 = this;

        // Save the current text tracks so that we can reuse the same text tracks with the next tech
        ALL.names.forEach(function (name$$1) {
            var props = ALL[name$$1];

            _this3[props.privateName] = _this3[props.getterName]();
        });
        this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);

        this.isReady_ = false;

        this.tech_.dispose();

        this.tech_ = false;

        if (this.isPosterFromTech_) {
            this.poster_ = '';
            this.trigger('posterchange');
        }

        this.isPosterFromTech_ = false;
    };

    /**
     * Return a reference to the current {@link Tech}.
     * It will print a warning by default about the danger of using the tech directly
     * but any argument that is passed in will silence the warning.
     *
     * @param {*} [safety]
     *        Anything passed in to silence the warning
     *
     * @return {Tech}
     *         The Tech
     */


    Player.prototype.tech = function tech(safety) {
        if (safety === undefined) {
            log$1.warn(tsml(_templateObject$2));
        }

        return this.tech_;
    };

    /**
     * Set up click and touch listeners for the playback element
     *
     * - On desktops: a click on the video itself will toggle playback
     * - On mobile devices: a click on the video toggles controls
     *   which is done by toggling the user state between active and
     *   inactive
     * - A tap can signal that a user has become active or has become inactive
     *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
     *   quick tap should hide them again (signaling the user is in an inactive
     *   viewing state)
     * - In addition to this, we still want the user to be considered inactive after
     *   a few seconds of inactivity.
     *
     * > Note: the only part of iOS interaction we can't mimic with this setup
     * is a touch and hold on the video element counting as activity in order to
     * keep the controls showing, but that shouldn't be an issue. A touch and hold
     * on any controls will still keep the user active
     *
     * @private
     */


    Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
        // Make sure to remove all the previous listeners in case we are called multiple times.
        this.removeTechControlsListeners_();

        // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
        // trigger mousedown/up.
        // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
        // Any touch events are set to block the mousedown event from happening
        this.on(this.tech_, 'mousedown', this.handleTechClick_);
        this.on(this.tech_, 'dblclick', this.handleTechDoubleClick_);

        // If the controls were hidden we don't want that to change without a tap event
        // so we'll check if the controls were already showing before reporting user
        // activity
        this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
        this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
        this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);

        // The tap listener needs to come after the touchend listener because the tap
        // listener cancels out any reportedUserActivity when setting userActive(false)
        this.on(this.tech_, 'tap', this.handleTechTap_);
    };

    /**
     * Remove the listeners used for click and tap controls. This is needed for
     * toggling to controls disabled, where a tap/touch should do nothing.
     *
     * @private
     */


    Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
        // We don't want to just use `this.off()` because there might be other needed
        // listeners added by techs that extend this.
        this.off(this.tech_, 'tap', this.handleTechTap_);
        this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
        this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
        this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
        this.off(this.tech_, 'mousedown', this.handleTechClick_);
        this.off(this.tech_, 'dblclick', this.handleTechDoubleClick_);
    };

    /**
     * Player waits for the tech to be ready
     *
     * @private
     */


    Player.prototype.handleTechReady_ = function handleTechReady_() {
        this.triggerReady();

        // Keep the same volume as before
        if (this.cache_.volume) {
            this.techCall_('setVolume', this.cache_.volume);
        }

        // Look if the tech found a higher resolution poster while loading
        this.handleTechPosterChange_();

        // Update the duration if available
        this.handleTechDurationChange_();
    };

    /**
     * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This
     * function will also trigger {@link Player#firstplay} if it is the first loadstart
     * for a video.
     *
     * @fires Player#loadstart
     * @fires Player#firstplay
     * @listens Tech#loadstart
     * @private
     */


    Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
        // TODO: Update to use `emptied` event instead. See #1277.

        this.removeClass('play-ended');
        this.removeClass('play-seeking');

        // reset the error state
        this.error(null);

        // If it's already playing we want to trigger a firstplay event now.
        // The firstplay event relies on both the play and loadstart events
        // which can happen in any order for a new source
        if (!this.paused()) {
            /**
             * Fired when the user agent begins looking for media data
             *
             * @event Player#loadstart
             * @type {EventTarget~Event}
             */
            this.trigger('loadstart');
            this.trigger('firstplay');
        } else {
            // reset the hasStarted state
            this.hasStarted(false);
            this.trigger('loadstart');
        }

        // autoplay happens after loadstart for the browser,
        // so we mimic that behavior
        this.manualAutoplay_(this.autoplay());
    };

    /**
     * Handle autoplay string values, rather than the typical boolean
     * values that should be handled by the tech. Note that this is not
     * part of any specification. Valid values and what they do can be
     * found on the autoplay getter at Player#autoplay()
     */


    Player.prototype.manualAutoplay_ = function manualAutoplay_(type) {
        var _this4 = this;

        if (!this.tech_ || typeof type !== 'string') {
            return;
        }

        var muted = function muted() {
            var previouslyMuted = _this4.muted();

            _this4.muted(true);

            var playPromise = _this4.play();

            if (!playPromise || !playPromise.then || !playPromise.catch) {
                return;
            }

            return playPromise.catch(function (e) {
                // restore old value of muted on failure
                _this4.muted(previouslyMuted);
            });
        };

        var promise = void 0;

        if (type === 'any') {
            promise = this.play();

            if (promise && promise.then && promise.catch) {
                promise.catch(function () {
                    return muted();
                });
            }
        } else if (type === 'muted') {
            promise = muted();
        } else {
            promise = this.play();
        }

        if (!promise || !promise.then || !promise.catch) {
            return;
        }

        return promise.then(function () {
            _this4.trigger({ type: 'autoplay-success', autoplay: type });
        }).catch(function (e) {
            _this4.trigger({ type: 'autoplay-failure', autoplay: type });
        });
    };

    /**
     * Update the internal source caches so that we return the correct source from
     * `src()`, `currentSource()`, and `currentSources()`.
     *
     * > Note: `currentSources` will not be updated if the source that is passed in exists
     *         in the current `currentSources` cache.
     *
     *
     * @param {Tech~SourceObject} srcObj
     *        A string or object source to update our caches to.
     */


    Player.prototype.updateSourceCaches_ = function updateSourceCaches_() {
        var srcObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';


        var src = srcObj;
        var type = '';

        if (typeof src !== 'string') {
            src = srcObj.src;
            type = srcObj.type;
        }
        // make sure all the caches are set to default values
        // to prevent null checking
        this.cache_.source = this.cache_.source || {};
        this.cache_.sources = this.cache_.sources || [];

        // try to get the type of the src that was passed in
        if (src && !type) {
            type = findMimetype(this, src);
        }

        // update `currentSource` cache always
        this.cache_.source = mergeOptions({}, srcObj, { src: src, type: type });

        var matchingSources = this.cache_.sources.filter(function (s) {
            return s.src && s.src === src;
        });
        var sourceElSources = [];
        var sourceEls = this.$$('source');
        var matchingSourceEls = [];

        for (var i = 0; i < sourceEls.length; i++) {
            var sourceObj = getAttributes(sourceEls[i]);

            sourceElSources.push(sourceObj);

            if (sourceObj.src && sourceObj.src === src) {
                matchingSourceEls.push(sourceObj.src);
            }
        }

        // if we have matching source els but not matching sources
        // the current source cache is not up to date
        if (matchingSourceEls.length && !matchingSources.length) {
            this.cache_.sources = sourceElSources;
            // if we don't have matching source or source els set the
            // sources cache to the `currentSource` cache
        } else if (!matchingSources.length) {
            this.cache_.sources = [this.cache_.source];
        }

        // update the tech `src` cache
        this.cache_.src = src;
    };

    /**
     * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}
     * causing the media element to reload.
     *
     * It will fire for the initial source and each subsequent source.
     * This event is a custom event from Video.js and is triggered by the {@link Tech}.
     *
     * The event object for this event contains a `src` property that will contain the source
     * that was available when the event was triggered. This is generally only necessary if Video.js
     * is switching techs while the source was being changed.
     *
     * It is also fired when `load` is called on the player (or media element)
     * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}
     * says that the resource selection algorithm needs to be aborted and restarted.
     * In this case, it is very likely that the `src` property will be set to the
     * empty string `""` to indicate we do not know what the source will be but
     * that it is changing.
     *
     * *This event is currently still experimental and may change in minor releases.*
     * __To use this, pass `enableSourceset` option to the player.__
     *
     * @event Player#sourceset
     * @type {EventTarget~Event}
     * @prop {string} src
     *                The source url available when the `sourceset` was triggered.
     *                It will be an empty string if we cannot know what the source is
     *                but know that the source will change.
     */
    /**
     * Retrigger the `sourceset` event that was triggered by the {@link Tech}.
     *
     * @fires Player#sourceset
     * @listens Tech#sourceset
     * @private
     */


    Player.prototype.handleTechSourceset_ = function handleTechSourceset_(event) {
        var _this5 = this;

        // only update the source cache when the source
        // was not updated using the player api
        if (!this.changingSrc_) {
            // update the source to the intial source right away
            // in some cases this will be empty string
            this.updateSourceCaches_(event.src);

            // if the `sourceset` `src` was an empty string
            // wait for a `loadstart` to update the cache to `currentSrc`.
            // If a sourceset happens before a `loadstart`, we reset the state
            // as this function will be called again.
            if (!event.src) {
                var updateCache = function updateCache(e) {
                    if (e.type !== 'sourceset') {
                        _this5.updateSourceCaches_(_this5.techGet_('currentSrc'));
                    }

                    _this5.tech_.off(['sourceset', 'loadstart'], updateCache);
                };

                this.tech_.one(['sourceset', 'loadstart'], updateCache);
            }
        }

        this.trigger({
            src: event.src,
            type: 'sourceset'
        });
    };

    /**
     * Add/remove the play-has-started class
     *
     * @fires Player#firstplay
     *
     * @param {boolean} request
     *        - true: adds the class
     *        - false: remove the class
     *
     * @return {boolean}
     *         the boolean value of hasStarted_
     */


    Player.prototype.hasStarted = function hasStarted(request) {
        if (request === undefined) {
            // act as getter, if we have no request to change
            return this.hasStarted_;
        }

        if (request === this.hasStarted_) {
            return;
        }

        this.hasStarted_ = request;

        if (this.hasStarted_) {
            this.addClass('play-has-started');
            this.trigger('firstplay');
        } else {
            this.removeClass('play-has-started');
        }
    };

    /**
     * Fired whenever the media begins or resumes playback
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
     * @fires Player#play
     * @listens Tech#play
     * @private
     */


    Player.prototype.handleTechPlay_ = function handleTechPlay_() {
        var _this6 = this;

        this.removeClass('play-ended');
        this.removeClass('play-paused');
        this.addClass('play-playing');
        this.addClass('play-play-toggle');
        setTimeout(function () {
            _this6.removeClass('play-play-toggle');
        }, 400);

        // hide the poster when the user hits play
        this.hasStarted(true);
        /**
         * Triggered whenever an {@link Tech#play} event happens. Indicates that
         * playback has started or resumed.
         *
         * @event Player#play
         * @type {EventTarget~Event}
         */
        this.trigger('play');
    };

    /**
     * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
     *
     * If there were any events queued while the playback rate was zero, fire
     * those events now.
     *
     * @private
     * @method Player#handleTechRateChange_
     * @fires Player#ratechange
     * @listens Tech#ratechange
     */


    Player.prototype.handleTechRateChange_ = function handleTechRateChange_() {
        if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {
            this.queuedCallbacks_.forEach(function (queued) {
                return queued.callback(queued.event);
            });
            this.queuedCallbacks_ = [];
        }
        this.cache_.lastPlaybackRate = this.tech_.playbackRate();
        /**
         * Fires when the playing speed of the audio/video is changed
         *
         * @event Player#ratechange
         * @type {event}
         */
        this.trigger('ratechange');
    };

    /**
     * Retrigger the `waiting` event that was triggered by the {@link Tech}.
     *
     * @fires Player#waiting
     * @listens Tech#waiting
     * @private
     */


    Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
        this.addClass('play-waiting');
        /**
         * A readyState change on the DOM element has caused playback to stop.
         *
         * @event Player#waiting
         * @type {EventTarget~Event}
         */
        this.trigger('waiting');
    };

    /**
     * Retrigger the `canplay` event that was triggered by the {@link Tech}.
     * > Note: This is not consistent between browsers. See #1351
     *
     * @fires Player#canplay
     * @listens Tech#canplay
     * @private
     */


    Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
        this.removeClass('play-waiting');
        /**
         * The media has a readyState of HAVE_FUTURE_DATA or greater.
         *
         * @event Player#canplay
         * @type {EventTarget~Event}
         */
        this.trigger('canplay');
    };

    /**
     * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
     *
     * @fires Player#canplaythrough
     * @listens Tech#canplaythrough
     * @private
     */


    Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
        this.removeClass('play-waiting');
        /**
         * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
         * entire media file can be played without buffering.
         *
         * @event Player#canplaythrough
         * @type {EventTarget~Event}
         */
        this.trigger('canplaythrough');
    };

    /**
     * Retrigger the `playing` event that was triggered by the {@link Tech}.
     *
     * @fires Player#playing
     * @listens Tech#playing
     * @private
     */


    Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
        this.removeClass('play-waiting');
        /**
         * The media is no longer blocked from playback, and has started playing.
         *
         * @event Player#playing
         * @type {EventTarget~Event}
         */
        this.trigger('playing');
    };

    /**
     * Retrigger the `seeking` event that was triggered by the {@link Tech}.
     *
     * @fires Player#seeking
     * @listens Tech#seeking
     * @private
     */


    Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
        this.addClass('play-seeking');
        /**
         * Fired whenever the player is jumping to a new time
         *
         * @event Player#seeking
         * @type {EventTarget~Event}
         */
        this.trigger('seeking');
    };

    /**
     * Retrigger the `seeked` event that was triggered by the {@link Tech}.
     *
     * @fires Player#seeked
     * @listens Tech#seeked
     * @private
     */


    Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
        this.removeClass('play-seeking');
        /**
         * Fired when the player has finished jumping to a new time
         *
         * @event Player#seeked
         * @type {EventTarget~Event}
         */
        this.trigger('seeked');
    };

    /**
     * Retrigger the `firstplay` event that was triggered by the {@link Tech}.
     *
     * @fires Player#firstplay
     * @listens Tech#firstplay
     * @deprecated As of 6.0 firstplay event is deprecated.
     *             As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.
     * @private
     */


    Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
        // If the first starttime attribute is specified
        // then we will start at the given offset in seconds
        if (this.options_.starttime) {
            log$1.warn('Passing the `starttime` option to the player will be deprecated in 6.0');
            this.currentTime(this.options_.starttime);
        }

        this.addClass('play-has-started');
        /**
         * Fired the first time a video is played. Not part of the HLS spec, and this is
         * probably not the best implementation yet, so use sparingly. If you don't have a
         * reason to prevent playback, use `myPlayer.one('play');` instead.
         *
         * @event Player#firstplay
         * @deprecated As of 6.0 firstplay event is deprecated.
         * @type {EventTarget~Event}
         */
        this.trigger('firstplay');
    };

    /**
     * Retrigger the `pause` event that was triggered by the {@link Tech}.
     *
     * @fires Player#pause
     * @listens Tech#pause
     * @private
     */


    Player.prototype.handleTechPause_ = function handleTechPause_() {
        var _this7 = this;

        this.removeClass('play-playing');
        this.addClass('play-paused');
        this.addClass('play-play-toggle');
        setTimeout(function () {
            _this7.removeClass('play-play-toggle');
        }, 400);
        /**
         * Fired whenever the media has been paused
         *
         * @event Player#pause
         * @type {EventTarget~Event}
         */
        this.trigger('pause');
    };

    /**
     * Retrigger the `ended` event that was triggered by the {@link Tech}.
     *
     * @fires Player#ended
     * @listens Tech#ended
     * @private
     */


    Player.prototype.handleTechEnded_ = function handleTechEnded_() {
        this.addClass('play-ended');
        if (this.options_.loop) {
            this.currentTime(0);
            this.play();
        } else if (!this.paused()) {
            this.pause();
        }

        /**
         * Fired when the end of the media resource is reached (currentTime == duration)
         *
         * @event Player#ended
         * @type {EventTarget~Event}
         */
        this.trigger('ended');
    };

    /**
     * Fired when the duration of the media resource is first known or changed
     *
     * @listens Tech#durationchange
     * @private
     */


    Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
        this.duration(this.techGet_('duration'));
    };

    /**
     * Handle a click on the media element to play/pause
     *
     * @param {EventTarget~Event} event
     *        the event that caused this function to trigger
     *
     * @listens Tech#mousedown
     * @private
     */


    Player.prototype.handleTechClick_ = function handleTechClick_(event) {
        if (!isSingleLeftClick(event)) {
            return;
        }

        // When controls are disabled a click should not toggle playback because
        // the click is considered a control
        if (!this.controls_) {
            return;
        }

        if (this.paused()) {
            silencePromise(this.play());
        } else {
            this.pause();
        }
    };

    /**
     * Handle a double-click on the media element to enter/exit fullscreen
     *
     * @param {EventTarget~Event} event
     *        the event that caused this function to trigger
     *
     * @listens Tech#dblclick
     * @private
     */


    Player.prototype.handleTechDoubleClick_ = function handleTechDoubleClick_(event) {
        if (!this.controls_) {
            return;
        }

        // we do not want to toggle fullscreen state
        // when double-clicking inside a control bar or a modal
        var inAllowedEls = Array.prototype.some.call(this.$$('.play-control-bar, .play-modal-dialog'), function (el) {
            return el.contains(event.target);
        });

        if (!inAllowedEls) {
            if (this.isFullscreen()) {
                this.exitFullscreen();
            } else {
                this.requestFullscreen();
            }
        }
    };

    /**
     * Handle a tap on the media element. It will toggle the user
     * activity state, which hides and shows the controls.
     *
     * @listens Tech#tap
     * @private
     */


    Player.prototype.handleTechTap_ = function handleTechTap_() {
        this.userActive(!this.userActive());
    };

    /**
     * Handle touch to start
     *
     * @listens Tech#touchstart
     * @private
     */


    Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
        this.userWasActive = this.userActive();
    };

    /**
     * Handle touch to move
     *
     * @listens Tech#touchmove
     * @private
     */


    Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
        if (this.userWasActive) {
            this.reportUserActivity();
        }
    };

    /**
     * Handle touch to end
     *
     * @param {EventTarget~Event} event
     *        the touchend event that triggered
     *        this function
     *
     * @listens Tech#touchend
     * @private
     */


    Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
        // Stop the mouse events from also happening
        event.preventDefault();
    };

    /**
     * Fired when the player switches in or out of fullscreen mode
     *
     * @private
     * @listens Player#fullscreenchange
     */


    Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
        if (this.isFullscreen()) {
            this.addClass('play-fullscreen');
        } else {
            this.removeClass('play-fullscreen');
        }
    };

    /**
     * native click events on the SWF aren't triggered on IE11, Win8.1RT
     * use stageclick events triggered from inside the SWF instead
     *
     * @private
     * @listens stageclick
     */


    Player.prototype.handleStageClick_ = function handleStageClick_() {
        this.reportUserActivity();
    };

    /**
     * Handle Tech Fullscreen Change
     *
     * @param {EventTarget~Event} event
     *        the fullscreenchange event that triggered this function
     *
     * @param {Object} data
     *        the data that was sent with the event
     *
     * @private
     * @listens Tech#fullscreenchange
     * @fires Player#fullscreenchange
     */


    Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
        if (data) {
            this.isFullscreen(data.isFullscreen);
        }
        /**
         * Fired when going in and out of fullscreen.
         *
         * @event Player#fullscreenchange
         * @type {EventTarget~Event}
         */
        this.trigger('fullscreenchange');
    };

    /**
     * Fires when an error occurred during the loading of an audio/video.
     *
     * @private
     * @listens Tech#error
     */


    Player.prototype.handleTechError_ = function handleTechError_() {
        var error = this.tech_.error();

        this.error(error);
    };

    /**
     * Retrigger the `textdata` event that was triggered by the {@link Tech}.
     *
     * @fires Player#textdata
     * @listens Tech#textdata
     * @private
     */


    Player.prototype.handleTechTextData_ = function handleTechTextData_() {
        var data = null;

        if (arguments.length > 1) {
            data = arguments[1];
        }

        /**
         * Fires when we get a textdata event from tech
         *
         * @event Player#textdata
         * @type {EventTarget~Event}
         */
        this.trigger('textdata', data);
    };

    /**
     * Get object for cached values.
     *
     * @return {Object}
     *         get the current object cache
     */


    Player.prototype.getCache = function getCache() {
        return this.cache_;
    };

    /**
     * Pass values to the playback tech
     *
     * @param {string} [method]
     *        the method to call
     *
     * @param {Object} arg
     *        the argument to pass
     *
     * @private
     */


    Player.prototype.techCall_ = function techCall_(method, arg) {
        // If it's not ready yet, call method when it is

        this.ready(function () {
            if (method in allowedSetters) {
                return set$1(this.middleware_, this.tech_, method, arg);
            } else if (method in allowedMediators) {
                return mediate(this.middleware_, this.tech_, method, arg);
            }

            try {
                if (this.tech_) {
                    this.tech_[method](arg);
                }
            } catch (e) {
                log$1(e);
                throw e;
            }
        }, true);
    };

    /**
     * Get calls can't wait for the tech, and sometimes don't need to.
     *
     * @param {string} method
     *        Tech method
     *
     * @return {Function|undefined}
     *         the method or undefined
     *
     * @private
     */


    Player.prototype.techGet_ = function techGet_(method) {
        if (!this.tech_ || !this.tech_.isReady_) {
            return;
        }

        if (method in allowedGetters) {
            return get$1(this.middleware_, this.tech_, method);
        } else if (method in allowedMediators) {
            return mediate(this.middleware_, this.tech_, method);
        }

        // Flash likes to die and reload when you hide or reposition it.
        // In these cases the object methods go away and we get errors.
        // When that happens we'll catch the errors and inform tech that it's not ready any more.
        try {
            return this.tech_[method]();
        } catch (e) {

            // When building additional tech libs, an expected method may not be defined yet
            if (this.tech_[method] === undefined) {
                log$1('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);
                throw e;
            }

            // When a method isn't available on the object it throws a TypeError
            if (e.name === 'TypeError') {
                log$1('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
                this.tech_.isReady_ = false;
                throw e;
            }

            // If error unknown, just log and throw
            log$1(e);
            throw e;
        }
    };

    /**
     * Attempt to begin playback at the first opportunity.
     *
     * @return {Promise|undefined}
     *         Returns a `Promise` only if the browser returns one and the player
     *         is ready to begin playback. For some browsers and all non-ready
     *         situations, this will return `undefined`.
     */


    Player.prototype.play = function play() {
        var _this8 = this;

        // If this is called while we have a play queued up on a loadstart, remove
        // that listener to avoid getting in a potentially bad state.
        if (this.playOnLoadstart_) {
            this.off('loadstart', this.playOnLoadstart_);
        }

        // If the player/tech is not ready, queue up another call to `play()` for
        // when it is. This will loop back into this method for another attempt at
        // playback when the tech is ready.
        if (!this.isReady_) {

            // Bail out if we're already waiting for `ready`!
            if (this.playWaitingForReady_) {
                return;
            }

            this.playWaitingForReady_ = true;
            this.ready(function () {
                _this8.playWaitingForReady_ = false;
                silencePromise(_this8.play());
            });

            // If the player/tech is ready and we have a source, we can attempt playback.
        } else if (!this.changingSrc_ && (this.src() || this.currentSrc())) {
            return this.techGet_('play');

            // If the tech is ready, but we do not have a source, we'll need to wait
            // for both the `ready` and a `loadstart` when the source is finally
            // resolved by middleware and set on the player.
            //
            // This can happen if `play()` is called while changing sources or before
            // one has been set on the player.
        } else {

            this.playOnLoadstart_ = function () {
                _this8.playOnLoadstart_ = null;
                silencePromise(_this8.play());
            };

            this.one('loadstart', this.playOnLoadstart_);
        }
    };

    /**
     * Pause the video playback
     *
     * @return {Player}
     *         A reference to the player object this function was called on
     */


    Player.prototype.pause = function pause() {
        this.techCall_('pause');
    };

    /**
     * Check if the player is paused or has yet to play
     *
     * @return {boolean}
     *         - false: if the media is currently playing
     *         - true: if media is not currently playing
     */


    Player.prototype.paused = function paused() {
        // The initial state of paused should be true (in Safari it's actually false)
        return this.techGet_('paused') === false ? false : true;
    };

    /**
     * Get a TimeRange object representing the current ranges of time that the user
     * has played.
     *
     * @return {TimeRange}
     *         A time range object that represents all the increments of time that have
     *         been played.
     */


    Player.prototype.played = function played() {
        return this.techGet_('played') || createTimeRanges(0, 0);
    };

    /**
     * Returns whether or not the user is "scrubbing". Scrubbing is
     * when the user has clicked the progress bar handle and is
     * dragging it along the progress bar.
     *
     * @param {boolean} [isScrubbing]
     *        whether the user is or is not scrubbing
     *
     * @return {boolean}
     *         The value of scrubbing when getting
     */


    Player.prototype.scrubbing = function scrubbing(isScrubbing) {
        if (typeof isScrubbing === 'undefined') {
            return this.scrubbing_;
        }
        this.scrubbing_ = !!isScrubbing;

        if (isScrubbing) {
            this.addClass('play-scrubbing');
        } else {
            this.removeClass('play-scrubbing');
        }
    };

    /**
     * Get or set the current time (in seconds)
     *
     * @param {number|string} [seconds]
     *        The time to seek to in seconds
     *
     * @return {number}
     *         - the current time in seconds when getting
     */


    Player.prototype.currentTime = function currentTime(seconds) {
        if (typeof seconds !== 'undefined') {
            if (seconds < 0) {
                seconds = 0;
            }
            this.techCall_('setCurrentTime', seconds);
            return;
        }

        // cache last currentTime and return. default to 0 seconds
        //
        // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
        // currentTime when scrubbing, but may not provide much performance benefit afterall.
        // Should be tested. Also something has to read the actual current time or the cache will
        // never get updated.
        this.cache_.currentTime = this.techGet_('currentTime') || 0;
        return this.cache_.currentTime;
    };

    /**
     * Normally gets the length in time of the video in seconds;
     * in all but the rarest use cases an argument will NOT be passed to the method
     *
     * > **NOTE**: The video must have started loading before the duration can be
     * known, and in the case of Flash, may not be known until the video starts
     * playing.
     *
     * @fires Player#durationchange
     *
     * @param {number} [seconds]
     *        The duration of the video to set in seconds
     *
     * @return {number}
     *         - The duration of the video in seconds when getting
     */


    Player.prototype.duration = function duration(seconds) {
        if (seconds === undefined) {
            // return NaN if the duration is not known
            return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
        }

        seconds = parseFloat(seconds);

        // Standardize on Infinity for signaling video is live
        if (seconds < 0) {
            seconds = Infinity;
        }

        if (seconds !== this.cache_.duration) {
            // Cache the last set value for optimized scrubbing (esp. Flash)
            this.cache_.duration = seconds;

            if (seconds === Infinity) {
                this.addClass('play-live');
            } else {
                this.removeClass('play-live');
            }
            /**
             * @event Player#durationchange
             * @type {EventTarget~Event}
             */
            this.trigger('durationchange');
        }
    };

    /**
     * Calculates how much time is left in the video. Not part
     * of the native video API.
     *
     * @return {number}
     *         The time remaining in seconds
     */


    Player.prototype.remainingTime = function remainingTime() {
        return this.duration() - this.currentTime();
    };

    /**
     * A remaining time function that is intented to be used when
     * the time is to be displayed directly to the user.
     *
     * @return {number}
     *         The rounded time remaining in seconds
     */


    Player.prototype.remainingTimeDisplay = function remainingTimeDisplay() {
        return Math.floor(this.duration()) - Math.floor(this.currentTime());
    };

    //
    // Kind of like an array of portions of the video that have been downloaded.

    /**
     * Get a TimeRange object with an array of the times of the video
     * that have been downloaded. If you just want the percent of the
     * video that's been downloaded, use bufferedPercent.
     *
     * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
     *
     * @return {TimeRange}
     *         A mock TimeRange object (following HTML spec)
     */


    Player.prototype.buffered = function buffered() {
        var buffered = this.techGet_('buffered');

        if (!buffered || !buffered.length) {
            buffered = createTimeRanges(0, 0);
        }

        return buffered;
    };

    /**
     * Get the percent (as a decimal) of the video that's been downloaded.
     * This method is not a part of the native HTML video API.
     *
     * @return {number}
     *         A decimal between 0 and 1 representing the percent
     *         that is buffered 0 being 0% and 1 being 100%
     */


    Player.prototype.bufferedPercent = function bufferedPercent$$1() {
        return bufferedPercent(this.buffered(), this.duration());
    };

    /**
     * Get the ending time of the last buffered time range
     * This is used in the progress bar to encapsulate all time ranges.
     *
     * @return {number}
     *         The end of the last buffered time range
     */


    Player.prototype.bufferedEnd = function bufferedEnd() {
        var buffered = this.buffered();
        var duration = this.duration();
        var end = buffered.end(buffered.length - 1);

        if (end > duration) {
            end = duration;
        }

        return end;
    };

    /**
     * Get or set the current volume of the media
     *
     * @param  {number} [percentAsDecimal]
     *         The new volume as a decimal percent:
     *         - 0 is muted/0%/off
     *         - 1.0 is 100%/full
     *         - 0.5 is half volume or 50%
     *
     * @return {number}
     *         The current volume as a percent when getting
     */


    Player.prototype.volume = function volume(percentAsDecimal) {
        var vol = void 0;

        if (percentAsDecimal !== undefined) {
            // Force value to between 0 and 1
            vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
            this.cache_.volume = vol;
            this.techCall_('setVolume', vol);

            if (vol > 0) {
                this.lastVolume_(vol);
            }

            return;
        }

        // Default to 1 when returning current volume.
        vol = parseFloat(this.techGet_('volume'));
        return isNaN(vol) ? 1 : vol;
    };

    /**
     * Get the current muted state, or turn mute on or off
     *
     * @param {boolean} [muted]
     *        - true to mute
     *        - false to unmute
     *
     * @return {boolean}
     *         - true if mute is on and getting
     *         - false if mute is off and getting
     */


    Player.prototype.muted = function muted(_muted) {
        if (_muted !== undefined) {
            this.techCall_('setMuted', _muted);
            return;
        }
        return this.techGet_('muted') || false;
    };

    /**
     * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
     * indicates the state of muted on initial playback.
     *
     * ```js
     *   var myPlayer = videojs('some-player-id');
     *
     *   myPlayer.src("http://www.example.com/path/to/video.mp4");
     *
     *   // get, should be false
     *   console.log(myPlayer.defaultMuted());
     *   // set to true
     *   myPlayer.defaultMuted(true);
     *   // get should be true
     *   console.log(myPlayer.defaultMuted());
     * ```
     *
     * @param {boolean} [defaultMuted]
     *        - true to mute
     *        - false to unmute
     *
     * @return {boolean|Player}
     *         - true if defaultMuted is on and getting
     *         - false if defaultMuted is off and getting
     *         - A reference to the current player when setting
     */


    Player.prototype.defaultMuted = function defaultMuted(_defaultMuted) {
        if (_defaultMuted !== undefined) {
            return this.techCall_('setDefaultMuted', _defaultMuted);
        }
        return this.techGet_('defaultMuted') || false;
    };

    /**
     * Get the last volume, or set it
     *
     * @param  {number} [percentAsDecimal]
     *         The new last volume as a decimal percent:
     *         - 0 is muted/0%/off
     *         - 1.0 is 100%/full
     *         - 0.5 is half volume or 50%
     *
     * @return {number}
     *         the current value of lastVolume as a percent when getting
     *
     * @private
     */


    Player.prototype.lastVolume_ = function lastVolume_(percentAsDecimal) {
        if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {
            this.cache_.lastVolume = percentAsDecimal;
            return;
        }
        return this.cache_.lastVolume;
    };

    /**
     * Check if current tech can support native fullscreen
     * (e.g. with built in controls like iOS, so not our flash swf)
     *
     * @return {boolean}
     *         if native fullscreen is supported
     */


    Player.prototype.supportsFullScreen = function supportsFullScreen() {
        return this.techGet_('supportsFullScreen') || false;
    };

    /**
     * Check if the player is in fullscreen mode or tell the player that it
     * is or is not in fullscreen mode.
     *
     * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
     * property and instead document.fullscreenElement is used. But isFullscreen is
     * still a valuable property for internal player workings.
     *
     * @param  {boolean} [isFS]
     *         Set the players current fullscreen state
     *
     * @return {boolean}
     *         - true if fullscreen is on and getting
     *         - false if fullscreen is off and getting
     */


    Player.prototype.isFullscreen = function isFullscreen(isFS) {
        if (isFS !== undefined) {
            this.isFullscreen_ = !!isFS;
            return;
        }
        return !!this.isFullscreen_;
    };

    /**
     * Increase the size of the video to full screen
     * In some browsers, full screen is not supported natively, so it enters
     * "full window mode", where the video fills the browser window.
     * In browsers and devices that support native full screen, sometimes the
     * browser's default controls will be shown, and not the Video.js custom skin.
     * This includes most mobile devices (iOS, Android) and older versions of
     * Safari.
     *
     * @fires Player#fullscreenchange
     */


    Player.prototype.requestFullscreen = function requestFullscreen() {
        var fsApi = FullscreenApi;

        this.isFullscreen(true);

        if (fsApi.requestFullscreen) {
            // the browser supports going fullscreen at the element level so we can
            // take the controls fullscreen as well as the video

            // Trigger fullscreenchange event after change
            // We have to specifically add this each time, and remove
            // when canceling fullscreen. Otherwise if there's multiple
            // players on a page, they would all be reacting to the same fullscreen
            // events
            on(document$1, fsApi.fullscreenchange, bind(this, function documentFullscreenChange(e) {
                this.isFullscreen(document$1[fsApi.fullscreenElement]);

                // If cancelling fullscreen, remove event listener.
                if (this.isFullscreen() === false) {
                    off(document$1, fsApi.fullscreenchange, documentFullscreenChange);
                }
                /**
                 * @event Player#fullscreenchange
                 * @type {EventTarget~Event}
                 */
                this.trigger('fullscreenchange');
            }));

            this.el_[fsApi.requestFullscreen]();
        } else if (this.tech_.supportsFullScreen()) {
            // we can't take the video.js controls fullscreen but we can go fullscreen
            // with native controls
            this.techCall_('enterFullScreen');
        } else {
            // fullscreen isn't supported so we'll just stretch the video element to
            // fill the viewport
            this.enterFullWindow();
            /**
             * @event Player#fullscreenchange
             * @type {EventTarget~Event}
             */
            this.trigger('fullscreenchange');
        }
    };

    /**
     * Return the video to its normal size after having been in full screen mode
     *
     * @fires Player#fullscreenchange
     */


    Player.prototype.exitFullscreen = function exitFullscreen() {
        var fsApi = FullscreenApi;

        this.isFullscreen(false);

        // Check for browser element fullscreen support
        if (fsApi.requestFullscreen) {
            document$1[fsApi.exitFullscreen]();
        } else if (this.tech_.supportsFullScreen()) {
            this.techCall_('exitFullScreen');
        } else {
            this.exitFullWindow();
            /**
             * @event Player#fullscreenchange
             * @type {EventTarget~Event}
             */
            this.trigger('fullscreenchange');
        }
    };

    /**
     * When fullscreen isn't supported we can stretch the
     * video container to as wide as the browser will let us.
     *
     * @fires Player#enterFullWindow
     */


    Player.prototype.enterFullWindow = function enterFullWindow() {
        this.isFullWindow = true;

        // Storing original doc overflow value to return to when fullscreen is off
        this.docOrigOverflow = document$1.documentElement.style.overflow;

        // Add listener for esc key to exit fullscreen
        on(document$1, 'keydown', bind(this, this.fullWindowOnEscKey));

        // Hide any scroll bars
        document$1.documentElement.style.overflow = 'hidden';

        // Apply fullscreen styles
        addClass(document$1.body, 'play-full-window');

        /**
         * @event Player#enterFullWindow
         * @type {EventTarget~Event}
         */
        this.trigger('enterFullWindow');
    };

    /**
     * Check for call to either exit full window or
     * full screen on ESC key
     *
     * @param {string} event
     *        Event to check for key press
     */


    Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
        if (event.keyCode === 27) {
            if (this.isFullscreen() === true) {
                this.exitFullscreen();
            } else {
                this.exitFullWindow();
            }
        }
    };

    /**
     * Exit full window
     *
     * @fires Player#exitFullWindow
     */


    Player.prototype.exitFullWindow = function exitFullWindow() {
        this.isFullWindow = false;
        off(document$1, 'keydown', this.fullWindowOnEscKey);

        // Unhide scroll bars.
        document$1.documentElement.style.overflow = this.docOrigOverflow;

        // Remove fullscreen styles
        removeClass(document$1.body, 'play-full-window');

        // Resize the box, controller, and poster to original sizes
        // this.positionAll();
        /**
         * @event Player#exitFullWindow
         * @type {EventTarget~Event}
         */
        this.trigger('exitFullWindow');
    };

    /**
     * Check whether the player can play a given mimetype
     *
     * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
     *
     * @param {string} type
     *        The mimetype to check
     *
     * @return {string}
     *         'probably', 'maybe', or '' (empty string)
     */


    Player.prototype.canPlayType = function canPlayType(type) {
        var can = void 0;

        // Loop through each playback technology in the options order
        for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
            var techName = j[i];
            var tech = Tech.getTech(techName);

            // Support old behavior of techs being registered as components.
            // Remove once that deprecated behavior is removed.
            if (!tech) {
                tech = Component.getComponent(techName);
            }

            // Check if the current tech is defined before continuing
            if (!tech) {
                log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                continue;
            }

            // Check if the browser supports this technology
            if (tech.isSupported()) {
                can = tech.canPlayType(type);

                if (can) {
                    return can;
                }
            }
        }

        return '';
    };

    /**
     * Select source based on tech-order or source-order
     * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
     * defaults to tech-order selection
     *
     * @param {Array} sources
     *        The sources for a media asset
     *
     * @return {Object|boolean}
     *         Object of source and tech order or false
     */


    Player.prototype.selectSource = function selectSource(sources) {
        var _this9 = this;

        // Get only the techs specified in `techOrder` that exist and are supported by the
        // current platform
        var techs = this.options_.techOrder.map(function (techName) {
            return [techName, Tech.getTech(techName)];
        }).filter(function (_ref) {
            var techName = _ref[0],
                tech = _ref[1];

            // Check if the current tech is defined before continuing
            if (tech) {
                // Check if the browser supports this technology
                return tech.isSupported();
            }

            log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
            return false;
        });

        // Iterate over each `innerArray` element once per `outerArray` element and execute
        // `tester` with both. If `tester` returns a non-falsy value, exit early and return
        // that value.
        var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
            var found = void 0;

            outerArray.some(function (outerChoice) {
                return innerArray.some(function (innerChoice) {
                    found = tester(outerChoice, innerChoice);

                    if (found) {
                        return true;
                    }
                });
            });

            return found;
        };

        var foundSourceAndTech = void 0;
        var flip = function flip(fn) {
            return function (a, b) {
                return fn(b, a);
            };
        };
        var finder = function finder(_ref2, source) {
            var techName = _ref2[0],
                tech = _ref2[1];

            if (tech.canPlaySource(source, _this9.options_[techName.toLowerCase()])) {
                return { source: source, tech: techName };
            }
        };

        // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
        // to select from them based on their priority.
        if (this.options_.sourceOrder) {
            // Source-first ordering
            foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
        } else {
            // Tech-first ordering
            foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
        }

        return foundSourceAndTech || false;
    };

    /**
     * Get or set the video source.
     *
     * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
     *        A SourceObject, an array of SourceObjects, or a string referencing
     *        a URL to a media source. It is _highly recommended_ that an object
     *        or array of objects is used here, so that source selection
     *        algorithms can take the `type` into account.
     *
     *        If not provided, this method acts as a getter.
     *
     * @return {string|undefined}
     *         If the `source` argument is missing, returns the current source
     *         URL. Otherwise, returns nothing/undefined.
     */


    Player.prototype.src = function src(source) {
        var _this10 = this;

        // getter usage
        if (typeof source === 'undefined') {
            return this.cache_.src || '';
        }
        // filter out invalid sources and turn our source into
        // an array of source objects
        var sources = filterSource(source);

        // if a source was passed in then it is invalid because
        // it was filtered to a zero length Array. So we have to
        // show an error
        if (!sources.length) {
            this.setTimeout(function () {
                this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
            }, 0);
            return;
        }

        // intial sources
        this.changingSrc_ = true;

        this.cache_.sources = sources;
        this.updateSourceCaches_(sources[0]);

        // middlewareSource is the source after it has been changed by middleware
        setSource(this, sources[0], function (middlewareSource, mws) {
            _this10.middleware_ = mws;

            // since sourceSet is async we have to update the cache again after we select a source since
            // the source that is selected could be out of order from the cache update above this callback.
            _this10.cache_.sources = sources;
            _this10.updateSourceCaches_(middlewareSource);

            var err = _this10.src_(middlewareSource);

            if (err) {
                if (sources.length > 1) {
                    return _this10.src(sources.slice(1));
                }

                _this10.changingSrc_ = false;

                // We need to wrap this in a timeout to give folks a chance to add error event handlers
                _this10.setTimeout(function () {
                    this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
                }, 0);

                // we could not find an appropriate tech, but let's still notify the delegate that this is it
                // this needs a better comment about why this is needed
                _this10.triggerReady();

                return;
            }

            setTech(mws, _this10.tech_);
        });
    };

    /**
     * Set the source object on the tech, returns a boolean that indicates whether
     * there is a tech that can play the source or not
     *
     * @param {Tech~SourceObject} source
     *        The source object to set on the Tech
     *
     * @return {Boolean}
     *         - True if there is no Tech to playback this source
     *         - False otherwise
     *
     * @private
     */


    Player.prototype.src_ = function src_(source) {
        var _this11 = this;

        var sourceTech = this.selectSource([source]);

        if (!sourceTech) {
            return true;
        }

        if (!titleCaseEquals(sourceTech.tech, this.techName_)) {
            this.changingSrc_ = true;
            // load this technology with the chosen source
            this.loadTech_(sourceTech.tech, sourceTech.source);
            this.tech_.ready(function () {
                _this11.changingSrc_ = false;
            });
            return false;
        }

        // wait until the tech is ready to set the source
        // and set it synchronously if possible (#2326)
        this.ready(function () {

            // The setSource tech method was added with source handlers
            // so older techs won't support it
            // We need to check the direct prototype for the case where subclasses
            // of the tech do not support source handlers
            if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {
                this.techCall_('setSource', source);
            } else {
                this.techCall_('src', source.src);
            }

            this.changingSrc_ = false;
        }, true);

        return false;
    };

    /**
     * Begin loading the src data.
     */


    Player.prototype.load = function load() {
        this.techCall_('load');
    };

    /**
     * Reset the player. Loads the first tech in the techOrder,
     * and calls `reset` on the tech`.
     */


    Player.prototype.reset = function reset() {
        if (this.tech_) {
            this.tech_.clearTracks('text');
        }
        this.loadTech_(this.options_.techOrder[0], null);
        this.techCall_('reset');
    };

    /**
     * Returns all of the current source objects.
     *
     * @return {Tech~SourceObject[]}
     *         The current source objects
     */


    Player.prototype.currentSources = function currentSources() {
        var source = this.currentSource();
        var sources = [];

        // assume `{}` or `{ src }`
        if (Object.keys(source).length !== 0) {
            sources.push(source);
        }

        return this.cache_.sources || sources;
    };

    /**
     * Returns the current source object.
     *
     * @return {Tech~SourceObject}
     *         The current source object
     */


    Player.prototype.currentSource = function currentSource() {
        return this.cache_.source || {};
    };

    /**
     * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
     * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.
     *
     * @return {string}
     *         The current source
     */


    Player.prototype.currentSrc = function currentSrc() {
        return this.currentSource() && this.currentSource().src || '';
    };

    /**
     * Get the current source type e.g. video/mp4
     * This can allow you rebuild the current source object so that you could load the same
     * source and tech later
     *
     * @return {string}
     *         The source MIME type
     */


    Player.prototype.currentType = function currentType() {
        return this.currentSource() && this.currentSource().type || '';
    };

    /**
     * Get or set the preload attribute
     *
     * @param {boolean} [value]
     *        - true means that we should preload
     *        - false means that we should not preload
     *
     * @return {string}
     *         The preload attribute value when getting
     */


    Player.prototype.preload = function preload(value) {
        if (value !== undefined) {
            this.techCall_('setPreload', value);
            this.options_.preload = value;
            return;
        }
        return this.techGet_('preload');
    };

    /**
     * Get or set the autoplay option. When this is a boolean it will
     * modify the attribute on the tech. When this is a string the attribute on
     * the tech will be removed and `Player` will handle autoplay on loadstarts.
     *
     * @param {boolean|string} [value]
     *        - true: autoplay using the browser behavior
     *        - false: do not autoplay
     *        - 'play': call play() on every loadstart
     *        - 'muted': call muted() then play() on every loadstart
     *        - 'any': call play() on every loadstart. if that fails call muted() then play().
     *        - *: values other than those listed here will be set `autoplay` to true
     *
     * @return {boolean|string}
     *         The current value of autoplay when getting
     */


    Player.prototype.autoplay = function autoplay(value) {
        // getter usage
        if (value === undefined) {
            return this.options_.autoplay || false;
        }

        var techAutoplay = void 0;

        // if the value is a valid string set it to that
        if (typeof value === 'string' && /(any|play|muted)/.test(value)) {
            this.options_.autoplay = value;
            this.manualAutoplay_(value);
            techAutoplay = false;

            // any falsy value sets autoplay to false in the browser,
            // lets do the same
        } else if (!value) {
            this.options_.autoplay = false;

            // any other value (ie truthy) sets autoplay to true
        } else {
            this.options_.autoplay = true;
        }

        techAutoplay = techAutoplay || this.options_.autoplay;

        // if we don't have a tech then we do not queue up
        // a setAutoplay call on tech ready. We do this because the
        // autoplay option will be passed in the constructor and we
        // do not need to set it twice
        if (this.tech_) {
            this.techCall_('setAutoplay', techAutoplay);
        }
    };

    /**
     * Set or unset the playsinline attribute.
     * Playsinline tells the browser that non-fullscreen playback is preferred.
     *
     * @param {boolean} [value]
     *        - true means that we should try to play inline by default
     *        - false means that we should use the browser's default playback mode,
     *          which in most cases is inline. iOS Safari is a notable exception
     *          and plays fullscreen by default.
     *
     * @return {string|Player}
     *         - the current value of playsinline
     *         - the player when setting
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
     */


    Player.prototype.playsinline = function playsinline(value) {
        if (value !== undefined) {
            this.techCall_('setPlaysinline', value);
            this.options_.playsinline = value;
            return this;
        }
        return this.techGet_('playsinline');
    };

    /**
     * Get or set the loop attribute on the video element.
     *
     * @param {boolean} [value]
     *        - true means that we should loop the video
     *        - false means that we should not loop the video
     *
     * @return {string}
     *         The current value of loop when getting
     */


    Player.prototype.loop = function loop(value) {
        if (value !== undefined) {
            this.techCall_('setLoop', value);
            this.options_.loop = value;
            return;
        }
        return this.techGet_('loop');
    };

    /**
     * Get or set the poster image source url
     *
     * @fires Player#posterchange
     *
     * @param {string} [src]
     *        Poster image source URL
     *
     * @return {string}
     *         The current value of poster when getting
     */


    Player.prototype.poster = function poster(src) {
        if (src === undefined) {
            return this.poster_;
        }

        // The correct way to remove a poster is to set as an empty string
        // other falsey values will throw errors
        if (!src) {
            src = '';
        }

        if (src === this.poster_) {
            return;
        }

        // update the internal poster variable
        this.poster_ = src;

        // update the tech's poster
        this.techCall_('setPoster', src);

        this.isPosterFromTech_ = false;

        // alert components that the poster has been set
        /**
         * This event fires when the poster image is changed on the player.
         *
         * @event Player#posterchange
         * @type {EventTarget~Event}
         */
        this.trigger('posterchange');
    };

    /**
     * Some techs (e.g. YouTube) can provide a poster source in an
     * asynchronous way. We want the poster component to use this
     * poster source so that it covers up the tech's controls.
     * (YouTube's play button). However we only want to use this
     * source if the player user hasn't set a poster through
     * the normal APIs.
     *
     * @fires Player#posterchange
     * @listens Tech#posterchange
     * @private
     */


    Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
        if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
            var newPoster = this.tech_.poster() || '';

            if (newPoster !== this.poster_) {
                this.poster_ = newPoster;
                this.isPosterFromTech_ = true;

                // Let components know the poster has changed
                this.trigger('posterchange');
            }
        }
    };

    /**
     * Get or set whether or not the controls are showing.
     *
     * @fires Player#controlsenabled
     *
     * @param {boolean} [bool]
     *        - true to turn controls on
     *        - false to turn controls off
     *
     * @return {boolean}
     *         The current value of controls when getting
     */


    Player.prototype.controls = function controls(bool) {
        if (bool === undefined) {
            return !!this.controls_;
        }

        bool = !!bool;

        // Don't trigger a change event unless it actually changed
        if (this.controls_ === bool) {
            return;
        }

        this.controls_ = bool;

        if (this.usingNativeControls()) {
            this.techCall_('setControls', bool);
        }

        if (this.controls_) {
            this.removeClass('play-controls-disabled');
            this.addClass('play-controls-enabled');
            /**
             * @event Player#controlsenabled
             * @type {EventTarget~Event}
             */
            this.trigger('controlsenabled');
            if (!this.usingNativeControls()) {
                this.addTechControlsListeners_();
            }
        } else {
            this.removeClass('play-controls-enabled');
            this.addClass('play-controls-disabled');
            /**
             * @event Player#controlsdisabled
             * @type {EventTarget~Event}
             */
            this.trigger('controlsdisabled');
            if (!this.usingNativeControls()) {
                this.removeTechControlsListeners_();
            }
        }
    };

    /**
     * Toggle native controls on/off. Native controls are the controls built into
     * devices (e.g. default iPhone controls), Flash, or other techs
     * (e.g. Vimeo Controls)
     * **This should only be set by the current tech, because only the tech knows
     * if it can support native controls**
     *
     * @fires Player#usingnativecontrols
     * @fires Player#usingcustomcontrols
     *
     * @param {boolean} [bool]
     *        - true to turn native controls on
     *        - false to turn native controls off
     *
     * @return {boolean}
     *         The current value of native controls when getting
     */


    Player.prototype.usingNativeControls = function usingNativeControls(bool) {
        if (bool === undefined) {
            return !!this.usingNativeControls_;
        }

        bool = !!bool;

        // Don't trigger a change event unless it actually changed
        if (this.usingNativeControls_ === bool) {
            return;
        }

        this.usingNativeControls_ = bool;

        if (this.usingNativeControls_) {
            this.addClass('play-using-native-controls');

            /**
             * player is using the native device controls
             *
             * @event Player#usingnativecontrols
             * @type {EventTarget~Event}
             */
            this.trigger('usingnativecontrols');
        } else {
            this.removeClass('play-using-native-controls');

            /**
             * player is using the custom HTML controls
             *
             * @event Player#usingcustomcontrols
             * @type {EventTarget~Event}
             */
            this.trigger('usingcustomcontrols');
        }
    };

    /**
     * Set or get the current MediaError
     *
     * @fires Player#error
     *
     * @param  {MediaError|string|number} [err]
     *         A MediaError or a string/number to be turned
     *         into a MediaError
     *
     * @return {MediaError|null}
     *         The current MediaError when getting (or null)
     */


    Player.prototype.error = function error(err) {
        if (err === undefined) {
            return this.error_ || null;
        }

        // restoring to default
        if (err === null) {
            this.error_ = err;
            this.removeClass('play-error');
            if (this.errorDisplay) {
                this.errorDisplay.close();
            }
            return;
        }

        this.error_ = new MediaError(err);

        // add the play-error classname to the player
        this.addClass('play-error');

        // log the name of the error type and any message
        // IE11 logs "[object object]" and required you to expand message to see error object
        log$1.error('(CODE:' + this.error_.code + ' ' + MediaError.errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

        /**
         * @event Player#error
         * @type {EventTarget~Event}
         */
        this.trigger('error');

        return;
    };

    /**
     * Report user activity
     *
     * @param {Object} event
     *        Event object
     */


    Player.prototype.reportUserActivity = function reportUserActivity(event) {
        this.userActivity_ = true;
    };

    /**
     * Get/set if user is active
     *
     * @fires Player#useractive
     * @fires Player#userinactive
     *
     * @param {boolean} [bool]
     *        - true if the user is active
     *        - false if the user is inactive
     *
     * @return {boolean}
     *         The current value of userActive when getting
     */


    Player.prototype.userActive = function userActive(bool) {
        if (bool === undefined) {
            return this.userActive_;
        }

        bool = !!bool;

        if (bool === this.userActive_) {
            return;
        }

        this.userActive_ = bool;

        if (this.userActive_) {
            this.userActivity_ = true;
            this.removeClass('play-user-inactive');
            this.addClass('play-user-active');
            var seekButton = document$1.getElementsByClassName('play-seek-button');
            var ad = document$1.getElementsByClassName('play-ads-label').length;
            if (seekButton.length > 0 && ad == 0) {
                if (this.player_.duration() !== Infinity) {
                    for (var i = 0; i < seekButton.length; i++) {
                        seekButton[i].style.display = 'block';
                    }
                }
            }
            /**
             * @event Player#useractive
             * @type {EventTarget~Event}
             */
            this.trigger('useractive');
            return;
        }

        // Chrome/Safari/IE have bugs where when you change the cursor it can
        // trigger a mousemove event. This causes an issue when you're hiding
        // the cursor when the user is inactive, and a mousemove signals user
        // activity. Making it impossible to go into inactive mode. Specifically
        // this happens in fullscreen when we really need to hide the cursor.
        //
        // When this gets resolved in ALL browsers it can be removed
        // https://code.google.com/p/chromium/issues/detail?id=103041
        if (this.tech_) {
            this.tech_.one('mousemove', function (e) {
                e.stopPropagation();
                e.preventDefault();
            });
        }

        this.userActivity_ = false;
        this.removeClass('play-user-active');
        this.addClass('play-user-inactive');
        var seekButton = document$1.getElementsByClassName('play-seek-button');
        if (seekButton.length > 0) {
            for (var i = 0; i < seekButton.length; i++) {
                seekButton[i].style.display = 'none';
            }
        }
        /**
         * @event Player#userinactive
         * @type {EventTarget~Event}
         */
        this.trigger('userinactive');
    };

    /**
     * Listen for user activity based on timeout value
     *
     * @private
     */


    Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
        var mouseInProgress = void 0;
        var lastMoveX = void 0;
        var lastMoveY = void 0;
        var handleActivity = bind(this, this.reportUserActivity);

        var handleMouseMove = function handleMouseMove(e) {
            // #1068 - Prevent mousemove spamming
            // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
            if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
                lastMoveX = e.screenX;
                lastMoveY = e.screenY;
                handleActivity();
            }
        };

        var handleMouseDown = function handleMouseDown() {
            handleActivity();
            // For as long as the they are touching the device or have their mouse down,
            // we consider them active even if they're not moving their finger or mouse.
            // So we want to continue to update that they are active
            this.clearInterval(mouseInProgress);
            // Setting userActivity=true now and setting the interval to the same time
            // as the activityCheck interval (250) should ensure we never miss the
            // next activityCheck
            mouseInProgress = this.setInterval(handleActivity, 250);
        };

        var handleMouseUp = function handleMouseUp(event) {
            handleActivity();
            // Stop the interval that maintains activity if the mouse/touch is down
            this.clearInterval(mouseInProgress);
        };

        // Any mouse movement will be considered user activity
        this.on('mousedown', handleMouseDown);
        this.on('mousemove', handleMouseMove);
        this.on('mouseup', handleMouseUp);

        // Listen for keyboard navigation
        // Shouldn't need to use inProgress interval because of key repeat
        this.on('keydown', handleActivity);
        this.on('keyup', handleActivity);

        // Run an interval every 250 milliseconds instead of stuffing everything into
        // the mousemove/touchmove function itself, to prevent performance degradation.
        // `this.reportUserActivity` simply sets this.userActivity_ to true, which
        // then gets picked up by this loop
        // http://ejohn.org/blog/learning-from-twitter/
        var inactivityTimeout = void 0;

        this.setInterval(function () {
            // Check to see if mouse/touch activity has happened
            if (!this.userActivity_) {
                return;
            }

            // Reset the activity tracker
            this.userActivity_ = false;

            // If the user state was inactive, set the state to active
            this.userActive(true);

            // Clear any existing inactivity timeout to start the timer over
            this.clearTimeout(inactivityTimeout);

            var timeout = this.options_.inactivityTimeout;

            if (timeout <= 0) {
                return;
            }

            // In <timeout> milliseconds, if no more activity has occurred the
            // user will be considered inactive
            inactivityTimeout = this.setTimeout(function () {
                // Protect against the case where the inactivityTimeout can trigger just
                // before the next user activity is picked up by the activity check loop
                // causing a flicker
                if (!this.userActivity_) {
                    this.userActive(false);
                }
            }, timeout);
        }, 250);
    };

    /**
     * Gets or sets the current playback rate. A playback rate of
     * 1.0 represents normal speed and 0.5 would indicate half-speed
     * playback, for instance.
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
     *
     * @param {number} [rate]
     *       New playback rate to set.
     *
     * @return {number}
     *         The current playback rate when getting or 1.0
     */


    Player.prototype.playbackRate = function playbackRate(rate) {
        if (rate !== undefined) {
            // NOTE: this.cache_.lastPlaybackRate is set from the tech handler
            // that is registered above
            this.techCall_('setPlaybackRate', rate);
            return;
        }

        if (this.tech_ && this.tech_.featuresPlaybackRate) {
            return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');
        }
        return 1.0;
    };

    /**
     * Gets or sets the current default playback rate. A default playback rate of
     * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
     * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not
     * not the current playbackRate.
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
     *
     * @param {number} [rate]
     *       New default playback rate to set.
     *
     * @return {number|Player}
     *         - The default playback rate when getting or 1.0
     *         - the player when setting
     */


    Player.prototype.defaultPlaybackRate = function defaultPlaybackRate(rate) {
        if (rate !== undefined) {
            return this.techCall_('setDefaultPlaybackRate', rate);
        }

        if (this.tech_ && this.tech_.featuresPlaybackRate) {
            return this.techGet_('defaultPlaybackRate');
        }
        return 1.0;
    };

    /**
     * Gets or sets the audio flag
     *
     * @param {boolean} bool
     *        - true signals that this is an audio player
     *        - false signals that this is not an audio player
     *
     * @return {boolean}
     *         The current value of isAudio when getting
     */


    Player.prototype.isAudio = function isAudio(bool) {
        if (bool !== undefined) {
            this.isAudio_ = !!bool;
            return;
        }

        return !!this.isAudio_;
    };

    /**
     * A helper method for adding a {@link TextTrack} to our
     * {@link TextTrackList}.
     *
     * In addition to the W3C settings we allow adding additional info through options.
     *
     * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
     *
     * @param {string} [kind]
     *        the kind of TextTrack you are adding
     *
     * @param {string} [label]
     *        the label to give the TextTrack label
     *
     * @param {string} [language]
     *        the language to set on the TextTrack
     *
     * @return {TextTrack|undefined}
     *         the TextTrack that was added or undefined
     *         if there is no tech
     */


    Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
        if (this.tech_) {
            return this.tech_.addTextTrack(kind, label, language);
        }
    };

    /**
     * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will
     * automatically removed from the video element whenever the source changes, unless
     * manualCleanup is set to false.
     *
     * @param {Object} options
     *        Options to pass to {@link HTMLTrackElement} during creation. See
     *        {@link HTMLTrackElement} for object properties that you should use.
     *
     * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
     *
     * @return {HtmlTrackElement}
     *         the HTMLTrackElement that was created and added
     *         to the HtmlTrackElementList and the remote
     *         TextTrackList
     *
     * @deprecated The default value of the "manualCleanup" parameter will default
     *             to "false" in upcoming versions of Video.js
     */


    Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
        if (this.tech_) {
            return this.tech_.addRemoteTextTrack(options, manualCleanup);
        }
    };

    /**
     * Remove a remote {@link TextTrack} from the respective
     * {@link TextTrackList} and {@link HtmlTrackElementList}.
     *
     * @param {Object} track
     *        Remote {@link TextTrack} to remove
     *
     * @return {undefined}
     *         does not return anything
     */


    Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref3$track = _ref3.track,
            track = _ref3$track === undefined ? arguments[0] : _ref3$track;

        // destructure the input into an object with a track argument, defaulting to arguments[0]
        // default the whole argument to an empty object if nothing was passed in

        if (this.tech_) {
            return this.tech_.removeRemoteTextTrack(track);
        }
    };

    /**
     * Gets available media playback quality metrics as specified by the W3C's Media
     * Playback Quality API.
     *
     * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
     *
     * @return {Object|undefined}
     *         An object with supported media playback quality metrics or undefined if there
     *         is no tech or the tech does not support it.
     */


    Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
        return this.techGet_('getVideoPlaybackQuality');
    };

    /**
     * Get video width
     *
     * @return {number}
     *         current video width
     */


    Player.prototype.videoWidth = function videoWidth() {
        return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
    };

    /**
     * Get video height
     *
     * @return {number}
     *         current video height
     */


    Player.prototype.videoHeight = function videoHeight() {
        return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
    };

    /**
     * The player's language code
     * NOTE: The language should be set in the player options if you want the
     * the controls to be built with a specific language. Changing the language
     * later will not update controls text.
     *
     * @param {string} [code]
     *        the language code to set the player to
     *
     * @return {string}
     *         The current language code when getting
     */


    Player.prototype.language = function language(code) {
        if (code === undefined) {
            return this.language_;
        }

        this.language_ = String(code).toLowerCase();
    };

    /**
     * Get the player's language dictionary
     * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
     * Languages specified directly in the player options have precedence
     *
     * @return {Array}
     *         An array of of supported languages
     */


    Player.prototype.languages = function languages() {
        return mergeOptions(Player.prototype.options_.languages, this.languages_);
    };

    /**
     * returns a JavaScript object reperesenting the current track
     * information. **DOES not return it as JSON**
     *
     * @return {Object}
     *         Object representing the current of track info
     */


    Player.prototype.toJSON = function toJSON() {
        var options = mergeOptions(this.options_);
        var tracks = options.tracks;

        options.tracks = [];

        for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];

            // deep merge tracks and null out player so no circular references
            track = mergeOptions(track);
            track.player = undefined;
            options.tracks[i] = track;
        }

        return options;
    };

    /**
     * Creates a simple modal dialog (an instance of the {@link ModalDialog}
     * component) that immediately overlays the player with arbitrary
     * content and removes itself when closed.
     *
     * @param {string|Function|Element|Array|null} content
     *        Same as {@link ModalDialog#content}'s param of the same name.
     *        The most straight-forward usage is to provide a string or DOM
     *        element.
     *
     * @param {Object} [options]
     *        Extra options which will be passed on to the {@link ModalDialog}.
     *
     * @return {ModalDialog}
     *         the {@link ModalDialog} that was created
     */


    Player.prototype.createModal = function createModal(content, options) {
        var _this12 = this;

        options = options || {};
        options.content = content || '';

        var modal = new ModalDialog(this, options);

        this.addChild(modal);
        modal.on('dispose', function () {
            _this12.removeChild(modal);
        });

        modal.open();
        return modal;
    };

    /**
     * Gets tag settings
     *
     * @param {Element} tag
     *        The player tag
     *
     * @return {Object}
     *         An object containing all of the settings
     *         for a player tag
     */


    Player.getTagSettings = function getTagSettings(tag) {
        var baseOptions = {
            sources: [],
            tracks: []
        };

        var tagOptions = getAttributes(tag);
        var dataSetup = tagOptions['data-setup'];

        if (hasClass(tag, 'play-fluid')) {
            tagOptions.fluid = true;
        }

        // Check if data-setup attr exists.
        if (dataSetup !== null) {
            // Parse options JSON
            // If empty string, make it a parsable json object.
            var _safeParseTuple = safeParseTuple(dataSetup || '{}'),
                err = _safeParseTuple[0],
                data = _safeParseTuple[1];

            if (err) {
                log$1.error(err);
            }
            assign(tagOptions, data);
        }

        assign(baseOptions, tagOptions);

        // Get tag children settings
        if (tag.hasChildNodes()) {
            var children = tag.childNodes;

            for (var i = 0, j = children.length; i < j; i++) {
                var child = children[i];
                // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
                var childName = child.nodeName.toLowerCase();

                if (childName === 'source') {
                    baseOptions.sources.push(getAttributes(child));
                } else if (childName === 'track') {
                    baseOptions.tracks.push(getAttributes(child));
                }
            }
        }

        return baseOptions;
    };

    /**
     * Determine whether or not flexbox is supported
     *
     * @return {boolean}
     *         - true if flexbox is supported
     *         - false if flexbox is not supported
     */


    Player.prototype.flexNotSupported_ = function flexNotSupported_() {
        var elem = document$1.createElement('i');

        // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
        // common flex features that we can rely on when checking for flex support.
        return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||
        // IE10-specific (2012 flex spec), available for completeness
        'msFlexOrder' in elem.style);
    };

    return Player;
}(Component);

/**
 * Get the {@link VideoTrackList}
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
 *
 * @return {VideoTrackList}
 *         the current video track list
 *
 * @method Player.prototype.videoTracks
 */

/**
 * Get the {@link AudioTrackList}
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
 *
 * @return {AudioTrackList}
 *         the current audio track list
 *
 * @method Player.prototype.audioTracks
 */

/**
 * Get the {@link TextTrackList}
 *
 * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
 *
 * @return {TextTrackList}
 *         the current text track list
 *
 * @method Player.prototype.textTracks
 */

/**
 * Get the remote {@link TextTrackList}
 *
 * @return {TextTrackList}
 *         The current remote text track list
 *
 * @method Player.prototype.remoteTextTracks
 */

/**
 * Get the remote {@link HtmlTrackElementList} tracks.
 *
 * @return {HtmlTrackElementList}
 *         The current remote text track element list
 *
 * @method Player.prototype.remoteTextTrackEls
 */

ALL.names.forEach(function (name$$1) {
    var props = ALL[name$$1];

    Player.prototype[props.getterName] = function () {
        if (this.tech_) {
            return this.tech_[props.getterName]();
        }

        // if we have not yet loadTech_, we create {video,audio,text}Tracks_
        // these will be passed to the tech during loading
        this[props.privateName] = this[props.privateName] || new props.ListClass();
        return this[props.privateName];
    };
});

/**
 * Global player list
 *
 * @type {Object}
 */
Player.players = {};

var navigator$1 = window$1.navigator;

/*
 * Player instance options, surfaced using options
 * options = Player.prototype.options_
 * Make changes in options, not here.
 *
 * @type {Object}
 * @private
 */
Player.prototype.options_ = {
    // Default order of fallback technology
    techOrder: Tech.defaultTechOrder_,

    html5: {},
    flash: {},

    // default inactivity timeout
    inactivityTimeout: 2000,

    // default playback rates
    playbackRates: [],
    // Add playback rate selection by adding rates
    // 'playbackRates': [0.5, 1, 1.5, 2],

    // Included control sets
    children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],

    language: navigator$1 && (navigator$1.languages && navigator$1.languages[0] || navigator$1.userLanguage || navigator$1.language) || 'en',

    // locales and their language translations
    languages: {},

    // Default message to show when a video cannot be played.
    notSupportedMessage: 'No compatible source was found for this media.'
};

[
/**
 * Returns whether or not the player is in the "ended" state.
 *
 * @return {Boolean} True if the player is in the ended state, false if not.
 * @method Player#ended
 */
'ended',
/**
 * Returns whether or not the player is in the "seeking" state.
 *
 * @return {Boolean} True if the player is in the seeking state, false if not.
 * @method Player#seeking
 */
'seeking',
/**
 * Returns the TimeRanges of the media that are currently available
 * for seeking to.
 *
 * @return {TimeRanges} the seekable intervals of the media timeline
 * @method Player#seekable
 */
'seekable',
/**
 * Returns the current state of network activity for the element, from
 * the codes in the list below.
 * - NETWORK_EMPTY (numeric value 0)
 *   The element has not yet been initialised. All attributes are in
 *   their initial states.
 * - NETWORK_IDLE (numeric value 1)
 *   The element's resource selection algorithm is active and has
 *   selected a resource, but it is not actually using the network at
 *   this time.
 * - NETWORK_LOADING (numeric value 2)
 *   The user agent is actively trying to download data.
 * - NETWORK_NO_SOURCE (numeric value 3)
 *   The element's resource selection algorithm is active, but it has
 *   not yet found a resource to use.
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
 * @return {number} the current network activity state
 * @method Player#networkState
 */
'networkState',
/**
 * Returns a value that expresses the current state of the element
 * with respect to rendering the current playback position, from the
 * codes in the list below.
 * - HAVE_NOTHING (numeric value 0)
 *   No information regarding the media resource is available.
 * - HAVE_METADATA (numeric value 1)
 *   Enough of the resource has been obtained that the duration of the
 *   resource is available.
 * - HAVE_CURRENT_DATA (numeric value 2)
 *   Data for the immediate current playback position is available.
 * - HAVE_FUTURE_DATA (numeric value 3)
 *   Data for the immediate current playback position is available, as
 *   well as enough data for the user agent to advance the current
 *   playback position in the direction of playback.
 * - HAVE_ENOUGH_DATA (numeric value 4)
 *   The user agent estimates that enough data is available for
 *   playback to proceed uninterrupted.
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
 * @return {number} the current playback rendering state
 * @method Player#readyState
 */
'readyState'].forEach(function (fn) {
    Player.prototype[fn] = function () {
        return this.techGet_(fn);
    };
});

TECH_EVENTS_RETRIGGER.forEach(function (event) {
    Player.prototype['handleTech' + toTitleCase(event) + '_'] = function () {
        return this.trigger(event);
    };
});

/**
 * Fired when the player has initial duration and dimension information
 *
 * @event Player#loadedmetadata
 * @type {EventTarget~Event}
 */

/**
 * Fired when the player has downloaded data at the current playback position
 *
 * @event Player#loadeddata
 * @type {EventTarget~Event}
 */

/**
 * Fired when the current playback position has changed *
 * During playback this is fired every 15-250 milliseconds, depending on the
 * playback technology in use.
 *
 * @event Player#timeupdate
 * @type {EventTarget~Event}
 */

/**
 * Fired when the volume changes
 *
 * @event Player#volumechange
 * @type {EventTarget~Event}
 */

/**
 * Reports whether or not a player has a plugin available.
 *
 * This does not report whether or not the plugin has ever been initialized
 * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
 *
 * @method Player#hasPlugin
 * @param  {string}  name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player has the requested plugin available.
 */

/**
 * Reports whether or not a player is using a plugin by name.
 *
 * For basic plugins, this only reports whether the plugin has _ever_ been
 * initialized on this player.
 *
 * @method Player#usingPlugin
 * @param  {string} name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player is using the requested plugin.
 */

Component.registerComponent('Player', Player);

/**
 * @file plugin.js
 */

/**
 * The base plugin name.
 *
 * @private
 * @constant
 * @type {string}
 */
var BASE_PLUGIN_NAME = 'plugin';

/**
 * The key on which a player's active plugins cache is stored.
 *
 * @private
 * @constant
 * @type     {string}
 */
var PLUGIN_CACHE_KEY = 'activePlugins_';

/**
 * Stores registered plugins in a private space.
 *
 * @private
 * @type    {Object}
 */
var pluginStorage = {};

/**
 * Reports whether or not a plugin has been registered.
 *
 * @private
 * @param   {string} name
 *          The name of a plugin.
 *
 * @returns {boolean}
 *          Whether or not the plugin has been registered.
 */
var pluginExists = function pluginExists(name) {
  return pluginStorage.hasOwnProperty(name);
};

/**
 * Get a single registered plugin by name.
 *
 * @private
 * @param   {string} name
 *          The name of a plugin.
 *
 * @returns {Function|undefined}
 *          The plugin (or undefined).
 */
var getPlugin = function getPlugin(name) {
  return pluginExists(name) ? pluginStorage[name] : undefined;
};

/**
 * Marks a plugin as "active" on a player.
 *
 * Also, ensures that the player has an object for tracking active plugins.
 *
 * @private
 * @param   {Player} player
 *          A Video.js player instance.
 *
 * @param   {string} name
 *          The name of a plugin.
 */
var markPluginAsActive = function markPluginAsActive(player, name) {
  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};
  player[PLUGIN_CACHE_KEY][name] = true;
};

/**
 * Triggers a pair of plugin setup events.
 *
 * @private
 * @param  {Player} player
 *         A Video.js player instance.
 *
 * @param  {Plugin~PluginEventHash} hash
 *         A plugin event hash.
 *
 * @param  {Boolean} [before]
 *         If true, prefixes the event name with "before". In other words,
 *         use this to trigger "beforepluginsetup" instead of "pluginsetup".
 */
var triggerSetupEvent = function triggerSetupEvent(player, hash, before) {
  var eventName = (before ? 'before' : '') + 'pluginsetup';

  player.trigger(eventName, hash);
  player.trigger(eventName + ':' + hash.name, hash);
};

/**
 * Takes a basic plugin function and returns a wrapper function which marks
 * on the player that the plugin has been activated.
 *
 * @private
 * @param   {string} name
 *          The name of the plugin.
 *
 * @param   {Function} plugin
 *          The basic plugin.
 *
 * @returns {Function}
 *          A wrapper function for the given plugin.
 */
var createBasicPlugin = function createBasicPlugin(name, plugin) {
  var basicPluginWrapper = function basicPluginWrapper() {

    // We trigger the "beforepluginsetup" and "pluginsetup" events on the player
    // regardless, but we want the hash to be consistent with the hash provided
    // for advanced plugins.
    //
    // The only potentially counter-intuitive thing here is the `instance` in
    // the "pluginsetup" event is the value returned by the `plugin` function.
    triggerSetupEvent(this, { name: name, plugin: plugin, instance: null }, true);

    var instance = plugin.apply(this, arguments);

    markPluginAsActive(this, name);
    triggerSetupEvent(this, { name: name, plugin: plugin, instance: instance });

    return instance;
  };

  Object.keys(plugin).forEach(function (prop) {
    basicPluginWrapper[prop] = plugin[prop];
  });

  return basicPluginWrapper;
};

/**
 * Takes a plugin sub-class and returns a factory function for generating
 * instances of it.
 *
 * This factory function will replace itself with an instance of the requested
 * sub-class of Plugin.
 *
 * @private
 * @param   {string} name
 *          The name of the plugin.
 *
 * @param   {Plugin} PluginSubClass
 *          The advanced plugin.
 *
 * @returns {Function}
 */
var createPluginFactory = function createPluginFactory(name, PluginSubClass) {

  // Add a `name` property to the plugin prototype so that each plugin can
  // refer to itself by name.
  PluginSubClass.prototype.name = name;

  return function () {
    triggerSetupEvent(this, { name: name, plugin: PluginSubClass, instance: null }, true);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var instance = new (Function.prototype.bind.apply(PluginSubClass, [null].concat([this].concat(args))))();

    // The plugin is replaced by a function that returns the current instance.
    this[name] = function () {
      return instance;
    };

    triggerSetupEvent(this, instance.getEventHash());

    return instance;
  };
};

/**
 * Parent class for all advanced plugins.
 *
 * @mixes   module:evented~EventedMixin
 * @mixes   module:stateful~StatefulMixin
 * @fires   Player#beforepluginsetup
 * @fires   Player#beforepluginsetup:$name
 * @fires   Player#pluginsetup
 * @fires   Player#pluginsetup:$name
 * @listens Player#dispose
 * @throws  {Error}
 *          If attempting to instantiate the base {@link Plugin} class
 *          directly instead of via a sub-class.
 */

var Plugin = function () {

  /**
   * Creates an instance of this class.
   *
   * Sub-classes should call `super` to ensure plugins are properly initialized.
   *
   * @param {Player} player
   *        A Video.js player instance.
   */
  function Plugin(player) {
    classCallCheck(this, Plugin);

    if (this.constructor === Plugin) {
      throw new Error('Plugin must be sub-classed; not directly instantiated.');
    }

    this.player = player;

    // Make this object evented, but remove the added `trigger` method so we
    // use the prototype version instead.
    evented(this);
    delete this.trigger;

    stateful(this, this.constructor.defaultState);
    markPluginAsActive(player, this.name);

    // Auto-bind the dispose method so we can use it as a listener and unbind
    // it later easily.
    this.dispose = bind(this, this.dispose);

    // If the player is disposed, dispose the plugin.
    player.on('dispose', this.dispose);
  }

  /**
   * Get the version of the plugin that was set on <pluginName>.VERSION
   */


  Plugin.prototype.version = function version() {
    return this.constructor.VERSION;
  };

  /**
   * Each event triggered by plugins includes a hash of additional data with
   * conventional properties.
   *
   * This returns that object or mutates an existing hash.
   *
   * @param   {Object} [hash={}]
   *          An object to be used as event an event hash.
   *
   * @returns {Plugin~PluginEventHash}
   *          An event hash object with provided properties mixed-in.
   */


  Plugin.prototype.getEventHash = function getEventHash() {
    var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    hash.name = this.name;
    hash.plugin = this.constructor;
    hash.instance = this;
    return hash;
  };

  /**
   * Triggers an event on the plugin object and overrides
   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash={}]
   *          Additional data hash to merge with a
   *          {@link Plugin~PluginEventHash|PluginEventHash}.
   *
   * @returns {boolean}
   *          Whether or not default was prevented.
   */


  Plugin.prototype.trigger = function trigger$$1(event) {
    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return trigger(this.eventBusEl_, event, this.getEventHash(hash));
  };

  /**
   * Handles "statechanged" events on the plugin. No-op by default, override by
   * subclassing.
   *
   * @abstract
   * @param    {Event} e
   *           An event object provided by a "statechanged" event.
   *
   * @param    {Object} e.changes
   *           An object describing changes that occurred with the "statechanged"
   *           event.
   */


  Plugin.prototype.handleStateChanged = function handleStateChanged(e) {};

  /**
   * Disposes a plugin.
   *
   * Subclasses can override this if they want, but for the sake of safety,
   * it's probably best to subscribe the "dispose" event.
   *
   * @fires Plugin#dispose
   */


  Plugin.prototype.dispose = function dispose() {
    var name = this.name,
        player = this.player;

    /**
     * Signals that a advanced plugin is about to be disposed.
     *
     * @event Plugin#dispose
     * @type  {EventTarget~Event}
     */

    this.trigger('dispose');
    this.off();
    player.off('dispose', this.dispose);

    // Eliminate any possible sources of leaking memory by clearing up
    // references between the player and the plugin instance and nulling out
    // the plugin's state and replacing methods with a function that throws.
    player[PLUGIN_CACHE_KEY][name] = false;
    this.player = this.state = null;

    // Finally, replace the plugin name on the player with a new factory
    // function, so that the plugin is ready to be set up again.
    player[name] = createPluginFactory(name, pluginStorage[name]);
  };

  /**
   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
   *
   * @param   {string|Function} plugin
   *          If a string, matches the name of a plugin. If a function, will be
   *          tested directly.
   *
   * @returns {boolean}
   *          Whether or not a plugin is a basic plugin.
   */


  Plugin.isBasic = function isBasic(plugin) {
    var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;

    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);
  };

  /**
   * Register a Video.js plugin.
   *
   * @param   {string} name
   *          The name of the plugin to be registered. Must be a string and
   *          must not match an existing plugin or a method on the `Player`
   *          prototype.
   *
   * @param   {Function} plugin
   *          A sub-class of `Plugin` or a function for basic plugins.
   *
   * @returns {Function}
   *          For advanced plugins, a factory function for that plugin. For
   *          basic plugins, a wrapper function that initializes the plugin.
   */


  Plugin.registerPlugin = function registerPlugin(name, plugin) {
    if (typeof name !== 'string') {
      throw new Error('Illegal plugin name, "' + name + '", must be a string, was ' + (typeof name === 'undefined' ? 'undefined' : _typeof(name)) + '.');
    }

    if (pluginExists(name)) {
      log$1.warn('A plugin named "' + name + '" already exists. You may want to avoid re-registering plugins!');
    } else if (Player.prototype.hasOwnProperty(name)) {
      throw new Error('Illegal plugin name, "' + name + '", cannot share a name with an existing player method!');
    }

    if (typeof plugin !== 'function') {
      throw new Error('Illegal plugin for "' + name + '", must be a function, was ' + (typeof plugin === 'undefined' ? 'undefined' : _typeof(plugin)) + '.');
    }

    pluginStorage[name] = plugin;

    // Add a player prototype method for all sub-classed plugins (but not for
    // the base Plugin class).
    if (name !== BASE_PLUGIN_NAME) {
      if (Plugin.isBasic(plugin)) {
        Player.prototype[name] = createBasicPlugin(name, plugin);
      } else {
        Player.prototype[name] = createPluginFactory(name, plugin);
      }
    }

    return plugin;
  };

  /**
   * De-register a Video.js plugin.
   *
   * @param {string} name
   *        The name of the plugin to be deregistered.
   */


  Plugin.deregisterPlugin = function deregisterPlugin(name) {
    if (name === BASE_PLUGIN_NAME) {
      throw new Error('Cannot de-register base plugin.');
    }
    if (pluginExists(name)) {
      delete pluginStorage[name];
      delete Player.prototype[name];
    }
  };

  /**
   * Gets an object containing multiple Video.js plugins.
   *
   * @param   {Array} [names]
   *          If provided, should be an array of plugin names. Defaults to _all_
   *          plugin names.
   *
   * @returns {Object|undefined}
   *          An object containing plugin(s) associated with their name(s) or
   *          `undefined` if no matching plugins exist).
   */


  Plugin.getPlugins = function getPlugins() {
    var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(pluginStorage);

    var result = void 0;

    names.forEach(function (name) {
      var plugin = getPlugin(name);

      if (plugin) {
        result = result || {};
        result[name] = plugin;
      }
    });

    return result;
  };

  /**
   * Gets a plugin's version, if available
   *
   * @param   {string} name
   *          The name of a plugin.
   *
   * @returns {string}
   *          The plugin's version or an empty string.
   */


  Plugin.getPluginVersion = function getPluginVersion(name) {
    var plugin = getPlugin(name);

    return plugin && plugin.VERSION || '';
  };

  return Plugin;
}();

/**
 * Gets a plugin by name if it exists.
 *
 * @static
 * @method   getPlugin
 * @memberOf Plugin
 * @param    {string} name
 *           The name of a plugin.
 *
 * @returns  {Function|undefined}
 *           The plugin (or `undefined`).
 */


Plugin.getPlugin = getPlugin;

/**
 * The name of the base plugin class as it is registered.
 *
 * @type {string}
 */
Plugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;

Plugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);

/**
 * Documented in player.js
 *
 * @ignore
 */
Player.prototype.usingPlugin = function (name) {
  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;
};

/**
 * Documented in player.js
 *
 * @ignore
 */
Player.prototype.hasPlugin = function (name) {
  return !!pluginExists(name);
};

/**
 * @file extend.js
 * @module extend
 */

/**
 * A combination of node inherits and babel's inherits (after transpile).
 * Both work the same but node adds `super_` to the subClass
 * and Bable adds the superClass as __proto__. Both seem useful.
 *
 * @param {Object} subClass
 *        The class to inherit to
 *
 * @param {Object} superClass
 *        The class to inherit from
 *
 * @private
 */
var _inherits = function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (superClass) {
    // node
    subClass.super_ = superClass;
  }
};

/**
 * Function for subclassing using the same inheritance that
 * videojs uses internally
 *
 * @static
 * @const
 *
 * @param {Object} superClass
 *        The class to inherit from
 *
 * @param {Object} [subClassMethods={}]
 *        The class to inherit to
 *
 * @return {Object}
 *         The new object with subClassMethods that inherited superClass.
 */
var extendFn = function extendFn(superClass) {
  var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var subClass = function subClass() {
    superClass.apply(this, arguments);
  };

  var methods = {};

  if ((typeof subClassMethods === 'undefined' ? 'undefined' : _typeof(subClassMethods)) === 'object') {
    if (subClassMethods.constructor !== Object.prototype.constructor) {
      subClass = subClassMethods.constructor;
    }
    methods = subClassMethods;
  } else if (typeof subClassMethods === 'function') {
    subClass = subClassMethods;
  }

  _inherits(subClass, superClass);

  // Extend subObj's prototype with functions and other properties from props
  for (var name in methods) {
    if (methods.hasOwnProperty(name)) {
      subClass.prototype[name] = methods[name];
    }
  }

  return subClass;
};

/**
 * @file video.js
 * @module videojs
 */

/**
 * Normalize an `id` value by trimming off a leading `#`
 *
 * @param   {string} id
 *          A string, maybe with a leading `#`.
 *
 * @return {string}
 *          The string, without any leading `#`.
 */
var normalizeId = function normalizeId(id) {
  return id.indexOf('#') === 0 ? id.slice(1) : id;
};

/**
 * Doubles as the main function for users to create a player instance and also
 * the main library object.
 * The `videojs` function can be used to initialize or retrieve a player.
  *
 * @param {string|Element} id
 *        Video element or video element ID
 *
 * @param {Object} [options]
 *        Optional options object for config/settings
 *
 * @param {Component~ReadyCallback} [ready]
 *        Optional ready callback
 *
 * @return {Player}
 *         A player instance
 */
function videojs$1(id, options, ready) {
  var player = videojs$1.getPlayer(id);

  if (player) {
    if (options) {
      log$1.warn('Player "' + id + '" is already initialised. Options will not be applied.');
    }
    if (ready) {
      player.ready(ready);
    }
    return player;
  }

  var el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;

  if (!isEl(el)) {
    throw new TypeError('The element or ID supplied is not valid. (videojs)');
  }

  if (!document$1.body.contains(el)) {
    log$1.warn('The element supplied is not included in the DOM');
  }

  options = options || {};

  videojs$1.hooks('beforesetup').forEach(function (hookFunction) {
    var opts = hookFunction(el, mergeOptions(options));

    if (!isObject(opts) || Array.isArray(opts)) {
      log$1.error('please return an object in beforesetup hooks');
      return;
    }

    options = mergeOptions(options, opts);
  });

  // We get the current "Player" component here in case an integration has
  // replaced it with a custom player.
  var PlayerComponent = Component.getComponent('Player');

  player = new PlayerComponent(el, options, ready);

  videojs$1.hooks('setup').forEach(function (hookFunction) {
    return hookFunction(player);
  });

  return player;
}

/**
 * An Object that contains lifecycle hooks as keys which point to an array
 * of functions that are run when a lifecycle is triggered
 */
videojs$1.hooks_ = {};

/**
 * Get a list of hooks for a specific lifecycle
 *
 * @function videojs.hooks
 *
 * @param {string} type
 *        the lifecyle to get hooks from
 *
 * @param {Function|Function[]} [fn]
 *        Optionally add a hook (or hooks) to the lifecycle that your are getting.
 *
 * @return {Array}
 *         an array of hooks, or an empty array if there are none.
 */
videojs$1.hooks = function (type, fn) {
  videojs$1.hooks_[type] = videojs$1.hooks_[type] || [];
  if (fn) {
    videojs$1.hooks_[type] = videojs$1.hooks_[type].concat(fn);
  }
  return videojs$1.hooks_[type];
};

/**
 * Add a function hook to a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle to hook the function to.
 *
 * @param {Function|Function[]} fn
 *        The function or array of functions to attach.
 */
videojs$1.hook = function (type, fn) {
  videojs$1.hooks(type, fn);
};

/**
 * Add a function hook that will only run once to a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle to hook the function to.
 *
 * @param {Function|Function[]} fn
 *        The function or array of functions to attach.
 */
videojs$1.hookOnce = function (type, fn) {
  videojs$1.hooks(type, [].concat(fn).map(function (original) {
    var wrapper = function wrapper() {
      videojs$1.removeHook(type, wrapper);
      return original.apply(undefined, arguments);
    };

    return wrapper;
  }));
};

/**
 * Remove a hook from a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle that the function hooked to
 *
 * @param {Function} fn
 *        The hooked function to remove
 *
 * @return {boolean}
 *         The function that was removed or undef
 */
videojs$1.removeHook = function (type, fn) {
  var index = videojs$1.hooks(type).indexOf(fn);

  if (index <= -1) {
    return false;
  }

  videojs$1.hooks_[type] = videojs$1.hooks_[type].slice();
  videojs$1.hooks_[type].splice(index, 1);

  return true;
};

// Add default styles
if (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {
  var style$1 = $('.play-styles-defaults');

  if (!style$1) {
    style$1 = createStyleElement('play-styles-defaults');
    var head = $('head');

    if (head) {
      head.insertBefore(style$1, head.firstChild);
    }
    setTextContent(style$1, '\n      .play-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .play-fluid {\n        padding-top: 56.25%\n      }\n    ');
  }
}

// Run Auto-load players
// You have to wait at least once in case this script is loaded after your
// video in the DOM (weird behavior only with minified version)
autoSetupTimeout(1, videojs$1);

/**
 * Current software version. Follows semver.
 *
 * @type {string}
 */
videojs$1.VERSION = version;

/**
 * The global options object. These are the settings that take effect
 * if no overrides are specified when the player is created.
 *
 * @type {Object}
 */
videojs$1.options = Player.prototype.options_;

/**
 * Get an object with the currently created players, keyed by player ID
 *
 * @return {Object}
 *         The created players
 */
videojs$1.getPlayers = function () {
  return Player.players;
};

/**
 * Get a single player based on an ID or DOM element.
 *
 * This is useful if you want to check if an element or ID has an associated
 * Video.js player, but not create one if it doesn't.
 *
 * @param   {string|Element} id
 *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -
 *          or a string matching the `id` of such an element.
 *
 * @return {Player|undefined}
 *          A player instance or `undefined` if there is no player instance
 *          matching the argument.
 */
videojs$1.getPlayer = function (id) {
  var players = Player.players;
  var tag = void 0;

  if (typeof id === 'string') {
    var nId = normalizeId(id);
    var player = players[nId];

    if (player) {
      return player;
    }

    tag = $('#' + nId);
  } else {
    tag = id;
  }

  if (isEl(tag)) {
    var _tag = tag,
        _player = _tag.player,
        playerId = _tag.playerId;

    // Element may have a `player` property referring to an already created
    // player instance. If so, return that.

    if (_player || players[playerId]) {
      return _player || players[playerId];
    }
  }
};

/**
 * Returns an array of all current players.
 *
 * @return {Array}
 *         An array of all players. The array will be in the order that
 *         `Object.keys` provides, which could potentially vary between
 *         JavaScript engines.
 *
 */
videojs$1.getAllPlayers = function () {
  return (

    // Disposed players leave a key with a `null` value, so we need to make sure
    // we filter those out.
    Object.keys(Player.players).map(function (k) {
      return Player.players[k];
    }).filter(Boolean)
  );
};

/**
 * Expose players object.
 *
 * @memberOf videojs
 * @property {Object} players
 */
videojs$1.players = Player.players;

/**
 * Get a component class object by name
 *
 * @borrows Component.getComponent as videojs.getComponent
 */
videojs$1.getComponent = Component.getComponent;

/**
 * Register a component so it can referred to by name. Used when adding to other
 * components, either through addChild `component.addChild('myComponent')` or through
 * default children options  `{ children: ['myComponent'] }`.
 *
 * > NOTE: You could also just initialize the component before adding.
 * `component.addChild(new MyComponent());`
 *
 * @param {string} name
 *        The class name of the component
 *
 * @param {Component} comp
 *        The component class
 */
videojs$1.registerComponent = function (name$$1, comp) {
  if (Tech.isTech(comp)) {
    log$1.warn(
    /* eslint max-len: ["error", { "code": 800 }] */
    'The ' + name$$1 + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
  }

  Component.registerComponent.call(Component, name$$1, comp);
};

/**
 * Get a Tech class object by name
 *
 * @borrows Tech.getTech as videojs.getTech
 */
videojs$1.getTech = Tech.getTech;

/**
 * Register a Tech so it can referred to by name.
 * This is used in the tech order for the player.
 *
 * @borrows Tech.registerTech as videojs.registerTech
 */
videojs$1.registerTech = Tech.registerTech;

/**
 * Register a middleware to a source type.
 *
 * @param {String} type A string representing a MIME type.
 * @param {function(player):object} middleware A middleware factory that takes a player.
 */
videojs$1.use = use;

/**
 * An object that can be returned by a middleware to signify
 * that the middleware is being terminated.
 *
 * @type {object}
 * @memberOf {videojs}
 * @property {object} middleware.TERMINATOR
 */
Object.defineProperty(videojs$1, 'middleware', {
  value: {},
  writeable: false,
  enumerable: true
});

Object.defineProperty(videojs$1.middleware, 'TERMINATOR', {
  value: TERMINATOR,
  writeable: false,
  enumerable: true
});

/**
 * A suite of browser and device tests from {@link browser}.
 *
 * @type {Object}
 * @private
 */
videojs$1.browser = browser;

/**
 * Whether or not the browser supports touch events. Included for backward
 * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
 * instead going forward.
 *
 * @deprecated since version 5.0
 * @type {boolean}
 */
videojs$1.TOUCH_ENABLED = TOUCH_ENABLED;

/**
 * Subclass an existing class
 * Mimics ES6 subclassing with the `extend` keyword
 *
 * @borrows extend:extendFn as videojs.extend
 */
videojs$1.extend = extendFn;

/**
 * Merge two options objects recursively
 * Performs a deep merge like lodash.merge but **only merges plain objects**
 * (not arrays, elements, anything else)
 * Other values will be copied directly from the second object.
 *
 * @borrows merge-options:mergeOptions as videojs.mergeOptions
 */
videojs$1.mergeOptions = mergeOptions;

/**
 * Change the context (this) of a function
 *
 * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native
 * `function() {}.bind(newContext);` instead of this.
 *
 * @borrows fn:bind as videojs.bind
 */
videojs$1.bind = bind;

/**
 * Register a Video.js plugin.
 *
 * @borrows plugin:registerPlugin as videojs.registerPlugin
 * @method registerPlugin
 *
 * @param  {string} name
 *         The name of the plugin to be registered. Must be a string and
 *         must not match an existing plugin or a method on the `Player`
 *         prototype.
 *
 * @param  {Function} plugin
 *         A sub-class of `Plugin` or a function for basic plugins.
 *
 * @return {Function}
 *         For advanced plugins, a factory function for that plugin. For
 *         basic plugins, a wrapper function that initializes the plugin.
 */
videojs$1.registerPlugin = Plugin.registerPlugin;

/**
 * Deregister a Video.js plugin.
 *
 * @borrows plugin:deregisterPlugin as videojs.deregisterPlugin
 * @method deregisterPlugin
 *
 * @param  {string} name
 *         The name of the plugin to be deregistered. Must be a string and
 *         must match an existing plugin or a method on the `Player`
 *         prototype.
 *
 */
videojs$1.deregisterPlugin = Plugin.deregisterPlugin;

/**
 * Deprecated method to register a plugin with Video.js
 *
 * @deprecated
 *        videojs.plugin() is deprecated; use videojs.registerPlugin() instead
 *
 * @param {string} name
 *        The plugin name
 *
 * @param {Plugin|Function} plugin
 *         The plugin sub-class or function
 *
 * @return {Object} returns the plugin registered
 */
videojs$1.plugin = function (name$$1, plugin) {
  log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');
  return Plugin.registerPlugin(name$$1, plugin);
};

/**
 * Gets an object containing multiple Video.js plugins.
 *
 * @param  {Array} [names]
 *         If provided, should be an array of plugin names. Defaults to _all_
 *         plugin names.
 *
 * @return {Object|undefined}
 *         An object containing plugin(s) associated with their name(s) or
 *         `undefined` if no matching plugins exist).
 */
videojs$1.getPlugins = Plugin.getPlugins;

/**
 * Gets a plugin by name if it exists.
 *
 * @param  {string} name
 *         The name of a plugin.
 *
 * @return {Function|undefined}
 *         The plugin (or `undefined`).
 */
videojs$1.getPlugin = Plugin.getPlugin;

/**
 * Gets a plugin's version, if available
 *
 * @param  {string} name
 *         The name of a plugin.
 *
 * @return {string}
 *         The plugin's version or an empty string.
 */
videojs$1.getPluginVersion = Plugin.getPluginVersion;

/**
 * Adding languages so that they're available to all players.
 * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
 *
 * @param {string} code
 *        The language code or dictionary property
 *
 * @param {Object} data
 *        The data values to be translated
 *
 * @return {Object}
 *         The resulting language dictionary object
 */
videojs$1.addLanguage = function (code, data) {
  var _mergeOptions;

  code = ('' + code).toLowerCase();

  videojs$1.options.languages = mergeOptions(videojs$1.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));

  return videojs$1.options.languages[code];
};

/**
 * Log messages
 *
 * @borrows log:log as videojs.log
 */
videojs$1.log = log$1;

/**
 * Creates an emulated TimeRange object.
 *
 * @borrows time-ranges:createTimeRanges as videojs.createTimeRange
 */
/**
 * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges
 */
videojs$1.createTimeRange = videojs$1.createTimeRanges = createTimeRanges;

/**
 * Format seconds as a time string, H:MM:SS or M:SS
 * Supplying a guide (in seconds) will force a number of leading zeros
 * to cover the length of the guide
 *
 * @borrows format-time:formatTime as videojs.formatTime
 */
videojs$1.formatTime = formatTime;

/**
 * Replaces format-time with a custom implementation, to be used in place of the default.
 *
 * @borrows format-time:setFormatTime as videojs.setFormatTime
 *
 * @method setFormatTime
 *
 * @param {Function} customFn
 * A custom format-time function which will be called
 * with the current time and guide (in seconds) as arguments.
 * Passed fn should return a string.
 */
videojs$1.setFormatTime = setFormatTime;

/**
 * Resets format-time to the default implementation.
 *
 * @borrows format-time:resetFormatTime as videojs.resetFormatTime
 *
 * @method resetFormatTime
 */
videojs$1.resetFormatTime = resetFormatTime;

/**
 * Resolve and parse the elements of a URL
 *
 * @borrows url:parseUrl as videojs.parseUrl
 *
 */
videojs$1.parseUrl = parseUrl;

/**
 * Returns whether the url passed is a cross domain request or not.
 *
 * @borrows url:isCrossOrigin as videojs.isCrossOrigin
 */
videojs$1.isCrossOrigin = isCrossOrigin;

/**
 * Event target class.
 *
 * @borrows EventTarget as videojs.EventTarget
 */
videojs$1.EventTarget = EventTarget;

/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 *
 * @borrows events:on as videojs.on
 */
videojs$1.on = on;

/**
 * Trigger a listener only once for an event
 *
 * @borrows events:one as videojs.one
 */
videojs$1.one = one;

/**
 * Removes event listeners from an element
 *
 * @borrows events:off as videojs.off
 */
videojs$1.off = off;

/**
 * Trigger an event for an element
 *
 * @borrows events:trigger as videojs.trigger
 */
videojs$1.trigger = trigger;

/**
 * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
 *
 * @param {Object} options
 *        settings for the request.
 *
 * @return {XMLHttpRequest|XDomainRequest}
 *         The request object.
 *
 * @see https://github.com/Raynos/xhr
 */
videojs$1.xhr = xhr;

/**
 * TextTrack class
 *
 * @borrows TextTrack as videojs.TextTrack
 */
videojs$1.TextTrack = TextTrack;

/**
 * export the AudioTrack class so that source handlers can create
 * AudioTracks and then add them to the players AudioTrackList
 *
 * @borrows AudioTrack as videojs.AudioTrack
 */
videojs$1.AudioTrack = AudioTrack;

/**
 * export the VideoTrack class so that source handlers can create
 * VideoTracks and then add them to the players VideoTrackList
 *
 * @borrows VideoTrack as videojs.VideoTrack
 */
videojs$1.VideoTrack = VideoTrack;

/**
 * Determines, via duck typing, whether or not a value is a DOM element.
 *
 * @borrows dom:isEl as videojs.isEl
 * @deprecated Use videojs.dom.isEl() instead
 */

/**
 * Determines, via duck typing, whether or not a value is a text node.
 *
 * @borrows dom:isTextNode as videojs.isTextNode
 * @deprecated Use videojs.dom.isTextNode() instead
 */

/**
 * Creates an element and applies properties.
 *
 * @borrows dom:createEl as videojs.createEl
 * @deprecated Use videojs.dom.createEl() instead
 */

/**
 * Check if an element has a CSS class
 *
 * @borrows dom:hasElClass as videojs.hasClass
 * @deprecated Use videojs.dom.hasClass() instead
 */

/**
 * Add a CSS class name to an element
 *
 * @borrows dom:addElClass as videojs.addClass
 * @deprecated Use videojs.dom.addClass() instead
 */

/**
 * Remove a CSS class name from an element
 *
 * @borrows dom:removeElClass as videojs.removeClass
 * @deprecated Use videojs.dom.removeClass() instead
 */

/**
 * Adds or removes a CSS class name on an element depending on an optional
 * condition or the presence/absence of the class name.
 *
 * @borrows dom:toggleElClass as videojs.toggleClass
 * @deprecated Use videojs.dom.toggleClass() instead
 */

/**
 * Apply attributes to an HTML element.
 *
 * @borrows dom:setElAttributes as videojs.setAttribute
 * @deprecated Use videojs.dom.setAttributes() instead
 */

/**
 * Get an element's attribute values, as defined on the HTML tag
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute (which shouldn't be used with HTML)
 * This will return true or false for boolean attributes.
 *
 * @borrows dom:getElAttributes as videojs.getAttributes
 * @deprecated Use videojs.dom.getAttributes() instead
 */

/**
 * Empties the contents of an element.
 *
 * @borrows dom:emptyEl as videojs.emptyEl
 * @deprecated Use videojs.dom.emptyEl() instead
 */

/**
 * Normalizes and appends content to an element.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * - String
 *   Normalized into a text node.
 *
 * - Element, TextNode
 *   Passed through.
 *
 * - Array
 *   A one-dimensional array of strings, elements, nodes, or functions (which
 *   return single strings, elements, or nodes).
 *
 * - Function
 *   If the sole argument, is expected to produce a string, element,
 *   node, or array.
 *
 * @borrows dom:appendContents as videojs.appendContet
 * @deprecated Use videojs.dom.appendContent() instead
 */

/**
 * Normalizes and inserts content into an element; this is identical to
 * `appendContent()`, except it empties the element first.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * - String
 *   Normalized into a text node.
 *
 * - Element, TextNode
 *   Passed through.
 *
 * - Array
 *   A one-dimensional array of strings, elements, nodes, or functions (which
 *   return single strings, elements, or nodes).
 *
 * - Function
 *   If the sole argument, is expected to produce a string, element,
 *   node, or array.
 *
 * @borrows dom:insertContent as videojs.insertContent
 * @deprecated Use videojs.dom.insertContent() instead
 */
['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {
  videojs$1[k] = function () {
    log$1.warn('videojs.' + k + '() is deprecated; use videojs.dom.' + k + '() instead');
    return Dom[k].apply(null, arguments);
  };
});

/**
 * A safe getComputedStyle.
 *
 * This is because in Firefox, if the player is loaded in an iframe with `display:none`,
 * then `getComputedStyle` returns `null`, so, we do a null-check to make sure
 * that the player doesn't break in these cases.
 * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.
 *
 * @borrows computed-style:computedStyle as videojs.computedStyle
 */
videojs$1.computedStyle = computedStyle;

/**
 * Export the Dom utilities for use in external plugins
 * and Tech's
 */
videojs$1.dom = Dom;

/**
 * Export the Url utilities for use in external plugins
 * and Tech's
 */
videojs$1.url = Url;

/**
 * @videojs/http-streaming
 * @version 1.2.5
 * @copyright 2019 Brightcove, Inc
 * @license Apache-2.0
 */

/**
 * @file resolve-url.js
 */

var resolveUrl = function resolveUrl(baseURL, relativeURL) {
  // return early if we don't need to resolve
  if (/^[a-z]+:/i.test(relativeURL)) {
    return relativeURL;
  }

  // if the base URL is relative then combine with the current location
  if (!/\/\//i.test(baseURL)) {
    baseURL = URLToolkit.buildAbsoluteURL(window$1.location.href, baseURL);
  }

  return URLToolkit.buildAbsoluteURL(baseURL, relativeURL);
};

var classCallCheck$1 = function classCallCheck$$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$1 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var get$2 = function get$$1(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get$$1(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits$1 = function inherits$$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn$1 = function possibleConstructorReturn$$1(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
};

var slicedToArray$1 = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/**
 * @file playlist-loader.js
 *
 * A state machine that manages the loading, caching, and updating of
 * M3U8 playlists.
 *
 */

var mergeOptions$1 = videojs$1.mergeOptions,
    EventTarget$1 = videojs$1.EventTarget,
    log$2 = videojs$1.log;

/**
 * Loops through all supported media groups in master and calls the provided
 * callback for each group
 *
 * @param {Object} master
 *        The parsed master manifest object
 * @param {Function} callback
 *        Callback to call for each media group
 */

var forEachMediaGroup = function forEachMediaGroup(master, callback) {
  ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {
    for (var groupKey in master.mediaGroups[mediaType]) {
      for (var labelKey in master.mediaGroups[mediaType][groupKey]) {
        var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];

        callback(mediaProperties, mediaType, groupKey, labelKey);
      }
    }
  });
};

/**
  * Returns a new array of segments that is the result of merging
  * properties from an older list of segments onto an updated
  * list. No properties on the updated playlist will be overridden.
  *
  * @param {Array} original the outdated list of segments
  * @param {Array} update the updated list of segments
  * @param {Number=} offset the index of the first update
  * segment in the original segment list. For non-live playlists,
  * this should always be zero and does not need to be
  * specified. For live playlists, it should be the difference
  * between the media sequence numbers in the original and updated
  * playlists.
  * @return a list of merged segment objects
  */
var updateSegments = function updateSegments(original, update, offset) {
  var result = update.slice();

  offset = offset || 0;
  var length = Math.min(original.length, update.length + offset);

  for (var i = offset; i < length; i++) {
    result[i - offset] = mergeOptions$1(original[i], result[i - offset]);
  }
  return result;
};

var resolveSegmentUris = function resolveSegmentUris(segment, baseUri) {
  if (!segment.resolvedUri) {
    segment.resolvedUri = resolveUrl(baseUri, segment.uri);
  }
  if (segment.key && !segment.key.resolvedUri) {
    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);
  }
  if (segment.map && !segment.map.resolvedUri) {
    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);
  }
};

/**
  * Returns a new master playlist that is the result of merging an
  * updated media playlist into the original version. If the
  * updated media playlist does not match any of the playlist
  * entries in the original master playlist, null is returned.
  *
  * @param {Object} master a parsed master M3U8 object
  * @param {Object} media a parsed media M3U8 object
  * @return {Object} a new object that represents the original
  * master playlist with the updated media playlist merged in, or
  * null if the merge produced no change.
  */
var updateMaster = function updateMaster(master, media) {
  var result = mergeOptions$1(master, {});
  var playlist = result.playlists[media.uri];

  if (!playlist) {
    return null;
  }

  // consider the playlist unchanged if the number of segments is equal and the media
  // sequence number is unchanged
  if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {
    return null;
  }

  var mergedPlaylist = mergeOptions$1(playlist, media);

  // if the update could overlap existing segment information, merge the two segment lists
  if (playlist.segments) {
    mergedPlaylist.segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);
  }

  // resolve any segment URIs to prevent us from having to do it later
  mergedPlaylist.segments.forEach(function (segment) {
    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);
  });

  // TODO Right now in the playlists array there are two references to each playlist, one
  // that is referenced by index, and one by URI. The index reference may no longer be
  // necessary.
  for (var i = 0; i < result.playlists.length; i++) {
    if (result.playlists[i].uri === media.uri) {
      result.playlists[i] = mergedPlaylist;
    }
  }
  result.playlists[media.uri] = mergedPlaylist;

  return result;
};

var setupMediaPlaylists = function setupMediaPlaylists(master) {
  // setup by-URI lookups and resolve media playlist URIs
  var i = master.playlists.length;

  while (i--) {
    var playlist = master.playlists[i];

    master.playlists[playlist.uri] = playlist;
    playlist.resolvedUri = resolveUrl(master.uri, playlist.uri);
    playlist.id = i;

    if (!playlist.attributes) {
      // Although the spec states an #EXT-X-STREAM-INF tag MUST have a
      // BANDWIDTH attribute, we can play the stream without it. This means a poorly
      // formatted master playlist may not have an attribute list. An attributes
      // property is added here to prevent undefined references when we encounter
      // this scenario.
      playlist.attributes = {};

      log$2.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');
    }
  }
};

var resolveMediaGroupUris = function resolveMediaGroupUris(master) {
  forEachMediaGroup(master, function (properties) {
    if (properties.uri) {
      properties.resolvedUri = resolveUrl(master.uri, properties.uri);
    }
  });
};

/**
 * Calculates the time to wait before refreshing a live playlist
 *
 * @param {Object} media
 *        The current media
 * @param {Boolean} update
 *        True if there were any updates from the last refresh, false otherwise
 * @return {Number}
 *         The time in ms to wait before refreshing the live playlist
 */
var refreshDelay = function refreshDelay(media, update) {
  var lastSegment = media.segments[media.segments.length - 1];
  var delay = void 0;

  if (update && lastSegment && lastSegment.duration) {
    delay = lastSegment.duration * 1000;
  } else {
    // if the playlist is unchanged since the last reload or last segment duration
    // cannot be determined, try again after half the target duration
    delay = (media.targetDuration || 10) * 500;
  }
  return delay;
};

/**
 * Load a playlist from a remote location
 *
 * @class PlaylistLoader
 * @extends Stream
 * @param {String} srcUrl the url to start with
 * @param {Boolean} withCredentials the withCredentials xhr option
 * @constructor
 */

var PlaylistLoader = function (_EventTarget) {
  inherits$1(PlaylistLoader, _EventTarget);

  function PlaylistLoader(srcUrl, hls, withCredentials) {
    classCallCheck$1(this, PlaylistLoader);

    var _this = possibleConstructorReturn$1(this, (PlaylistLoader.__proto__ || Object.getPrototypeOf(PlaylistLoader)).call(this));

    _this.srcUrl = srcUrl;
    _this.hls_ = hls;
    _this.withCredentials = withCredentials;

    if (!_this.srcUrl) {
      throw new Error('A non-empty playlist URL is required');
    }

    // initialize the loader state
    _this.state = 'HAVE_NOTHING';

    // live playlist staleness timeout
    _this.on('mediaupdatetimeout', function () {
      if (_this.state !== 'HAVE_METADATA') {
        // only refresh the media playlist if no other activity is going on
        return;
      }

      _this.state = 'HAVE_CURRENT_METADATA';

      _this.request = _this.hls_.xhr({
        uri: resolveUrl(_this.master.uri, _this.media().uri),
        withCredentials: _this.withCredentials
      }, function (error, req) {
        // disposed
        if (!_this.request) {
          return;
        }

        if (error) {
          return _this.playlistRequestError(_this.request, _this.media().uri, 'HAVE_METADATA');
        }

        _this.haveMetadata(_this.request, _this.media().uri);
      });
    });
    return _this;
  }

  createClass$1(PlaylistLoader, [{
    key: 'playlistRequestError',
    value: function playlistRequestError(xhr$$1, url, startingState) {
      // any in-flight request is now finished
      this.request = null;

      if (startingState) {
        this.state = startingState;
      }

      this.error = {
        playlist: this.master.playlists[url],
        status: xhr$$1.status,
        message: 'HLS playlist request error at URL: ' + url,
        responseText: xhr$$1.responseText,
        code: xhr$$1.status >= 500 ? 4 : 2
      };

      this.trigger('error');
    }

    // update the playlist loader's state in response to a new or
    // updated playlist.

  }, {
    key: 'haveMetadata',
    value: function haveMetadata(xhr$$1, url) {
      var _this2 = this;

      // any in-flight request is now finished
      this.request = null;
      this.state = 'HAVE_METADATA';

      var parser = new Parser();

      parser.push(xhr$$1.responseText);
      parser.end();
      parser.manifest.uri = url;
      // m3u8-parser does not attach an attributes property to media playlists so make
      // sure that the property is attached to avoid undefined reference errors
      parser.manifest.attributes = parser.manifest.attributes || {};

      // merge this playlist into the master
      var update = updateMaster(this.master, parser.manifest);

      this.targetDuration = parser.manifest.targetDuration;

      if (update) {
        this.master = update;
        this.media_ = this.master.playlists[parser.manifest.uri];
      } else {
        this.trigger('playlistunchanged');
      }

      // refresh live playlists after a target duration passes
      if (!this.media().endList) {
        window$1.clearTimeout(this.mediaUpdateTimeout);
        this.mediaUpdateTimeout = window$1.setTimeout(function () {
          _this2.trigger('mediaupdatetimeout');
        }, refreshDelay(this.media(), !!update));
      }

      this.trigger('loadedplaylist');
    }

    /**
     * Abort any outstanding work and clean up.
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      this.stopRequest();
      window$1.clearTimeout(this.mediaUpdateTimeout);
    }
  }, {
    key: 'stopRequest',
    value: function stopRequest() {
      if (this.request) {
        var oldRequest = this.request;

        this.request = null;
        oldRequest.onreadystatechange = null;
        oldRequest.abort();
      }
    }

    /**
     * When called without any arguments, returns the currently
     * active media playlist. When called with a single argument,
     * triggers the playlist loader to asynchronously switch to the
     * specified media playlist. Calling this method while the
     * loader is in the HAVE_NOTHING causes an error to be emitted
     * but otherwise has no effect.
     *
     * @param {Object=} playlist the parsed media playlist
     * object to switch to
     * @return {Playlist} the current loaded media
     */

  }, {
    key: 'media',
    value: function media(playlist) {
      var _this3 = this;

      // getter
      if (!playlist) {
        return this.media_;
      }

      // setter
      if (this.state === 'HAVE_NOTHING') {
        throw new Error('Cannot switch media playlist from ' + this.state);
      }

      var startingState = this.state;

      // find the playlist object if the target playlist has been
      // specified by URI
      if (typeof playlist === 'string') {
        if (!this.master.playlists[playlist]) {
          throw new Error('Unknown playlist URI: ' + playlist);
        }
        playlist = this.master.playlists[playlist];
      }

      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;

      // switch to fully loaded playlists immediately
      if (this.master.playlists[playlist.uri].endList) {
        // abort outstanding playlist requests
        if (this.request) {
          this.request.onreadystatechange = null;
          this.request.abort();
          this.request = null;
        }
        this.state = 'HAVE_METADATA';
        this.media_ = playlist;

        // trigger media change if the active media has been updated
        if (mediaChange) {
          this.trigger('mediachanging');
          this.trigger('mediachange');
        }
        return;
      }

      // switching to the active playlist is a no-op
      if (!mediaChange) {
        return;
      }

      this.state = 'SWITCHING_MEDIA';

      // there is already an outstanding playlist request
      if (this.request) {
        if (resolveUrl(this.master.uri, playlist.uri) === this.request.url) {
          // requesting to switch to the same playlist multiple times
          // has no effect after the first
          return;
        }
        this.request.onreadystatechange = null;
        this.request.abort();
        this.request = null;
      }

      // request the new playlist
      if (this.media_) {
        this.trigger('mediachanging');
      }

      this.request = this.hls_.xhr({
        uri: resolveUrl(this.master.uri, playlist.uri),
        withCredentials: this.withCredentials
      }, function (error, req) {
        // disposed
        if (!_this3.request) {
          return;
        }

        if (error) {
          return _this3.playlistRequestError(_this3.request, playlist.uri, startingState);
        }

        _this3.haveMetadata(req, playlist.uri);

        // fire loadedmetadata the first time a media playlist is loaded
        if (startingState === 'HAVE_MASTER') {
          _this3.trigger('loadedmetadata');
        } else {
          _this3.trigger('mediachange');
        }
      });
    }

    /**
     * pause loading of the playlist
     */

  }, {
    key: 'pause',
    value: function pause() {
      this.stopRequest();
      window$1.clearTimeout(this.mediaUpdateTimeout);
      if (this.state === 'HAVE_NOTHING') {
        // If we pause the loader before any data has been retrieved, its as if we never
        // started, so reset to an unstarted state.
        this.started = false;
      }
      // Need to restore state now that no activity is happening
      if (this.state === 'SWITCHING_MEDIA') {
        // if the loader was in the process of switching media, it should either return to
        // HAVE_MASTER or HAVE_METADATA depending on if the loader has loaded a media
        // playlist yet. This is determined by the existence of loader.media_
        if (this.media_) {
          this.state = 'HAVE_METADATA';
        } else {
          this.state = 'HAVE_MASTER';
        }
      } else if (this.state === 'HAVE_CURRENT_METADATA') {
        this.state = 'HAVE_METADATA';
      }
    }

    /**
     * start loading of the playlist
     */

  }, {
    key: 'load',
    value: function load(isFinalRendition) {
      var _this4 = this;

      window$1.clearTimeout(this.mediaUpdateTimeout);

      var media = this.media();

      if (isFinalRendition) {
        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;

        this.mediaUpdateTimeout = window$1.setTimeout(function () {
          return _this4.load();
        }, delay);
        return;
      }

      if (!this.started) {
        this.start();
        return;
      }

      if (media && !media.endList) {
        this.trigger('mediaupdatetimeout');
      } else {
        this.trigger('loadedplaylist');
      }
    }

    /**
     * start loading of the playlist
     */

  }, {
    key: 'start',
    value: function start() {
      var _this5 = this;

      this.started = true;

      // request the specified URL
      this.request = this.hls_.xhr({
        uri: this.srcUrl,
        withCredentials: this.withCredentials
      }, function (error, req) {
        // disposed
        if (!_this5.request) {
          return;
        }

        // clear the loader's request reference
        _this5.request = null;

        if (error) {
          _this5.error = {
            status: req.status,
            message: 'HLS playlist request error at URL: ' + _this5.srcUrl,
            responseText: req.responseText,
            // MEDIA_ERR_NETWORK
            code: 2
          };
          if (_this5.state === 'HAVE_NOTHING') {
            _this5.started = false;
          }
          return _this5.trigger('error');
        }

        var parser = new Parser();

        parser.push(req.responseText);
        parser.end();

        _this5.state = 'HAVE_MASTER';

        // parser.manifest.uri = this.srcUrl;
        if (req.responseURL != _this5.srcUrl) {
          parser.manifest.uri = req.responseURL;
          _this5.trigger('mediasourcechange', req.responseURL);
        } else {
          parser.manifest.uri = _this5.srcUrl;
        }

        // loaded a master playlist
        if (parser.manifest.playlists) {
          _this5.master = parser.manifest;

          setupMediaPlaylists(_this5.master);
          resolveMediaGroupUris(_this5.master);

          _this5.trigger('loadedplaylist');
          if (!_this5.request) {
            // no media playlist was specifically selected so start
            // from the first listed one
            _this5.media(parser.manifest.playlists[0]);
          }
          return;
        }

        // loaded a media playlist
        // infer a master playlist if none was previously requested
        _this5.master = {
          mediaGroups: {
            'AUDIO': {},
            'VIDEO': {},
            'CLOSED-CAPTIONS': {},
            'SUBTITLES': {}
          },
          uri: window$1.location.href,
          playlists: [{
            uri: _this5.srcUrl,
            id: 0
          }]
        };
        _this5.master.playlists[_this5.srcUrl] = _this5.master.playlists[0];
        _this5.master.playlists[0].resolvedUri = _this5.srcUrl;
        // m3u8-parser does not attach an attributes property to media playlists so make
        // sure that the property is attached to avoid undefined reference errors
        _this5.master.playlists[0].attributes = _this5.master.playlists[0].attributes || {};
        _this5.haveMetadata(req, _this5.srcUrl);
        return _this5.trigger('loadedmetadata');
      });
    }
  }]);
  return PlaylistLoader;
}(EventTarget$1);

/**
 * @file playlist.js
 *
 * Playlist related utilities.
 */

var createTimeRange = videojs$1.createTimeRange;

/**
 * walk backward until we find a duration we can use
 * or return a failure
 *
 * @param {Playlist} playlist the playlist to walk through
 * @param {Number} endSequence the mediaSequence to stop walking on
 */

var backwardDuration = function backwardDuration(playlist, endSequence) {
  var result = 0;
  var i = endSequence - playlist.mediaSequence;
  // if a start time is available for segment immediately following
  // the interval, use it
  var segment = playlist.segments[i];

  // Walk backward until we find the latest segment with timeline
  // information that is earlier than endSequence
  if (segment) {
    if (typeof segment.start !== 'undefined') {
      return { result: segment.start, precise: true };
    }
    if (typeof segment.end !== 'undefined') {
      return {
        result: segment.end - segment.duration,
        precise: true
      };
    }
  }
  while (i--) {
    segment = playlist.segments[i];
    if (typeof segment.end !== 'undefined') {
      return { result: result + segment.end, precise: true };
    }

    result += segment.duration;

    if (typeof segment.start !== 'undefined') {
      return { result: result + segment.start, precise: true };
    }
  }
  return { result: result, precise: false };
};

/**
 * walk forward until we find a duration we can use
 * or return a failure
 *
 * @param {Playlist} playlist the playlist to walk through
 * @param {Number} endSequence the mediaSequence to stop walking on
 */
var forwardDuration = function forwardDuration(playlist, endSequence) {
  var result = 0;
  var segment = void 0;
  var i = endSequence - playlist.mediaSequence;
  // Walk forward until we find the earliest segment with timeline
  // information

  for (; i < playlist.segments.length; i++) {
    segment = playlist.segments[i];
    if (typeof segment.start !== 'undefined') {
      return {
        result: segment.start - result,
        precise: true
      };
    }

    result += segment.duration;

    if (typeof segment.end !== 'undefined') {
      return {
        result: segment.end - result,
        precise: true
      };
    }
  }
  // indicate we didn't find a useful duration estimate
  return { result: -1, precise: false };
};

/**
  * Calculate the media duration from the segments associated with a
  * playlist. The duration of a subinterval of the available segments
  * may be calculated by specifying an end index.
  *
  * @param {Object} playlist a media playlist object
  * @param {Number=} endSequence an exclusive upper boundary
  * for the playlist.  Defaults to playlist length.
  * @param {Number} expired the amount of time that has dropped
  * off the front of the playlist in a live scenario
  * @return {Number} the duration between the first available segment
  * and end index.
  */
var intervalDuration = function intervalDuration(playlist, endSequence, expired) {
  var backward = void 0;
  var forward = void 0;

  if (typeof endSequence === 'undefined') {
    endSequence = playlist.mediaSequence + playlist.segments.length;
  }

  if (endSequence < playlist.mediaSequence) {
    return 0;
  }

  // do a backward walk to estimate the duration
  backward = backwardDuration(playlist, endSequence);
  if (backward.precise) {
    // if we were able to base our duration estimate on timing
    // information provided directly from the Media Source, return
    // it
    return backward.result;
  }

  // walk forward to see if a precise duration estimate can be made
  // that way
  forward = forwardDuration(playlist, endSequence);
  if (forward.precise) {
    // we found a segment that has been buffered and so it's
    // position is known precisely
    return forward.result;
  }

  // return the less-precise, playlist-based duration estimate
  return backward.result + expired;
};

/**
  * Calculates the duration of a playlist. If a start and end index
  * are specified, the duration will be for the subset of the media
  * timeline between those two indices. The total duration for live
  * playlists is always Infinity.
  *
  * @param {Object} playlist a media playlist object
  * @param {Number=} endSequence an exclusive upper
  * boundary for the playlist. Defaults to the playlist media
  * sequence number plus its length.
  * @param {Number=} expired the amount of time that has
  * dropped off the front of the playlist in a live scenario
  * @return {Number} the duration between the start index and end
  * index.
  */
var duration = function duration(playlist, endSequence, expired) {
  if (!playlist) {
    return 0;
  }

  if (typeof expired !== 'number') {
    expired = 0;
  }

  // if a slice of the total duration is not requested, use
  // playlist-level duration indicators when they're present
  if (typeof endSequence === 'undefined') {
    // if present, use the duration specified in the playlist
    if (playlist.totalDuration) {
      return playlist.totalDuration;
    }

    // duration should be Infinity for live playlists
    if (!playlist.endList) {
      return window$1.Infinity;
    }
  }

  // calculate the total duration based on the segment durations
  return intervalDuration(playlist, endSequence, expired);
};

/**
  * Calculate the time between two indexes in the current playlist
  * neight the start- nor the end-index need to be within the current
  * playlist in which case, the targetDuration of the playlist is used
  * to approximate the durations of the segments
  *
  * @param {Object} playlist a media playlist object
  * @param {Number} startIndex
  * @param {Number} endIndex
  * @return {Number} the number of seconds between startIndex and endIndex
  */
var sumDurations = function sumDurations(playlist, startIndex, endIndex) {
  var durations = 0;

  if (startIndex > endIndex) {
    var _ref = [endIndex, startIndex];
    startIndex = _ref[0];
    endIndex = _ref[1];
  }

  if (startIndex < 0) {
    for (var i = startIndex; i < Math.min(0, endIndex); i++) {
      durations += playlist.targetDuration;
    }
    startIndex = 0;
  }

  for (var _i = startIndex; _i < endIndex; _i++) {
    durations += playlist.segments[_i].duration;
  }

  return durations;
};

/**
 * Determines the media index of the segment corresponding to the safe edge of the live
 * window which is the duration of the last segment plus 2 target durations from the end
 * of the playlist.
 *
 * @param {Object} playlist
 *        a media playlist object
 * @return {Number}
 *         The media index of the segment at the safe live point. 0 if there is no "safe"
 *         point.
 * @function safeLiveIndex
 */
var safeLiveIndex = function safeLiveIndex(playlist) {
  if (!playlist.segments.length) {
    return 0;
  }

  var i = playlist.segments.length - 1;
  var distanceFromEnd = playlist.segments[i].duration || playlist.targetDuration;
  var safeDistance = distanceFromEnd + playlist.targetDuration * 2;

  while (i--) {
    distanceFromEnd += playlist.segments[i].duration;

    if (distanceFromEnd >= safeDistance) {
      break;
    }
  }

  return Math.max(0, i);
};

/**
 * Calculates the playlist end time
 *
 * @param {Object} playlist a media playlist object
 * @param {Number=} expired the amount of time that has
 *                  dropped off the front of the playlist in a live scenario
 * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the
 *                        playlist end calculation should consider the safe live end
 *                        (truncate the playlist end by three segments). This is normally
 *                        used for calculating the end of the playlist's seekable range.
 * @returns {Number} the end time of playlist
 * @function playlistEnd
 */
var playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {
  if (!playlist || !playlist.segments) {
    return null;
  }
  if (playlist.endList) {
    return duration(playlist);
  }

  if (expired === null) {
    return null;
  }

  expired = expired || 0;

  var endSequence = useSafeLiveEnd ? safeLiveIndex(playlist) : playlist.segments.length;

  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);
};

/**
  * Calculates the interval of time that is currently seekable in a
  * playlist. The returned time ranges are relative to the earliest
  * moment in the specified playlist that is still available. A full
  * seekable implementation for live streams would need to offset
  * these values by the duration of content that has expired from the
  * stream.
  *
  * @param {Object} playlist a media playlist object
  * dropped off the front of the playlist in a live scenario
  * @param {Number=} expired the amount of time that has
  * dropped off the front of the playlist in a live scenario
  * @return {TimeRanges} the periods of time that are valid targets
  * for seeking
  */
var seekable = function seekable(playlist, expired) {
  var useSafeLiveEnd = true;
  var seekableStart = expired || 0;
  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);

  if (seekableEnd === null) {
    return createTimeRange();
  }
  return createTimeRange(seekableStart, seekableEnd);
};

var isWholeNumber = function isWholeNumber(num) {
  return num - Math.floor(num) === 0;
};

var roundSignificantDigit = function roundSignificantDigit(increment, num) {
  // If we have a whole number, just add 1 to it
  if (isWholeNumber(num)) {
    return num + increment * 0.1;
  }

  var numDecimalDigits = num.toString().split('.')[1].length;

  for (var i = 1; i <= numDecimalDigits; i++) {
    var scale = Math.pow(10, i);
    var temp = num * scale;

    if (isWholeNumber(temp) || i === numDecimalDigits) {
      return (temp + increment) / scale;
    }
  }
};

var ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);
var floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);

/**
 * Determine the index and estimated starting time of the segment that
 * contains a specified playback position in a media playlist.
 *
 * @param {Object} playlist the media playlist to query
 * @param {Number} currentTime The number of seconds since the earliest
 * possible position to determine the containing segment for
 * @param {Number} startIndex
 * @param {Number} startTime
 * @return {Object}
 */
var getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {
  var i = void 0;
  var segment = void 0;
  var numSegments = playlist.segments.length;

  var time = currentTime - startTime;

  if (time < 0) {
    // Walk backward from startIndex in the playlist, adding durations
    // until we find a segment that contains `time` and return it
    if (startIndex > 0) {
      for (i = startIndex - 1; i >= 0; i--) {
        segment = playlist.segments[i];
        time += floorLeastSignificantDigit(segment.duration);
        if (time > 0) {
          return {
            mediaIndex: i,
            startTime: startTime - sumDurations(playlist, startIndex, i)
          };
        }
      }
    }
    // We were unable to find a good segment within the playlist
    // so select the first segment
    return {
      mediaIndex: 0,
      startTime: currentTime
    };
  }

  // When startIndex is negative, we first walk forward to first segment
  // adding target durations. If we "run out of time" before getting to
  // the first segment, return the first segment
  if (startIndex < 0) {
    for (i = startIndex; i < 0; i++) {
      time -= playlist.targetDuration;
      if (time < 0) {
        return {
          mediaIndex: 0,
          startTime: currentTime
        };
      }
    }
    startIndex = 0;
  }

  // Walk forward from startIndex in the playlist, subtracting durations
  // until we find a segment that contains `time` and return it
  for (i = startIndex; i < numSegments; i++) {
    segment = playlist.segments[i];
    time -= ceilLeastSignificantDigit(segment.duration);
    if (time < 0) {
      return {
        mediaIndex: i,
        startTime: startTime + sumDurations(playlist, startIndex, i)
      };
    }
  }

  // We are out of possible candidates so load the last one...
  return {
    mediaIndex: numSegments - 1,
    startTime: currentTime
  };
};

/**
 * Check whether the playlist is blacklisted or not.
 *
 * @param {Object} playlist the media playlist object
 * @return {boolean} whether the playlist is blacklisted or not
 * @function isBlacklisted
 */
var isBlacklisted = function isBlacklisted(playlist) {
  return playlist.excludeUntil && playlist.excludeUntil > Date.now();
};

/**
 * Check whether the playlist is compatible with current playback configuration or has
 * been blacklisted permanently for being incompatible.
 *
 * @param {Object} playlist the media playlist object
 * @return {boolean} whether the playlist is incompatible or not
 * @function isIncompatible
 */
var isIncompatible = function isIncompatible(playlist) {
  return playlist.excludeUntil && playlist.excludeUntil === Infinity;
};

/**
 * Check whether the playlist is enabled or not.
 *
 * @param {Object} playlist the media playlist object
 * @return {boolean} whether the playlist is enabled or not
 * @function isEnabled
 */
var isEnabled = function isEnabled(playlist) {
  var blacklisted = isBlacklisted(playlist);

  return !playlist.disabled && !blacklisted;
};

/**
 * Check whether the playlist has been manually disabled through the representations api.
 *
 * @param {Object} playlist the media playlist object
 * @return {boolean} whether the playlist is disabled manually or not
 * @function isDisabled
 */
var isDisabled = function isDisabled(playlist) {
  return playlist.disabled;
};

/**
 * Returns whether the current playlist is an AES encrypted HLS stream
 *
 * @return {Boolean} true if it's an AES encrypted HLS stream
 */
var isAes = function isAes(media) {
  for (var i = 0; i < media.segments.length; i++) {
    if (media.segments[i].key) {
      return true;
    }
  }
  return false;
};

/**
 * Returns whether the current playlist contains fMP4
 *
 * @return {Boolean} true if the playlist contains fMP4
 */
var isFmp4 = function isFmp4(media) {
  for (var i = 0; i < media.segments.length; i++) {
    if (media.segments[i].map) {
      return true;
    }
  }
  return false;
};

/**
 * Checks if the playlist has a value for the specified attribute
 *
 * @param {String} attr
 *        Attribute to check for
 * @param {Object} playlist
 *        The media playlist object
 * @return {Boolean}
 *         Whether the playlist contains a value for the attribute or not
 * @function hasAttribute
 */
var hasAttribute = function hasAttribute(attr, playlist) {
  return playlist.attributes && playlist.attributes[attr];
};

/**
 * Estimates the time required to complete a segment download from the specified playlist
 *
 * @param {Number} segmentDuration
 *        Duration of requested segment
 * @param {Number} bandwidth
 *        Current measured bandwidth of the player
 * @param {Object} playlist
 *        The media playlist object
 * @param {Number=} bytesReceived
 *        Number of bytes already received for the request. Defaults to 0
 * @return {Number|NaN}
 *         The estimated time to request the segment. NaN if bandwidth information for
 *         the given playlist is unavailable
 * @function estimateSegmentRequestTime
 */
var estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {
  var bytesReceived = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  if (!hasAttribute('BANDWIDTH', playlist)) {
    return NaN;
  }

  var size = segmentDuration * playlist.attributes.BANDWIDTH;

  return (size - bytesReceived * 8) / bandwidth;
};

/*
 * Returns whether the current playlist is the lowest rendition
 *
 * @return {Boolean} true if on lowest rendition
 */
var isLowestEnabledRendition = function isLowestEnabledRendition(master, media) {
  if (master.playlists.length === 1) {
    return true;
  }

  var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;

  return master.playlists.filter(function (playlist) {
    if (!isEnabled(playlist)) {
      return false;
    }

    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;
  }).length === 0;
};

// exports
var Playlist = {
  duration: duration,
  seekable: seekable,
  safeLiveIndex: safeLiveIndex,
  getMediaInfoForTime: getMediaInfoForTime,
  isEnabled: isEnabled,
  isDisabled: isDisabled,
  isBlacklisted: isBlacklisted,
  isIncompatible: isIncompatible,
  playlistEnd: playlistEnd,
  isAes: isAes,
  isFmp4: isFmp4,
  hasAttribute: hasAttribute,
  estimateSegmentRequestTime: estimateSegmentRequestTime,
  isLowestEnabledRendition: isLowestEnabledRendition
};

/**
 * @file xhr.js
 */

var videojsXHR = videojs$1.xhr,
    mergeOptions$1$1 = videojs$1.mergeOptions;

var xhrFactory = function xhrFactory() {
  var xhr$$1 = function XhrFunction(options, callback) {
    // Add a default timeout for all hls requests
    options = mergeOptions$1$1({
      timeout: 45e3
    }, options);

    // Allow an optional user-specified function to modify the option
    // object before we construct the xhr request
    var beforeRequest = XhrFunction.beforeRequest || videojs$1.Hls.xhr.beforeRequest;

    if (beforeRequest && typeof beforeRequest === 'function') {
      var newOptions = beforeRequest(options);

      if (newOptions) {
        options = newOptions;
      }
    }

    var request = videojsXHR(options, function (error, response) {
      var reqResponse = request.response;

      if (!error && reqResponse) {
        request.responseTime = Date.now();
        request.roundTripTime = request.responseTime - request.requestTime;
        request.bytesReceived = reqResponse.byteLength || reqResponse.length;
        if (!request.bandwidth) {
          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);
        }
      }

      if (response.headers) {
        request.responseHeaders = response.headers;
      }

      // videojs.xhr now uses a specific code on the error
      // object to signal that a request has timed out instead
      // of setting a boolean on the request object
      if (error && error.code === 'ETIMEDOUT') {
        request.timedout = true;
      }

      // videojs.xhr no longer considers status codes outside of 200 and 0
      // (for file uris) to be errors, but the old XHR did, so emulate that
      // behavior. Status 206 may be used in response to byterange requests.
      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {
        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));
      }

      callback(error, request);
    });
    var originalAbort = request.abort;

    request.abort = function () {
      request.aborted = true;
      return originalAbort.apply(request, arguments);
    };
    request.uri = options.uri;
    request.requestTime = Date.now();
    return request;
  };

  return xhr$$1;
};

/**
 * @file bin-utils.js
 */

/**
 * convert a TimeRange to text
 *
 * @param {TimeRange} range the timerange to use for conversion
 * @param {Number} i the iterator on the range to convert
 */
var textRange = function textRange(range, i) {
  return range.start(i) + '-' + range.end(i);
};

/**
 * format a number as hex string
 *
 * @param {Number} e The number
 * @param {Number} i the iterator
 */
var formatHexString = function formatHexString(e, i) {
  var value = e.toString(16);

  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');
};
var formatAsciiString = function formatAsciiString(e) {
  if (e >= 0x20 && e < 0x7e) {
    return String.fromCharCode(e);
  }
  return '.';
};

/**
 * Creates an object for sending to a web worker modifying properties that are TypedArrays
 * into a new object with seperated properties for the buffer, byteOffset, and byteLength.
 *
 * @param {Object} message
 *        Object of properties and values to send to the web worker
 * @return {Object}
 *         Modified message with TypedArray values expanded
 * @function createTransferableMessage
 */
var createTransferableMessage = function createTransferableMessage(message) {
  var transferable = {};

  Object.keys(message).forEach(function (key) {
    var value = message[key];

    if (ArrayBuffer.isView(value)) {
      transferable[key] = {
        bytes: value.buffer,
        byteOffset: value.byteOffset,
        byteLength: value.byteLength
      };
    } else {
      transferable[key] = value;
    }
  });

  return transferable;
};

/**
 * Returns a unique string identifier for a media initialization
 * segment.
 */
var initSegmentId = function initSegmentId(initSegment) {
  var byterange = initSegment.byterange || {
    length: Infinity,
    offset: 0
  };

  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');
};

/**
 * utils to help dump binary data to the console
 */
var hexDump = function hexDump(data) {
  var bytes = Array.prototype.slice.call(data);
  var step = 16;
  var result = '';
  var hex = void 0;
  var ascii = void 0;

  for (var j = 0; j < bytes.length / step; j++) {
    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');
    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');
    result += hex + ' ' + ascii + '\n';
  }

  return result;
};

var tagDump = function tagDump(_ref) {
  var bytes = _ref.bytes;
  return hexDump(bytes);
};

var textRanges = function textRanges(ranges) {
  var result = '';
  var i = void 0;

  for (i = 0; i < ranges.length; i++) {
    result += textRange(ranges, i) + ' ';
  }
  return result;
};

var utils = /*#__PURE__*/Object.freeze({
  createTransferableMessage: createTransferableMessage,
  initSegmentId: initSegmentId,
  hexDump: hexDump,
  tagDump: tagDump,
  textRanges: textRanges
});

/**
 * ranges
 *
 * Utilities for working with TimeRanges.
 *
 */

// Fudge factor to account for TimeRanges rounding
var TIME_FUDGE_FACTOR = 1 / 30;
// Comparisons between time values such as current time and the end of the buffered range
// can be misleading because of precision differences or when the current media has poorly
// aligned audio and video, which can cause values to be slightly off from what you would
// expect. This value is what we consider to be safe to use in such comparisons to account
// for these scenarios.
var SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;
var filterRanges = function filterRanges(timeRanges, predicate) {
  var results = [];
  var i = void 0;

  if (timeRanges && timeRanges.length) {
    // Search for ranges that match the predicate
    for (i = 0; i < timeRanges.length; i++) {
      if (predicate(timeRanges.start(i), timeRanges.end(i))) {
        results.push([timeRanges.start(i), timeRanges.end(i)]);
      }
    }
  }

  return videojs$1.createTimeRanges(results);
};

/**
 * Attempts to find the buffered TimeRange that contains the specified
 * time.
 * @param {TimeRanges} buffered - the TimeRanges object to query
 * @param {number} time  - the time to filter on.
 * @returns {TimeRanges} a new TimeRanges object
 */
var findRange = function findRange(buffered, time) {
  return filterRanges(buffered, function (start, end) {
    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;
  });
};

/**
 * Returns the TimeRanges that begin later than the specified time.
 * @param {TimeRanges} timeRanges - the TimeRanges object to query
 * @param {number} time - the time to filter on.
 * @returns {TimeRanges} a new TimeRanges object.
 */
var findNextRange = function findNextRange(timeRanges, time) {
  return filterRanges(timeRanges, function (start) {
    return start - TIME_FUDGE_FACTOR >= time;
  });
};

/**
 * Returns gaps within a list of TimeRanges
 * @param {TimeRanges} buffered - the TimeRanges object
 * @return {TimeRanges} a TimeRanges object of gaps
 */
var findGaps = function findGaps(buffered) {
  if (buffered.length < 2) {
    return videojs$1.createTimeRanges();
  }

  var ranges = [];

  for (var i = 1; i < buffered.length; i++) {
    var start = buffered.end(i - 1);
    var end = buffered.start(i);

    ranges.push([start, end]);
  }

  return videojs$1.createTimeRanges(ranges);
};

/**
 * Gets a human readable string for a TimeRange
 *
 * @param {TimeRange} range
 * @returns {String} a human readable string
 */
var printableRange = function printableRange(range) {
  var strArr = [];

  if (!range || !range.length) {
    return '';
  }

  for (var i = 0; i < range.length; i++) {
    strArr.push(range.start(i) + ' => ' + range.end(i));
  }

  return strArr.join(', ');
};

/**
 * Calculates the amount of time left in seconds until the player hits the end of the
 * buffer and causes a rebuffer
 *
 * @param {TimeRange} buffered
 *        The state of the buffer
 * @param {Numnber} currentTime
 *        The current time of the player
 * @param {Number} playbackRate
 *        The current playback rate of the player. Defaults to 1.
 * @return {Number}
 *         Time until the player has to start rebuffering in seconds.
 * @function timeUntilRebuffer
 */
var timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {
  var playbackRate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;

  return (bufferedEnd - currentTime) / playbackRate;
};

/**
 * Converts a TimeRanges object into an array representation
 * @param {TimeRanges} timeRanges
 * @returns {Array}
 */
var timeRangesToArray = function timeRangesToArray(timeRanges) {
  var timeRangesList = [];

  for (var i = 0; i < timeRanges.length; i++) {
    timeRangesList.push({
      start: timeRanges.start(i),
      end: timeRanges.end(i)
    });
  }

  return timeRangesList;
};

/**
 * @file create-text-tracks-if-necessary.js
 */

/**
 * Create text tracks on video.js if they exist on a segment.
 *
 * @param {Object} sourceBuffer the VSB or FSB
 * @param {Object} mediaSource the HTML media source
 * @param {Object} segment the segment that may contain the text track
 * @private
 */
var createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {
  var player = mediaSource.player_;

  // create an in-band caption track if one is present in the segment
  if (segment.captions && segment.captions.length) {
    if (!sourceBuffer.inbandTextTracks_) {
      sourceBuffer.inbandTextTracks_ = {};
    }

    for (var trackId in segment.captionStreams) {
      if (!sourceBuffer.inbandTextTracks_[trackId]) {
        player.tech_.trigger({ type: 'usage', name: 'hls-608' });
        var track = player.textTracks().getTrackById(trackId);

        if (track) {
          // Resuse an existing track with a CC# id because this was
          // very likely created by videojs-contrib-hls from information
          // in the m3u8 for us to use
          sourceBuffer.inbandTextTracks_[trackId] = track;
        } else {
          // Otherwise, create a track with the default `CC#` label and
          // without a language
          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({
            kind: 'captions',
            id: trackId,
            label: trackId
          }, false).track;
        }
      }
    }
  }

  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {
    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({
      kind: 'metadata',
      label: 'Timed Metadata'
    }, false).track;
    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;
  }
};

/**
 * @file remove-cues-from-track.js
 */

/**
 * Remove cues from a track on video.js.
 *
 * @param {Double} start start of where we should remove the cue
 * @param {Double} end end of where the we should remove the cue
 * @param {Object} track the text track to remove the cues from
 * @private
 */
var removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {
  var i = void 0;
  var cue = void 0;

  if (!track) {
    return;
  }

  if (!track.cues) {
    return;
  }

  i = track.cues.length;

  while (i--) {
    cue = track.cues[i];

    // Remove any overlapping cue
    if (cue.startTime <= end && cue.endTime >= start) {
      track.removeCue(cue);
    }
  }
};

/**
 * @file add-text-track-data.js
 */
/**
 * Define properties on a cue for backwards compatability,
 * but warn the user that the way that they are using it
 * is depricated and will be removed at a later date.
 *
 * @param {Cue} cue the cue to add the properties on
 * @private
 */
var deprecateOldCue = function deprecateOldCue(cue) {
  Object.defineProperties(cue.frame, {
    id: {
      get: function get$$1() {
        videojs$1.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');
        return cue.value.key;
      }
    },
    value: {
      get: function get$$1() {
        videojs$1.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');
        return cue.value.data;
      }
    },
    privateData: {
      get: function get$$1() {
        videojs$1.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');
        return cue.value.data;
      }
    }
  });
};

var durationOfVideo = function durationOfVideo(duration) {
  var dur = void 0;

  if (isNaN(duration) || Math.abs(duration) === Infinity) {
    dur = Number.MAX_VALUE;
  } else {
    dur = duration;
  }
  return dur;
};
/**
 * Add text track data to a source handler given the captions and
 * metadata from the buffer.
 *
 * @param {Object} sourceHandler the virtual source buffer
 * @param {Array} captionArray an array of caption data
 * @param {Array} metadataArray an array of meta data
 * @private
 */
var addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {
  var Cue = window$1.WebKitDataCue || window$1.VTTCue;

  if (captionArray) {
    captionArray.forEach(function (caption) {
      var track = caption.stream;

      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));
    }, sourceHandler);
  }

  if (metadataArray) {
    var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);

    metadataArray.forEach(function (metadata) {
      var time = metadata.cueTime + this.timestampOffset;

      metadata.frames.forEach(function (frame) {
        var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');

        cue.frame = frame;
        cue.value = frame;
        deprecateOldCue(cue);

        this.metadataTrack_.addCue(cue);
      }, this);
    }, sourceHandler);

    // Updating the metadeta cues so that
    // the endTime of each cue is the startTime of the next cue
    // the endTime of last cue is the duration of the video
    if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {
      var cues = sourceHandler.metadataTrack_.cues;
      var cuesArray = [];

      // Create a copy of the TextTrackCueList...
      // ...disregarding cues with a falsey value
      for (var i = 0; i < cues.length; i++) {
        if (cues[i]) {
          cuesArray.push(cues[i]);
        }
      }

      // Group cues by their startTime value
      var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {
        var timeSlot = obj[cue.startTime] || [];

        timeSlot.push(cue);
        obj[cue.startTime] = timeSlot;

        return obj;
      }, {});

      // Sort startTimes by ascending order
      var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {
        return Number(a) - Number(b);
      });

      // Map each cue group's endTime to the next group's startTime
      sortedStartTimes.forEach(function (startTime, idx) {
        var cueGroup = cuesGroupedByStartTime[startTime];
        var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;

        // Map each cue's endTime the next group's startTime
        cueGroup.forEach(function (cue) {
          cue.endTime = nextTime;
        });
      });
    }
  }
};

var win = typeof window !== 'undefined' ? window : {},
    TARGET = typeof Symbol === 'undefined' ? '__target' : Symbol(),
    SCRIPT_TYPE = 'application/javascript',
    BlobBuilder = win.BlobBuilder || win.WebKitBlobBuilder || win.MozBlobBuilder || win.MSBlobBuilder,
    URL = win.URL || win.webkitURL || URL && URL.msURL,
    Worker = win.Worker;

/**
 * Returns a wrapper around Web Worker code that is constructible.
 *
 * @function shimWorker
 *
 * @param { String }    filename    The name of the file
 * @param { Function }  fn          Function wrapping the code of the worker
 */
function shimWorker(filename, fn) {
  return function ShimWorker(forceFallback) {
    var o = this;

    if (!fn) {
      return new Worker(filename);
    } else if (Worker && !forceFallback) {
      // Convert the function's inner code to a string to construct the worker
      var source = fn.toString().replace(/^function.+?{/, '').slice(0, -1),
          objURL = createSourceObject(source);

      this[TARGET] = new Worker(objURL);
      wrapTerminate(this[TARGET], objURL);
      return this[TARGET];
    } else {
      var selfShim = {
        postMessage: function postMessage(m) {
          if (o.onmessage) {
            setTimeout(function () {
              o.onmessage({ data: m, target: selfShim });
            });
          }
        }
      };

      fn.call(selfShim);
      this.postMessage = function (m) {
        setTimeout(function () {
          selfShim.onmessage({ data: m, target: o });
        });
      };
      this.isThisThread = true;
    }
  };
}
// Test Worker capabilities
if (Worker) {
  var testWorker,
      objURL = createSourceObject('self.onmessage = function () {}'),
      testArray = new Uint8Array(1);

  try {
    testWorker = new Worker(objURL);

    // Native browser on some Samsung devices throws for transferables, let's detect it
    testWorker.postMessage(testArray, [testArray.buffer]);
  } catch (e) {
    Worker = null;
  } finally {
    URL.revokeObjectURL(objURL);
    if (testWorker) {
      testWorker.terminate();
    }
  }
}

function createSourceObject(str) {
  try {
    return URL.createObjectURL(new Blob([str], { type: SCRIPT_TYPE }));
  } catch (e) {
    var blob = new BlobBuilder();
    blob.append(str);
    return URL.createObjectURL(blob.getBlob(type));
  }
}

function wrapTerminate(worker, objURL) {
  if (!worker || !objURL) return;
  var term = worker.terminate;
  worker.objURL = objURL;
  worker.terminate = function () {
    if (worker.objURL) URL.revokeObjectURL(worker.objURL);
    term.call(worker);
  };
}

var TransmuxWorker = new shimWorker("./transmuxer-worker.worker.js", function (window, document$$1) {
  var self = this;
  var transmuxerWorker = function () {

    /**
     * mux.js
     *
     * Copyright (c) 2015 Brightcove
     * All rights reserved.
     *
     * Functions that generate fragmented MP4s suitable for use with Media
     * Source Extensions.
     */

    var UINT32_MAX = Math.pow(2, 32) - 1;

    var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;

    // pre-calculate constants
    (function () {
      var i;
      types = {
        avc1: [], // codingname
        avcC: [],
        btrt: [],
        dinf: [],
        dref: [],
        esds: [],
        ftyp: [],
        hdlr: [],
        mdat: [],
        mdhd: [],
        mdia: [],
        mfhd: [],
        minf: [],
        moof: [],
        moov: [],
        mp4a: [], // codingname
        mvex: [],
        mvhd: [],
        sdtp: [],
        smhd: [],
        stbl: [],
        stco: [],
        stsc: [],
        stsd: [],
        stsz: [],
        stts: [],
        styp: [],
        tfdt: [],
        tfhd: [],
        traf: [],
        trak: [],
        trun: [],
        trex: [],
        tkhd: [],
        vmhd: []
      };

      // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we
      // don't throw an error
      if (typeof Uint8Array === 'undefined') {
        return;
      }

      for (i in types) {
        if (types.hasOwnProperty(i)) {
          types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
        }
      }

      MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);
      AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);
      MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);
      VIDEO_HDLR = new Uint8Array([0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00, // pre_defined
      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
      ]);
      AUDIO_HDLR = new Uint8Array([0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00, // pre_defined
      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'
      ]);
      HDLR_TYPES = {
        video: VIDEO_HDLR,
        audio: AUDIO_HDLR
      };
      DREF = new Uint8Array([0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x01, // entry_count
      0x00, 0x00, 0x00, 0x0c, // entry_size
      0x75, 0x72, 0x6c, 0x20, // 'url' type
      0x00, // version 0
      0x00, 0x00, 0x01 // entry_flags
      ]);
      SMHD = new Uint8Array([0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, // balance, 0 means centered
      0x00, 0x00 // reserved
      ]);
      STCO = new Uint8Array([0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
      ]);
      STSC = STCO;
      STSZ = new Uint8Array([0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00, // sample_size
      0x00, 0x00, 0x00, 0x00 // sample_count
      ]);
      STTS = STCO;
      VMHD = new Uint8Array([0x00, // version
      0x00, 0x00, 0x01, // flags
      0x00, 0x00, // graphicsmode
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor
      ]);
    })();

    box = function box(type) {
      var payload = [],
          size = 0,
          i,
          result,
          view;

      for (i = 1; i < arguments.length; i++) {
        payload.push(arguments[i]);
      }

      i = payload.length;

      // calculate the total size we need to allocate
      while (i--) {
        size += payload[i].byteLength;
      }
      result = new Uint8Array(size + 8);
      view = new DataView(result.buffer, result.byteOffset, result.byteLength);
      view.setUint32(0, result.byteLength);
      result.set(type, 4);

      // copy the payload into the result
      for (i = 0, size = 8; i < payload.length; i++) {
        result.set(payload[i], size);
        size += payload[i].byteLength;
      }
      return result;
    };

    dinf = function dinf() {
      return box(types.dinf, box(types.dref, DREF));
    };

    esds = function esds(track) {
      return box(types.esds, new Uint8Array([0x00, // version
      0x00, 0x00, 0x00, // flags

      // ES_Descriptor
      0x03, // tag, ES_DescrTag
      0x19, // length
      0x00, 0x00, // ES_ID
      0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority

      // DecoderConfigDescriptor
      0x04, // tag, DecoderConfigDescrTag
      0x11, // length
      0x40, // object type
      0x15, // streamType
      0x00, 0x06, 0x00, // bufferSizeDB
      0x00, 0x00, 0xda, 0xc0, // maxBitrate
      0x00, 0x00, 0xda, 0xc0, // avgBitrate

      // DecoderSpecificInfo
      0x05, // tag, DecoderSpecificInfoTag
      0x02, // length
      // ISO/IEC 14496-3, AudioSpecificConfig
      // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35
      track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig
      ]));
    };

    ftyp = function ftyp() {
      return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);
    };

    hdlr = function hdlr(type) {
      return box(types.hdlr, HDLR_TYPES[type]);
    };
    mdat = function mdat(data) {
      return box(types.mdat, data);
    };
    mdhd = function mdhd(track) {
      var result = new Uint8Array([0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x02, // creation_time
      0x00, 0x00, 0x00, 0x03, // modification_time
      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 "ticks" per second

      track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF, // duration
      0x55, 0xc4, // 'und' language (undetermined)
      0x00, 0x00]);

      // Use the sample rate from the track metadata, when it is
      // defined. The sample rate can be parsed out of an ADTS header, for
      // instance.
      if (track.samplerate) {
        result[12] = track.samplerate >>> 24 & 0xFF;
        result[13] = track.samplerate >>> 16 & 0xFF;
        result[14] = track.samplerate >>> 8 & 0xFF;
        result[15] = track.samplerate & 0xFF;
      }

      return box(types.mdhd, result);
    };
    mdia = function mdia(track) {
      return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));
    };
    mfhd = function mfhd(sequenceNumber) {
      return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags
      (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number
      ]));
    };
    minf = function minf(track) {
      return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));
    };
    moof = function moof(sequenceNumber, tracks) {
      var trackFragments = [],
          i = tracks.length;
      // build traf boxes for each track fragment
      while (i--) {
        trackFragments[i] = traf(tracks[i]);
      }
      return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));
    };
    /**
     * Returns a movie box.
     * @param tracks {array} the tracks associated with this movie
     * @see ISO/IEC 14496-12:2012(E), section 8.2.1
     */
    moov = function moov(tracks) {
      var i = tracks.length,
          boxes = [];

      while (i--) {
        boxes[i] = trak(tracks[i]);
      }

      return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));
    };
    mvex = function mvex(tracks) {
      var i = tracks.length,
          boxes = [];

      while (i--) {
        boxes[i] = trex(tracks[i]);
      }
      return box.apply(null, [types.mvex].concat(boxes));
    };
    mvhd = function mvhd(duration) {
      var bytes = new Uint8Array([0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x01, // creation_time
      0x00, 0x00, 0x00, 0x02, // modification_time
      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 "ticks" per second
      (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF, // duration
      0x00, 0x01, 0x00, 0x00, // 1.0 rate
      0x01, 0x00, // 1.0 volume
      0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
      0xff, 0xff, 0xff, 0xff // next_track_ID
      ]);
      return box(types.mvhd, bytes);
    };

    sdtp = function sdtp(track) {
      var samples = track.samples || [],
          bytes = new Uint8Array(4 + samples.length),
          flags,
          i;

      // leave the full box header (4 bytes) all zero

      // write the sample table
      for (i = 0; i < samples.length; i++) {
        flags = samples[i].flags;

        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
      }

      return box(types.sdtp, bytes);
    };

    stbl = function stbl(track) {
      return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));
    };

    (function () {
      var videoSample, audioSample;

      stsd = function stsd(track) {

        return box(types.stsd, new Uint8Array([0x00, // version 0
        0x00, 0x00, 0x00, // flags
        0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));
      };

      videoSample = function videoSample(track) {
        var sps = track.sps || [],
            pps = track.pps || [],
            sequenceParameterSets = [],
            pictureParameterSets = [],
            i;

        // assemble the SPSs
        for (i = 0; i < sps.length; i++) {
          sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);
          sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength
          sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS
        }

        // assemble the PPSs
        for (i = 0; i < pps.length; i++) {
          pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);
          pictureParameterSets.push(pps[i].byteLength & 0xFF);
          pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));
        }

        return box(types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x01, // data_reference_index
        0x00, 0x00, // pre_defined
        0x00, 0x00, // reserved
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
        (track.width & 0xff00) >> 8, track.width & 0xff, // width
        (track.height & 0xff00) >> 8, track.height & 0xff, // height
        0x00, 0x48, 0x00, 0x00, // horizresolution
        0x00, 0x48, 0x00, 0x00, // vertresolution
        0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x01, // frame_count
        0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname
        0x00, 0x18, // depth = 24
        0x11, 0x11 // pre_defined = -1
        ]), box(types.avcC, new Uint8Array([0x01, // configurationVersion
        track.profileIdc, // AVCProfileIndication
        track.profileCompatibility, // profile_compatibility
        track.levelIdc, // AVCLevelIndication
        0xff // lengthSizeMinusOne, hard-coded to 4 bytes
        ].concat([sps.length // numOfSequenceParameterSets
        ]).concat(sequenceParameterSets).concat([pps.length // numOfPictureParameterSets
        ]).concat(pictureParameterSets))), // "PPS"
        box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
        0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
        0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate
        );
      };

      audioSample = function audioSample(track) {
        return box(types.mp4a, new Uint8Array([

        // SampleEntry, ISO/IEC 14496-12
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x01, // data_reference_index

        // AudioSampleEntry, ISO/IEC 14496-12
        0x00, 0x00, 0x00, 0x00, // reserved
        0x00, 0x00, 0x00, 0x00, // reserved
        (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff, // channelcount

        (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff, // samplesize
        0x00, 0x00, // pre_defined
        0x00, 0x00, // reserved

        (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16

        // MP4AudioSampleEntry, ISO/IEC 14496-14
        ]), esds(track));
      };
    })();

    tkhd = function tkhd(track) {
      var result = new Uint8Array([0x00, // version 0
      0x00, 0x00, 0x07, // flags
      0x00, 0x00, 0x00, 0x00, // creation_time
      0x00, 0x00, 0x00, 0x00, // modification_time
      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID
      0x00, 0x00, 0x00, 0x00, // reserved
      (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF, // duration
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, // layer
      0x00, 0x00, // alternate_group
      0x01, 0x00, // non-audio track volume
      0x00, 0x00, // reserved
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
      (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00, // width
      (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height
      ]);

      return box(types.tkhd, result);
    };

    /**
     * Generate a track fragment (traf) box. A traf box collects metadata
     * about tracks in a movie fragment (moof) box.
     */
    traf = function traf(track) {
      var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;

      trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00, // version 0
      0x00, 0x00, 0x3a, // flags
      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID
      0x00, 0x00, 0x00, 0x01, // sample_description_index
      0x00, 0x00, 0x00, 0x00, // default_sample_duration
      0x00, 0x00, 0x00, 0x00, // default_sample_size
      0x00, 0x00, 0x00, 0x00 // default_sample_flags
      ]));

      upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));
      lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));

      trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01, // version 1
      0x00, 0x00, 0x00, // flags
      // baseMediaDecodeTime
      upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF]));

      // the data offset specifies the number of bytes from the start of
      // the containing moof to the first payload byte of the associated
      // mdat
      dataOffset = 32 + // tfhd
      20 + // tfdt
      8 + // traf header
      16 + // mfhd
      8 + // moof header
      8; // mdat header

      // audio tracks require less metadata
      if (track.type === 'audio') {
        trackFragmentRun = trun(track, dataOffset);
        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);
      }

      // video tracks should contain an independent and disposable samples
      // box (sdtp)
      // generate one and adjust offsets to match
      sampleDependencyTable = sdtp(track);
      trackFragmentRun = trun(track, sampleDependencyTable.length + dataOffset);
      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);
    };

    /**
     * Generate a track box.
     * @param track {object} a track definition
     * @return {Uint8Array} the track box
     */
    trak = function trak(track) {
      track.duration = track.duration || 0xffffffff;
      return box(types.trak, tkhd(track), mdia(track));
    };

    trex = function trex(track) {
      var result = new Uint8Array([0x00, // version 0
      0x00, 0x00, 0x00, // flags
      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID
      0x00, 0x00, 0x00, 0x01, // default_sample_description_index
      0x00, 0x00, 0x00, 0x00, // default_sample_duration
      0x00, 0x00, 0x00, 0x00, // default_sample_size
      0x00, 0x01, 0x00, 0x01 // default_sample_flags
      ]);
      // the last two bytes of default_sample_flags is the sample
      // degradation priority, a hint about the importance of this sample
      // relative to others. Lower the degradation priority for all sample
      // types other than video.
      if (track.type !== 'video') {
        result[result.length - 1] = 0x00;
      }

      return box(types.trex, result);
    };

    (function () {
      var audioTrun, videoTrun, trunHeader;

      // This method assumes all samples are uniform. That is, if a
      // duration is present for the first sample, it will be present for
      // all subsequent samples.
      // see ISO/IEC 14496-12:2012, Section 8.8.8.1
      trunHeader = function trunHeader(samples, offset) {
        var durationPresent = 0,
            sizePresent = 0,
            flagsPresent = 0,
            compositionTimeOffset = 0;

        // trun flag constants
        if (samples.length) {
          if (samples[0].duration !== undefined) {
            durationPresent = 0x1;
          }
          if (samples[0].size !== undefined) {
            sizePresent = 0x2;
          }
          if (samples[0].flags !== undefined) {
            flagsPresent = 0x4;
          }
          if (samples[0].compositionTimeOffset !== undefined) {
            compositionTimeOffset = 0x8;
          }
        }

        return [0x00, // version 0
        0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01, // flags
        (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF, // sample_count
        (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset
        ];
      };

      videoTrun = function videoTrun(track, offset) {
        var bytes, samples, sample, i;

        samples = track.samples || [];
        offset += 8 + 12 + 16 * samples.length;

        bytes = trunHeader(samples, offset);

        for (i = 0; i < samples.length; i++) {
          sample = samples[i];
          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration
          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF, // sample_size
          sample.flags.isLeading << 2 | sample.flags.dependsOn, sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample, sample.flags.degradationPriority & 0xF0 << 8, sample.flags.degradationPriority & 0x0F, // sample_flags
          (sample.compositionTimeOffset & 0xFF000000) >>> 24, (sample.compositionTimeOffset & 0xFF0000) >>> 16, (sample.compositionTimeOffset & 0xFF00) >>> 8, sample.compositionTimeOffset & 0xFF // sample_composition_time_offset
          ]);
        }
        return box(types.trun, new Uint8Array(bytes));
      };

      audioTrun = function audioTrun(track, offset) {
        var bytes, samples, sample, i;

        samples = track.samples || [];
        offset += 8 + 12 + 8 * samples.length;

        bytes = trunHeader(samples, offset);

        for (i = 0; i < samples.length; i++) {
          sample = samples[i];
          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration
          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF]); // sample_size
        }

        return box(types.trun, new Uint8Array(bytes));
      };

      trun = function trun(track, offset) {
        if (track.type === 'audio') {
          return audioTrun(track, offset);
        }

        return videoTrun(track, offset);
      };
    })();

    var mp4Generator = {
      ftyp: ftyp,
      mdat: mdat,
      moof: moof,
      moov: moov,
      initSegment: function initSegment(tracks) {
        var fileType = ftyp(),
            movie = moov(tracks),
            result;

        result = new Uint8Array(fileType.byteLength + movie.byteLength);
        result.set(fileType);
        result.set(movie, fileType.byteLength);
        return result;
      }
    };

    var toUnsigned = function toUnsigned(value) {
      return value >>> 0;
    };

    var bin = {
      toUnsigned: toUnsigned
    };

    var toUnsigned$1 = bin.toUnsigned;
    var _findBox, parseType, timescale, startTime, getVideoTrackIds;

    // Find the data for a box specified by its path
    _findBox = function findBox(data, path) {
      var results = [],
          i,
          size,
          type,
          end,
          subresults;

      if (!path.length) {
        // short-circuit the search for empty paths
        return null;
      }

      for (i = 0; i < data.byteLength;) {
        size = toUnsigned$1(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);

        type = parseType(data.subarray(i + 4, i + 8));

        end = size > 1 ? i + size : data.byteLength;

        if (type === path[0]) {
          if (path.length === 1) {
            // this is the end of the path and we've found the box we were
            // looking for
            results.push(data.subarray(i + 8, end));
          } else {
            // recursively search for the next box along the path
            subresults = _findBox(data.subarray(i + 8, end), path.slice(1));
            if (subresults.length) {
              results = results.concat(subresults);
            }
          }
        }
        i = end;
      }

      // we've finished searching all of data
      return results;
    };

    /**
     * Returns the string representation of an ASCII encoded four byte buffer.
     * @param buffer {Uint8Array} a four-byte buffer to translate
     * @return {string} the corresponding string
     */
    parseType = function parseType(buffer) {
      var result = '';
      result += String.fromCharCode(buffer[0]);
      result += String.fromCharCode(buffer[1]);
      result += String.fromCharCode(buffer[2]);
      result += String.fromCharCode(buffer[3]);
      return result;
    };

    /**
     * Parses an MP4 initialization segment and extracts the timescale
     * values for any declared tracks. Timescale values indicate the
     * number of clock ticks per second to assume for time-based values
     * elsewhere in the MP4.
     *
     * To determine the start time of an MP4, you need two pieces of
     * information: the timescale unit and the earliest base media decode
     * time. Multiple timescales can be specified within an MP4 but the
     * base media decode time is always expressed in the timescale from
     * the media header box for the track:
     * ```
     * moov > trak > mdia > mdhd.timescale
     * ```
     * @param init {Uint8Array} the bytes of the init segment
     * @return {object} a hash of track ids to timescale values or null if
     * the init segment is malformed.
     */
    timescale = function timescale(init) {
      var result = {},
          traks = _findBox(init, ['moov', 'trak']);

      // mdhd timescale
      return traks.reduce(function (result, trak) {
        var tkhd, version, index, id, mdhd;

        tkhd = _findBox(trak, ['tkhd'])[0];
        if (!tkhd) {
          return null;
        }
        version = tkhd[0];
        index = version === 0 ? 12 : 20;
        id = toUnsigned$1(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);

        mdhd = _findBox(trak, ['mdia', 'mdhd'])[0];
        if (!mdhd) {
          return null;
        }
        version = mdhd[0];
        index = version === 0 ? 12 : 20;
        result[id] = toUnsigned$1(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);
        return result;
      }, result);
    };

    /**
     * Determine the base media decode start time, in seconds, for an MP4
     * fragment. If multiple fragments are specified, the earliest time is
     * returned.
     *
     * The base media decode time can be parsed from track fragment
     * metadata:
     * ```
     * moof > traf > tfdt.baseMediaDecodeTime
     * ```
     * It requires the timescale value from the mdhd to interpret.
     *
     * @param timescale {object} a hash of track ids to timescale values.
     * @return {number} the earliest base media decode start time for the
     * fragment, in seconds
     */
    startTime = function startTime(timescale, fragment) {
      var trafs, baseTimes, result;

      // we need info from two childrend of each track fragment box
      trafs = _findBox(fragment, ['moof', 'traf']);

      // determine the start times for each track
      baseTimes = [].concat.apply([], trafs.map(function (traf) {
        return _findBox(traf, ['tfhd']).map(function (tfhd) {
          var id, scale, baseTime;

          // get the track id from the tfhd
          id = toUnsigned$1(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]);
          // assume a 90kHz clock if no timescale was specified
          scale = timescale[id] || 90e3;

          // get the base media decode time from the tfdt
          baseTime = _findBox(traf, ['tfdt']).map(function (tfdt) {
            var version, result;

            version = tfdt[0];
            result = toUnsigned$1(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);
            if (version === 1) {
              result *= Math.pow(2, 32);
              result += toUnsigned$1(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);
            }
            return result;
          })[0];
          baseTime = baseTime || Infinity;

          // convert base time to seconds
          return baseTime / scale;
        });
      }));

      // return the minimum
      result = Math.min.apply(null, baseTimes);
      return isFinite(result) ? result : 0;
    };

    /**
      * Find the trackIds of the video tracks in this source.
      * Found by parsing the Handler Reference and Track Header Boxes:
      *   moov > trak > mdia > hdlr
      *   moov > trak > tkhd
      *
      * @param {Uint8Array} init - The bytes of the init segment for this source
      * @return {Number[]} A list of trackIds
      *
      * @see ISO-BMFF-12/2015, Section 8.4.3
     **/
    getVideoTrackIds = function getVideoTrackIds(init) {
      var traks = _findBox(init, ['moov', 'trak']);
      var videoTrackIds = [];

      traks.forEach(function (trak) {
        var hdlrs = _findBox(trak, ['mdia', 'hdlr']);
        var tkhds = _findBox(trak, ['tkhd']);

        hdlrs.forEach(function (hdlr, index) {
          var handlerType = parseType(hdlr.subarray(8, 12));
          var tkhd = tkhds[index];
          var view;
          var version;
          var trackId;

          if (handlerType === 'vide') {
            view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);
            version = view.getUint8(0);
            trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);

            videoTrackIds.push(trackId);
          }
        });
      });

      return videoTrackIds;
    };

    var probe = {
      findBox: _findBox,
      parseType: parseType,
      timescale: timescale,
      startTime: startTime,
      videoTrackIds: getVideoTrackIds
    };

    /**
     * mux.js
     *
     * Copyright (c) 2014 Brightcove
     * All rights reserved.
     *
     * A lightweight readable stream implemention that handles event dispatching.
     * Objects that inherit from streams should call init in their constructors.
     */

    var Stream = function Stream() {
      this.init = function () {
        var listeners = {};
        /**
         * Add a listener for a specified event type.
         * @param type {string} the event name
         * @param listener {function} the callback to be invoked when an event of
         * the specified type occurs
         */
        this.on = function (type, listener) {
          if (!listeners[type]) {
            listeners[type] = [];
          }
          listeners[type] = listeners[type].concat(listener);
        };
        /**
         * Remove a listener for a specified event type.
         * @param type {string} the event name
         * @param listener {function} a function previously registered for this
         * type of event through `on`
         */
        this.off = function (type, listener) {
          var index;
          if (!listeners[type]) {
            return false;
          }
          index = listeners[type].indexOf(listener);
          listeners[type] = listeners[type].slice();
          listeners[type].splice(index, 1);
          return index > -1;
        };
        /**
         * Trigger an event of the specified type on this stream. Any additional
         * arguments to this function are passed as parameters to event listeners.
         * @param type {string} the event name
         */
        this.trigger = function (type) {
          var callbacks, i, length, args;
          callbacks = listeners[type];
          if (!callbacks) {
            return;
          }
          // Slicing the arguments on every invocation of this method
          // can add a significant amount of overhead. Avoid the
          // intermediate object creation for the common case of a
          // single callback argument
          if (arguments.length === 2) {
            length = callbacks.length;
            for (i = 0; i < length; ++i) {
              callbacks[i].call(this, arguments[1]);
            }
          } else {
            args = [];
            i = arguments.length;
            for (i = 1; i < arguments.length; ++i) {
              args.push(arguments[i]);
            }
            length = callbacks.length;
            for (i = 0; i < length; ++i) {
              callbacks[i].apply(this, args);
            }
          }
        };
        /**
         * Destroys the stream and cleans up.
         */
        this.dispose = function () {
          listeners = {};
        };
      };
    };

    /**
     * Forwards all `data` events on this stream to the destination stream. The
     * destination stream should provide a method `push` to receive the data
     * events as they arrive.
     * @param destination {stream} the stream that will receive all `data` events
     * @param autoFlush {boolean} if false, we will not call `flush` on the destination
     *                            when the current stream emits a 'done' event
     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
     */
    Stream.prototype.pipe = function (destination) {
      this.on('data', function (data) {
        destination.push(data);
      });

      this.on('done', function (flushSource) {
        destination.flush(flushSource);
      });

      return destination;
    };

    // Default stream functions that are expected to be overridden to perform
    // actual work. These are provided by the prototype as a sort of no-op
    // implementation so that we don't have to check for their existence in the
    // `pipe` function above.
    Stream.prototype.push = function (data) {
      this.trigger('data', data);
    };

    Stream.prototype.flush = function (flushSource) {
      this.trigger('done', flushSource);
    };

    var stream = Stream;

    // Convert an array of nal units into an array of frames with each frame being
    // composed of the nal units that make up that frame
    // Also keep track of cummulative data about the frame from the nal units such
    // as the frame duration, starting pts, etc.
    var groupNalsIntoFrames = function groupNalsIntoFrames(nalUnits) {
      var i,
          currentNal,
          currentFrame = [],
          frames = [];

      currentFrame.byteLength = 0;

      for (i = 0; i < nalUnits.length; i++) {
        currentNal = nalUnits[i];

        // Split on 'aud'-type nal units
        if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {
          // Since the very first nal unit is expected to be an AUD
          // only push to the frames array when currentFrame is not empty
          if (currentFrame.length) {
            currentFrame.duration = currentNal.dts - currentFrame.dts;
            frames.push(currentFrame);
          }
          currentFrame = [currentNal];
          currentFrame.byteLength = currentNal.data.byteLength;
          currentFrame.pts = currentNal.pts;
          currentFrame.dts = currentNal.dts;
        } else {
          // Specifically flag key frames for ease of use later
          if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {
            currentFrame.keyFrame = true;
          }
          currentFrame.duration = currentNal.dts - currentFrame.dts;
          currentFrame.byteLength += currentNal.data.byteLength;
          currentFrame.push(currentNal);
        }
      }

      // For the last frame, use the duration of the previous frame if we
      // have nothing better to go on
      if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {
        currentFrame.duration = frames[frames.length - 1].duration;
      }

      // Push the final frame
      frames.push(currentFrame);
      return frames;
    };

    // Convert an array of frames into an array of Gop with each Gop being composed
    // of the frames that make up that Gop
    // Also keep track of cummulative data about the Gop from the frames such as the
    // Gop duration, starting pts, etc.
    var groupFramesIntoGops = function groupFramesIntoGops(frames) {
      var i,
          currentFrame,
          currentGop = [],
          gops = [];

      // We must pre-set some of the values on the Gop since we
      // keep running totals of these values
      currentGop.byteLength = 0;
      currentGop.nalCount = 0;
      currentGop.duration = 0;
      currentGop.pts = frames[0].pts;
      currentGop.dts = frames[0].dts;

      // store some metadata about all the Gops
      gops.byteLength = 0;
      gops.nalCount = 0;
      gops.duration = 0;
      gops.pts = frames[0].pts;
      gops.dts = frames[0].dts;

      for (i = 0; i < frames.length; i++) {
        currentFrame = frames[i];

        if (currentFrame.keyFrame) {
          // Since the very first frame is expected to be an keyframe
          // only push to the gops array when currentGop is not empty
          if (currentGop.length) {
            gops.push(currentGop);
            gops.byteLength += currentGop.byteLength;
            gops.nalCount += currentGop.nalCount;
            gops.duration += currentGop.duration;
          }

          currentGop = [currentFrame];
          currentGop.nalCount = currentFrame.length;
          currentGop.byteLength = currentFrame.byteLength;
          currentGop.pts = currentFrame.pts;
          currentGop.dts = currentFrame.dts;
          currentGop.duration = currentFrame.duration;
        } else {
          currentGop.duration += currentFrame.duration;
          currentGop.nalCount += currentFrame.length;
          currentGop.byteLength += currentFrame.byteLength;
          currentGop.push(currentFrame);
        }
      }

      if (gops.length && currentGop.duration <= 0) {
        currentGop.duration = gops[gops.length - 1].duration;
      }
      gops.byteLength += currentGop.byteLength;
      gops.nalCount += currentGop.nalCount;
      gops.duration += currentGop.duration;

      // push the final Gop
      gops.push(currentGop);
      return gops;
    };

    /*
     * Search for the first keyframe in the GOPs and throw away all frames
     * until that keyframe. Then extend the duration of the pulled keyframe
     * and pull the PTS and DTS of the keyframe so that it covers the time
     * range of the frames that were disposed.
     *
     * @param {Array} gops video GOPs
     * @returns {Array} modified video GOPs
     */
    var extendFirstKeyFrame = function extendFirstKeyFrame(gops) {
      var currentGop;

      if (!gops[0][0].keyFrame && gops.length > 1) {
        // Remove the first GOP
        currentGop = gops.shift();

        gops.byteLength -= currentGop.byteLength;
        gops.nalCount -= currentGop.nalCount;

        // Extend the first frame of what is now the
        // first gop to cover the time period of the
        // frames we just removed
        gops[0][0].dts = currentGop.dts;
        gops[0][0].pts = currentGop.pts;
        gops[0][0].duration += currentGop.duration;
      }

      return gops;
    };

    /**
     * Default sample object
     * see ISO/IEC 14496-12:2012, section 8.6.4.3
     */
    var createDefaultSample = function createDefaultSample() {
      return {
        size: 0,
        flags: {
          isLeading: 0,
          dependsOn: 1,
          isDependedOn: 0,
          hasRedundancy: 0,
          degradationPriority: 0,
          isNonSyncSample: 1
        }
      };
    };

    /*
     * Collates information from a video frame into an object for eventual
     * entry into an MP4 sample table.
     *
     * @param {Object} frame the video frame
     * @param {Number} dataOffset the byte offset to position the sample
     * @return {Object} object containing sample table info for a frame
     */
    var sampleForFrame = function sampleForFrame(frame, dataOffset) {
      var sample = createDefaultSample();

      sample.dataOffset = dataOffset;
      sample.compositionTimeOffset = frame.pts - frame.dts;
      sample.duration = frame.duration;
      sample.size = 4 * frame.length; // Space for nal unit size
      sample.size += frame.byteLength;

      if (frame.keyFrame) {
        sample.flags.dependsOn = 2;
        sample.flags.isNonSyncSample = 0;
      }

      return sample;
    };

    // generate the track's sample table from an array of gops
    var generateSampleTable = function generateSampleTable(gops, baseDataOffset) {
      var h,
          i,
          sample,
          currentGop,
          currentFrame,
          dataOffset = baseDataOffset || 0,
          samples = [];

      for (h = 0; h < gops.length; h++) {
        currentGop = gops[h];

        for (i = 0; i < currentGop.length; i++) {
          currentFrame = currentGop[i];

          sample = sampleForFrame(currentFrame, dataOffset);

          dataOffset += sample.size;

          samples.push(sample);
        }
      }
      return samples;
    };

    // generate the track's raw mdat data from an array of gops
    var concatenateNalData = function concatenateNalData(gops) {
      var h,
          i,
          j,
          currentGop,
          currentFrame,
          currentNal,
          dataOffset = 0,
          nalsByteLength = gops.byteLength,
          numberOfNals = gops.nalCount,
          totalByteLength = nalsByteLength + 4 * numberOfNals,
          data = new Uint8Array(totalByteLength),
          view = new DataView(data.buffer);

      // For each Gop..
      for (h = 0; h < gops.length; h++) {
        currentGop = gops[h];

        // For each Frame..
        for (i = 0; i < currentGop.length; i++) {
          currentFrame = currentGop[i];

          // For each NAL..
          for (j = 0; j < currentFrame.length; j++) {
            currentNal = currentFrame[j];

            view.setUint32(dataOffset, currentNal.data.byteLength);
            dataOffset += 4;
            data.set(currentNal.data, dataOffset);
            dataOffset += currentNal.data.byteLength;
          }
        }
      }
      return data;
    };

    var frameUtils = {
      groupNalsIntoFrames: groupNalsIntoFrames,
      groupFramesIntoGops: groupFramesIntoGops,
      extendFirstKeyFrame: extendFirstKeyFrame,
      generateSampleTable: generateSampleTable,
      concatenateNalData: concatenateNalData
    };

    var ONE_SECOND_IN_TS = 90000; // 90kHz clock

    /**
     * Store information about the start and end of the track and the
     * duration for each frame/sample we process in order to calculate
     * the baseMediaDecodeTime
     */
    var collectDtsInfo = function collectDtsInfo(track, data) {
      if (typeof data.pts === 'number') {
        if (track.timelineStartInfo.pts === undefined) {
          track.timelineStartInfo.pts = data.pts;
        }

        if (track.minSegmentPts === undefined) {
          track.minSegmentPts = data.pts;
        } else {
          track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);
        }

        if (track.maxSegmentPts === undefined) {
          track.maxSegmentPts = data.pts;
        } else {
          track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);
        }
      }

      if (typeof data.dts === 'number') {
        if (track.timelineStartInfo.dts === undefined) {
          track.timelineStartInfo.dts = data.dts;
        }

        if (track.minSegmentDts === undefined) {
          track.minSegmentDts = data.dts;
        } else {
          track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);
        }

        if (track.maxSegmentDts === undefined) {
          track.maxSegmentDts = data.dts;
        } else {
          track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);
        }
      }
    };

    /**
     * Clear values used to calculate the baseMediaDecodeTime between
     * tracks
     */
    var clearDtsInfo = function clearDtsInfo(track) {
      delete track.minSegmentDts;
      delete track.maxSegmentDts;
      delete track.minSegmentPts;
      delete track.maxSegmentPts;
    };

    /**
     * Calculate the track's baseMediaDecodeTime based on the earliest
     * DTS the transmuxer has ever seen and the minimum DTS for the
     * current track
     * @param track {object} track metadata configuration
     * @param keepOriginalTimestamps {boolean} If true, keep the timestamps
     *        in the source; false to adjust the first segment to start at 0.
     */
    var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime(track, keepOriginalTimestamps) {
      var baseMediaDecodeTime,
          scale,
          minSegmentDts = track.minSegmentDts;

      // Optionally adjust the time so the first segment starts at zero.
      if (!keepOriginalTimestamps) {
        minSegmentDts -= track.timelineStartInfo.dts;
      }

      // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where
      // we want the start of the first segment to be placed
      baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;

      // Add to that the distance this segment is from the very first
      baseMediaDecodeTime += minSegmentDts;

      // baseMediaDecodeTime must not become negative
      baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);

      if (track.type === 'audio') {
        // Audio has a different clock equal to the sampling_rate so we need to
        // scale the PTS values into the clock rate of the track
        scale = track.samplerate / ONE_SECOND_IN_TS;
        baseMediaDecodeTime *= scale;
        baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);
      }

      return baseMediaDecodeTime;
    };

    var trackDecodeInfo = {
      clearDtsInfo: clearDtsInfo,
      calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,
      collectDtsInfo: collectDtsInfo
    };

    /**
     * mux.js
     *
     * Copyright (c) 2015 Brightcove
     * All rights reserved.
     *
     * Reads in-band caption information from a video elementary
     * stream. Captions must follow the CEA-708 standard for injection
     * into an MPEG-2 transport streams.
     * @see https://en.wikipedia.org/wiki/CEA-708
     * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf
     */

    // Supplemental enhancement information (SEI) NAL units have a
    // payload type field to indicate how they are to be
    // interpreted. CEAS-708 caption content is always transmitted with
    // payload type 0x04.

    var USER_DATA_REGISTERED_ITU_T_T35 = 4,
        RBSP_TRAILING_BITS = 128;

    /**
      * Parse a supplemental enhancement information (SEI) NAL unit.
      * Stops parsing once a message of type ITU T T35 has been found.
      *
      * @param bytes {Uint8Array} the bytes of a SEI NAL unit
      * @return {object} the parsed SEI payload
      * @see Rec. ITU-T H.264, 7.3.2.3.1
      */
    var parseSei = function parseSei(bytes) {
      var i = 0,
          result = {
        payloadType: -1,
        payloadSize: 0
      },
          payloadType = 0,
          payloadSize = 0;

      // go through the sei_rbsp parsing each each individual sei_message
      while (i < bytes.byteLength) {
        // stop once we have hit the end of the sei_rbsp
        if (bytes[i] === RBSP_TRAILING_BITS) {
          break;
        }

        // Parse payload type
        while (bytes[i] === 0xFF) {
          payloadType += 255;
          i++;
        }
        payloadType += bytes[i++];

        // Parse payload size
        while (bytes[i] === 0xFF) {
          payloadSize += 255;
          i++;
        }
        payloadSize += bytes[i++];

        // this sei_message is a 608/708 caption so save it and break
        // there can only ever be one caption message in a frame's sei
        if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {
          result.payloadType = payloadType;
          result.payloadSize = payloadSize;
          result.payload = bytes.subarray(i, i + payloadSize);
          break;
        }

        // skip the payload and parse the next message
        i += payloadSize;
        payloadType = 0;
        payloadSize = 0;
      }

      return result;
    };

    // see ANSI/SCTE 128-1 (2013), section 8.1
    var parseUserData = function parseUserData(sei) {
      // itu_t_t35_contry_code must be 181 (United States) for
      // captions
      if (sei.payload[0] !== 181) {
        return null;
      }

      // itu_t_t35_provider_code should be 49 (ATSC) for captions
      if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {
        return null;
      }

      // the user_identifier should be "GA94" to indicate ATSC1 data
      if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {
        return null;
      }

      // finally, user_data_type_code should be 0x03 for caption data
      if (sei.payload[7] !== 0x03) {
        return null;
      }

      // return the user_data_type_structure and strip the trailing
      // marker bits
      return sei.payload.subarray(8, sei.payload.length - 1);
    };

    // see CEA-708-D, section 4.4
    var parseCaptionPackets = function parseCaptionPackets(pts, userData) {
      var results = [],
          i,
          count,
          offset,
          data;

      // if this is just filler, return immediately
      if (!(userData[0] & 0x40)) {
        return results;
      }

      // parse out the cc_data_1 and cc_data_2 fields
      count = userData[0] & 0x1f;
      for (i = 0; i < count; i++) {
        offset = i * 3;
        data = {
          type: userData[offset + 2] & 0x03,
          pts: pts
        };

        // capture cc data when cc_valid is 1
        if (userData[offset + 2] & 0x04) {
          data.ccData = userData[offset + 3] << 8 | userData[offset + 4];
          results.push(data);
        }
      }
      return results;
    };

    var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {
      var length = data.byteLength,
          emulationPreventionBytesPositions = [],
          i = 1,
          newLength,
          newData;

      // Find all `Emulation Prevention Bytes`
      while (i < length - 2) {
        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
          emulationPreventionBytesPositions.push(i + 2);
          i += 2;
        } else {
          i++;
        }
      }

      // If no Emulation Prevention Bytes were found just return the original
      // array
      if (emulationPreventionBytesPositions.length === 0) {
        return data;
      }

      // Create a new array to hold the NAL unit data
      newLength = length - emulationPreventionBytesPositions.length;
      newData = new Uint8Array(newLength);
      var sourceIndex = 0;

      for (i = 0; i < newLength; sourceIndex++, i++) {
        if (sourceIndex === emulationPreventionBytesPositions[0]) {
          // Skip this byte
          sourceIndex++;
          // Remove this position index
          emulationPreventionBytesPositions.shift();
        }
        newData[i] = data[sourceIndex];
      }

      return newData;
    };

    // exports
    var captionPacketParser = {
      parseSei: parseSei,
      parseUserData: parseUserData,
      parseCaptionPackets: parseCaptionPackets,
      discardEmulationPreventionBytes: discardEmulationPreventionBytes,
      USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35
    };

    // -----------------
    // Link To Transport
    // -----------------


    var CaptionStream = function CaptionStream() {

      CaptionStream.prototype.init.call(this);

      this.captionPackets_ = [];

      this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define
      new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define
      new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define
      new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define
      ];

      this.reset();

      // forward data and done events from CCs to this CaptionStream
      this.ccStreams_.forEach(function (cc) {
        cc.on('data', this.trigger.bind(this, 'data'));
        cc.on('done', this.trigger.bind(this, 'done'));
      }, this);
    };

    CaptionStream.prototype = new stream();
    CaptionStream.prototype.push = function (event) {
      var sei, userData, newCaptionPackets;

      // only examine SEI NALs
      if (event.nalUnitType !== 'sei_rbsp') {
        return;
      }

      // parse the sei
      sei = captionPacketParser.parseSei(event.escapedRBSP);

      // ignore everything but user_data_registered_itu_t_t35
      if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {
        return;
      }

      // parse out the user data payload
      userData = captionPacketParser.parseUserData(sei);

      // ignore unrecognized userData
      if (!userData) {
        return;
      }

      // Sometimes, the same segment # will be downloaded twice. To stop the
      // caption data from being processed twice, we track the latest dts we've
      // received and ignore everything with a dts before that. However, since
      // data for a specific dts can be split across packets on either side of
      // a segment boundary, we need to make sure we *don't* ignore the packets
      // from the *next* segment that have dts === this.latestDts_. By constantly
      // tracking the number of packets received with dts === this.latestDts_, we
      // know how many should be ignored once we start receiving duplicates.
      if (event.dts < this.latestDts_) {
        // We've started getting older data, so set the flag.
        this.ignoreNextEqualDts_ = true;
        return;
      } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
        this.numSameDts_--;
        if (!this.numSameDts_) {
          // We've received the last duplicate packet, time to start processing again
          this.ignoreNextEqualDts_ = false;
        }
        return;
      }

      // parse out CC data packets and save them for later
      newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);
      this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);
      if (this.latestDts_ !== event.dts) {
        this.numSameDts_ = 0;
      }
      this.numSameDts_++;
      this.latestDts_ = event.dts;
    };

    CaptionStream.prototype.flush = function () {
      // make sure we actually parsed captions before proceeding
      if (!this.captionPackets_.length) {
        this.ccStreams_.forEach(function (cc) {
          cc.flush();
        }, this);
        return;
      }

      // In Chrome, the Array#sort function is not stable so add a
      // presortIndex that we can use to ensure we get a stable-sort
      this.captionPackets_.forEach(function (elem, idx) {
        elem.presortIndex = idx;
      });

      // sort caption byte-pairs based on their PTS values
      this.captionPackets_.sort(function (a, b) {
        if (a.pts === b.pts) {
          return a.presortIndex - b.presortIndex;
        }
        return a.pts - b.pts;
      });

      this.captionPackets_.forEach(function (packet) {
        if (packet.type < 2) {
          // Dispatch packet to the right Cea608Stream
          this.dispatchCea608Packet(packet);
        }
        // this is where an 'else' would go for a dispatching packets
        // to a theoretical Cea708Stream that handles SERVICEn data
      }, this);

      this.captionPackets_.length = 0;
      this.ccStreams_.forEach(function (cc) {
        cc.flush();
      }, this);
      return;
    };

    CaptionStream.prototype.reset = function () {
      this.latestDts_ = null;
      this.ignoreNextEqualDts_ = false;
      this.numSameDts_ = 0;
      this.activeCea608Channel_ = [null, null];
      this.ccStreams_.forEach(function (ccStream) {
        ccStream.reset();
      });
    };

    CaptionStream.prototype.dispatchCea608Packet = function (packet) {
      // NOTE: packet.type is the CEA608 field
      if (this.setsChannel1Active(packet)) {
        this.activeCea608Channel_[packet.type] = 0;
      } else if (this.setsChannel2Active(packet)) {
        this.activeCea608Channel_[packet.type] = 1;
      }
      if (this.activeCea608Channel_[packet.type] === null) {
        // If we haven't received anything to set the active channel, discard the
        // data; we don't want jumbled captions
        return;
      }
      this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);
    };

    CaptionStream.prototype.setsChannel1Active = function (packet) {
      return (packet.ccData & 0x7800) === 0x1000;
    };
    CaptionStream.prototype.setsChannel2Active = function (packet) {
      return (packet.ccData & 0x7800) === 0x1800;
    };

    // ----------------------
    // Session to Application
    // ----------------------

    // This hash maps non-ASCII, special, and extended character codes to their
    // proper Unicode equivalent. The first keys that are only a single byte
    // are the non-standard ASCII characters, which simply map the CEA608 byte
    // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608
    // character codes, but have their MSB bitmasked with 0x03 so that a lookup
    // can be performed regardless of the field and data channel on which the
    // character code was received.
    var CHARACTER_TRANSLATION = {
      0x2a: 0xe1, // á
      0x5c: 0xe9, // é
      0x5e: 0xed, // í
      0x5f: 0xf3, // ó
      0x60: 0xfa, // ú
      0x7b: 0xe7, // ç
      0x7c: 0xf7, // ÷
      0x7d: 0xd1, // Ñ
      0x7e: 0xf1, // ñ
      0x7f: 0x2588, // █
      0x0130: 0xae, // ®
      0x0131: 0xb0, // °
      0x0132: 0xbd, // ½
      0x0133: 0xbf, // ¿
      0x0134: 0x2122, // ™
      0x0135: 0xa2, // ¢
      0x0136: 0xa3, // £
      0x0137: 0x266a, // ♪
      0x0138: 0xe0, // à
      0x0139: 0xa0, //
      0x013a: 0xe8, // è
      0x013b: 0xe2, // â
      0x013c: 0xea, // ê
      0x013d: 0xee, // î
      0x013e: 0xf4, // ô
      0x013f: 0xfb, // û
      0x0220: 0xc1, // Á
      0x0221: 0xc9, // É
      0x0222: 0xd3, // Ó
      0x0223: 0xda, // Ú
      0x0224: 0xdc, // Ü
      0x0225: 0xfc, // ü
      0x0226: 0x2018, // ‘
      0x0227: 0xa1, // ¡
      0x0228: 0x2a, // *
      0x0229: 0x27, // '
      0x022a: 0x2014, // —
      0x022b: 0xa9, // ©
      0x022c: 0x2120, // ℠
      0x022d: 0x2022, // •
      0x022e: 0x201c, // “
      0x022f: 0x201d, // ”
      0x0230: 0xc0, // À
      0x0231: 0xc2, // Â
      0x0232: 0xc7, // Ç
      0x0233: 0xc8, // È
      0x0234: 0xca, // Ê
      0x0235: 0xcb, // Ë
      0x0236: 0xeb, // ë
      0x0237: 0xce, // Î
      0x0238: 0xcf, // Ï
      0x0239: 0xef, // ï
      0x023a: 0xd4, // Ô
      0x023b: 0xd9, // Ù
      0x023c: 0xf9, // ù
      0x023d: 0xdb, // Û
      0x023e: 0xab, // «
      0x023f: 0xbb, // »
      0x0320: 0xc3, // Ã
      0x0321: 0xe3, // ã
      0x0322: 0xcd, // Í
      0x0323: 0xcc, // Ì
      0x0324: 0xec, // ì
      0x0325: 0xd2, // Ò
      0x0326: 0xf2, // ò
      0x0327: 0xd5, // Õ
      0x0328: 0xf5, // õ
      0x0329: 0x7b, // {
      0x032a: 0x7d, // }
      0x032b: 0x5c, // \
      0x032c: 0x5e, // ^
      0x032d: 0x5f, // _
      0x032e: 0x7c, // |
      0x032f: 0x7e, // ~
      0x0330: 0xc4, // Ä
      0x0331: 0xe4, // ä
      0x0332: 0xd6, // Ö
      0x0333: 0xf6, // ö
      0x0334: 0xdf, // ß
      0x0335: 0xa5, // ¥
      0x0336: 0xa4, // ¤
      0x0337: 0x2502, // │
      0x0338: 0xc5, // Å
      0x0339: 0xe5, // å
      0x033a: 0xd8, // Ø
      0x033b: 0xf8, // ø
      0x033c: 0x250c, // ┌
      0x033d: 0x2510, // ┐
      0x033e: 0x2514, // └
      0x033f: 0x2518 // ┘
    };

    var getCharFromCode = function getCharFromCode(code) {
      if (code === null) {
        return '';
      }
      code = CHARACTER_TRANSLATION[code] || code;
      return String.fromCharCode(code);
    };

    // the index of the last row in a CEA-608 display buffer
    var BOTTOM_ROW = 14;

    // This array is used for mapping PACs -> row #, since there's no way of
    // getting it through bit logic.
    var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];

    // CEA-608 captions are rendered onto a 34x15 matrix of character
    // cells. The "bottom" row is the last element in the outer array.
    var createDisplayBuffer = function createDisplayBuffer() {
      var result = [],
          i = BOTTOM_ROW + 1;
      while (i--) {
        result.push('');
      }
      return result;
    };

    var Cea608Stream = function Cea608Stream(field, dataChannel) {
      Cea608Stream.prototype.init.call(this);

      this.field_ = field || 0;
      this.dataChannel_ = dataChannel || 0;

      this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);

      this.setConstants();
      this.reset();

      this.push = function (packet) {
        var data, swap, char0, char1, text;
        // remove the parity bits
        data = packet.ccData & 0x7f7f;

        // ignore duplicate control codes; the spec demands they're sent twice
        if (data === this.lastControlCode_) {
          this.lastControlCode_ = null;
          return;
        }

        // Store control codes
        if ((data & 0xf000) === 0x1000) {
          this.lastControlCode_ = data;
        } else if (data !== this.PADDING_) {
          this.lastControlCode_ = null;
        }

        char0 = data >>> 8;
        char1 = data & 0xff;

        if (data === this.PADDING_) {
          return;
        } else if (data === this.RESUME_CAPTION_LOADING_) {
          this.mode_ = 'popOn';
        } else if (data === this.END_OF_CAPTION_) {
          // If an EOC is received while in paint-on mode, the displayed caption
          // text should be swapped to non-displayed memory as if it was a pop-on
          // caption. Because of that, we should explicitly switch back to pop-on
          // mode
          this.mode_ = 'popOn';
          this.clearFormatting(packet.pts);
          // if a caption was being displayed, it's gone now
          this.flushDisplayed(packet.pts);

          // flip memory
          swap = this.displayed_;
          this.displayed_ = this.nonDisplayed_;
          this.nonDisplayed_ = swap;

          // start measuring the time to display the caption
          this.startPts_ = packet.pts;
        } else if (data === this.ROLL_UP_2_ROWS_) {
          this.rollUpRows_ = 2;
          this.setRollUp(packet.pts);
        } else if (data === this.ROLL_UP_3_ROWS_) {
          this.rollUpRows_ = 3;
          this.setRollUp(packet.pts);
        } else if (data === this.ROLL_UP_4_ROWS_) {
          this.rollUpRows_ = 4;
          this.setRollUp(packet.pts);
        } else if (data === this.CARRIAGE_RETURN_) {
          this.clearFormatting(packet.pts);
          this.flushDisplayed(packet.pts);
          this.shiftRowsUp_();
          this.startPts_ = packet.pts;
        } else if (data === this.BACKSPACE_) {
          if (this.mode_ === 'popOn') {
            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
          } else {
            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
          }
        } else if (data === this.ERASE_DISPLAYED_MEMORY_) {
          this.flushDisplayed(packet.pts);
          this.displayed_ = createDisplayBuffer();
        } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {
          this.nonDisplayed_ = createDisplayBuffer();
        } else if (data === this.RESUME_DIRECT_CAPTIONING_) {
          if (this.mode_ !== 'paintOn') {
            // NOTE: This should be removed when proper caption positioning is
            // implemented
            this.flushDisplayed(packet.pts);
            this.displayed_ = createDisplayBuffer();
          }
          this.mode_ = 'paintOn';
          this.startPts_ = packet.pts;

          // Append special characters to caption text
        } else if (this.isSpecialCharacter(char0, char1)) {
          // Bitmask char0 so that we can apply character transformations
          // regardless of field and data channel.
          // Then byte-shift to the left and OR with char1 so we can pass the
          // entire character code to `getCharFromCode`.
          char0 = (char0 & 0x03) << 8;
          text = getCharFromCode(char0 | char1);
          this[this.mode_](packet.pts, text);
          this.column_++;

          // Append extended characters to caption text
        } else if (this.isExtCharacter(char0, char1)) {
          // Extended characters always follow their "non-extended" equivalents.
          // IE if a "è" is desired, you'll always receive "eè"; non-compliant
          // decoders are supposed to drop the "è", while compliant decoders
          // backspace the "e" and insert "è".

          // Delete the previous character
          if (this.mode_ === 'popOn') {
            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
          } else {
            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
          }

          // Bitmask char0 so that we can apply character transformations
          // regardless of field and data channel.
          // Then byte-shift to the left and OR with char1 so we can pass the
          // entire character code to `getCharFromCode`.
          char0 = (char0 & 0x03) << 8;
          text = getCharFromCode(char0 | char1);
          this[this.mode_](packet.pts, text);
          this.column_++;

          // Process mid-row codes
        } else if (this.isMidRowCode(char0, char1)) {
          // Attributes are not additive, so clear all formatting
          this.clearFormatting(packet.pts);

          // According to the standard, mid-row codes
          // should be replaced with spaces, so add one now
          this[this.mode_](packet.pts, ' ');
          this.column_++;

          if ((char1 & 0xe) === 0xe) {
            this.addFormatting(packet.pts, ['i']);
          }

          if ((char1 & 0x1) === 0x1) {
            this.addFormatting(packet.pts, ['u']);
          }

          // Detect offset control codes and adjust cursor
        } else if (this.isOffsetControlCode(char0, char1)) {
          // Cursor position is set by indent PAC (see below) in 4-column
          // increments, with an additional offset code of 1-3 to reach any
          // of the 32 columns specified by CEA-608. So all we need to do
          // here is increment the column cursor by the given offset.
          this.column_ += char1 & 0x03;

          // Detect PACs (Preamble Address Codes)
        } else if (this.isPAC(char0, char1)) {

          // There's no logic for PAC -> row mapping, so we have to just
          // find the row code in an array and use its index :(
          var row = ROWS.indexOf(data & 0x1f20);

          // Configure the caption window if we're in roll-up mode
          if (this.mode_ === 'rollUp') {
            this.setRollUp(packet.pts, row);
          }

          if (row !== this.row_) {
            // formatting is only persistent for current row
            this.clearFormatting(packet.pts);
            this.row_ = row;
          }
          // All PACs can apply underline, so detect and apply
          // (All odd-numbered second bytes set underline)
          if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {
            this.addFormatting(packet.pts, ['u']);
          }

          if ((data & 0x10) === 0x10) {
            // We've got an indent level code. Each successive even number
            // increments the column cursor by 4, so we can get the desired
            // column position by bit-shifting to the right (to get n/2)
            // and multiplying by 4.
            this.column_ = ((data & 0xe) >> 1) * 4;
          }

          if (this.isColorPAC(char1)) {
            // it's a color code, though we only support white, which
            // can be either normal or italicized. white italics can be
            // either 0x4e or 0x6e depending on the row, so we just
            // bitwise-and with 0xe to see if italics should be turned on
            if ((char1 & 0xe) === 0xe) {
              this.addFormatting(packet.pts, ['i']);
            }
          }

          // We have a normal character in char0, and possibly one in char1
        } else if (this.isNormalChar(char0)) {
          if (char1 === 0x00) {
            char1 = null;
          }
          text = getCharFromCode(char0);
          text += getCharFromCode(char1);
          this[this.mode_](packet.pts, text);
          this.column_ += text.length;
        } // finish data processing
      };
    };
    Cea608Stream.prototype = new stream();
    // Trigger a cue point that captures the current state of the
    // display buffer
    Cea608Stream.prototype.flushDisplayed = function (pts) {
      var content = this.displayed_
      // remove spaces from the start and end of the string
      .map(function (row) {
        return row.trim();
      })
      // combine all text rows to display in one cue
      .join('\n')
      // and remove blank rows from the start and end, but not the middle
      .replace(/^\n+|\n+$/g, '');

      if (content.length) {
        this.trigger('data', {
          startPts: this.startPts_,
          endPts: pts,
          text: content,
          stream: this.name_
        });
      }
    };

    /**
     * Zero out the data, used for startup and on seek
     */
    Cea608Stream.prototype.reset = function () {
      this.mode_ = 'popOn';
      // When in roll-up mode, the index of the last row that will
      // actually display captions. If a caption is shifted to a row
      // with a lower index than this, it is cleared from the display
      // buffer
      this.topRow_ = 0;
      this.startPts_ = 0;
      this.displayed_ = createDisplayBuffer();
      this.nonDisplayed_ = createDisplayBuffer();
      this.lastControlCode_ = null;

      // Track row and column for proper line-breaking and spacing
      this.column_ = 0;
      this.row_ = BOTTOM_ROW;
      this.rollUpRows_ = 2;

      // This variable holds currently-applied formatting
      this.formatting_ = [];
    };

    /**
     * Sets up control code and related constants for this instance
     */
    Cea608Stream.prototype.setConstants = function () {
      // The following attributes have these uses:
      // ext_ :    char0 for mid-row codes, and the base for extended
      //           chars (ext_+0, ext_+1, and ext_+2 are char0s for
      //           extended codes)
      // control_: char0 for control codes, except byte-shifted to the
      //           left so that we can do this.control_ | CONTROL_CODE
      // offset_:  char0 for tab offset codes
      //
      // It's also worth noting that control codes, and _only_ control codes,
      // differ between field 1 and field2. Field 2 control codes are always
      // their field 1 value plus 1. That's why there's the "| field" on the
      // control value.
      if (this.dataChannel_ === 0) {
        this.BASE_ = 0x10;
        this.EXT_ = 0x11;
        this.CONTROL_ = (0x14 | this.field_) << 8;
        this.OFFSET_ = 0x17;
      } else if (this.dataChannel_ === 1) {
        this.BASE_ = 0x18;
        this.EXT_ = 0x19;
        this.CONTROL_ = (0x1c | this.field_) << 8;
        this.OFFSET_ = 0x1f;
      }

      // Constants for the LSByte command codes recognized by Cea608Stream. This
      // list is not exhaustive. For a more comprehensive listing and semantics see
      // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf
      // Padding
      this.PADDING_ = 0x0000;
      // Pop-on Mode
      this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;
      this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f;
      // Roll-up Mode
      this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;
      this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;
      this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;
      this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d;
      // paint-on mode
      this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29;
      // Erasure
      this.BACKSPACE_ = this.CONTROL_ | 0x21;
      this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;
      this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;
    };

    /**
     * Detects if the 2-byte packet data is a special character
     *
     * Special characters have a second byte in the range 0x30 to 0x3f,
     * with the first byte being 0x11 (for data channel 1) or 0x19 (for
     * data channel 2).
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are an special character
     */
    Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {
      return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;
    };

    /**
     * Detects if the 2-byte packet data is an extended character
     *
     * Extended characters have a second byte in the range 0x20 to 0x3f,
     * with the first byte being 0x12 or 0x13 (for data channel 1) or
     * 0x1a or 0x1b (for data channel 2).
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are an extended character
     */
    Cea608Stream.prototype.isExtCharacter = function (char0, char1) {
      return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;
    };

    /**
     * Detects if the 2-byte packet is a mid-row code
     *
     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with
     * the first byte being 0x11 (for data channel 1) or 0x19 (for data
     * channel 2).
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are a mid-row code
     */
    Cea608Stream.prototype.isMidRowCode = function (char0, char1) {
      return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;
    };

    /**
     * Detects if the 2-byte packet is an offset control code
     *
     * Offset control codes have a second byte in the range 0x21 to 0x23,
     * with the first byte being 0x17 (for data channel 1) or 0x1f (for
     * data channel 2).
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are an offset control code
     */
    Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {
      return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;
    };

    /**
     * Detects if the 2-byte packet is a Preamble Address Code
     *
     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)
     * or 0x18 to 0x1f (for data channel 2), with the second byte in the
     * range 0x40 to 0x7f.
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are a PAC
     */
    Cea608Stream.prototype.isPAC = function (char0, char1) {
      return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;
    };

    /**
     * Detects if a packet's second byte is in the range of a PAC color code
     *
     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or
     * 0x60 to 0x6f.
     *
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the byte is a color PAC
     */
    Cea608Stream.prototype.isColorPAC = function (char1) {
      return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;
    };

    /**
     * Detects if a single byte is in the range of a normal character
     *
     * Normal text bytes are in the range 0x20 to 0x7f.
     *
     * @param  {Integer} char  The byte
     * @return {Boolean}       Whether the byte is a normal character
     */
    Cea608Stream.prototype.isNormalChar = function (char) {
      return char >= 0x20 && char <= 0x7f;
    };

    /**
     * Configures roll-up
     *
     * @param  {Integer} pts         Current PTS
     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to
     *                               a new position
     */
    Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {
      // Reset the base row to the bottom row when switching modes
      if (this.mode_ !== 'rollUp') {
        this.row_ = BOTTOM_ROW;
        this.mode_ = 'rollUp';
        // Spec says to wipe memories when switching to roll-up
        this.flushDisplayed(pts);
        this.nonDisplayed_ = createDisplayBuffer();
        this.displayed_ = createDisplayBuffer();
      }

      if (newBaseRow !== undefined && newBaseRow !== this.row_) {
        // move currently displayed captions (up or down) to the new base row
        for (var i = 0; i < this.rollUpRows_; i++) {
          this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];
          this.displayed_[this.row_ - i] = '';
        }
      }

      if (newBaseRow === undefined) {
        newBaseRow = this.row_;
      }
      this.topRow_ = newBaseRow - this.rollUpRows_ + 1;
    };

    // Adds the opening HTML tag for the passed character to the caption text,
    // and keeps track of it for later closing
    Cea608Stream.prototype.addFormatting = function (pts, format) {
      this.formatting_ = this.formatting_.concat(format);
      var text = format.reduce(function (text, format) {
        return text + '<' + format + '>';
      }, '');
      this[this.mode_](pts, text);
    };

    // Adds HTML closing tags for current formatting to caption text and
    // clears remembered formatting
    Cea608Stream.prototype.clearFormatting = function (pts) {
      if (!this.formatting_.length) {
        return;
      }
      var text = this.formatting_.reverse().reduce(function (text, format) {
        return text + '</' + format + '>';
      }, '');
      this.formatting_ = [];
      this[this.mode_](pts, text);
    };

    // Mode Implementations
    Cea608Stream.prototype.popOn = function (pts, text) {
      var baseRow = this.nonDisplayed_[this.row_];

      // buffer characters
      baseRow += text;
      this.nonDisplayed_[this.row_] = baseRow;
    };

    Cea608Stream.prototype.rollUp = function (pts, text) {
      var baseRow = this.displayed_[this.row_];

      baseRow += text;
      this.displayed_[this.row_] = baseRow;
    };

    Cea608Stream.prototype.shiftRowsUp_ = function () {
      var i;
      // clear out inactive rows
      for (i = 0; i < this.topRow_; i++) {
        this.displayed_[i] = '';
      }
      for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {
        this.displayed_[i] = '';
      }
      // shift displayed rows up
      for (i = this.topRow_; i < this.row_; i++) {
        this.displayed_[i] = this.displayed_[i + 1];
      }
      // clear out the bottom row
      this.displayed_[this.row_] = '';
    };

    Cea608Stream.prototype.paintOn = function (pts, text) {
      var baseRow = this.displayed_[this.row_];

      baseRow += text;
      this.displayed_[this.row_] = baseRow;
    };

    // exports
    var captionStream = {
      CaptionStream: CaptionStream,
      Cea608Stream: Cea608Stream
    };

    var streamTypes = {
      H264_STREAM_TYPE: 0x1B,
      ADTS_STREAM_TYPE: 0x0F,
      METADATA_STREAM_TYPE: 0x15
    };

    var MAX_TS = 8589934592;

    var RO_THRESH = 4294967296;

    var handleRollover = function handleRollover(value, reference) {
      var direction = 1;

      if (value > reference) {
        // If the current timestamp value is greater than our reference timestamp and we detect a
        // timestamp rollover, this means the roll over is happening in the opposite direction.
        // Example scenario: Enter a long stream/video just after a rollover occurred. The reference
        // point will be set to a small number, e.g. 1. The user then seeks backwards over the
        // rollover point. In loading this segment, the timestamp values will be very large,
        // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust
        // the time stamp to be `value - 2^33`.
        direction = -1;
      }

      // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will
      // cause an incorrect adjustment.
      while (Math.abs(reference - value) > RO_THRESH) {
        value += direction * MAX_TS;
      }

      return value;
    };

    var TimestampRolloverStream = function TimestampRolloverStream(type) {
      var lastDTS, referenceDTS;

      TimestampRolloverStream.prototype.init.call(this);

      this.type_ = type;

      this.push = function (data) {
        if (data.type !== this.type_) {
          return;
        }

        if (referenceDTS === undefined) {
          referenceDTS = data.dts;
        }

        data.dts = handleRollover(data.dts, referenceDTS);
        data.pts = handleRollover(data.pts, referenceDTS);

        lastDTS = data.dts;

        this.trigger('data', data);
      };

      this.flush = function () {
        referenceDTS = lastDTS;
        this.trigger('done');
      };

      this.discontinuity = function () {
        referenceDTS = void 0;
        lastDTS = void 0;
      };
    };

    TimestampRolloverStream.prototype = new stream();

    var timestampRolloverStream = {
      TimestampRolloverStream: TimestampRolloverStream,
      handleRollover: handleRollover
    };

    var percentEncode = function percentEncode(bytes, start, end) {
      var i,
          result = '';
      for (i = start; i < end; i++) {
        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);
      }
      return result;
    },


    // return the string representation of the specified byte range,
    // interpreted as UTf-8.
    parseUtf8 = function parseUtf8(bytes, start, end) {
      return decodeURIComponent(percentEncode(bytes, start, end));
    },


    // return the string representation of the specified byte range,
    // interpreted as ISO-8859-1.
    parseIso88591 = function parseIso88591(bytes, start, end) {
      return unescape(percentEncode(bytes, start, end)); // jshint ignore:line
    },
        parseSyncSafeInteger = function parseSyncSafeInteger(data) {
      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
    },
        tagParsers = {
      TXXX: function TXXX(tag) {
        var i;
        if (tag.data[0] !== 3) {
          // ignore frames with unrecognized character encodings
          return;
        }

        for (i = 1; i < tag.data.length; i++) {
          if (tag.data[i] === 0) {
            // parse the text fields
            tag.description = parseUtf8(tag.data, 1, i);
            // do not include the null terminator in the tag value
            tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\0*$/, '');
            break;
          }
        }
        tag.data = tag.value;
      },
      WXXX: function WXXX(tag) {
        var i;
        if (tag.data[0] !== 3) {
          // ignore frames with unrecognized character encodings
          return;
        }

        for (i = 1; i < tag.data.length; i++) {
          if (tag.data[i] === 0) {
            // parse the description and URL fields
            tag.description = parseUtf8(tag.data, 1, i);
            tag.url = parseUtf8(tag.data, i + 1, tag.data.length);
            break;
          }
        }
      },
      PRIV: function PRIV(tag) {
        var i;

        for (i = 0; i < tag.data.length; i++) {
          if (tag.data[i] === 0) {
            // parse the description and URL fields
            tag.owner = parseIso88591(tag.data, 0, i);
            break;
          }
        }
        tag.privateData = tag.data.subarray(i + 1);
        tag.data = tag.privateData;
      }
    },
        _MetadataStream;

    _MetadataStream = function MetadataStream(options) {
      var settings = {
        debug: !!(options && options.debug),

        // the bytes of the program-level descriptor field in MP2T
        // see ISO/IEC 13818-1:2013 (E), section 2.6 "Program and
        // program element descriptors"
        descriptor: options && options.descriptor
      },


      // the total size in bytes of the ID3 tag being parsed
      tagSize = 0,


      // tag data that is not complete enough to be parsed
      buffer = [],


      // the total number of bytes currently in the buffer
      bufferSize = 0,
          i;

      _MetadataStream.prototype.init.call(this);

      // calculate the text track in-band metadata track dispatch type
      // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track
      this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);
      if (settings.descriptor) {
        for (i = 0; i < settings.descriptor.length; i++) {
          this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);
        }
      }

      this.push = function (chunk) {
        var tag, frameStart, frameSize, frame, i, frameHeader;
        if (chunk.type !== 'timed-metadata') {
          return;
        }

        // if data_alignment_indicator is set in the PES header,
        // we must have the start of a new ID3 tag. Assume anything
        // remaining in the buffer was malformed and throw it out
        if (chunk.dataAlignmentIndicator) {
          bufferSize = 0;
          buffer.length = 0;
        }

        // ignore events that don't look like ID3 data
        if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {
          if (settings.debug) {
            // eslint-disable-next-line no-console
            console.log('Skipping unrecognized metadata packet');
          }
          return;
        }

        // add this chunk to the data we've collected so far

        buffer.push(chunk);
        bufferSize += chunk.data.byteLength;

        // grab the size of the entire frame from the ID3 header
        if (buffer.length === 1) {
          // the frame size is transmitted as a 28-bit integer in the
          // last four bytes of the ID3 header.
          // The most significant bit of each byte is dropped and the
          // results concatenated to recover the actual value.
          tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));

          // ID3 reports the tag size excluding the header but it's more
          // convenient for our comparisons to include it
          tagSize += 10;
        }

        // if the entire frame has not arrived, wait for more data
        if (bufferSize < tagSize) {
          return;
        }

        // collect the entire frame so it can be parsed
        tag = {
          data: new Uint8Array(tagSize),
          frames: [],
          pts: buffer[0].pts,
          dts: buffer[0].dts
        };
        for (i = 0; i < tagSize;) {
          tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);
          i += buffer[0].data.byteLength;
          bufferSize -= buffer[0].data.byteLength;
          buffer.shift();
        }

        // find the start of the first frame and the end of the tag
        frameStart = 10;
        if (tag.data[5] & 0x40) {
          // advance the frame start past the extended header
          frameStart += 4; // header size field
          frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));

          // clip any padding off the end
          tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));
        }

        // parse one or more ID3 frames
        // http://id3.org/id3v2.3.0#ID3v2_frame_overview
        do {
          // determine the number of bytes in this frame
          frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));
          if (frameSize < 1) {
            // eslint-disable-next-line no-console
            return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');
          }
          frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);

          frame = {
            id: frameHeader,
            data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)
          };
          frame.key = frame.id;
          if (tagParsers[frame.id]) {
            tagParsers[frame.id](frame);

            // handle the special PRIV frame used to indicate the start
            // time for raw AAC data
            if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {
              var d = frame.data,
                  size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;

              size *= 4;
              size += d[7] & 0x03;
              frame.timeStamp = size;
              // in raw AAC, all subsequent data will be timestamped based
              // on the value of this frame
              // we couldn't have known the appropriate pts and dts before
              // parsing this ID3 tag so set those values now
              if (tag.pts === undefined && tag.dts === undefined) {
                tag.pts = frame.timeStamp;
                tag.dts = frame.timeStamp;
              }
              this.trigger('timestamp', frame);
            }
          }
          tag.frames.push(frame);

          frameStart += 10; // advance past the frame header
          frameStart += frameSize; // advance past the frame body
        } while (frameStart < tagSize);
        this.trigger('data', tag);
      };
    };
    _MetadataStream.prototype = new stream();

    var metadataStream = _MetadataStream;

    var TimestampRolloverStream$1 = timestampRolloverStream.TimestampRolloverStream;

    // object types
    var _TransportPacketStream, _TransportParseStream, _ElementaryStream;

    // constants
    var MP2T_PACKET_LENGTH = 188,


    // bytes
    SYNC_BYTE = 0x47;

    /**
     * Splits an incoming stream of binary data into MPEG-2 Transport
     * Stream packets.
     */
    _TransportPacketStream = function TransportPacketStream() {
      var buffer = new Uint8Array(MP2T_PACKET_LENGTH),
          bytesInBuffer = 0;

      _TransportPacketStream.prototype.init.call(this);

      // Deliver new bytes to the stream.

      /**
       * Split a stream of data into M2TS packets
      **/
      this.push = function (bytes) {
        var startIndex = 0,
            endIndex = MP2T_PACKET_LENGTH,
            everything;

        // If there are bytes remaining from the last segment, prepend them to the
        // bytes that were pushed in
        if (bytesInBuffer) {
          everything = new Uint8Array(bytes.byteLength + bytesInBuffer);
          everything.set(buffer.subarray(0, bytesInBuffer));
          everything.set(bytes, bytesInBuffer);
          bytesInBuffer = 0;
        } else {
          everything = bytes;
        }

        // While we have enough data for a packet
        while (endIndex < everything.byteLength) {
          // Look for a pair of start and end sync bytes in the data..
          if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {
            // We found a packet so emit it and jump one whole packet forward in
            // the stream
            this.trigger('data', everything.subarray(startIndex, endIndex));
            startIndex += MP2T_PACKET_LENGTH;
            endIndex += MP2T_PACKET_LENGTH;
            continue;
          }
          // If we get here, we have somehow become de-synchronized and we need to step
          // forward one byte at a time until we find a pair of sync bytes that denote
          // a packet
          startIndex++;
          endIndex++;
        }

        // If there was some data left over at the end of the segment that couldn't
        // possibly be a whole packet, keep it because it might be the start of a packet
        // that continues in the next segment
        if (startIndex < everything.byteLength) {
          buffer.set(everything.subarray(startIndex), 0);
          bytesInBuffer = everything.byteLength - startIndex;
        }
      };

      /**
       * Passes identified M2TS packets to the TransportParseStream to be parsed
      **/
      this.flush = function () {
        // If the buffer contains a whole packet when we are being flushed, emit it
        // and empty the buffer. Otherwise hold onto the data because it may be
        // important for decoding the next segment
        if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {
          this.trigger('data', buffer);
          bytesInBuffer = 0;
        }
        this.trigger('done');
      };
    };
    _TransportPacketStream.prototype = new stream();

    /**
     * Accepts an MP2T TransportPacketStream and emits data events with parsed
     * forms of the individual transport stream packets.
     */
    _TransportParseStream = function TransportParseStream() {
      var parsePsi, parsePat, parsePmt, self;
      _TransportParseStream.prototype.init.call(this);
      self = this;

      this.packetsWaitingForPmt = [];
      this.programMapTable = undefined;

      parsePsi = function parsePsi(payload, psi) {
        var offset = 0;

        // PSI packets may be split into multiple sections and those
        // sections may be split into multiple packets. If a PSI
        // section starts in this packet, the payload_unit_start_indicator
        // will be true and the first byte of the payload will indicate
        // the offset from the current position to the start of the
        // section.
        if (psi.payloadUnitStartIndicator) {
          offset += payload[offset] + 1;
        }

        if (psi.type === 'pat') {
          parsePat(payload.subarray(offset), psi);
        } else {
          parsePmt(payload.subarray(offset), psi);
        }
      };

      parsePat = function parsePat(payload, pat) {
        pat.section_number = payload[7]; // eslint-disable-line camelcase
        pat.last_section_number = payload[8]; // eslint-disable-line camelcase

        // skip the PSI header and parse the first PMT entry
        self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];
        pat.pmtPid = self.pmtPid;
      };

      /**
       * Parse out the relevant fields of a Program Map Table (PMT).
       * @param payload {Uint8Array} the PMT-specific portion of an MP2T
       * packet. The first byte in this array should be the table_id
       * field.
       * @param pmt {object} the object that should be decorated with
       * fields parsed from the PMT.
       */
      parsePmt = function parsePmt(payload, pmt) {
        var sectionLength, tableEnd, programInfoLength, offset;

        // PMTs can be sent ahead of the time when they should actually
        // take effect. We don't believe this should ever be the case
        // for HLS but we'll ignore "forward" PMT declarations if we see
        // them. Future PMT declarations have the current_next_indicator
        // set to zero.
        if (!(payload[5] & 0x01)) {
          return;
        }

        // overwrite any existing program map table
        self.programMapTable = {
          video: null,
          audio: null,
          'timed-metadata': {}
        };

        // the mapping table ends at the end of the current section
        sectionLength = (payload[1] & 0x0f) << 8 | payload[2];
        tableEnd = 3 + sectionLength - 4;

        // to determine where the table is, we have to figure out how
        // long the program info descriptors are
        programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];

        // advance the offset to the first entry in the mapping table
        offset = 12 + programInfoLength;
        while (offset < tableEnd) {
          var streamType = payload[offset];
          var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];

          // only map a single elementary_pid for audio and video stream types
          // TODO: should this be done for metadata too? for now maintain behavior of
          //       multiple metadata streams
          if (streamType === streamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {
            self.programMapTable.video = pid;
          } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {
            self.programMapTable.audio = pid;
          } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {
            // map pid to stream type for metadata streams
            self.programMapTable['timed-metadata'][pid] = streamType;
          }

          // move to the next table entry
          // skip past the elementary stream descriptors, if present
          offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;
        }

        // record the map on the packet as well
        pmt.programMapTable = self.programMapTable;
      };

      /**
       * Deliver a new MP2T packet to the next stream in the pipeline.
       */
      this.push = function (packet) {
        var result = {},
            offset = 4;

        result.payloadUnitStartIndicator = !!(packet[1] & 0x40);

        // pid is a 13-bit field starting at the last bit of packet[1]
        result.pid = packet[1] & 0x1f;
        result.pid <<= 8;
        result.pid |= packet[2];

        // if an adaption field is present, its length is specified by the
        // fifth byte of the TS packet header. The adaptation field is
        // used to add stuffing to PES packets that don't fill a complete
        // TS packet, and to specify some forms of timing and control data
        // that we do not currently use.
        if ((packet[3] & 0x30) >>> 4 > 0x01) {
          offset += packet[offset] + 1;
        }

        // parse the rest of the packet based on the type
        if (result.pid === 0) {
          result.type = 'pat';
          parsePsi(packet.subarray(offset), result);
          this.trigger('data', result);
        } else if (result.pid === this.pmtPid) {
          result.type = 'pmt';
          parsePsi(packet.subarray(offset), result);
          this.trigger('data', result);

          // if there are any packets waiting for a PMT to be found, process them now
          while (this.packetsWaitingForPmt.length) {
            this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
          }
        } else if (this.programMapTable === undefined) {
          // When we have not seen a PMT yet, defer further processing of
          // PES packets until one has been parsed
          this.packetsWaitingForPmt.push([packet, offset, result]);
        } else {
          this.processPes_(packet, offset, result);
        }
      };

      this.processPes_ = function (packet, offset, result) {
        // set the appropriate stream type
        if (result.pid === this.programMapTable.video) {
          result.streamType = streamTypes.H264_STREAM_TYPE;
        } else if (result.pid === this.programMapTable.audio) {
          result.streamType = streamTypes.ADTS_STREAM_TYPE;
        } else {
          // if not video or audio, it is timed-metadata or unknown
          // if unknown, streamType will be undefined
          result.streamType = this.programMapTable['timed-metadata'][result.pid];
        }

        result.type = 'pes';
        result.data = packet.subarray(offset);

        this.trigger('data', result);
      };
    };
    _TransportParseStream.prototype = new stream();
    _TransportParseStream.STREAM_TYPES = {
      h264: 0x1b,
      adts: 0x0f
    };

    /**
     * Reconsistutes program elementary stream (PES) packets from parsed
     * transport stream packets. That is, if you pipe an
     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output
     * events will be events which capture the bytes for individual PES
     * packets plus relevant metadata that has been extracted from the
     * container.
     */
    _ElementaryStream = function ElementaryStream() {
      var self = this,


      // PES packet fragments
      video = {
        data: [],
        size: 0
      },
          audio = {
        data: [],
        size: 0
      },
          timedMetadata = {
        data: [],
        size: 0
      },
          parsePes = function parsePes(payload, pes) {
        var ptsDtsFlags;

        // get the packet length, this will be 0 for video
        pes.packetLength = 6 + (payload[4] << 8 | payload[5]);

        // find out if this packets starts a new keyframe
        pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;
        // PES packets may be annotated with a PTS value, or a PTS value
        // and a DTS value. Determine what combination of values is
        // available to work with.
        ptsDtsFlags = payload[7];

        // PTS and DTS are normally stored as a 33-bit number.  Javascript
        // performs all bitwise operations on 32-bit integers but javascript
        // supports a much greater range (52-bits) of integer using standard
        // mathematical operations.
        // We construct a 31-bit value using bitwise operators over the 31
        // most significant bits and then multiply by 4 (equal to a left-shift
        // of 2) before we add the final 2 least significant bits of the
        // timestamp (equal to an OR.)
        if (ptsDtsFlags & 0xC0) {
          // the PTS and DTS are not written out directly. For information
          // on how they are encoded, see
          // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
          pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;
          pes.pts *= 4; // Left shift by 2
          pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs
          pes.dts = pes.pts;
          if (ptsDtsFlags & 0x40) {
            pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;
            pes.dts *= 4; // Left shift by 2
            pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs
          }
        }
        // the data section starts immediately after the PES header.
        // pes_header_data_length specifies the number of header bytes
        // that follow the last byte of the field.
        pes.data = payload.subarray(9 + payload[8]);
      },


      /**
        * Pass completely parsed PES packets to the next stream in the pipeline
       **/
      flushStream = function flushStream(stream$$1, type, forceFlush) {
        var packetData = new Uint8Array(stream$$1.size),
            event = {
          type: type
        },
            i = 0,
            offset = 0,
            packetFlushable = false,
            fragment;

        // do nothing if there is not enough buffered data for a complete
        // PES header
        if (!stream$$1.data.length || stream$$1.size < 9) {
          return;
        }
        event.trackId = stream$$1.data[0].pid;

        // reassemble the packet
        for (i = 0; i < stream$$1.data.length; i++) {
          fragment = stream$$1.data[i];

          packetData.set(fragment.data, offset);
          offset += fragment.data.byteLength;
        }

        // parse assembled packet's PES header
        parsePes(packetData, event);

        // non-video PES packets MUST have a non-zero PES_packet_length
        // check that there is enough stream data to fill the packet
        packetFlushable = type === 'video' || event.packetLength <= stream$$1.size;

        // flush pending packets if the conditions are right
        if (forceFlush || packetFlushable) {
          stream$$1.size = 0;
          stream$$1.data.length = 0;
        }

        // only emit packets that are complete. this is to avoid assembling
        // incomplete PES packets due to poor segmentation
        if (packetFlushable) {
          self.trigger('data', event);
        }
      };

      _ElementaryStream.prototype.init.call(this);

      /**
       * Identifies M2TS packet types and parses PES packets using metadata
       * parsed from the PMT
       **/
      this.push = function (data) {
        ({
          pat: function pat() {
            // we have to wait for the PMT to arrive as well before we
            // have any meaningful metadata
          },
          pes: function pes() {
            var stream$$1, streamType;

            switch (data.streamType) {
              case streamTypes.H264_STREAM_TYPE:
              case streamTypes.H264_STREAM_TYPE:
                stream$$1 = video;
                streamType = 'video';
                break;
              case streamTypes.ADTS_STREAM_TYPE:
                stream$$1 = audio;
                streamType = 'audio';
                break;
              case streamTypes.METADATA_STREAM_TYPE:
                stream$$1 = timedMetadata;
                streamType = 'timed-metadata';
                break;
              default:
                // ignore unknown stream types
                return;
            }

            // if a new packet is starting, we can flush the completed
            // packet
            if (data.payloadUnitStartIndicator) {
              flushStream(stream$$1, streamType, true);
            }

            // buffer this fragment until we are sure we've received the
            // complete payload
            stream$$1.data.push(data);
            stream$$1.size += data.data.byteLength;
          },
          pmt: function pmt() {
            var event = {
              type: 'metadata',
              tracks: []
            },
                programMapTable = data.programMapTable;

            // translate audio and video streams to tracks
            if (programMapTable.video !== null) {
              event.tracks.push({
                timelineStartInfo: {
                  baseMediaDecodeTime: 0
                },
                id: +programMapTable.video,
                codec: 'avc',
                type: 'video'
              });
            }
            if (programMapTable.audio !== null) {
              event.tracks.push({
                timelineStartInfo: {
                  baseMediaDecodeTime: 0
                },
                id: +programMapTable.audio,
                codec: 'adts',
                type: 'audio'
              });
            }

            self.trigger('data', event);
          }
        })[data.type]();
      };

      /**
       * Flush any remaining input. Video PES packets may be of variable
       * length. Normally, the start of a new video packet can trigger the
       * finalization of the previous packet. That is not possible if no
       * more video is forthcoming, however. In that case, some other
       * mechanism (like the end of the file) has to be employed. When it is
       * clear that no additional data is forthcoming, calling this method
       * will flush the buffered packets.
       */
      this.flush = function () {
        // !!THIS ORDER IS IMPORTANT!!
        // video first then audio
        flushStream(video, 'video');
        flushStream(audio, 'audio');
        flushStream(timedMetadata, 'timed-metadata');
        this.trigger('done');
      };
    };
    _ElementaryStream.prototype = new stream();

    var m2ts = {
      PAT_PID: 0x0000,
      MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,
      TransportPacketStream: _TransportPacketStream,
      TransportParseStream: _TransportParseStream,
      ElementaryStream: _ElementaryStream,
      TimestampRolloverStream: TimestampRolloverStream$1,
      CaptionStream: captionStream.CaptionStream,
      Cea608Stream: captionStream.Cea608Stream,
      MetadataStream: metadataStream
    };

    for (var type in streamTypes) {
      if (streamTypes.hasOwnProperty(type)) {
        m2ts[type] = streamTypes[type];
      }
    }

    var m2ts_1 = m2ts;

    var _AdtsStream;

    var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];

    /*
     * Accepts a ElementaryStream and emits data events with parsed
     * AAC Audio Frames of the individual packets. Input audio in ADTS
     * format is unpacked and re-emitted as AAC frames.
     *
     * @see http://wiki.multimedia.cx/index.php?title=ADTS
     * @see http://wiki.multimedia.cx/?title=Understanding_AAC
     */
    _AdtsStream = function AdtsStream() {
      var buffer;

      _AdtsStream.prototype.init.call(this);

      this.push = function (packet) {
        var i = 0,
            frameNum = 0,
            frameLength,
            protectionSkipBytes,
            frameEnd,
            oldBuffer,
            sampleCount,
            adtsFrameDuration;

        if (packet.type !== 'audio') {
          // ignore non-audio data
          return;
        }

        // Prepend any data in the buffer to the input data so that we can parse
        // aac frames the cross a PES packet boundary
        if (buffer) {
          oldBuffer = buffer;
          buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);
          buffer.set(oldBuffer);
          buffer.set(packet.data, oldBuffer.byteLength);
        } else {
          buffer = packet.data;
        }

        // unpack any ADTS frames which have been fully received
        // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS
        while (i + 5 < buffer.length) {

          // Loook for the start of an ADTS header..
          if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {
            // If a valid header was not found,  jump one forward and attempt to
            // find a valid ADTS header starting at the next byte
            i++;
            continue;
          }

          // The protection skip bit tells us if we have 2 bytes of CRC data at the
          // end of the ADTS header
          protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;

          // Frame length is a 13 bit integer starting 16 bits from the
          // end of the sync sequence
          frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;

          sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;
          adtsFrameDuration = sampleCount * 90000 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];

          frameEnd = i + frameLength;

          // If we don't have enough data to actually finish this ADTS frame, return
          // and wait for more data
          if (buffer.byteLength < frameEnd) {
            return;
          }

          // Otherwise, deliver the complete AAC frame
          this.trigger('data', {
            pts: packet.pts + frameNum * adtsFrameDuration,
            dts: packet.dts + frameNum * adtsFrameDuration,
            sampleCount: sampleCount,
            audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,
            channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,
            samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],
            samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,
            // assume ISO/IEC 14496-12 AudioSampleEntry default of 16
            samplesize: 16,
            data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)
          });

          // If the buffer is empty, clear it and return
          if (buffer.byteLength === frameEnd) {
            buffer = undefined;
            return;
          }

          frameNum++;

          // Remove the finished frame from the buffer and start the process again
          buffer = buffer.subarray(frameEnd);
        }
      };
      this.flush = function () {
        this.trigger('done');
      };
    };

    _AdtsStream.prototype = new stream();

    var adts = _AdtsStream;

    var ExpGolomb;

    /**
     * Parser for exponential Golomb codes, a variable-bitwidth number encoding
     * scheme used by h264.
     */
    ExpGolomb = function ExpGolomb(workingData) {
      var
      // the number of bytes left to examine in workingData
      workingBytesAvailable = workingData.byteLength,


      // the current word being examined
      workingWord = 0,


      // :uint

      // the number of bits left to examine in the current word
      workingBitsAvailable = 0; // :uint;

      // ():uint
      this.length = function () {
        return 8 * workingBytesAvailable;
      };

      // ():uint
      this.bitsAvailable = function () {
        return 8 * workingBytesAvailable + workingBitsAvailable;
      };

      // ():void
      this.loadWord = function () {
        var position = workingData.byteLength - workingBytesAvailable,
            workingBytes = new Uint8Array(4),
            availableBytes = Math.min(4, workingBytesAvailable);

        if (availableBytes === 0) {
          throw new Error('no bytes available');
        }

        workingBytes.set(workingData.subarray(position, position + availableBytes));
        workingWord = new DataView(workingBytes.buffer).getUint32(0);

        // track the amount of workingData that has been processed
        workingBitsAvailable = availableBytes * 8;
        workingBytesAvailable -= availableBytes;
      };

      // (count:int):void
      this.skipBits = function (count) {
        var skipBytes; // :int
        if (workingBitsAvailable > count) {
          workingWord <<= count;
          workingBitsAvailable -= count;
        } else {
          count -= workingBitsAvailable;
          skipBytes = Math.floor(count / 8);

          count -= skipBytes * 8;
          workingBytesAvailable -= skipBytes;

          this.loadWord();

          workingWord <<= count;
          workingBitsAvailable -= count;
        }
      };

      // (size:int):uint
      this.readBits = function (size) {
        var bits = Math.min(workingBitsAvailable, size),


        // :uint
        valu = workingWord >>> 32 - bits; // :uint
        // if size > 31, handle error
        workingBitsAvailable -= bits;
        if (workingBitsAvailable > 0) {
          workingWord <<= bits;
        } else if (workingBytesAvailable > 0) {
          this.loadWord();
        }

        bits = size - bits;
        if (bits > 0) {
          return valu << bits | this.readBits(bits);
        }
        return valu;
      };

      // ():uint
      this.skipLeadingZeros = function () {
        var leadingZeroCount; // :uint
        for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {
          if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {
            // the first bit of working word is 1
            workingWord <<= leadingZeroCount;
            workingBitsAvailable -= leadingZeroCount;
            return leadingZeroCount;
          }
        }

        // we exhausted workingWord and still have not found a 1
        this.loadWord();
        return leadingZeroCount + this.skipLeadingZeros();
      };

      // ():void
      this.skipUnsignedExpGolomb = function () {
        this.skipBits(1 + this.skipLeadingZeros());
      };

      // ():void
      this.skipExpGolomb = function () {
        this.skipBits(1 + this.skipLeadingZeros());
      };

      // ():uint
      this.readUnsignedExpGolomb = function () {
        var clz = this.skipLeadingZeros(); // :uint
        return this.readBits(clz + 1) - 1;
      };

      // ():int
      this.readExpGolomb = function () {
        var valu = this.readUnsignedExpGolomb(); // :int
        if (0x01 & valu) {
          // the number is odd if the low order bit is set
          return 1 + valu >>> 1; // add 1 to make it even, and divide by 2
        }
        return -1 * (valu >>> 1); // divide by two then make it negative
      };

      // Some convenience functions
      // :Boolean
      this.readBoolean = function () {
        return this.readBits(1) === 1;
      };

      // ():int
      this.readUnsignedByte = function () {
        return this.readBits(8);
      };

      this.loadWord();
    };

    var expGolomb = ExpGolomb;

    var _H264Stream, _NalByteStream;
    var PROFILES_WITH_OPTIONAL_SPS_DATA;

    /**
     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.
     */
    _NalByteStream = function NalByteStream() {
      var syncPoint = 0,
          i,
          buffer;
      _NalByteStream.prototype.init.call(this);

      /*
       * Scans a byte stream and triggers a data event with the NAL units found.
       * @param {Object} data Event received from H264Stream
       * @param {Uint8Array} data.data The h264 byte stream to be scanned
       *
       * @see H264Stream.push
       */
      this.push = function (data) {
        var swapBuffer;

        if (!buffer) {
          buffer = data.data;
        } else {
          swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);
          swapBuffer.set(buffer);
          swapBuffer.set(data.data, buffer.byteLength);
          buffer = swapBuffer;
        }

        // Rec. ITU-T H.264, Annex B
        // scan for NAL unit boundaries

        // a match looks like this:
        // 0 0 1 .. NAL .. 0 0 1
        // ^ sync point        ^ i
        // or this:
        // 0 0 1 .. NAL .. 0 0 0
        // ^ sync point        ^ i

        // advance the sync point to a NAL start, if necessary
        for (; syncPoint < buffer.byteLength - 3; syncPoint++) {
          if (buffer[syncPoint + 2] === 1) {
            // the sync point is properly aligned
            i = syncPoint + 5;
            break;
          }
        }

        while (i < buffer.byteLength) {
          // look at the current byte to determine if we've hit the end of
          // a NAL unit boundary
          switch (buffer[i]) {
            case 0:
              // skip past non-sync sequences
              if (buffer[i - 1] !== 0) {
                i += 2;
                break;
              } else if (buffer[i - 2] !== 0) {
                i++;
                break;
              }

              // deliver the NAL unit if it isn't empty
              if (syncPoint + 3 !== i - 2) {
                this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));
              }

              // drop trailing zeroes
              do {
                i++;
              } while (buffer[i] !== 1 && i < buffer.length);
              syncPoint = i - 2;
              i += 3;
              break;
            case 1:
              // skip past non-sync sequences
              if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {
                i += 3;
                break;
              }

              // deliver the NAL unit
              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));
              syncPoint = i - 2;
              i += 3;
              break;
            default:
              // the current byte isn't a one or zero, so it cannot be part
              // of a sync sequence
              i += 3;
              break;
          }
        }
        // filter out the NAL units that were delivered
        buffer = buffer.subarray(syncPoint);
        i -= syncPoint;
        syncPoint = 0;
      };

      this.flush = function () {
        // deliver the last buffered NAL unit
        if (buffer && buffer.byteLength > 3) {
          this.trigger('data', buffer.subarray(syncPoint + 3));
        }
        // reset the stream state
        buffer = null;
        syncPoint = 0;
        this.trigger('done');
      };
    };
    _NalByteStream.prototype = new stream();

    // values of profile_idc that indicate additional fields are included in the SPS
    // see Recommendation ITU-T H.264 (4/2013),
    // 7.3.2.1.1 Sequence parameter set data syntax
    PROFILES_WITH_OPTIONAL_SPS_DATA = {
      100: true,
      110: true,
      122: true,
      244: true,
      44: true,
      83: true,
      86: true,
      118: true,
      128: true,
      138: true,
      139: true,
      134: true
    };

    /**
     * Accepts input from a ElementaryStream and produces H.264 NAL unit data
     * events.
     */
    _H264Stream = function H264Stream() {
      var nalByteStream = new _NalByteStream(),
          self,
          trackId,
          currentPts,
          currentDts,
          discardEmulationPreventionBytes,
          readSequenceParameterSet,
          skipScalingList;

      _H264Stream.prototype.init.call(this);
      self = this;

      /*
       * Pushes a packet from a stream onto the NalByteStream
       *
       * @param {Object} packet - A packet received from a stream
       * @param {Uint8Array} packet.data - The raw bytes of the packet
       * @param {Number} packet.dts - Decode timestamp of the packet
       * @param {Number} packet.pts - Presentation timestamp of the packet
       * @param {Number} packet.trackId - The id of the h264 track this packet came from
       * @param {('video'|'audio')} packet.type - The type of packet
       *
       */
      this.push = function (packet) {
        if (packet.type !== 'video') {
          return;
        }
        trackId = packet.trackId;
        currentPts = packet.pts;
        currentDts = packet.dts;

        nalByteStream.push(packet);
      };

      /*
       * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps
       * for the NALUs to the next stream component.
       * Also, preprocess caption and sequence parameter NALUs.
       *
       * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`
       * @see NalByteStream.push
       */
      nalByteStream.on('data', function (data) {
        var event = {
          trackId: trackId,
          pts: currentPts,
          dts: currentDts,
          data: data
        };

        switch (data[0] & 0x1f) {
          case 0x05:
            event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';
            break;
          case 0x06:
            event.nalUnitType = 'sei_rbsp';
            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));
            break;
          case 0x07:
            event.nalUnitType = 'seq_parameter_set_rbsp';
            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));
            event.config = readSequenceParameterSet(event.escapedRBSP);
            break;
          case 0x08:
            event.nalUnitType = 'pic_parameter_set_rbsp';
            break;
          case 0x09:
            event.nalUnitType = 'access_unit_delimiter_rbsp';
            break;

          default:
            break;
        }
        // This triggers data on the H264Stream
        self.trigger('data', event);
      });
      nalByteStream.on('done', function () {
        self.trigger('done');
      });

      this.flush = function () {
        nalByteStream.flush();
      };

      /**
       * Advance the ExpGolomb decoder past a scaling list. The scaling
       * list is optionally transmitted as part of a sequence parameter
       * set and is not relevant to transmuxing.
       * @param count {number} the number of entries in this scaling list
       * @param expGolombDecoder {object} an ExpGolomb pointed to the
       * start of a scaling list
       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
       */
      skipScalingList = function skipScalingList(count, expGolombDecoder) {
        var lastScale = 8,
            nextScale = 8,
            j,
            deltaScale;

        for (j = 0; j < count; j++) {
          if (nextScale !== 0) {
            deltaScale = expGolombDecoder.readExpGolomb();
            nextScale = (lastScale + deltaScale + 256) % 256;
          }

          lastScale = nextScale === 0 ? lastScale : nextScale;
        }
      };

      /**
       * Expunge any "Emulation Prevention" bytes from a "Raw Byte
       * Sequence Payload"
       * @param data {Uint8Array} the bytes of a RBSP from a NAL
       * unit
       * @return {Uint8Array} the RBSP without any Emulation
       * Prevention Bytes
       */
      discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {
        var length = data.byteLength,
            emulationPreventionBytesPositions = [],
            i = 1,
            newLength,
            newData;

        // Find all `Emulation Prevention Bytes`
        while (i < length - 2) {
          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
            emulationPreventionBytesPositions.push(i + 2);
            i += 2;
          } else {
            i++;
          }
        }

        // If no Emulation Prevention Bytes were found just return the original
        // array
        if (emulationPreventionBytesPositions.length === 0) {
          return data;
        }

        // Create a new array to hold the NAL unit data
        newLength = length - emulationPreventionBytesPositions.length;
        newData = new Uint8Array(newLength);
        var sourceIndex = 0;

        for (i = 0; i < newLength; sourceIndex++, i++) {
          if (sourceIndex === emulationPreventionBytesPositions[0]) {
            // Skip this byte
            sourceIndex++;
            // Remove this position index
            emulationPreventionBytesPositions.shift();
          }
          newData[i] = data[sourceIndex];
        }

        return newData;
      };

      /**
       * Read a sequence parameter set and return some interesting video
       * properties. A sequence parameter set is the H264 metadata that
       * describes the properties of upcoming video frames.
       * @param data {Uint8Array} the bytes of a sequence parameter set
       * @return {object} an object with configuration parsed from the
       * sequence parameter set, including the dimensions of the
       * associated video frames.
       */
      readSequenceParameterSet = function readSequenceParameterSet(data) {
        var frameCropLeftOffset = 0,
            frameCropRightOffset = 0,
            frameCropTopOffset = 0,
            frameCropBottomOffset = 0,
            sarScale = 1,
            expGolombDecoder,
            profileIdc,
            levelIdc,
            profileCompatibility,
            chromaFormatIdc,
            picOrderCntType,
            numRefFramesInPicOrderCntCycle,
            picWidthInMbsMinus1,
            picHeightInMapUnitsMinus1,
            frameMbsOnlyFlag,
            scalingListCount,
            sarRatio,
            aspectRatioIdc,
            i;

        expGolombDecoder = new expGolomb(data);
        profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc
        profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag
        levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)
        expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id

        // some profiles have more optional data we don't need
        if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {
          chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();
          if (chromaFormatIdc === 3) {
            expGolombDecoder.skipBits(1); // separate_colour_plane_flag
          }
          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8
          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8
          expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag
          if (expGolombDecoder.readBoolean()) {
            // seq_scaling_matrix_present_flag
            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
            for (i = 0; i < scalingListCount; i++) {
              if (expGolombDecoder.readBoolean()) {
                // seq_scaling_list_present_flag[ i ]
                if (i < 6) {
                  skipScalingList(16, expGolombDecoder);
                } else {
                  skipScalingList(64, expGolombDecoder);
                }
              }
            }
          }
        }

        expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4
        picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();

        if (picOrderCntType === 0) {
          expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4
        } else if (picOrderCntType === 1) {
          expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag
          expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic
          expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field
          numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();
          for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
            expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]
          }
        }

        expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames
        expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag

        picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();
        picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();

        frameMbsOnlyFlag = expGolombDecoder.readBits(1);
        if (frameMbsOnlyFlag === 0) {
          expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag
        }

        expGolombDecoder.skipBits(1); // direct_8x8_inference_flag
        if (expGolombDecoder.readBoolean()) {
          // frame_cropping_flag
          frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();
          frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();
          frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();
          frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();
        }
        if (expGolombDecoder.readBoolean()) {
          // vui_parameters_present_flag
          if (expGolombDecoder.readBoolean()) {
            // aspect_ratio_info_present_flag
            aspectRatioIdc = expGolombDecoder.readUnsignedByte();
            switch (aspectRatioIdc) {
              case 1:
                sarRatio = [1, 1];break;
              case 2:
                sarRatio = [12, 11];break;
              case 3:
                sarRatio = [10, 11];break;
              case 4:
                sarRatio = [16, 11];break;
              case 5:
                sarRatio = [40, 33];break;
              case 6:
                sarRatio = [24, 11];break;
              case 7:
                sarRatio = [20, 11];break;
              case 8:
                sarRatio = [32, 11];break;
              case 9:
                sarRatio = [80, 33];break;
              case 10:
                sarRatio = [18, 11];break;
              case 11:
                sarRatio = [15, 11];break;
              case 12:
                sarRatio = [64, 33];break;
              case 13:
                sarRatio = [160, 99];break;
              case 14:
                sarRatio = [4, 3];break;
              case 15:
                sarRatio = [3, 2];break;
              case 16:
                sarRatio = [2, 1];break;
              case 255:
                {
                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];
                  break;
                }
            }
            if (sarRatio) {
              sarScale = sarRatio[0] / sarRatio[1];
            }
          }
        }
        return {
          profileIdc: profileIdc,
          levelIdc: levelIdc,
          profileCompatibility: profileCompatibility,
          width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),
          height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2
        };
      };
    };
    _H264Stream.prototype = new stream();

    var h264 = {
      H264Stream: _H264Stream,
      NalByteStream: _NalByteStream
    };

    // Constants
    var _AacStream;

    /**
     * Splits an incoming stream of binary data into ADTS and ID3 Frames.
     */

    _AacStream = function AacStream() {
      var everything = new Uint8Array(),
          timeStamp = 0;

      _AacStream.prototype.init.call(this);

      this.setTimestamp = function (timestamp) {
        timeStamp = timestamp;
      };

      this.parseId3TagSize = function (header, byteIndex) {
        var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],
            flags = header[byteIndex + 5],
            footerPresent = (flags & 16) >> 4;

        if (footerPresent) {
          return returnSize + 20;
        }
        return returnSize + 10;
      };

      this.parseAdtsSize = function (header, byteIndex) {
        var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,
            middle = header[byteIndex + 4] << 3,
            highTwo = header[byteIndex + 3] & 0x3 << 11;

        return highTwo | middle | lowThree;
      };

      this.push = function (bytes) {
        var frameSize = 0,
            byteIndex = 0,
            bytesLeft,
            chunk,
            packet,
            tempLength;

        // If there are bytes remaining from the last segment, prepend them to the
        // bytes that were pushed in
        if (everything.length) {
          tempLength = everything.length;
          everything = new Uint8Array(bytes.byteLength + tempLength);
          everything.set(everything.subarray(0, tempLength));
          everything.set(bytes, tempLength);
        } else {
          everything = bytes;
        }

        while (everything.length - byteIndex >= 3) {
          if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {

            // Exit early because we don't have enough to parse
            // the ID3 tag header
            if (everything.length - byteIndex < 10) {
              break;
            }

            // check framesize
            frameSize = this.parseId3TagSize(everything, byteIndex);

            // Exit early if we don't have enough in the buffer
            // to emit a full packet
            if (frameSize > everything.length) {
              break;
            }
            chunk = {
              type: 'timed-metadata',
              data: everything.subarray(byteIndex, byteIndex + frameSize)
            };
            this.trigger('data', chunk);
            byteIndex += frameSize;
            continue;
          } else if (everything[byteIndex] & 0xff === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {

            // Exit early because we don't have enough to parse
            // the ADTS frame header
            if (everything.length - byteIndex < 7) {
              break;
            }

            frameSize = this.parseAdtsSize(everything, byteIndex);

            // Exit early if we don't have enough in the buffer
            // to emit a full packet
            if (frameSize > everything.length) {
              break;
            }

            packet = {
              type: 'audio',
              data: everything.subarray(byteIndex, byteIndex + frameSize),
              pts: timeStamp,
              dts: timeStamp
            };
            this.trigger('data', packet);
            byteIndex += frameSize;
            continue;
          }
          byteIndex++;
        }
        bytesLeft = everything.length - byteIndex;

        if (bytesLeft > 0) {
          everything = everything.subarray(byteIndex);
        } else {
          everything = new Uint8Array();
        }
      };
    };

    _AacStream.prototype = new stream();

    var aac = _AacStream;

    var highPrefix = [33, 16, 5, 32, 164, 27];
    var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];
    var zeroFill = function zeroFill(count) {
      var a = [];
      while (count--) {
        a.push(0);
      }
      return a;
    };

    var makeTable = function makeTable(metaTable) {
      return Object.keys(metaTable).reduce(function (obj, key) {
        obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {
          return arr.concat(part);
        }, []));
        return obj;
      }, {});
    };

    // Frames-of-silence to use for filling in missing AAC frames
    var coneOfSilence = {
      96000: [highPrefix, [227, 64], zeroFill(154), [56]],
      88200: [highPrefix, [231], zeroFill(170), [56]],
      64000: [highPrefix, [248, 192], zeroFill(240), [56]],
      48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],
      44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],
      32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],
      24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],
      16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],
      12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],
      11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],
      8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]
    };

    var silence = makeTable(coneOfSilence);

    var ONE_SECOND_IN_TS$1 = 90000,


    // 90kHz clock
    secondsToVideoTs,
        secondsToAudioTs,
        videoTsToSeconds,
        audioTsToSeconds,
        audioTsToVideoTs,
        videoTsToAudioTs;

    secondsToVideoTs = function secondsToVideoTs(seconds) {
      return seconds * ONE_SECOND_IN_TS$1;
    };

    secondsToAudioTs = function secondsToAudioTs(seconds, sampleRate) {
      return seconds * sampleRate;
    };

    videoTsToSeconds = function videoTsToSeconds(timestamp) {
      return timestamp / ONE_SECOND_IN_TS$1;
    };

    audioTsToSeconds = function audioTsToSeconds(timestamp, sampleRate) {
      return timestamp / sampleRate;
    };

    audioTsToVideoTs = function audioTsToVideoTs(timestamp, sampleRate) {
      return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));
    };

    videoTsToAudioTs = function videoTsToAudioTs(timestamp, sampleRate) {
      return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);
    };

    var clock = {
      secondsToVideoTs: secondsToVideoTs,
      secondsToAudioTs: secondsToAudioTs,
      videoTsToSeconds: videoTsToSeconds,
      audioTsToSeconds: audioTsToSeconds,
      audioTsToVideoTs: audioTsToVideoTs,
      videoTsToAudioTs: videoTsToAudioTs
    };

    var H264Stream = h264.H264Stream;

    // constants
    var AUDIO_PROPERTIES = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];

    var VIDEO_PROPERTIES = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility'];

    var ONE_SECOND_IN_TS$2 = 90000; // 90kHz clock

    // object types
    var _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream;

    // Helper functions
    var isLikelyAacData, arrayEquals, sumFrameByteLengths;

    isLikelyAacData = function isLikelyAacData(data) {
      if (data[0] === 'I'.charCodeAt(0) && data[1] === 'D'.charCodeAt(0) && data[2] === '3'.charCodeAt(0)) {
        return true;
      }
      return false;
    };

    /**
     * Compare two arrays (even typed) for same-ness
     */
    arrayEquals = function arrayEquals(a, b) {
      var i;

      if (a.length !== b.length) {
        return false;
      }

      // compare the value of each element in the array
      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
          return false;
        }
      }

      return true;
    };

    /**
     * Sum the `byteLength` properties of the data in each AAC frame
     */
    sumFrameByteLengths = function sumFrameByteLengths(array) {
      var i,
          currentObj,
          sum = 0;

      // sum the byteLength's all each nal unit in the frame
      for (i = 0; i < array.length; i++) {
        currentObj = array[i];
        sum += currentObj.data.byteLength;
      }

      return sum;
    };

    /**
     * Constructs a single-track, ISO BMFF media segment from AAC data
     * events. The output of this stream can be fed to a SourceBuffer
     * configured with a suitable initialization segment.
     * @param track {object} track metadata configuration
     * @param options {object} transmuxer options object
     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
     *        in the source; false to adjust the first segment to start at 0.
     */
    _AudioSegmentStream = function AudioSegmentStream(track, options) {
      var adtsFrames = [],
          sequenceNumber = 0,
          earliestAllowedDts = 0,
          audioAppendStartTs = 0,
          videoBaseMediaDecodeTime = Infinity;

      options = options || {};

      _AudioSegmentStream.prototype.init.call(this);

      this.push = function (data) {
        trackDecodeInfo.collectDtsInfo(track, data);

        if (track) {
          AUDIO_PROPERTIES.forEach(function (prop) {
            track[prop] = data[prop];
          });
        }

        // buffer audio data until end() is called
        adtsFrames.push(data);
      };

      this.setEarliestDts = function (earliestDts) {
        earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;
      };

      this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {
        videoBaseMediaDecodeTime = baseMediaDecodeTime;
      };

      this.setAudioAppendStart = function (timestamp) {
        audioAppendStartTs = timestamp;
      };

      this.flush = function () {
        var frames, moof, mdat, boxes;

        // return early if no audio data has been observed
        if (adtsFrames.length === 0) {
          this.trigger('done', 'AudioSegmentStream');
          return;
        }

        frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);
        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);

        this.prefixWithSilence_(track, frames);

        // we have to build the index from byte locations to
        // samples (that is, adts frames) in the audio data
        track.samples = this.generateSampleTable_(frames);

        // concatenate the audio data to constuct the mdat
        mdat = mp4Generator.mdat(this.concatenateFrameData_(frames));

        adtsFrames = [];

        moof = mp4Generator.moof(sequenceNumber, [track]);
        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);

        // bump the sequence number for next time
        sequenceNumber++;

        boxes.set(moof);
        boxes.set(mdat, moof.byteLength);

        trackDecodeInfo.clearDtsInfo(track);

        this.trigger('data', { track: track, boxes: boxes });
        this.trigger('done', 'AudioSegmentStream');
      };

      // Possibly pad (prefix) the audio track with silence if appending this track
      // would lead to the introduction of a gap in the audio buffer
      this.prefixWithSilence_ = function (track, frames) {
        var baseMediaDecodeTimeTs,
            frameDuration = 0,
            audioGapDuration = 0,
            audioFillFrameCount = 0,
            audioFillDuration = 0,
            silentFrame,
            i;

        if (!frames.length) {
          return;
        }

        baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);
        // determine frame clock duration based on sample rate, round up to avoid overfills
        frameDuration = Math.ceil(ONE_SECOND_IN_TS$2 / (track.samplerate / 1024));

        if (audioAppendStartTs && videoBaseMediaDecodeTime) {
          // insert the shortest possible amount (audio gap or audio to video gap)
          audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);
          // number of full frames in the audio gap
          audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);
          audioFillDuration = audioFillFrameCount * frameDuration;
        }

        // don't attempt to fill gaps smaller than a single frame or larger
        // than a half second
        if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS$2 / 2) {
          return;
        }

        silentFrame = silence[track.samplerate];

        if (!silentFrame) {
          // we don't have a silent frame pregenerated for the sample rate, so use a frame
          // from the content instead
          silentFrame = frames[0].data;
        }

        for (i = 0; i < audioFillFrameCount; i++) {
          frames.splice(i, 0, {
            data: silentFrame
          });
        }

        track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));
      };

      // If the audio segment extends before the earliest allowed dts
      // value, remove AAC frames until starts at or after the earliest
      // allowed DTS so that we don't end up with a negative baseMedia-
      // DecodeTime for the audio track
      this.trimAdtsFramesByEarliestDts_ = function (adtsFrames) {
        if (track.minSegmentDts >= earliestAllowedDts) {
          return adtsFrames;
        }

        // We will need to recalculate the earliest segment Dts
        track.minSegmentDts = Infinity;

        return adtsFrames.filter(function (currentFrame) {
          // If this is an allowed frame, keep it and record it's Dts
          if (currentFrame.dts >= earliestAllowedDts) {
            track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);
            track.minSegmentPts = track.minSegmentDts;
            return true;
          }
          // Otherwise, discard it
          return false;
        });
      };

      // generate the track's raw mdat data from an array of frames
      this.generateSampleTable_ = function (frames) {
        var i,
            currentFrame,
            samples = [];

        for (i = 0; i < frames.length; i++) {
          currentFrame = frames[i];
          samples.push({
            size: currentFrame.data.byteLength,
            duration: 1024 // For AAC audio, all samples contain 1024 samples
          });
        }
        return samples;
      };

      // generate the track's sample table from an array of frames
      this.concatenateFrameData_ = function (frames) {
        var i,
            currentFrame,
            dataOffset = 0,
            data = new Uint8Array(sumFrameByteLengths(frames));

        for (i = 0; i < frames.length; i++) {
          currentFrame = frames[i];

          data.set(currentFrame.data, dataOffset);
          dataOffset += currentFrame.data.byteLength;
        }
        return data;
      };
    };

    _AudioSegmentStream.prototype = new stream();

    /**
     * Constructs a single-track, ISO BMFF media segment from H264 data
     * events. The output of this stream can be fed to a SourceBuffer
     * configured with a suitable initialization segment.
     * @param track {object} track metadata configuration
     * @param options {object} transmuxer options object
     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the
     *        gopsToAlignWith list when attempting to align gop pts
     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
     *        in the source; false to adjust the first segment to start at 0.
     */
    _VideoSegmentStream = function VideoSegmentStream(track, options) {
      var sequenceNumber = 0,
          nalUnits = [],
          gopsToAlignWith = [],
          config,
          pps;

      options = options || {};

      _VideoSegmentStream.prototype.init.call(this);

      delete track.minPTS;

      this.gopCache_ = [];

      /**
        * Constructs a ISO BMFF segment given H264 nalUnits
        * @param {Object} nalUnit A data event representing a nalUnit
        * @param {String} nalUnit.nalUnitType
        * @param {Object} nalUnit.config Properties for a mp4 track
        * @param {Uint8Array} nalUnit.data The nalUnit bytes
        * @see lib/codecs/h264.js
       **/
      this.push = function (nalUnit) {
        trackDecodeInfo.collectDtsInfo(track, nalUnit);

        // record the track config
        if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {
          config = nalUnit.config;
          track.sps = [nalUnit.data];

          VIDEO_PROPERTIES.forEach(function (prop) {
            track[prop] = config[prop];
          }, this);
        }

        if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {
          pps = nalUnit.data;
          track.pps = [nalUnit.data];
        }

        // buffer video until flush() is called
        nalUnits.push(nalUnit);
      };

      /**
        * Pass constructed ISO BMFF track and boxes on to the
        * next stream in the pipeline
       **/
      this.flush = function () {
        var frames, gopForFusion, gops, moof, mdat, boxes;

        // Throw away nalUnits at the start of the byte stream until
        // we find the first AUD
        while (nalUnits.length) {
          if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {
            break;
          }
          nalUnits.shift();
        }

        // Return early if no video data has been observed
        if (nalUnits.length === 0) {
          this.resetStream_();
          this.trigger('done', 'VideoSegmentStream');
          return;
        }

        // Organize the raw nal-units into arrays that represent
        // higher-level constructs such as frames and gops
        // (group-of-pictures)
        frames = frameUtils.groupNalsIntoFrames(nalUnits);
        gops = frameUtils.groupFramesIntoGops(frames);

        // If the first frame of this fragment is not a keyframe we have
        // a problem since MSE (on Chrome) requires a leading keyframe.
        //
        // We have two approaches to repairing this situation:
        // 1) GOP-FUSION:
        //    This is where we keep track of the GOPS (group-of-pictures)
        //    from previous fragments and attempt to find one that we can
        //    prepend to the current fragment in order to create a valid
        //    fragment.
        // 2) KEYFRAME-PULLING:
        //    Here we search for the first keyframe in the fragment and
        //    throw away all the frames between the start of the fragment
        //    and that keyframe. We then extend the duration and pull the
        //    PTS of the keyframe forward so that it covers the time range
        //    of the frames that were disposed of.
        //
        // #1 is far prefereable over #2 which can cause "stuttering" but
        // requires more things to be just right.
        if (!gops[0][0].keyFrame) {
          // Search for a gop for fusion from our gopCache
          gopForFusion = this.getGopForFusion_(nalUnits[0], track);

          if (gopForFusion) {
            gops.unshift(gopForFusion);
            // Adjust Gops' metadata to account for the inclusion of the
            // new gop at the beginning
            gops.byteLength += gopForFusion.byteLength;
            gops.nalCount += gopForFusion.nalCount;
            gops.pts = gopForFusion.pts;
            gops.dts = gopForFusion.dts;
            gops.duration += gopForFusion.duration;
          } else {
            // If we didn't find a candidate gop fall back to keyframe-pulling
            gops = frameUtils.extendFirstKeyFrame(gops);
          }
        }

        // Trim gops to align with gopsToAlignWith
        if (gopsToAlignWith.length) {
          var alignedGops;

          if (options.alignGopsAtEnd) {
            alignedGops = this.alignGopsAtEnd_(gops);
          } else {
            alignedGops = this.alignGopsAtStart_(gops);
          }

          if (!alignedGops) {
            // save all the nals in the last GOP into the gop cache
            this.gopCache_.unshift({
              gop: gops.pop(),
              pps: track.pps,
              sps: track.sps
            });

            // Keep a maximum of 6 GOPs in the cache
            this.gopCache_.length = Math.min(6, this.gopCache_.length);

            // Clear nalUnits
            nalUnits = [];

            // return early no gops can be aligned with desired gopsToAlignWith
            this.resetStream_();
            this.trigger('done', 'VideoSegmentStream');
            return;
          }

          // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct
          // when recalculated before sending off to CoalesceStream
          trackDecodeInfo.clearDtsInfo(track);

          gops = alignedGops;
        }

        trackDecodeInfo.collectDtsInfo(track, gops);

        // First, we have to build the index from byte locations to
        // samples (that is, frames) in the video data
        track.samples = frameUtils.generateSampleTable(gops);

        // Concatenate the video data and construct the mdat
        mdat = mp4Generator.mdat(frameUtils.concatenateNalData(gops));

        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);

        this.trigger('processedGopsInfo', gops.map(function (gop) {
          return {
            pts: gop.pts,
            dts: gop.dts,
            byteLength: gop.byteLength
          };
        }));

        // save all the nals in the last GOP into the gop cache
        this.gopCache_.unshift({
          gop: gops.pop(),
          pps: track.pps,
          sps: track.sps
        });

        // Keep a maximum of 6 GOPs in the cache
        this.gopCache_.length = Math.min(6, this.gopCache_.length);

        // Clear nalUnits
        nalUnits = [];

        this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);
        this.trigger('timelineStartInfo', track.timelineStartInfo);

        moof = mp4Generator.moof(sequenceNumber, [track]);

        // it would be great to allocate this array up front instead of
        // throwing away hundreds of media segment fragments
        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);

        // Bump the sequence number for next time
        sequenceNumber++;

        boxes.set(moof);
        boxes.set(mdat, moof.byteLength);

        this.trigger('data', { track: track, boxes: boxes });

        this.resetStream_();

        // Continue with the flush process now
        this.trigger('done', 'VideoSegmentStream');
      };

      this.resetStream_ = function () {
        trackDecodeInfo.clearDtsInfo(track);

        // reset config and pps because they may differ across segments
        // for instance, when we are rendition switching
        config = undefined;
        pps = undefined;
      };

      // Search for a candidate Gop for gop-fusion from the gop cache and
      // return it or return null if no good candidate was found
      this.getGopForFusion_ = function (nalUnit) {
        var halfSecond = 45000,


        // Half-a-second in a 90khz clock
        allowableOverlap = 10000,


        // About 3 frames @ 30fps
        nearestDistance = Infinity,
            dtsDistance,
            nearestGopObj,
            currentGop,
            currentGopObj,
            i;

        // Search for the GOP nearest to the beginning of this nal unit
        for (i = 0; i < this.gopCache_.length; i++) {
          currentGopObj = this.gopCache_[i];
          currentGop = currentGopObj.gop;

          // Reject Gops with different SPS or PPS
          if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {
            continue;
          }

          // Reject Gops that would require a negative baseMediaDecodeTime
          if (currentGop.dts < track.timelineStartInfo.dts) {
            continue;
          }

          // The distance between the end of the gop and the start of the nalUnit
          dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration;

          // Only consider GOPS that start before the nal unit and end within
          // a half-second of the nal unit
          if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {

            // Always use the closest GOP we found if there is more than
            // one candidate
            if (!nearestGopObj || nearestDistance > dtsDistance) {
              nearestGopObj = currentGopObj;
              nearestDistance = dtsDistance;
            }
          }
        }

        if (nearestGopObj) {
          return nearestGopObj.gop;
        }
        return null;
      };

      // trim gop list to the first gop found that has a matching pts with a gop in the list
      // of gopsToAlignWith starting from the START of the list
      this.alignGopsAtStart_ = function (gops) {
        var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;

        byteLength = gops.byteLength;
        nalCount = gops.nalCount;
        duration = gops.duration;
        alignIndex = gopIndex = 0;

        while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {
          align = gopsToAlignWith[alignIndex];
          gop = gops[gopIndex];

          if (align.pts === gop.pts) {
            break;
          }

          if (gop.pts > align.pts) {
            // this current gop starts after the current gop we want to align on, so increment
            // align index
            alignIndex++;
            continue;
          }

          // current gop starts before the current gop we want to align on. so increment gop
          // index
          gopIndex++;
          byteLength -= gop.byteLength;
          nalCount -= gop.nalCount;
          duration -= gop.duration;
        }

        if (gopIndex === 0) {
          // no gops to trim
          return gops;
        }

        if (gopIndex === gops.length) {
          // all gops trimmed, skip appending all gops
          return null;
        }

        alignedGops = gops.slice(gopIndex);
        alignedGops.byteLength = byteLength;
        alignedGops.duration = duration;
        alignedGops.nalCount = nalCount;
        alignedGops.pts = alignedGops[0].pts;
        alignedGops.dts = alignedGops[0].dts;

        return alignedGops;
      };

      // trim gop list to the first gop found that has a matching pts with a gop in the list
      // of gopsToAlignWith starting from the END of the list
      this.alignGopsAtEnd_ = function (gops) {
        var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;

        alignIndex = gopsToAlignWith.length - 1;
        gopIndex = gops.length - 1;
        alignEndIndex = null;
        matchFound = false;

        while (alignIndex >= 0 && gopIndex >= 0) {
          align = gopsToAlignWith[alignIndex];
          gop = gops[gopIndex];

          if (align.pts === gop.pts) {
            matchFound = true;
            break;
          }

          if (align.pts > gop.pts) {
            alignIndex--;
            continue;
          }

          if (alignIndex === gopsToAlignWith.length - 1) {
            // gop.pts is greater than the last alignment candidate. If no match is found
            // by the end of this loop, we still want to append gops that come after this
            // point
            alignEndIndex = gopIndex;
          }

          gopIndex--;
        }

        if (!matchFound && alignEndIndex === null) {
          return null;
        }

        var trimIndex;

        if (matchFound) {
          trimIndex = gopIndex;
        } else {
          trimIndex = alignEndIndex;
        }

        if (trimIndex === 0) {
          return gops;
        }

        var alignedGops = gops.slice(trimIndex);
        var metadata = alignedGops.reduce(function (total, gop) {
          total.byteLength += gop.byteLength;
          total.duration += gop.duration;
          total.nalCount += gop.nalCount;
          return total;
        }, { byteLength: 0, duration: 0, nalCount: 0 });

        alignedGops.byteLength = metadata.byteLength;
        alignedGops.duration = metadata.duration;
        alignedGops.nalCount = metadata.nalCount;
        alignedGops.pts = alignedGops[0].pts;
        alignedGops.dts = alignedGops[0].dts;

        return alignedGops;
      };

      this.alignGopsWith = function (newGopsToAlignWith) {
        gopsToAlignWith = newGopsToAlignWith;
      };
    };

    _VideoSegmentStream.prototype = new stream();

    /**
     * A Stream that can combine multiple streams (ie. audio & video)
     * into a single output segment for MSE. Also supports audio-only
     * and video-only streams.
     */
    _CoalesceStream = function CoalesceStream(options, metadataStream) {
      // Number of Tracks per output segment
      // If greater than 1, we combine multiple
      // tracks into a single segment
      this.numberOfTracks = 0;
      this.metadataStream = metadataStream;

      if (typeof options.remux !== 'undefined') {
        this.remuxTracks = !!options.remux;
      } else {
        this.remuxTracks = true;
      }

      this.pendingTracks = [];
      this.videoTrack = null;
      this.pendingBoxes = [];
      this.pendingCaptions = [];
      this.pendingMetadata = [];
      this.pendingBytes = 0;
      this.emittedTracks = 0;

      _CoalesceStream.prototype.init.call(this);

      // Take output from multiple
      this.push = function (output) {
        // buffer incoming captions until the associated video segment
        // finishes
        if (output.text) {
          return this.pendingCaptions.push(output);
        }
        // buffer incoming id3 tags until the final flush
        if (output.frames) {
          return this.pendingMetadata.push(output);
        }

        // Add this track to the list of pending tracks and store
        // important information required for the construction of
        // the final segment
        this.pendingTracks.push(output.track);
        this.pendingBoxes.push(output.boxes);
        this.pendingBytes += output.boxes.byteLength;

        if (output.track.type === 'video') {
          this.videoTrack = output.track;
        }
        if (output.track.type === 'audio') {
          this.audioTrack = output.track;
        }
      };
    };

    _CoalesceStream.prototype = new stream();
    _CoalesceStream.prototype.flush = function (flushSource) {
      var offset = 0,
          event = {
        captions: [],
        captionStreams: {},
        metadata: [],
        info: {}
      },
          caption,
          id3,
          initSegment,
          timelineStartPts = 0,
          i;

      if (this.pendingTracks.length < this.numberOfTracks) {
        if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {
          // Return because we haven't received a flush from a data-generating
          // portion of the segment (meaning that we have only recieved meta-data
          // or captions.)
          return;
        } else if (this.remuxTracks) {
          // Return until we have enough tracks from the pipeline to remux (if we
          // are remuxing audio and video into a single MP4)
          return;
        } else if (this.pendingTracks.length === 0) {
          // In the case where we receive a flush without any data having been
          // received we consider it an emitted track for the purposes of coalescing
          // `done` events.
          // We do this for the case where there is an audio and video track in the
          // segment but no audio data. (seen in several playlists with alternate
          // audio tracks and no audio present in the main TS segments.)
          this.emittedTracks++;

          if (this.emittedTracks >= this.numberOfTracks) {
            this.trigger('done');
            this.emittedTracks = 0;
          }
          return;
        }
      }

      if (this.videoTrack) {
        timelineStartPts = this.videoTrack.timelineStartInfo.pts;
        VIDEO_PROPERTIES.forEach(function (prop) {
          event.info[prop] = this.videoTrack[prop];
        }, this);
      } else if (this.audioTrack) {
        timelineStartPts = this.audioTrack.timelineStartInfo.pts;
        AUDIO_PROPERTIES.forEach(function (prop) {
          event.info[prop] = this.audioTrack[prop];
        }, this);
      }

      if (this.pendingTracks.length === 1) {
        event.type = this.pendingTracks[0].type;
      } else {
        event.type = 'combined';
      }

      this.emittedTracks += this.pendingTracks.length;

      initSegment = mp4Generator.initSegment(this.pendingTracks);

      // Create a new typed array to hold the init segment
      event.initSegment = new Uint8Array(initSegment.byteLength);

      // Create an init segment containing a moov
      // and track definitions
      event.initSegment.set(initSegment);

      // Create a new typed array to hold the moof+mdats
      event.data = new Uint8Array(this.pendingBytes);

      // Append each moof+mdat (one per track) together
      for (i = 0; i < this.pendingBoxes.length; i++) {
        event.data.set(this.pendingBoxes[i], offset);
        offset += this.pendingBoxes[i].byteLength;
      }

      // Translate caption PTS times into second offsets into the
      // video timeline for the segment, and add track info
      for (i = 0; i < this.pendingCaptions.length; i++) {
        caption = this.pendingCaptions[i];
        caption.startTime = caption.startPts - timelineStartPts;
        caption.startTime /= 90e3;
        caption.endTime = caption.endPts - timelineStartPts;
        caption.endTime /= 90e3;
        event.captionStreams[caption.stream] = true;
        event.captions.push(caption);
      }

      // Translate ID3 frame PTS times into second offsets into the
      // video timeline for the segment
      for (i = 0; i < this.pendingMetadata.length; i++) {
        id3 = this.pendingMetadata[i];
        id3.cueTime = id3.pts - timelineStartPts;
        id3.cueTime /= 90e3;
        event.metadata.push(id3);
      }
      // We add this to every single emitted segment even though we only need
      // it for the first
      event.metadata.dispatchType = this.metadataStream.dispatchType;

      // Reset stream state
      this.pendingTracks.length = 0;
      this.videoTrack = null;
      this.pendingBoxes.length = 0;
      this.pendingCaptions.length = 0;
      this.pendingBytes = 0;
      this.pendingMetadata.length = 0;

      // Emit the built segment
      this.trigger('data', event);

      // Only emit `done` if all tracks have been flushed and emitted
      if (this.emittedTracks >= this.numberOfTracks) {
        this.trigger('done');
        this.emittedTracks = 0;
      }
    };
    /**
     * A Stream that expects MP2T binary data as input and produces
     * corresponding media segments, suitable for use with Media Source
     * Extension (MSE) implementations that support the ISO BMFF byte
     * stream format, like Chrome.
     */
    _Transmuxer = function Transmuxer(options) {
      var self = this,
          hasFlushed = true,
          videoTrack,
          audioTrack;

      _Transmuxer.prototype.init.call(this);

      options = options || {};
      this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;
      this.transmuxPipeline_ = {};

      this.setupAacPipeline = function () {
        var pipeline = {};
        this.transmuxPipeline_ = pipeline;

        pipeline.type = 'aac';
        pipeline.metadataStream = new m2ts_1.MetadataStream();

        // set up the parsing pipeline
        pipeline.aacStream = new aac();
        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');
        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');
        pipeline.adtsStream = new adts();
        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
        pipeline.headOfPipeline = pipeline.aacStream;

        pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);
        pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);

        pipeline.metadataStream.on('timestamp', function (frame) {
          pipeline.aacStream.setTimestamp(frame.timeStamp);
        });

        pipeline.aacStream.on('data', function (data) {
          if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {
            audioTrack = audioTrack || {
              timelineStartInfo: {
                baseMediaDecodeTime: self.baseMediaDecodeTime
              },
              codec: 'adts',
              type: 'audio'
            };
            // hook up the audio segment stream to the first track with aac data
            pipeline.coalesceStream.numberOfTracks++;
            pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);
            // Set up the final part of the audio pipeline
            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
          }
        });

        // Re-emit any data coming from the coalesce stream to the outside world
        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));
        // Let the consumer know we have finished flushing the entire pipeline
        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));
      };

      this.setupTsPipeline = function () {
        var pipeline = {};
        this.transmuxPipeline_ = pipeline;

        pipeline.type = 'ts';
        pipeline.metadataStream = new m2ts_1.MetadataStream();

        // set up the parsing pipeline
        pipeline.packetStream = new m2ts_1.TransportPacketStream();
        pipeline.parseStream = new m2ts_1.TransportParseStream();
        pipeline.elementaryStream = new m2ts_1.ElementaryStream();
        pipeline.videoTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('video');
        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');
        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');
        pipeline.adtsStream = new adts();
        pipeline.h264Stream = new H264Stream();
        pipeline.captionStream = new m2ts_1.CaptionStream();
        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
        pipeline.headOfPipeline = pipeline.packetStream;

        // disassemble MPEG2-TS packets into elementary streams
        pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream);

        // !!THIS ORDER IS IMPORTANT!!
        // demux the streams
        pipeline.elementaryStream.pipe(pipeline.videoTimestampRolloverStream).pipe(pipeline.h264Stream);
        pipeline.elementaryStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);

        pipeline.elementaryStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);

        // Hook up CEA-608/708 caption stream
        pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);

        pipeline.elementaryStream.on('data', function (data) {
          var i;

          if (data.type === 'metadata') {
            i = data.tracks.length;

            // scan the tracks listed in the metadata
            while (i--) {
              if (!videoTrack && data.tracks[i].type === 'video') {
                videoTrack = data.tracks[i];
                videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;
              } else if (!audioTrack && data.tracks[i].type === 'audio') {
                audioTrack = data.tracks[i];
                audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;
              }
            }

            // hook up the video segment stream to the first track with h264 data
            if (videoTrack && !pipeline.videoSegmentStream) {
              pipeline.coalesceStream.numberOfTracks++;
              pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options);

              pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {
                // When video emits timelineStartInfo data after a flush, we forward that
                // info to the AudioSegmentStream, if it exists, because video timeline
                // data takes precedence.
                if (audioTrack) {
                  audioTrack.timelineStartInfo = timelineStartInfo;
                  // On the first segment we trim AAC frames that exist before the
                  // very earliest DTS we have seen in video because Chrome will
                  // interpret any video track with a baseMediaDecodeTime that is
                  // non-zero as a gap.
                  pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);
                }
              });

              pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));

              pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {
                if (audioTrack) {
                  pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);
                }
              });

              // Set up the final part of the video pipeline
              pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);
            }

            if (audioTrack && !pipeline.audioSegmentStream) {
              // hook up the audio segment stream to the first track with aac data
              pipeline.coalesceStream.numberOfTracks++;
              pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);

              // Set up the final part of the audio pipeline
              pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
            }
          }
        });

        // Re-emit any data coming from the coalesce stream to the outside world
        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));
        // Let the consumer know we have finished flushing the entire pipeline
        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));
      };

      // hook up the segment streams once track metadata is delivered
      this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {
        var pipeline = this.transmuxPipeline_;

        this.baseMediaDecodeTime = baseMediaDecodeTime;
        if (audioTrack) {
          audioTrack.timelineStartInfo.dts = undefined;
          audioTrack.timelineStartInfo.pts = undefined;
          trackDecodeInfo.clearDtsInfo(audioTrack);
          audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;
          if (pipeline.audioTimestampRolloverStream) {
            pipeline.audioTimestampRolloverStream.discontinuity();
          }
        }
        if (videoTrack) {
          if (pipeline.videoSegmentStream) {
            pipeline.videoSegmentStream.gopCache_ = [];
            pipeline.videoTimestampRolloverStream.discontinuity();
          }
          videoTrack.timelineStartInfo.dts = undefined;
          videoTrack.timelineStartInfo.pts = undefined;
          trackDecodeInfo.clearDtsInfo(videoTrack);
          pipeline.captionStream.reset();
          videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;
        }

        if (pipeline.timedMetadataTimestampRolloverStream) {
          pipeline.timedMetadataTimestampRolloverStream.discontinuity();
        }
      };

      this.setAudioAppendStart = function (timestamp) {
        if (audioTrack) {
          this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);
        }
      };

      this.alignGopsWith = function (gopsToAlignWith) {
        if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {
          this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);
        }
      };

      // feed incoming data to the front of the parsing pipeline
      this.push = function (data) {
        if (hasFlushed) {
          var isAac = isLikelyAacData(data);

          if (isAac && this.transmuxPipeline_.type !== 'aac') {
            this.setupAacPipeline();
          } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {
            this.setupTsPipeline();
          }
          hasFlushed = false;
        }
        this.transmuxPipeline_.headOfPipeline.push(data);
      };

      // flush any buffered data
      this.flush = function () {
        hasFlushed = true;
        // Start at the top of the pipeline and flush all pending work
        this.transmuxPipeline_.headOfPipeline.flush();
      };

      // Caption data has to be reset when seeking outside buffered range
      this.resetCaptions = function () {
        if (this.transmuxPipeline_.captionStream) {
          this.transmuxPipeline_.captionStream.reset();
        }
      };
    };
    _Transmuxer.prototype = new stream();

    var transmuxer = {
      Transmuxer: _Transmuxer,
      VideoSegmentStream: _VideoSegmentStream,
      AudioSegmentStream: _AudioSegmentStream,
      AUDIO_PROPERTIES: AUDIO_PROPERTIES,
      VIDEO_PROPERTIES: VIDEO_PROPERTIES
    };

    var inspectMp4,
        _textifyMp,
        parseType$1 = probe.parseType,
        parseMp4Date = function parseMp4Date(seconds) {
      return new Date(seconds * 1000 - 2082844800000);
    },
        parseSampleFlags = function parseSampleFlags(flags) {
      return {
        isLeading: (flags[0] & 0x0c) >>> 2,
        dependsOn: flags[0] & 0x03,
        isDependedOn: (flags[1] & 0xc0) >>> 6,
        hasRedundancy: (flags[1] & 0x30) >>> 4,
        paddingValue: (flags[1] & 0x0e) >>> 1,
        isNonSyncSample: flags[1] & 0x01,
        degradationPriority: flags[2] << 8 | flags[3]
      };
    },
        nalParse = function nalParse(avcStream) {
      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),
          result = [],
          i,
          length;
      for (i = 0; i + 4 < avcStream.length; i += length) {
        length = avcView.getUint32(i);
        i += 4;

        // bail if this doesn't appear to be an H264 stream
        if (length <= 0) {
          result.push('<span style=\'color:red;\'>MALFORMED DATA</span>');
          continue;
        }

        switch (avcStream[i] & 0x1F) {
          case 0x01:
            result.push('slice_layer_without_partitioning_rbsp');
            break;
          case 0x05:
            result.push('slice_layer_without_partitioning_rbsp_idr');
            break;
          case 0x06:
            result.push('sei_rbsp');
            break;
          case 0x07:
            result.push('seq_parameter_set_rbsp');
            break;
          case 0x08:
            result.push('pic_parameter_set_rbsp');
            break;
          case 0x09:
            result.push('access_unit_delimiter_rbsp');
            break;
          default:
            result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);
            break;
        }
      }
      return result;
    },


    // registry of handlers for individual mp4 box types
    parse$$1 = {
      // codingname, not a first-class box type. stsd entries share the
      // same format as real boxes so the parsing infrastructure can be
      // shared
      avc1: function avc1(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
        return {
          dataReferenceIndex: view.getUint16(6),
          width: view.getUint16(24),
          height: view.getUint16(26),
          horizresolution: view.getUint16(28) + view.getUint16(30) / 16,
          vertresolution: view.getUint16(32) + view.getUint16(34) / 16,
          frameCount: view.getUint16(40),
          depth: view.getUint16(74),
          config: inspectMp4(data.subarray(78, data.byteLength))
        };
      },
      avcC: function avcC(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            result = {
          configurationVersion: data[0],
          avcProfileIndication: data[1],
          profileCompatibility: data[2],
          avcLevelIndication: data[3],
          lengthSizeMinusOne: data[4] & 0x03,
          sps: [],
          pps: []
        },
            numOfSequenceParameterSets = data[5] & 0x1f,
            numOfPictureParameterSets,
            nalSize,
            offset,
            i;

        // iterate past any SPSs
        offset = 6;
        for (i = 0; i < numOfSequenceParameterSets; i++) {
          nalSize = view.getUint16(offset);
          offset += 2;
          result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));
          offset += nalSize;
        }
        // iterate past any PPSs
        numOfPictureParameterSets = data[offset];
        offset++;
        for (i = 0; i < numOfPictureParameterSets; i++) {
          nalSize = view.getUint16(offset);
          offset += 2;
          result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));
          offset += nalSize;
        }
        return result;
      },
      btrt: function btrt(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
        return {
          bufferSizeDB: view.getUint32(0),
          maxBitrate: view.getUint32(4),
          avgBitrate: view.getUint32(8)
        };
      },
      esds: function esds(data) {
        return {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          esId: data[6] << 8 | data[7],
          streamPriority: data[8] & 0x1f,
          decoderConfig: {
            objectProfileIndication: data[11],
            streamType: data[12] >>> 2 & 0x3f,
            bufferSize: data[13] << 16 | data[14] << 8 | data[15],
            maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],
            avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],
            decoderConfigDescriptor: {
              tag: data[24],
              length: data[25],
              audioObjectType: data[26] >>> 3 & 0x1f,
              samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,
              channelConfiguration: data[27] >>> 3 & 0x0f
            }
          }
        };
      },
      ftyp: function ftyp(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            result = {
          majorBrand: parseType$1(data.subarray(0, 4)),
          minorVersion: view.getUint32(4),
          compatibleBrands: []
        },
            i = 8;
        while (i < data.byteLength) {
          result.compatibleBrands.push(parseType$1(data.subarray(i, i + 4)));
          i += 4;
        }
        return result;
      },
      dinf: function dinf(data) {
        return {
          boxes: inspectMp4(data)
        };
      },
      dref: function dref(data) {
        return {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          dataReferences: inspectMp4(data.subarray(8))
        };
      },
      hdlr: function hdlr(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            result = {
          version: view.getUint8(0),
          flags: new Uint8Array(data.subarray(1, 4)),
          handlerType: parseType$1(data.subarray(8, 12)),
          name: ''
        },
            i = 8;

        // parse out the name field
        for (i = 24; i < data.byteLength; i++) {
          if (data[i] === 0x00) {
            // the name field is null-terminated
            i++;
            break;
          }
          result.name += String.fromCharCode(data[i]);
        }
        // decode UTF-8 to javascript's internal representation
        // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html
        result.name = decodeURIComponent(escape(result.name));

        return result;
      },
      mdat: function mdat(data) {
        return {
          byteLength: data.byteLength,
          nals: nalParse(data)
        };
      },
      mdhd: function mdhd(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            i = 4,
            language,
            result = {
          version: view.getUint8(0),
          flags: new Uint8Array(data.subarray(1, 4)),
          language: ''
        };
        if (result.version === 1) {
          i += 4;
          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
          i += 8;
          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
          i += 4;
          result.timescale = view.getUint32(i);
          i += 8;
          result.duration = view.getUint32(i); // truncating top 4 bytes
        } else {
          result.creationTime = parseMp4Date(view.getUint32(i));
          i += 4;
          result.modificationTime = parseMp4Date(view.getUint32(i));
          i += 4;
          result.timescale = view.getUint32(i);
          i += 4;
          result.duration = view.getUint32(i);
        }
        i += 4;
        // language is stored as an ISO-639-2/T code in an array of three 5-bit fields
        // each field is the packed difference between its ASCII value and 0x60
        language = view.getUint16(i);
        result.language += String.fromCharCode((language >> 10) + 0x60);
        result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);
        result.language += String.fromCharCode((language & 0x1f) + 0x60);

        return result;
      },
      mdia: function mdia(data) {
        return {
          boxes: inspectMp4(data)
        };
      },
      mfhd: function mfhd(data) {
        return {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]
        };
      },
      minf: function minf(data) {
        return {
          boxes: inspectMp4(data)
        };
      },
      // codingname, not a first-class box type. stsd entries share the
      // same format as real boxes so the parsing infrastructure can be
      // shared
      mp4a: function mp4a(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            result = {
          // 6 bytes reserved
          dataReferenceIndex: view.getUint16(6),
          // 4 + 4 bytes reserved
          channelcount: view.getUint16(16),
          samplesize: view.getUint16(18),
          // 2 bytes pre_defined
          // 2 bytes reserved
          samplerate: view.getUint16(24) + view.getUint16(26) / 65536
        };

        // if there are more bytes to process, assume this is an ISO/IEC
        // 14496-14 MP4AudioSampleEntry and parse the ESDBox
        if (data.byteLength > 28) {
          result.streamDescriptor = inspectMp4(data.subarray(28))[0];
        }
        return result;
      },
      moof: function moof(data) {
        return {
          boxes: inspectMp4(data)
        };
      },
      moov: function moov(data) {
        return {
          boxes: inspectMp4(data)
        };
      },
      mvex: function mvex(data) {
        return {
          boxes: inspectMp4(data)
        };
      },
      mvhd: function mvhd(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            i = 4,
            result = {
          version: view.getUint8(0),
          flags: new Uint8Array(data.subarray(1, 4))
        };

        if (result.version === 1) {
          i += 4;
          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
          i += 8;
          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
          i += 4;
          result.timescale = view.getUint32(i);
          i += 8;
          result.duration = view.getUint32(i); // truncating top 4 bytes
        } else {
          result.creationTime = parseMp4Date(view.getUint32(i));
          i += 4;
          result.modificationTime = parseMp4Date(view.getUint32(i));
          i += 4;
          result.timescale = view.getUint32(i);
          i += 4;
          result.duration = view.getUint32(i);
        }
        i += 4;

        // convert fixed-point, base 16 back to a number
        result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;
        i += 4;
        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;
        i += 2;
        i += 2;
        i += 2 * 4;
        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));
        i += 9 * 4;
        i += 6 * 4;
        result.nextTrackId = view.getUint32(i);
        return result;
      },
      pdin: function pdin(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
        return {
          version: view.getUint8(0),
          flags: new Uint8Array(data.subarray(1, 4)),
          rate: view.getUint32(4),
          initialDelay: view.getUint32(8)
        };
      },
      sdtp: function sdtp(data) {
        var result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          samples: []
        },
            i;

        for (i = 4; i < data.byteLength; i++) {
          result.samples.push({
            dependsOn: (data[i] & 0x30) >> 4,
            isDependedOn: (data[i] & 0x0c) >> 2,
            hasRedundancy: data[i] & 0x03
          });
        }
        return result;
      },
      sidx: function sidx(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          references: [],
          referenceId: view.getUint32(4),
          timescale: view.getUint32(8),
          earliestPresentationTime: view.getUint32(12),
          firstOffset: view.getUint32(16)
        },
            referenceCount = view.getUint16(22),
            i;

        for (i = 24; referenceCount; i += 12, referenceCount--) {
          result.references.push({
            referenceType: (data[i] & 0x80) >>> 7,
            referencedSize: view.getUint32(i) & 0x7FFFFFFF,
            subsegmentDuration: view.getUint32(i + 4),
            startsWithSap: !!(data[i + 8] & 0x80),
            sapType: (data[i + 8] & 0x70) >>> 4,
            sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF
          });
        }

        return result;
      },
      smhd: function smhd(data) {
        return {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          balance: data[4] + data[5] / 256
        };
      },
      stbl: function stbl(data) {
        return {
          boxes: inspectMp4(data)
        };
      },
      stco: function stco(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          chunkOffsets: []
        },
            entryCount = view.getUint32(4),
            i;
        for (i = 8; entryCount; i += 4, entryCount--) {
          result.chunkOffsets.push(view.getUint32(i));
        }
        return result;
      },
      stsc: function stsc(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            entryCount = view.getUint32(4),
            result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          sampleToChunks: []
        },
            i;
        for (i = 8; entryCount; i += 12, entryCount--) {
          result.sampleToChunks.push({
            firstChunk: view.getUint32(i),
            samplesPerChunk: view.getUint32(i + 4),
            sampleDescriptionIndex: view.getUint32(i + 8)
          });
        }
        return result;
      },
      stsd: function stsd(data) {
        return {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          sampleDescriptions: inspectMp4(data.subarray(8))
        };
      },
      stsz: function stsz(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          sampleSize: view.getUint32(4),
          entries: []
        },
            i;
        for (i = 12; i < data.byteLength; i += 4) {
          result.entries.push(view.getUint32(i));
        }
        return result;
      },
      stts: function stts(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          timeToSamples: []
        },
            entryCount = view.getUint32(4),
            i;

        for (i = 8; entryCount; i += 8, entryCount--) {
          result.timeToSamples.push({
            sampleCount: view.getUint32(i),
            sampleDelta: view.getUint32(i + 4)
          });
        }
        return result;
      },
      styp: function styp(data) {
        return parse$$1.ftyp(data);
      },
      tfdt: function tfdt(data) {
        var result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]
        };
        if (result.version === 1) {
          result.baseMediaDecodeTime *= Math.pow(2, 32);
          result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];
        }
        return result;
      },
      tfhd: function tfhd(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          trackId: view.getUint32(4)
        },
            baseDataOffsetPresent = result.flags[2] & 0x01,
            sampleDescriptionIndexPresent = result.flags[2] & 0x02,
            defaultSampleDurationPresent = result.flags[2] & 0x08,
            defaultSampleSizePresent = result.flags[2] & 0x10,
            defaultSampleFlagsPresent = result.flags[2] & 0x20,
            durationIsEmpty = result.flags[0] & 0x010000,
            defaultBaseIsMoof = result.flags[0] & 0x020000,
            i;

        i = 8;
        if (baseDataOffsetPresent) {
          i += 4; // truncate top 4 bytes
          // FIXME: should we read the full 64 bits?
          result.baseDataOffset = view.getUint32(12);
          i += 4;
        }
        if (sampleDescriptionIndexPresent) {
          result.sampleDescriptionIndex = view.getUint32(i);
          i += 4;
        }
        if (defaultSampleDurationPresent) {
          result.defaultSampleDuration = view.getUint32(i);
          i += 4;
        }
        if (defaultSampleSizePresent) {
          result.defaultSampleSize = view.getUint32(i);
          i += 4;
        }
        if (defaultSampleFlagsPresent) {
          result.defaultSampleFlags = view.getUint32(i);
        }
        if (durationIsEmpty) {
          result.durationIsEmpty = true;
        }
        if (!baseDataOffsetPresent && defaultBaseIsMoof) {
          result.baseDataOffsetIsMoof = true;
        }
        return result;
      },
      tkhd: function tkhd(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),
            i = 4,
            result = {
          version: view.getUint8(0),
          flags: new Uint8Array(data.subarray(1, 4))
        };
        if (result.version === 1) {
          i += 4;
          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
          i += 8;
          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes
          i += 4;
          result.trackId = view.getUint32(i);
          i += 4;
          i += 8;
          result.duration = view.getUint32(i); // truncating top 4 bytes
        } else {
          result.creationTime = parseMp4Date(view.getUint32(i));
          i += 4;
          result.modificationTime = parseMp4Date(view.getUint32(i));
          i += 4;
          result.trackId = view.getUint32(i);
          i += 4;
          i += 4;
          result.duration = view.getUint32(i);
        }
        i += 4;
        i += 2 * 4;
        result.layer = view.getUint16(i);
        i += 2;
        result.alternateGroup = view.getUint16(i);
        i += 2;
        // convert fixed-point, base 16 back to a number
        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;
        i += 2;
        i += 2;
        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));
        i += 9 * 4;
        result.width = view.getUint16(i) + view.getUint16(i + 2) / 16;
        i += 4;
        result.height = view.getUint16(i) + view.getUint16(i + 2) / 16;
        return result;
      },
      traf: function traf(data) {
        return {
          boxes: inspectMp4(data)
        };
      },
      trak: function trak(data) {
        return {
          boxes: inspectMp4(data)
        };
      },
      trex: function trex(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
        return {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          trackId: view.getUint32(4),
          defaultSampleDescriptionIndex: view.getUint32(8),
          defaultSampleDuration: view.getUint32(12),
          defaultSampleSize: view.getUint32(16),
          sampleDependsOn: data[20] & 0x03,
          sampleIsDependedOn: (data[21] & 0xc0) >> 6,
          sampleHasRedundancy: (data[21] & 0x30) >> 4,
          samplePaddingValue: (data[21] & 0x0e) >> 1,
          sampleIsDifferenceSample: !!(data[21] & 0x01),
          sampleDegradationPriority: view.getUint16(22)
        };
      },
      trun: function trun(data) {
        var result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          samples: []
        },
            view = new DataView(data.buffer, data.byteOffset, data.byteLength),


        // Flag interpretation
        dataOffsetPresent = result.flags[2] & 0x01,


        // compare with 2nd byte of 0x1
        firstSampleFlagsPresent = result.flags[2] & 0x04,


        // compare with 2nd byte of 0x4
        sampleDurationPresent = result.flags[1] & 0x01,


        // compare with 2nd byte of 0x100
        sampleSizePresent = result.flags[1] & 0x02,


        // compare with 2nd byte of 0x200
        sampleFlagsPresent = result.flags[1] & 0x04,


        // compare with 2nd byte of 0x400
        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,


        // compare with 2nd byte of 0x800
        sampleCount = view.getUint32(4),
            offset = 8,
            sample;

        if (dataOffsetPresent) {
          // 32 bit signed integer
          result.dataOffset = view.getInt32(offset);
          offset += 4;
        }

        // Overrides the flags for the first sample only. The order of
        // optional values will be: duration, size, compositionTimeOffset
        if (firstSampleFlagsPresent && sampleCount) {
          sample = {
            flags: parseSampleFlags(data.subarray(offset, offset + 4))
          };
          offset += 4;
          if (sampleDurationPresent) {
            sample.duration = view.getUint32(offset);
            offset += 4;
          }
          if (sampleSizePresent) {
            sample.size = view.getUint32(offset);
            offset += 4;
          }
          if (sampleCompositionTimeOffsetPresent) {
            // Note: this should be a signed int if version is 1
            sample.compositionTimeOffset = view.getUint32(offset);
            offset += 4;
          }
          result.samples.push(sample);
          sampleCount--;
        }

        while (sampleCount--) {
          sample = {};
          if (sampleDurationPresent) {
            sample.duration = view.getUint32(offset);
            offset += 4;
          }
          if (sampleSizePresent) {
            sample.size = view.getUint32(offset);
            offset += 4;
          }
          if (sampleFlagsPresent) {
            sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));
            offset += 4;
          }
          if (sampleCompositionTimeOffsetPresent) {
            // Note: this should be a signed int if version is 1
            sample.compositionTimeOffset = view.getUint32(offset);
            offset += 4;
          }
          result.samples.push(sample);
        }
        return result;
      },
      'url ': function url(data) {
        return {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4))
        };
      },
      vmhd: function vmhd(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
        return {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          graphicsmode: view.getUint16(4),
          opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])
        };
      }
    };

    /**
     * Return a javascript array of box objects parsed from an ISO base
     * media file.
     * @param data {Uint8Array} the binary data of the media to be inspected
     * @return {array} a javascript array of potentially nested box objects
     */
    inspectMp4 = function inspectMp4(data) {
      var i = 0,
          result = [],
          view,
          size,
          type,
          end,
          box;

      // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API
      var ab = new ArrayBuffer(data.length);
      var v = new Uint8Array(ab);
      for (var z = 0; z < data.length; ++z) {
        v[z] = data[z];
      }
      view = new DataView(ab);

      while (i < data.byteLength) {
        // parse box data
        size = view.getUint32(i);
        type = parseType$1(data.subarray(i + 4, i + 8));
        end = size > 1 ? i + size : data.byteLength;

        // parse type-specific data
        box = (parse$$1[type] || function (data) {
          return {
            data: data
          };
        })(data.subarray(i + 8, end));
        box.size = size;
        box.type = type;

        // store this box and move to the next
        result.push(box);
        i = end;
      }
      return result;
    };

    /**
     * Returns a textual representation of the javascript represtentation
     * of an MP4 file. You can use it as an alternative to
     * JSON.stringify() to compare inspected MP4s.
     * @param inspectedMp4 {array} the parsed array of boxes in an MP4
     * file
     * @param depth {number} (optional) the number of ancestor boxes of
     * the elements of inspectedMp4. Assumed to be zero if unspecified.
     * @return {string} a text representation of the parsed MP4
     */
    _textifyMp = function textifyMp4(inspectedMp4, depth) {
      var indent;
      depth = depth || 0;
      indent = new Array(depth * 2 + 1).join(' ');

      // iterate over all the boxes
      return inspectedMp4.map(function (box, index) {

        // list the box type first at the current indentation level
        return indent + box.type + '\n' +

        // the type is already included and handle child boxes separately
        Object.keys(box).filter(function (key) {
          return key !== 'type' && key !== 'boxes';

          // output all the box properties
        }).map(function (key) {
          var prefix = indent + '  ' + key + ': ',
              value = box[key];

          // print out raw bytes as hexademical
          if (value instanceof Uint8Array || value instanceof Uint32Array) {
            var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {
              return ' ' + ('00' + byte.toString(16)).slice(-2);
            }).join('').match(/.{1,24}/g);
            if (!bytes) {
              return prefix + '<>';
            }
            if (bytes.length === 1) {
              return prefix + '<' + bytes.join('').slice(1) + '>';
            }
            return prefix + '<\n' + bytes.map(function (line) {
              return indent + '  ' + line;
            }).join('\n') + '\n' + indent + '  >';
          }

          // stringify generic objects
          return prefix + JSON.stringify(value, null, 2).split('\n').map(function (line, index) {
            if (index === 0) {
              return line;
            }
            return indent + '  ' + line;
          }).join('\n');
        }).join('\n') + (

        // recursively textify the child boxes
        box.boxes ? '\n' + _textifyMp(box.boxes, depth + 1) : '');
      }).join('\n');
    };

    var mp4Inspector = {
      inspect: inspectMp4,
      textify: _textifyMp,
      parseTfdt: parse$$1.tfdt,
      parseHdlr: parse$$1.hdlr,
      parseTfhd: parse$$1.tfhd,
      parseTrun: parse$$1.trun
    };

    var discardEmulationPreventionBytes$1 = captionPacketParser.discardEmulationPreventionBytes;
    var CaptionStream$1 = captionStream.CaptionStream;

    /**
      * Maps an offset in the mdat to a sample based on the the size of the samples.
      * Assumes that `parseSamples` has been called first.
      *
      * @param {Number} offset - The offset into the mdat
      * @param {Object[]} samples - An array of samples, parsed using `parseSamples`
      * @return {?Object} The matching sample, or null if no match was found.
      *
      * @see ISO-BMFF-12/2015, Section 8.8.8
     **/
    var mapToSample = function mapToSample(offset, samples) {
      var approximateOffset = offset;

      for (var i = 0; i < samples.length; i++) {
        var sample = samples[i];

        if (approximateOffset < sample.size) {
          return sample;
        }

        approximateOffset -= sample.size;
      }

      return null;
    };

    /**
      * Finds SEI nal units contained in a Media Data Box.
      * Assumes that `parseSamples` has been called first.
      *
      * @param {Uint8Array} avcStream - The bytes of the mdat
      * @param {Object[]} samples - The samples parsed out by `parseSamples`
      * @param {Number} trackId - The trackId of this video track
      * @return {Object[]} seiNals - the parsed SEI NALUs found.
      *   The contents of the seiNal should match what is expected by
      *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)
      *
      * @see ISO-BMFF-12/2015, Section 8.1.1
      * @see Rec. ITU-T H.264, 7.3.2.3.1
     **/
    var findSeiNals = function findSeiNals(avcStream, samples, trackId) {
      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),
          result = [],
          seiNal,
          i,
          length,
          lastMatchedSample;

      for (i = 0; i + 4 < avcStream.length; i += length) {
        length = avcView.getUint32(i);
        i += 4;

        // Bail if this doesn't appear to be an H264 stream
        if (length <= 0) {
          continue;
        }

        switch (avcStream[i] & 0x1F) {
          case 0x06:
            var data = avcStream.subarray(i + 1, i + 1 + length);
            var matchingSample = mapToSample(i, samples);

            seiNal = {
              nalUnitType: 'sei_rbsp',
              size: length,
              data: data,
              escapedRBSP: discardEmulationPreventionBytes$1(data),
              trackId: trackId
            };

            if (matchingSample) {
              seiNal.pts = matchingSample.pts;
              seiNal.dts = matchingSample.dts;
              lastMatchedSample = matchingSample;
            } else {
              // If a matching sample cannot be found, use the last
              // sample's values as they should be as close as possible
              seiNal.pts = lastMatchedSample.pts;
              seiNal.dts = lastMatchedSample.dts;
            }

            result.push(seiNal);
            break;
          default:
            break;
        }
      }

      return result;
    };

    /**
      * Parses sample information out of Track Run Boxes and calculates
      * the absolute presentation and decode timestamps of each sample.
      *
      * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed
      * @param {Number} baseMediaDecodeTime - base media decode time from tfdt
          @see ISO-BMFF-12/2015, Section 8.8.12
      * @param {Object} tfhd - The parsed Track Fragment Header
      *   @see inspect.parseTfhd
      * @return {Object[]} the parsed samples
      *
      * @see ISO-BMFF-12/2015, Section 8.8.8
     **/
    var parseSamples = function parseSamples(truns, baseMediaDecodeTime, tfhd) {
      var currentDts = baseMediaDecodeTime;
      var defaultSampleDuration = tfhd.defaultSampleDuration || 0;
      var defaultSampleSize = tfhd.defaultSampleSize || 0;
      var trackId = tfhd.trackId;
      var allSamples = [];

      truns.forEach(function (trun) {
        // Note: We currently do not parse the sample table as well
        // as the trun. It's possible some sources will require this.
        // moov > trak > mdia > minf > stbl
        var trackRun = mp4Inspector.parseTrun(trun);
        var samples = trackRun.samples;

        samples.forEach(function (sample) {
          if (sample.duration === undefined) {
            sample.duration = defaultSampleDuration;
          }
          if (sample.size === undefined) {
            sample.size = defaultSampleSize;
          }
          sample.trackId = trackId;
          sample.dts = currentDts;
          if (sample.compositionTimeOffset === undefined) {
            sample.compositionTimeOffset = 0;
          }
          sample.pts = currentDts + sample.compositionTimeOffset;

          currentDts += sample.duration;
        });

        allSamples = allSamples.concat(samples);
      });

      return allSamples;
    };

    /**
      * Parses out caption nals from an FMP4 segment's video tracks.
      *
      * @param {Uint8Array} segment - The bytes of a single segment
      * @param {Number} videoTrackId - The trackId of a video track in the segment
      * @return {Object.<Number, Object[]>} A mapping of video trackId to
      *   a list of seiNals found in that track
     **/
    var parseCaptionNals = function parseCaptionNals(segment, videoTrackId) {
      // To get the samples
      var trafs = probe.findBox(segment, ['moof', 'traf']);
      // To get SEI NAL units
      var mdats = probe.findBox(segment, ['mdat']);
      var captionNals = {};
      var mdatTrafPairs = [];

      // Pair up each traf with a mdat as moofs and mdats are in pairs
      mdats.forEach(function (mdat, index) {
        var matchingTraf = trafs[index];
        mdatTrafPairs.push({
          mdat: mdat,
          traf: matchingTraf
        });
      });

      mdatTrafPairs.forEach(function (pair) {
        var mdat = pair.mdat;
        var traf = pair.traf;
        var tfhd = probe.findBox(traf, ['tfhd']);
        // Exactly 1 tfhd per traf
        var headerInfo = mp4Inspector.parseTfhd(tfhd[0]);
        var trackId = headerInfo.trackId;
        var tfdt = probe.findBox(traf, ['tfdt']);
        // Either 0 or 1 tfdt per traf
        var baseMediaDecodeTime = tfdt.length > 0 ? mp4Inspector.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;
        var truns = probe.findBox(traf, ['trun']);
        var samples;
        var seiNals;

        // Only parse video data for the chosen video track
        if (videoTrackId === trackId && truns.length > 0) {
          samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);

          seiNals = findSeiNals(mdat, samples, trackId);

          if (!captionNals[trackId]) {
            captionNals[trackId] = [];
          }

          captionNals[trackId] = captionNals[trackId].concat(seiNals);
        }
      });

      return captionNals;
    };

    /**
      * Parses out inband captions from an MP4 container and returns
      * caption objects that can be used by WebVTT and the TextTrack API.
      * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue
      * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack
      * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first
      *
      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
      * @param {Number} trackId - The id of the video track to parse
      * @param {Number} timescale - The timescale for the video track from the init segment
      *
      * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks
      * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds
      * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds
      * @return {String} parsedCaptions[].text - The visible content of the caption
     **/
    var parseEmbeddedCaptions = function parseEmbeddedCaptions(segment, trackId, timescale) {
      var seiNals;

      if (!trackId) {
        return null;
      }

      seiNals = parseCaptionNals(segment, trackId);

      return {
        seiNals: seiNals[trackId],
        timescale: timescale
      };
    };

    /**
      * Converts SEI NALUs into captions that can be used by video.js
     **/
    var CaptionParser$$1 = function CaptionParser$$1() {
      var isInitialized = false;
      var captionStream$$1;

      // Stores segments seen before trackId and timescale are set
      var segmentCache;
      // Stores video track ID of the track being parsed
      var trackId;
      // Stores the timescale of the track being parsed
      var timescale;
      // Stores captions parsed so far
      var parsedCaptions;

      /**
        * A method to indicate whether a CaptionParser has been initalized
        * @returns {Boolean}
       **/
      this.isInitialized = function () {
        return isInitialized;
      };

      /**
        * Initializes the underlying CaptionStream, SEI NAL parsing
        * and management, and caption collection
       **/
      this.init = function () {
        captionStream$$1 = new CaptionStream$1();
        isInitialized = true;

        // Collect dispatched captions
        captionStream$$1.on('data', function (event) {
          // Convert to seconds in the source's timescale
          event.startTime = event.startPts / timescale;
          event.endTime = event.endPts / timescale;

          parsedCaptions.captions.push(event);
          parsedCaptions.captionStreams[event.stream] = true;
        });
      };

      /**
        * Determines if a new video track will be selected
        * or if the timescale changed
        * @return {Boolean}
       **/
      this.isNewInit = function (videoTrackIds, timescales) {
        if (videoTrackIds && videoTrackIds.length === 0 || timescales && (typeof timescales === 'undefined' ? 'undefined' : _typeof(timescales)) === 'object' && Object.keys(timescales).length === 0) {
          return false;
        }

        return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];
      };

      /**
        * Parses out SEI captions and interacts with underlying
        * CaptionStream to return dispatched captions
        *
        * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
        * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment
        * @param {Object.<Number, Number>} timescales - The timescales found in the init segment
        * @see parseEmbeddedCaptions
        * @see m2ts/caption-stream.js
       **/
      this.parse = function (segment, videoTrackIds, timescales) {
        var parsedData;

        if (!this.isInitialized()) {
          return null;

          // This is not likely to be a video segment
        } else if (!videoTrackIds || !timescales) {
          return null;
        } else if (this.isNewInit(videoTrackIds, timescales)) {
          // Use the first video track only as there is no
          // mechanism to switch to other video tracks
          trackId = videoTrackIds[0];
          timescale = timescales[trackId];

          // If an init segment has not been seen yet, hold onto segment
          // data until we have one
        } else if (!trackId || !timescale) {
          segmentCache.push(segment);
          return null;
        }

        // Now that a timescale and trackId is set, parse cached segments
        while (segmentCache.length > 0) {
          var cachedSegment = segmentCache.shift();

          this.parse(cachedSegment, videoTrackIds, timescales);
        }

        parsedData = parseEmbeddedCaptions(segment, trackId, timescale);

        if (parsedData === null || !parsedData.seiNals) {
          return null;
        }

        this.pushNals(parsedData.seiNals);
        // Force the parsed captions to be dispatched
        this.flushStream();

        return parsedCaptions;
      };

      /**
        * Pushes SEI NALUs onto CaptionStream
        * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`
        * Assumes that `parseCaptionNals` has been called first
        * @see m2ts/caption-stream.js
        **/
      this.pushNals = function (nals) {
        if (!this.isInitialized() || !nals || nals.length === 0) {
          return null;
        }

        nals.forEach(function (nal) {
          captionStream$$1.push(nal);
        });
      };

      /**
        * Flushes underlying CaptionStream to dispatch processed, displayable captions
        * @see m2ts/caption-stream.js
       **/
      this.flushStream = function () {
        if (!this.isInitialized()) {
          return null;
        }

        captionStream$$1.flush();
      };

      /**
        * Reset caption buckets for new data
       **/
      this.clearParsedCaptions = function () {
        parsedCaptions.captions = [];
        parsedCaptions.captionStreams = {};
      };

      /**
        * Resets underlying CaptionStream
        * @see m2ts/caption-stream.js
       **/
      this.resetCaptionStream = function () {
        if (!this.isInitialized()) {
          return null;
        }

        captionStream$$1.reset();
      };

      /**
        * Convenience method to clear all captions flushed from the
        * CaptionStream and still being parsed
        * @see m2ts/caption-stream.js
       **/
      this.clearAllCaptions = function () {
        this.clearParsedCaptions();
        this.resetCaptionStream();
      };

      /**
        * Reset caption parser
       **/
      this.reset = function () {
        segmentCache = [];
        trackId = null;
        timescale = null;

        if (!parsedCaptions) {
          parsedCaptions = {
            captions: [],
            // CC1, CC2, CC3, CC4
            captionStreams: {}
          };
        } else {
          this.clearParsedCaptions();
        }

        this.resetCaptionStream();
      };

      this.reset();
    };

    var captionParser = CaptionParser$$1;

    var mp4 = {
      generator: mp4Generator,
      probe: probe,
      Transmuxer: transmuxer.Transmuxer,
      AudioSegmentStream: transmuxer.AudioSegmentStream,
      VideoSegmentStream: transmuxer.VideoSegmentStream,
      CaptionParser: captionParser
    };

    var classCallCheck$$1 = function classCallCheck$$1(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass$$1 = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    /**
     * @file transmuxer-worker.js
     */

    /**
     * Re-emits transmuxer events by converting them into messages to the
     * world outside the worker.
     *
     * @param {Object} transmuxer the transmuxer to wire events on
     * @private
     */
    var wireTransmuxerEvents = function wireTransmuxerEvents(self, transmuxer) {
      transmuxer.on('data', function (segment) {
        // transfer ownership of the underlying ArrayBuffer
        // instead of doing a copy to save memory
        // ArrayBuffers are transferable but generic TypedArrays are not
        // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)
        var initArray = segment.initSegment;

        segment.initSegment = {
          data: initArray.buffer,
          byteOffset: initArray.byteOffset,
          byteLength: initArray.byteLength
        };

        var typedArray = segment.data;

        segment.data = typedArray.buffer;
        self.postMessage({
          action: 'data',
          segment: segment,
          byteOffset: typedArray.byteOffset,
          byteLength: typedArray.byteLength
        }, [segment.data]);
      });

      if (transmuxer.captionStream) {
        transmuxer.captionStream.on('data', function (caption) {
          self.postMessage({
            action: 'caption',
            data: caption
          });
        });
      }

      transmuxer.on('done', function (data) {
        self.postMessage({ action: 'done' });
      });

      transmuxer.on('gopInfo', function (gopInfo) {
        self.postMessage({
          action: 'gopInfo',
          gopInfo: gopInfo
        });
      });
    };

    /**
     * All incoming messages route through this hash. If no function exists
     * to handle an incoming message, then we ignore the message.
     *
     * @class MessageHandlers
     * @param {Object} options the options to initialize with
     */

    var MessageHandlers = function () {
      function MessageHandlers(self, options) {
        classCallCheck$$1(this, MessageHandlers);

        this.options = options || {};
        this.self = self;
        this.init();
      }

      /**
       * initialize our web worker and wire all the events.
       */

      createClass$$1(MessageHandlers, [{
        key: 'init',
        value: function init() {
          if (this.transmuxer) {
            this.transmuxer.dispose();
          }
          this.transmuxer = new mp4.Transmuxer(this.options);
          wireTransmuxerEvents(this.self, this.transmuxer);
        }

        /**
         * Adds data (a ts segment) to the start of the transmuxer pipeline for
         * processing.
         *
         * @param {ArrayBuffer} data data to push into the muxer
         */

      }, {
        key: 'push',
        value: function push(data) {
          // Cast array buffer to correct type for transmuxer
          var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);

          this.transmuxer.push(segment);
        }

        /**
         * Recreate the transmuxer so that the next segment added via `push`
         * start with a fresh transmuxer.
         */

      }, {
        key: 'reset',
        value: function reset() {
          this.init();
        }

        /**
         * Set the value that will be used as the `baseMediaDecodeTime` time for the
         * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`
         * set relative to the first based on the PTS values.
         *
         * @param {Object} data used to set the timestamp offset in the muxer
         */

      }, {
        key: 'setTimestampOffset',
        value: function setTimestampOffset(data) {
          var timestampOffset = data.timestampOffset || 0;

          this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));
        }
      }, {
        key: 'setAudioAppendStart',
        value: function setAudioAppendStart(data) {
          this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));
        }

        /**
         * Forces the pipeline to finish processing the last segment and emit it's
         * results.
         *
         * @param {Object} data event data, not really used
         */

      }, {
        key: 'flush',
        value: function flush(data) {
          this.transmuxer.flush();
        }
      }, {
        key: 'resetCaptions',
        value: function resetCaptions() {
          this.transmuxer.resetCaptions();
        }
      }, {
        key: 'alignGopsWith',
        value: function alignGopsWith(data) {
          this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());
        }
      }]);
      return MessageHandlers;
    }();

    /**
     * Our web wroker interface so that things can talk to mux.js
     * that will be running in a web worker. the scope is passed to this by
     * webworkify.
     *
     * @param {Object} self the scope for the web worker
     */

    var TransmuxerWorker = function TransmuxerWorker(self) {
      self.onmessage = function (event) {
        if (event.data.action === 'init' && event.data.options) {
          this.messageHandlers = new MessageHandlers(self, event.data.options);
          return;
        }

        if (!this.messageHandlers) {
          this.messageHandlers = new MessageHandlers(self);
        }

        if (event.data && event.data.action && event.data.action !== 'init') {
          if (this.messageHandlers[event.data.action]) {
            this.messageHandlers[event.data.action](event.data);
          }
        }
      };
    };

    var transmuxerWorker = new TransmuxerWorker(self);

    return transmuxerWorker;
  }();
});

/**
 * @file - codecs.js - Handles tasks regarding codec strings such as translating them to
 * codec strings, or translating codec strings into objects that can be examined.
 */

// Default codec parameters if none were provided for video and/or audio
var defaultCodecs = {
  videoCodec: 'avc1',
  videoObjectTypeIndicator: '.4d400d',
  // AAC-LC
  audioProfile: '2'
};

/**
 * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard
 * `avc1.<hhhhhh>`
 *
 * @param {Array} codecs an array of codec strings to fix
 * @return {Array} the translated codec array
 * @private
 */
var translateLegacyCodecs = function translateLegacyCodecs(codecs) {
  return codecs.map(function (codec) {
    return codec.replace(/avc1\.(\d+)\.(\d+)/i, function (orig, profile, avcLevel) {
      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);
      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);

      return 'avc1.' + profileHex + '00' + avcLevelHex;
    });
  });
};

/**
 * Parses a codec string to retrieve the number of codecs specified,
 * the video codec and object type indicator, and the audio profile.
 */

var parseCodecs = function parseCodecs() {
  var codecs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var result = {
    codecCount: 0
  };
  var parsed = void 0;

  result.codecCount = codecs.split(',').length;
  result.codecCount = result.codecCount || 2;

  // parse the video codec
  parsed = /(^|\s|,)+(avc[13])([^ ,]*)/i.exec(codecs);
  if (parsed) {
    result.videoCodec = parsed[2];
    result.videoObjectTypeIndicator = parsed[3];
  }

  // parse the last field of the audio codec
  result.audioProfile = /(^|\s|,)+mp4a.[0-9A-Fa-f]+\.([0-9A-Fa-f]+)/i.exec(codecs);
  result.audioProfile = result.audioProfile && result.audioProfile[2];

  return result;
};

/**
 * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the
 * standard `avc1.<hhhhhh>`.
 *
 * @param codecString {String} the codec string
 * @return {String} the codec string with old apple-style codecs replaced
 *
 * @private
 */
var mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {
  return codecString.replace(/avc1\.(\d+)\.(\d+)/i, function (match) {
    return translateLegacyCodecs([match])[0];
  });
};

/**
 * Build a media mime-type string from a set of parameters
 * @param {String} type either 'audio' or 'video'
 * @param {String} container either 'mp2t' or 'mp4'
 * @param {Array} codecs an array of codec strings to add
 * @return {String} a valid media mime-type
 */
var makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {
  // The codecs array is filtered so that falsey values are
  // dropped and don't cause Array#join to create spurious
  // commas
  return type + '/' + container + '; codecs="' + codecs.filter(function (c) {
    return !!c;
  }).join(', ') + '"';
};

/**
 * Returns the type container based on information in the playlist
 * @param {Playlist} media the current media playlist
 * @return {String} a valid media container type
 */
var getContainerType = function getContainerType(media) {
  // An initialization segment means the media playlist is an iframe
  // playlist or is using the mp4 container. We don't currently
  // support iframe playlists, so assume this is signalling mp4
  // fragments.
  if (media.segments && media.segments.length && media.segments[0].map) {
    return 'mp4';
  }
  return 'mp2t';
};

/**
 * Returns a set of codec strings parsed from the playlist or the default
 * codec strings if no codecs were specified in the playlist
 * @param {Playlist} media the current media playlist
 * @return {Object} an object with the video and audio codecs
 */
var getCodecs = function getCodecs(media) {
  // if the codecs were explicitly specified, use them instead of the
  // defaults
  var mediaAttributes = media.attributes || {};

  if (mediaAttributes.CODECS) {
    return parseCodecs(mediaAttributes.CODECS);
  }
  return defaultCodecs;
};

var audioProfileFromDefault = function audioProfileFromDefault(master, audioGroupId) {
  if (!master.mediaGroups.AUDIO || !audioGroupId) {
    return null;
  }

  var audioGroup = master.mediaGroups.AUDIO[audioGroupId];

  if (!audioGroup) {
    return null;
  }

  for (var name in audioGroup) {
    var audioType = audioGroup[name];

    if (audioType.default && audioType.playlists) {
      // codec should be the same for all playlists within the audio type
      return parseCodecs(audioType.playlists[0].attributes.CODECS).audioProfile;
    }
  }

  return null;
};

/**
 * Calculates the MIME type strings for a working configuration of
 * SourceBuffers to play variant streams in a master playlist. If
 * there is no possible working configuration, an empty array will be
 * returned.
 *
 * @param master {Object} the m3u8 object for the master playlist
 * @param media {Object} the m3u8 object for the variant playlist
 * @return {Array} the MIME type strings. If the array has more than
 * one entry, the first element should be applied to the video
 * SourceBuffer and the second to the audio SourceBuffer.
 *
 * @private
 */
var mimeTypesForPlaylist = function mimeTypesForPlaylist(master, media) {
  var containerType = getContainerType(media);
  var codecInfo = getCodecs(media);
  var mediaAttributes = media.attributes || {};
  // Default condition for a traditional HLS (no demuxed audio/video)
  var isMuxed = true;
  var isMaat = false;

  if (!media) {
    // Not enough information
    return [];
  }

  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {
    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];

    // Handle the case where we are in a multiple-audio track scenario
    if (audioGroup) {
      isMaat = true;
      // Start with the everything demuxed then...
      isMuxed = false;
      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)
      for (var groupId in audioGroup) {
        // either a uri is present (if the case of HLS and an external playlist), or
        // playlists is present (in the case of DASH where we don't have external audio
        // playlists)
        if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {
          isMuxed = true;
          break;
        }
      }
    }
  }

  // HLS with multiple-audio tracks must always get an audio codec.
  // Put another way, there is no way to have a video-only multiple-audio HLS!
  if (isMaat && !codecInfo.audioProfile) {
    if (!isMuxed) {
      // It is possible for codecs to be specified on the audio media group playlist but
      // not on the rendition playlist. This is mostly the case for DASH, where audio and
      // video are always separate (and separately specified).
      codecInfo.audioProfile = audioProfileFromDefault(master, mediaAttributes.AUDIO);
    }

    if (!codecInfo.audioProfile) {
      videojs$1.log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');
      codecInfo.audioProfile = defaultCodecs.audioProfile;
    }
  }

  // Generate the final codec strings from the codec object generated above
  var codecStrings = {};

  if (codecInfo.videoCodec) {
    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;
  }

  if (codecInfo.audioProfile) {
    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;
  }

  // Finally, make and return an array with proper mime-types depending on
  // the configuration
  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);
  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);
  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);

  if (isMaat) {
    if (!isMuxed && codecStrings.video) {
      return [justVideo, justAudio];
    }

    if (!isMuxed && !codecStrings.video) {
      // There is no muxed content and no video codec string, so this is an audio only
      // stream with alternate audio.
      return [justAudio, justAudio];
    }

    // There exists the possiblity that this will return a `video/container`
    // mime-type for the first entry in the array even when there is only audio.
    // This doesn't appear to be a problem and simplifies the code.
    return [bothVideoAudio, justAudio];
  }

  // If there is no video codec at all, always just return a single
  // audio/<container> mime-type
  if (!codecStrings.video) {
    return [justAudio];
  }

  // When not using separate audio media groups, audio and video is
  // *always* muxed
  return [bothVideoAudio];
};

/**
 * Parse a content type header into a type and parameters
 * object
 *
 * @param {String} type the content type header
 * @return {Object} the parsed content-type
 * @private
 */
var parseContentType = function parseContentType(type) {
  var object = { type: '', parameters: {} };
  var parameters = type.trim().split(';');

  // first parameter should always be content-type
  object.type = parameters.shift().trim();
  parameters.forEach(function (parameter) {
    var pair = parameter.trim().split('=');

    if (pair.length > 1) {
      var name = pair[0].replace(/"/g, '').trim();
      var value = pair[1].replace(/"/g, '').trim();

      object.parameters[name] = value;
    }
  });

  return object;
};

/**
 * Check if a codec string refers to an audio codec.
 *
 * @param {String} codec codec string to check
 * @return {Boolean} if this is an audio codec
 * @private
 */
var isAudioCodec = function isAudioCodec(codec) {
  return (/mp4a\.\d+.\d+/i.test(codec)
  );
};

/**
 * Check if a codec string refers to a video codec.
 *
 * @param {String} codec codec string to check
 * @return {Boolean} if this is a video codec
 * @private
 */
var isVideoCodec = function isVideoCodec(codec) {
  return (/avc1\.[\da-f]+/i.test(codec)
  );
};

/**
 * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in
 * front of current time.
 *
 * @param {Array} buffer
 *        The current buffer of gop information
 * @param {Number} currentTime
 *        The current time
 * @param {Double} mapping
 *        Offset to map display time to stream presentation time
 * @return {Array}
 *         List of gops considered safe to append over
 */
var gopsSafeToAlignWith = function gopsSafeToAlignWith(buffer, currentTime, mapping) {
  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {
    return [];
  }

  // pts value for current time + 3 seconds to give a bit more wiggle room
  var currentTimePts = Math.ceil((currentTime - mapping + 3) * 90000);

  var i = void 0;

  for (i = 0; i < buffer.length; i++) {
    if (buffer[i].pts > currentTimePts) {
      break;
    }
  }

  return buffer.slice(i);
};

/**
 * Appends gop information (timing and byteLength) received by the transmuxer for the
 * gops appended in the last call to appendBuffer
 *
 * @param {Array} buffer
 *        The current buffer of gop information
 * @param {Array} gops
 *        List of new gop information
 * @param {boolean} replace
 *        If true, replace the buffer with the new gop information. If false, append the
 *        new gop information to the buffer in the right location of time.
 * @return {Array}
 *         Updated list of gop information
 */
var updateGopBuffer = function updateGopBuffer(buffer, gops, replace) {
  if (!gops.length) {
    return buffer;
  }

  if (replace) {
    // If we are in safe append mode, then completely overwrite the gop buffer
    // with the most recent appeneded data. This will make sure that when appending
    // future segments, we only try to align with gops that are both ahead of current
    // time and in the last segment appended.
    return gops.slice();
  }

  var start = gops[0].pts;

  var i = 0;

  for (i; i < buffer.length; i++) {
    if (buffer[i].pts >= start) {
      break;
    }
  }

  return buffer.slice(0, i).concat(gops);
};

/**
 * Removes gop information in buffer that overlaps with provided start and end
 *
 * @param {Array} buffer
 *        The current buffer of gop information
 * @param {Double} start
 *        position to start the remove at
 * @param {Double} end
 *        position to end the remove at
 * @param {Double} mapping
 *        Offset to map display time to stream presentation time
 */
var removeGopBuffer = function removeGopBuffer(buffer, start, end, mapping) {
  var startPts = Math.ceil((start - mapping) * 90000);
  var endPts = Math.ceil((end - mapping) * 90000);
  var updatedBuffer = buffer.slice();

  var i = buffer.length;

  while (i--) {
    if (buffer[i].pts <= endPts) {
      break;
    }
  }

  if (i === -1) {
    // no removal because end of remove range is before start of buffer
    return updatedBuffer;
  }

  var j = i + 1;

  while (j--) {
    if (buffer[j].pts <= startPts) {
      break;
    }
  }

  // clamp remove range start to 0 index
  j = Math.max(j, 0);

  updatedBuffer.splice(j, i - j + 1);

  return updatedBuffer;
};

var buffered = function buffered(videoBuffer, audioBuffer, audioDisabled) {
  var start = null;
  var end = null;
  var arity = 0;
  var extents = [];
  var ranges = [];

  // neither buffer has been created yet
  if (!videoBuffer && !audioBuffer) {
    return videojs$1.createTimeRange();
  }

  // only one buffer is configured
  if (!videoBuffer) {
    return audioBuffer.buffered;
  }
  if (!audioBuffer) {
    return videoBuffer.buffered;
  }

  // both buffers are configured
  if (audioDisabled) {
    return videoBuffer.buffered;
  }

  // both buffers are empty
  if (videoBuffer.buffered.length === 0 && audioBuffer.buffered.length === 0) {
    return videojs$1.createTimeRange();
  }

  // Handle the case where we have both buffers and create an
  // intersection of the two
  var videoBuffered = videoBuffer.buffered;
  var audioBuffered = audioBuffer.buffered;
  var count = videoBuffered.length;

  // A) Gather up all start and end times
  while (count--) {
    extents.push({ time: videoBuffered.start(count), type: 'start' });
    extents.push({ time: videoBuffered.end(count), type: 'end' });
  }
  count = audioBuffered.length;
  while (count--) {
    extents.push({ time: audioBuffered.start(count), type: 'start' });
    extents.push({ time: audioBuffered.end(count), type: 'end' });
  }
  // B) Sort them by time
  extents.sort(function (a, b) {
    return a.time - b.time;
  });

  // C) Go along one by one incrementing arity for start and decrementing
  //    arity for ends
  for (count = 0; count < extents.length; count++) {
    if (extents[count].type === 'start') {
      arity++;

      // D) If arity is ever incremented to 2 we are entering an
      //    overlapping range
      if (arity === 2) {
        start = extents[count].time;
      }
    } else if (extents[count].type === 'end') {
      arity--;

      // E) If arity is ever decremented to 1 we leaving an
      //    overlapping range
      if (arity === 1) {
        end = extents[count].time;
      }
    }

    // F) Record overlapping ranges
    if (start !== null && end !== null) {
      ranges.push([start, end]);
      start = null;
      end = null;
    }
  }

  return videojs$1.createTimeRanges(ranges);
};

/**
 * @file virtual-source-buffer.js
 */

// We create a wrapper around the SourceBuffer so that we can manage the
// state of the `updating` property manually. We have to do this because
// Firefox changes `updating` to false long before triggering `updateend`
// events and that was causing strange problems in videojs-contrib-hls
var makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {
  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);
  var wrapper = Object.create(null);

  wrapper.updating = false;
  wrapper.realBuffer_ = sourceBuffer;

  var _loop = function _loop(key) {
    if (typeof sourceBuffer[key] === 'function') {
      wrapper[key] = function () {
        return sourceBuffer[key].apply(sourceBuffer, arguments);
      };
    } else if (typeof wrapper[key] === 'undefined') {
      Object.defineProperty(wrapper, key, {
        get: function get$$1() {
          return sourceBuffer[key];
        },
        set: function set$$1(v) {
          return sourceBuffer[key] = v;
        }
      });
    }
  };

  for (var key in sourceBuffer) {
    _loop(key);
  }

  return wrapper;
};

/**
 * VirtualSourceBuffers exist so that we can transmux non native formats
 * into a native format, but keep the same api as a native source buffer.
 * It creates a transmuxer, that works in its own thread (a web worker) and
 * that transmuxer muxes the data into a native format. VirtualSourceBuffer will
 * then send all of that data to the naive sourcebuffer so that it is
 * indestinguishable from a natively supported format.
 *
 * @param {HtmlMediaSource} mediaSource the parent mediaSource
 * @param {Array} codecs array of codecs that we will be dealing with
 * @class VirtualSourceBuffer
 * @extends video.js.EventTarget
 */

var VirtualSourceBuffer = function (_videojs$EventTarget) {
  inherits$1(VirtualSourceBuffer, _videojs$EventTarget);

  function VirtualSourceBuffer(mediaSource, codecs) {
    classCallCheck$1(this, VirtualSourceBuffer);

    var _this = possibleConstructorReturn$1(this, (VirtualSourceBuffer.__proto__ || Object.getPrototypeOf(VirtualSourceBuffer)).call(this, videojs$1.EventTarget));

    _this.timestampOffset_ = 0;
    _this.pendingBuffers_ = [];
    _this.bufferUpdating_ = false;

    _this.mediaSource_ = mediaSource;
    _this.codecs_ = codecs;
    _this.audioCodec_ = null;
    _this.videoCodec_ = null;
    _this.audioDisabled_ = false;
    _this.appendAudioInitSegment_ = true;
    _this.gopBuffer_ = [];
    _this.timeMapping_ = 0;
    _this.safeAppend_ = videojs$1.browser.IE_VERSION >= 11;

    var options = {
      remux: false,
      alignGopsAtEnd: _this.safeAppend_
    };

    _this.codecs_.forEach(function (codec) {
      if (isAudioCodec(codec)) {
        _this.audioCodec_ = codec;
      } else if (isVideoCodec(codec)) {
        _this.videoCodec_ = codec;
      }
    });

    // append muxed segments to their respective native buffers as
    // soon as they are available
    _this.transmuxer_ = new TransmuxWorker();
    _this.transmuxer_.postMessage({ action: 'init', options: options });

    _this.transmuxer_.onmessage = function (event) {
      if (event.data.action === 'data') {
        return _this.data_(event);
      }

      if (event.data.action === 'done') {
        return _this.done_(event);
      }

      if (event.data.action === 'gopInfo') {
        return _this.appendGopInfo_(event);
      }
    };

    // this timestampOffset is a property with the side-effect of resetting
    // baseMediaDecodeTime in the transmuxer on the setter
    Object.defineProperty(_this, 'timestampOffset', {
      get: function get$$1() {
        return this.timestampOffset_;
      },
      set: function set$$1(val) {
        if (typeof val === 'number' && val >= 0) {
          this.timestampOffset_ = val;
          this.appendAudioInitSegment_ = true;

          // reset gop buffer on timestampoffset as this signals a change in timeline
          this.gopBuffer_.length = 0;
          this.timeMapping_ = 0;

          // We have to tell the transmuxer to set the baseMediaDecodeTime to
          // the desired timestampOffset for the next segment
          this.transmuxer_.postMessage({
            action: 'setTimestampOffset',
            timestampOffset: val
          });
        }
      }
    });

    // setting the append window affects both source buffers
    Object.defineProperty(_this, 'appendWindowStart', {
      get: function get$$1() {
        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;
      },
      set: function set$$1(start) {
        if (this.videoBuffer_) {
          this.videoBuffer_.appendWindowStart = start;
        }
        if (this.audioBuffer_) {
          this.audioBuffer_.appendWindowStart = start;
        }
      }
    });

    // this buffer is "updating" if either of its native buffers are
    Object.defineProperty(_this, 'updating', {
      get: function get$$1() {
        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);
      }
    });

    // the buffered property is the intersection of the buffered
    // ranges of the native source buffers
    Object.defineProperty(_this, 'buffered', {
      get: function get$$1() {
        return buffered(this.videoBuffer_, this.audioBuffer_, this.audioDisabled_);
      }
    });
    return _this;
  }

  /**
   * When we get a data event from the transmuxer
   * we call this function and handle the data that
   * was sent to us
   *
   * @private
   * @param {Event} event the data event from the transmuxer
   */

  createClass$1(VirtualSourceBuffer, [{
    key: 'data_',
    value: function data_(event) {
      var segment = event.data.segment;

      // Cast ArrayBuffer to TypedArray
      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);

      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);

      createTextTracksIfNecessary(this, this.mediaSource_, segment);

      // Add the segments to the pendingBuffers array
      this.pendingBuffers_.push(segment);
      return;
    }

    /**
     * When we get a done event from the transmuxer
     * we call this function and we process all
     * of the pending data that we have been saving in the
     * data_ function
     *
     * @private
     * @param {Event} event the done event from the transmuxer
     */

  }, {
    key: 'done_',
    value: function done_(event) {
      // Don't process and append data if the mediaSource is closed
      if (this.mediaSource_.readyState === 'closed') {
        this.pendingBuffers_.length = 0;
        return;
      }

      // All buffers should have been flushed from the muxer
      // start processing anything we have received
      this.processPendingSegments_();
      return;
    }

    /**
     * Create our internal native audio/video source buffers and add
     * event handlers to them with the following conditions:
     * 1. they do not already exist on the mediaSource
     * 2. this VSB has a codec for them
     *
     * @private
     */

  }, {
    key: 'createRealSourceBuffers_',
    value: function createRealSourceBuffers_() {
      var _this2 = this;

      var types = ['audio', 'video'];

      types.forEach(function (type) {
        // Don't create a SourceBuffer of this type if we don't have a
        // codec for it
        if (!_this2[type + 'Codec_']) {
          return;
        }

        // Do nothing if a SourceBuffer of this type already exists
        if (_this2[type + 'Buffer_']) {
          return;
        }

        var buffer = null;

        // If the mediasource already has a SourceBuffer for the codec
        // use that
        if (_this2.mediaSource_[type + 'Buffer_']) {
          buffer = _this2.mediaSource_[type + 'Buffer_'];
          // In multiple audio track cases, the audio source buffer is disabled
          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier
          // than createRealSourceBuffers_ is called to create the second
          // VirtualSourceBuffer because that happens as a side-effect of
          // videojs-contrib-hls starting the audioSegmentLoader. As a result,
          // the audioBuffer is essentially "ownerless" and no one will toggle
          // the `updating` state back to false once the `updateend` event is received
          //
          // Setting `updating` to false manually will work around this
          // situation and allow work to continue
          buffer.updating = false;
        } else {
          var codecProperty = type + 'Codec_';
          var mimeType = type + '/mp4;codecs="' + _this2[codecProperty] + '"';

          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);

          _this2.mediaSource_[type + 'Buffer_'] = buffer;
        }

        _this2[type + 'Buffer_'] = buffer;

        // Wire up the events to the SourceBuffer
        ['update', 'updatestart', 'updateend'].forEach(function (event) {
          buffer.addEventListener(event, function () {
            // if audio is disabled
            if (type === 'audio' && _this2.audioDisabled_) {
              return;
            }

            if (event === 'updateend') {
              _this2[type + 'Buffer_'].updating = false;
            }

            var shouldTrigger = types.every(function (t) {
              // skip checking audio's updating status if audio
              // is not enabled
              if (t === 'audio' && _this2.audioDisabled_) {
                return true;
              }
              // if the other type if updating we don't trigger
              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {
                return false;
              }
              return true;
            });

            if (shouldTrigger) {
              return _this2.trigger(event);
            }
          });
        });
      });
    }

    /**
     * Emulate the native mediasource function, but our function will
     * send all of the proposed segments to the transmuxer so that we
     * can transmux them before we append them to our internal
     * native source buffers in the correct format.
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer
     * @param {Uint8Array} segment the segment to append to the buffer
     */

  }, {
    key: 'appendBuffer',
    value: function appendBuffer(segment) {
      // Start the internal "updating" state
      this.bufferUpdating_ = true;

      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {
        var audioBuffered = this.audioBuffer_.buffered;

        this.transmuxer_.postMessage({
          action: 'setAudioAppendStart',
          appendStart: audioBuffered.end(audioBuffered.length - 1)
        });
      }

      if (this.videoBuffer_) {
        this.transmuxer_.postMessage({
          action: 'alignGopsWith',
          gopsToAlignWith: gopsSafeToAlignWith(this.gopBuffer_, this.mediaSource_.player_ ? this.mediaSource_.player_.currentTime() : null, this.timeMapping_)
        });
      }

      this.transmuxer_.postMessage({
        action: 'push',
        // Send the typed-array of data as an ArrayBuffer so that
        // it can be sent as a "Transferable" and avoid the costly
        // memory copy
        data: segment.buffer,

        // To recreate the original typed-array, we need information
        // about what portion of the ArrayBuffer it was a view into
        byteOffset: segment.byteOffset,
        byteLength: segment.byteLength
      }, [segment.buffer]);
      this.transmuxer_.postMessage({ action: 'flush' });
    }

    /**
     * Appends gop information (timing and byteLength) received by the transmuxer for the
     * gops appended in the last call to appendBuffer
     *
     * @param {Event} event
     *        The gopInfo event from the transmuxer
     * @param {Array} event.data.gopInfo
     *        List of gop info to append
     */

  }, {
    key: 'appendGopInfo_',
    value: function appendGopInfo_(event) {
      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, event.data.gopInfo, this.safeAppend_);
    }

    /**
     * Emulate the native mediasource function and remove parts
     * of the buffer from any of our internal buffers that exist
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove
     * @param {Double} start position to start the remove at
     * @param {Double} end position to end the remove at
     */

  }, {
    key: 'remove',
    value: function remove(start, end) {
      if (this.videoBuffer_) {
        this.videoBuffer_.updating = true;
        this.videoBuffer_.remove(start, end);
        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);
      }
      if (!this.audioDisabled_ && this.audioBuffer_) {
        this.audioBuffer_.updating = true;
        this.audioBuffer_.remove(start, end);
      }

      // Remove Metadata Cues (id3)
      removeCuesFromTrack(start, end, this.metadataTrack_);

      // Remove Any Captions
      if (this.inbandTextTracks_) {
        for (var track in this.inbandTextTracks_) {
          removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);
        }
      }
    }

    /**
     * Process any segments that the muxer has output
     * Concatenate segments together based on type and append them into
     * their respective sourceBuffers
     *
     * @private
     */

  }, {
    key: 'processPendingSegments_',
    value: function processPendingSegments_() {
      var sortedSegments = {
        video: {
          segments: [],
          bytes: 0
        },
        audio: {
          segments: [],
          bytes: 0
        },
        captions: [],
        metadata: []
      };

      // Sort segments into separate video/audio arrays and
      // keep track of their total byte lengths
      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {
        var type = segment.type;
        var data = segment.data;
        var initSegment = segment.initSegment;

        segmentObj[type].segments.push(data);
        segmentObj[type].bytes += data.byteLength;

        segmentObj[type].initSegment = initSegment;

        // Gather any captions into a single array
        if (segment.captions) {
          segmentObj.captions = segmentObj.captions.concat(segment.captions);
        }

        if (segment.info) {
          segmentObj[type].info = segment.info;
        }

        // Gather any metadata into a single array
        if (segment.metadata) {
          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);
        }

        return segmentObj;
      }, sortedSegments);

      // Create the real source buffers if they don't exist by now since we
      // finally are sure what tracks are contained in the source
      if (!this.videoBuffer_ && !this.audioBuffer_) {
        // Remove any codecs that may have been specified by default but
        // are no longer applicable now
        if (sortedSegments.video.bytes === 0) {
          this.videoCodec_ = null;
        }
        if (sortedSegments.audio.bytes === 0) {
          this.audioCodec_ = null;
        }

        this.createRealSourceBuffers_();
      }

      if (sortedSegments.audio.info) {
        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });
      }
      if (sortedSegments.video.info) {
        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });
      }

      if (this.appendAudioInitSegment_) {
        if (!this.audioDisabled_ && this.audioBuffer_) {
          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);
          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;
        }
        this.appendAudioInitSegment_ = false;
      }

      var triggerUpdateend = false;

      // Merge multiple video and audio segments into one and append
      if (this.videoBuffer_ && sortedSegments.video.bytes) {
        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);
        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;
        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);
        // TODO: are video tracks the only ones with text tracks?
        addTextTrackData(this, sortedSegments.captions, sortedSegments.metadata);
      } else if (this.videoBuffer_ && (this.audioDisabled_ || !this.audioBuffer_)) {
        // The transmuxer did not return any bytes of video, meaning it was all trimmed
        // for gop alignment. Since we have a video buffer and audio is disabled, updateend
        // will never be triggered by this source buffer, which will cause contrib-hls
        // to be stuck forever waiting for updateend. If audio is not disabled, updateend
        // will be triggered by the audio buffer, which will be sent upwards since the video
        // buffer will not be in an updating state.
        triggerUpdateend = true;
      }

      if (!this.audioDisabled_ && this.audioBuffer_) {
        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);
      }

      this.pendingBuffers_.length = 0;

      if (triggerUpdateend) {
        this.trigger('updateend');
      }

      // We are no longer in the internal "updating" state
      this.bufferUpdating_ = false;
    }

    /**
     * Combine all segments into a single Uint8Array and then append them
     * to the destination buffer
     *
     * @param {Object} segmentObj
     * @param {SourceBuffer} destinationBuffer native source buffer to append data to
     * @private
     */

  }, {
    key: 'concatAndAppendSegments_',
    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {
      var offset = 0;
      var tempBuffer = void 0;

      if (segmentObj.bytes) {
        tempBuffer = new Uint8Array(segmentObj.bytes);

        // Combine the individual segments into one large typed-array
        segmentObj.segments.forEach(function (segment) {
          tempBuffer.set(segment, offset);
          offset += segment.byteLength;
        });

        try {
          destinationBuffer.updating = true;
          destinationBuffer.appendBuffer(tempBuffer);
        } catch (error) {
          if (this.mediaSource_.player_) {
            this.mediaSource_.player_.error({
              code: -3,
              type: 'APPEND_BUFFER_ERR',
              message: error.message,
              originalError: error
            });
          }
        }
      }
    }

    /**
     * Emulate the native mediasource function. abort any soureBuffer
     * actions and throw out any un-appended data.
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort
     */

  }, {
    key: 'abort',
    value: function abort() {
      if (this.videoBuffer_) {
        this.videoBuffer_.abort();
      }
      if (!this.audioDisabled_ && this.audioBuffer_) {
        this.audioBuffer_.abort();
      }
      if (this.transmuxer_) {
        this.transmuxer_.postMessage({ action: 'reset' });
      }
      this.pendingBuffers_.length = 0;
      this.bufferUpdating_ = false;
    }
  }]);
  return VirtualSourceBuffer;
}(videojs$1.EventTarget);

/**
 * @file html-media-source.js
 */

/**
 * Our MediaSource implementation in HTML, mimics native
 * MediaSource where/if possible.
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource
 * @class HtmlMediaSource
 * @extends videojs.EventTarget
 */

var HtmlMediaSource = function (_videojs$EventTarget) {
  inherits$1(HtmlMediaSource, _videojs$EventTarget);

  function HtmlMediaSource() {
    classCallCheck$1(this, HtmlMediaSource);

    var _this = possibleConstructorReturn$1(this, (HtmlMediaSource.__proto__ || Object.getPrototypeOf(HtmlMediaSource)).call(this));

    var property = void 0;

    _this.nativeMediaSource_ = new window$1.MediaSource();
    // delegate to the native MediaSource's methods by default
    for (property in _this.nativeMediaSource_) {
      if (!(property in HtmlMediaSource.prototype) && typeof _this.nativeMediaSource_[property] === 'function') {
        _this[property] = _this.nativeMediaSource_[property].bind(_this.nativeMediaSource_);
      }
    }

    // emulate `duration` and `seekable` until seeking can be
    // handled uniformly for live streams
    // see https://github.com/w3c/media-source/issues/5
    _this.duration_ = NaN;
    Object.defineProperty(_this, 'duration', {
      get: function get$$1() {
        if (this.duration_ === Infinity) {
          return this.duration_;
        }
        return this.nativeMediaSource_.duration;
      },
      set: function set$$1(duration) {
        this.duration_ = duration;
        if (duration !== Infinity) {
          this.nativeMediaSource_.duration = duration;
          return;
        }
      }
    });
    Object.defineProperty(_this, 'seekable', {
      get: function get$$1() {
        if (this.duration_ === Infinity) {
          return videojs$1.createTimeRanges([[0, this.nativeMediaSource_.duration]]);
        }
        return this.nativeMediaSource_.seekable;
      }
    });

    Object.defineProperty(_this, 'readyState', {
      get: function get$$1() {
        return this.nativeMediaSource_.readyState;
      }
    });

    Object.defineProperty(_this, 'activeSourceBuffers', {
      get: function get$$1() {
        return this.activeSourceBuffers_;
      }
    });

    // the list of virtual and native SourceBuffers created by this
    // MediaSource
    _this.sourceBuffers = [];

    _this.activeSourceBuffers_ = [];

    /**
     * update the list of active source buffers based upon various
     * imformation from HLS and video.js
     *
     * @private
     */
    _this.updateActiveSourceBuffers_ = function () {
      // Retain the reference but empty the array
      _this.activeSourceBuffers_.length = 0;

      // If there is only one source buffer, then it will always be active and audio will
      // be disabled based on the codec of the source buffer
      if (_this.sourceBuffers.length === 1) {
        var sourceBuffer = _this.sourceBuffers[0];

        sourceBuffer.appendAudioInitSegment_ = true;
        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;
        _this.activeSourceBuffers_.push(sourceBuffer);
        return;
      }

      // There are 2 source buffers, a combined (possibly video only) source buffer and
      // and an audio only source buffer.
      // By default, the audio in the combined virtual source buffer is enabled
      // and the audio-only source buffer (if it exists) is disabled.
      var disableCombined = false;
      var disableAudioOnly = true;

      // TODO: maybe we can store the sourcebuffers on the track objects?
      // safari may do something like this
      for (var i = 0; i < _this.player_.audioTracks().length; i++) {
        var track = _this.player_.audioTracks()[i];

        if (track.enabled && track.kind !== 'main') {
          // The enabled track is an alternate audio track so disable the audio in
          // the combined source buffer and enable the audio-only source buffer.
          disableCombined = true;
          disableAudioOnly = false;
          break;
        }
      }

      _this.sourceBuffers.forEach(function (sourceBuffer, index) {
        /* eslinst-disable */
        // TODO once codecs are required, we can switch to using the codecs to determine
        //      what stream is the video stream, rather than relying on videoTracks
        /* eslinst-enable */

        sourceBuffer.appendAudioInitSegment_ = true;

        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {
          // combined
          sourceBuffer.audioDisabled_ = disableCombined;
        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {
          // If the "combined" source buffer is video only, then we do not want
          // disable the audio-only source buffer (this is mostly for demuxed
          // audio and video hls)
          sourceBuffer.audioDisabled_ = true;
          disableAudioOnly = false;
        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {
          // audio only
          // In the case of audio only with alternate audio and disableAudioOnly is true
          // this means we want to disable the audio on the alternate audio sourcebuffer
          // but not the main "combined" source buffer. The "combined" source buffer is
          // always at index 0, so this ensures audio won't be disabled in both source
          // buffers.
          sourceBuffer.audioDisabled_ = index ? disableAudioOnly : !disableAudioOnly;
          if (sourceBuffer.audioDisabled_) {
            return;
          }
        }

        _this.activeSourceBuffers_.push(sourceBuffer);
      });
    };

    _this.onPlayerMediachange_ = function () {
      _this.sourceBuffers.forEach(function (sourceBuffer) {
        sourceBuffer.appendAudioInitSegment_ = true;
      });
    };

    _this.onHlsReset_ = function () {
      _this.sourceBuffers.forEach(function (sourceBuffer) {
        if (sourceBuffer.transmuxer_) {
          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });
        }
      });
    };

    _this.onHlsSegmentTimeMapping_ = function (event) {
      _this.sourceBuffers.forEach(function (buffer) {
        return buffer.timeMapping_ = event.mapping;
      });
    };

    // Re-emit MediaSource events on the polyfill
    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {
      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));
    }, _this);

    // capture the associated player when the MediaSource is
    // successfully attached
    _this.on('sourceopen', function (event) {
      // Get the player this MediaSource is attached to
      var video = document$1.querySelector('[src="' + _this.url_ + '"]');

      if (!video) {
        return;
      }

      _this.player_ = videojs$1(video.parentNode);

      // hls-reset is fired by videojs.Hls on to the tech after the main SegmentLoader
      // resets its state and flushes the buffer
      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);
      // hls-segment-time-mapping is fired by videojs.Hls on to the tech after the main
      // SegmentLoader inspects an MTS segment and has an accurate stream to display
      // time mapping
      _this.player_.tech_.on('hls-segment-time-mapping', _this.onHlsSegmentTimeMapping_);

      if (_this.player_.audioTracks && _this.player_.audioTracks()) {
        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);
        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);
        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);
      }

      _this.player_.on('mediachange', _this.onPlayerMediachange_);
    });

    _this.on('sourceended', function (event) {
      var duration = durationOfVideo(_this.duration);

      for (var i = 0; i < _this.sourceBuffers.length; i++) {
        var sourcebuffer = _this.sourceBuffers[i];
        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;

        if (cues && cues.length) {
          cues[cues.length - 1].endTime = duration;
        }
      }
    });

    // explicitly terminate any WebWorkers that were created
    // by SourceHandlers
    _this.on('sourceclose', function (event) {
      this.sourceBuffers.forEach(function (sourceBuffer) {
        if (sourceBuffer.transmuxer_) {
          sourceBuffer.transmuxer_.terminate();
        }
      });

      this.sourceBuffers.length = 0;
      if (!this.player_) {
        return;
      }

      if (this.player_.audioTracks && this.player_.audioTracks()) {
        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);
        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);
        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);
      }

      // We can only change this if the player hasn't been disposed of yet
      // because `off` eventually tries to use the el_ property. If it has
      // been disposed of, then don't worry about it because there are no
      // event handlers left to unbind anyway
      if (this.player_.el_) {
        this.player_.off('mediachange', this.onPlayerMediachange_);
        this.player_.tech_.off('hls-reset', this.onHlsReset_);
        this.player_.tech_.off('hls-segment-time-mapping', this.onHlsSegmentTimeMapping_);
      }
    });
    return _this;
  }

  /**
   * Add a range that that can now be seeked to.
   *
   * @param {Double} start where to start the addition
   * @param {Double} end where to end the addition
   * @private
   */

  createClass$1(HtmlMediaSource, [{
    key: 'addSeekableRange_',
    value: function addSeekableRange_(start, end) {
      var error = void 0;

      if (this.duration !== Infinity) {
        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');
        error.name = 'InvalidStateError';
        error.code = 11;
        throw error;
      }

      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {
        this.nativeMediaSource_.duration = end;
      }
    }

    /**
     * Add a source buffer to the media source.
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer
     * @param {String} type the content-type of the content
     * @return {Object} the created source buffer
     */

  }, {
    key: 'addSourceBuffer',
    value: function addSourceBuffer(type) {
      var buffer = void 0;
      var parsedType = parseContentType(type);

      // Create a VirtualSourceBuffer to transmux MPEG-2 transport
      // stream segments into fragmented MP4s
      if (/^(video|audio)\/mp2t$/i.test(parsedType.type)) {
        var codecs = [];

        if (parsedType.parameters && parsedType.parameters.codecs) {
          codecs = parsedType.parameters.codecs.split(',');
          codecs = translateLegacyCodecs(codecs);
          codecs = codecs.filter(function (codec) {
            return isAudioCodec(codec) || isVideoCodec(codec);
          });
        }

        if (codecs.length === 0) {
          codecs = ['avc1.4d400d', 'mp4a.40.2'];
        }

        buffer = new VirtualSourceBuffer(this, codecs);

        if (this.sourceBuffers.length !== 0) {
          // If another VirtualSourceBuffer already exists, then we are creating a
          // SourceBuffer for an alternate audio track and therefore we know that
          // the source has both an audio and video track.
          // That means we should trigger the manual creation of the real
          // SourceBuffers instead of waiting for the transmuxer to return data
          this.sourceBuffers[0].createRealSourceBuffers_();
          buffer.createRealSourceBuffers_();

          // Automatically disable the audio on the first source buffer if
          // a second source buffer is ever created
          this.sourceBuffers[0].audioDisabled_ = true;
        }
      } else {
        // delegate to the native implementation
        buffer = this.nativeMediaSource_.addSourceBuffer(type);
      }

      this.sourceBuffers.push(buffer);
      return buffer;
    }
  }]);
  return HtmlMediaSource;
}(videojs$1.EventTarget);

/**
 * @file videojs-contrib-media-sources.js
 */
var urlCount = 0;

// ------------
// Media Source
// ------------

// store references to the media sources so they can be connected
// to a video element (a swf object)
// TODO: can we store this somewhere local to this module?
videojs$1.mediaSources = {};

/**
 * Provide a method for a swf object to notify JS that a
 * media source is now open.
 *
 * @param {String} msObjectURL string referencing the MSE Object URL
 * @param {String} swfId the swf id
 */
var open = function open(msObjectURL, swfId) {
  var mediaSource = videojs$1.mediaSources[msObjectURL];

  if (mediaSource) {
    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });
  } else {
    throw new Error('Media Source not found (Video.js)');
  }
};

/**
 * Check to see if the native MediaSource object exists and supports
 * an MP4 container with both H.264 video and AAC-LC audio.
 *
 * @return {Boolean} if  native media sources are supported
 */
var supportsNativeMediaSources = function supportsNativeMediaSources() {
  return !!window$1.MediaSource && !!window$1.MediaSource.isTypeSupported && window$1.MediaSource.isTypeSupported('video/mp4;codecs="avc1.4d400d,mp4a.40.2"');
};

/**
 * An emulation of the MediaSource API so that we can support
 * native and non-native functionality. returns an instance of
 * HtmlMediaSource.
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource
 */
var MediaSource = function MediaSource() {
  this.MediaSource = {
    open: open,
    supportsNativeMediaSources: supportsNativeMediaSources
  };

  if (supportsNativeMediaSources()) {
    return new HtmlMediaSource();
  }

  throw new Error('Cannot use create a virtual MediaSource for this video');
};

MediaSource.open = open;
MediaSource.supportsNativeMediaSources = supportsNativeMediaSources;

/**
 * A wrapper around the native URL for our MSE object
 * implementation, this object is exposed under videojs.URL
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL
 */
var URL$1 = {
  /**
   * A wrapper around the native createObjectURL for our objects.
   * This function maps a native or emulated mediaSource to a blob
   * url so that it can be loaded into video.js
   *
   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
   * @param {MediaSource} object the object to create a blob url to
   */
  createObjectURL: function createObjectURL(object) {
    var objectUrlPrefix = 'blob:vjs-media-source/';
    var url = void 0;

    // use the native MediaSource to generate an object URL
    if (object instanceof HtmlMediaSource) {
      url = window$1.URL.createObjectURL(object.nativeMediaSource_);
      object.url_ = url;
      return url;
    }
    // if the object isn't an emulated MediaSource, delegate to the
    // native implementation
    if (!(object instanceof HtmlMediaSource)) {
      url = window$1.URL.createObjectURL(object);
      object.url_ = url;
      return url;
    }

    // build a URL that can be used to map back to the emulated
    // MediaSource
    url = objectUrlPrefix + urlCount;

    urlCount++;

    // setup the mapping back to object
    videojs$1.mediaSources[url] = object;

    return url;
  }
};

videojs$1.MediaSource = MediaSource;
videojs$1.URL = URL$1;

var EventTarget$1$1 = videojs$1.EventTarget,
    mergeOptions$2 = videojs$1.mergeOptions;

/**
 * Returns a new master manifest that is the result of merging an updated master manifest
 * into the original version.
 *
 * @param {Object} oldMaster
 *        The old parsed mpd object
 * @param {Object} newMaster
 *        The updated parsed mpd object
 * @return {Object}
 *         A new object representing the original master manifest with the updated media
 *         playlists merged in
 */

var updateMaster$1 = function updateMaster$$1(oldMaster, newMaster) {
  var update = mergeOptions$2(oldMaster, {
    // These are top level properties that can be updated
    duration: newMaster.duration,
    minimumUpdatePeriod: newMaster.minimumUpdatePeriod
  });

  // First update the playlists in playlist list
  for (var i = 0; i < newMaster.playlists.length; i++) {
    var playlistUpdate = updateMaster(update, newMaster.playlists[i]);

    if (playlistUpdate) {
      update = playlistUpdate;
    }
  }

  // Then update media group playlists
  forEachMediaGroup(newMaster, function (properties, type, group, label) {
    if (properties.playlists && properties.playlists.length) {
      var uri = properties.playlists[0].uri;
      var _playlistUpdate = updateMaster(update, properties.playlists[0]);

      if (_playlistUpdate) {
        update = _playlistUpdate;
        // update the playlist reference within media groups
        update.mediaGroups[type][group][label].playlists[0] = update.playlists[uri];
      }
    }
  });

  return update;
};

var DashPlaylistLoader = function (_EventTarget) {
  inherits$1(DashPlaylistLoader, _EventTarget);

  // DashPlaylistLoader must accept either a src url or a playlist because subsequent
  // playlist loader setups from media groups will expect to be able to pass a playlist
  // (since there aren't external URLs to media playlists with DASH)
  function DashPlaylistLoader(srcUrlOrPlaylist, hls, withCredentials, masterPlaylistLoader) {
    classCallCheck$1(this, DashPlaylistLoader);

    var _this = possibleConstructorReturn$1(this, (DashPlaylistLoader.__proto__ || Object.getPrototypeOf(DashPlaylistLoader)).call(this));

    _this.hls_ = hls;
    _this.withCredentials = withCredentials;

    if (!srcUrlOrPlaylist) {
      throw new Error('A non-empty playlist URL or playlist is required');
    }

    // event naming?
    _this.on('minimumUpdatePeriod', function () {
      _this.refreshXml_();
    });

    // live playlist staleness timeout
    _this.on('mediaupdatetimeout', function () {
      _this.refreshMedia_();
    });

    // initialize the loader state
    if (typeof srcUrlOrPlaylist === 'string') {
      _this.srcUrl = srcUrlOrPlaylist;
      _this.state = 'HAVE_NOTHING';
      return possibleConstructorReturn$1(_this);
    }

    _this.masterPlaylistLoader_ = masterPlaylistLoader;

    _this.state = 'HAVE_METADATA';
    _this.started = true;
    // we only should have one playlist so select it
    _this.media(srcUrlOrPlaylist);
    // trigger async to mimic behavior of HLS, where it must request a playlist
    window$1.setTimeout(function () {
      _this.trigger('loadedmetadata');
    }, 0);
    return _this;
  }

  createClass$1(DashPlaylistLoader, [{
    key: 'dispose',
    value: function dispose() {
      this.stopRequest();
      window$1.clearTimeout(this.mediaUpdateTimeout);
    }
  }, {
    key: 'stopRequest',
    value: function stopRequest() {
      if (this.request) {
        var oldRequest = this.request;

        this.request = null;
        oldRequest.onreadystatechange = null;
        oldRequest.abort();
      }
    }
  }, {
    key: 'media',
    value: function media(playlist) {
      // getter
      if (!playlist) {
        return this.media_;
      }

      // setter
      if (this.state === 'HAVE_NOTHING') {
        throw new Error('Cannot switch media playlist from ' + this.state);
      }

      var startingState = this.state;

      // find the playlist object if the target playlist has been specified by URI
      if (typeof playlist === 'string') {
        if (!this.master.playlists[playlist]) {
          throw new Error('Unknown playlist URI: ' + playlist);
        }
        playlist = this.master.playlists[playlist];
      }

      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;

      this.state = 'HAVE_METADATA';

      // switching to the active playlist is a no-op
      if (!mediaChange) {
        return;
      }

      // switching from an already loaded playlist
      if (this.media_) {
        this.trigger('mediachanging');
      }

      this.media_ = playlist;

      this.refreshMedia_();

      // trigger media change if the active media has been updated
      if (startingState !== 'HAVE_MASTER') {
        this.trigger('mediachange');
      }
    }
  }, {
    key: 'pause',
    value: function pause() {
      this.stopRequest();
      if (this.state === 'HAVE_NOTHING') {
        // If we pause the loader before any data has been retrieved, its as if we never
        // started, so reset to an unstarted state.
        this.started = false;
      }
    }
  }, {
    key: 'load',
    value: function load() {
      // because the playlists are internal to the manifest, load should either load the
      // main manifest, or do nothing but trigger an event
      if (!this.started) {
        this.start();
        return;
      }

      this.trigger('loadedplaylist');
    }

    /**
     * Parses the master xml string and updates playlist uri references
     *
     * @return {Object}
     *         The parsed mpd manifest object
     */

  }, {
    key: 'parseMasterXml',
    value: function parseMasterXml() {
      var master = parse(this.masterXml_, {
        manifestUri: this.srcUrl,
        clientOffset: this.clientOffset_
      });

      master.uri = this.srcUrl;

      // Set up phony URIs for the playlists since we won't have external URIs for DASH
      // but reference playlists by their URI throughout the project
      // TODO: Should we create the dummy uris in mpd-parser as well (leaning towards yes).
      for (var i = 0; i < master.playlists.length; i++) {
        var phonyUri = 'placeholder-uri-' + i;

        master.playlists[i].uri = phonyUri;
        // set up by URI references
        master.playlists[phonyUri] = master.playlists[i];
      }

      // set up phony URIs for the media group playlists since we won't have external
      // URIs for DASH but reference playlists by their URI throughout the project
      forEachMediaGroup(master, function (properties, mediaType, groupKey, labelKey) {
        if (properties.playlists && properties.playlists.length) {
          var _phonyUri = 'placeholder-uri-' + mediaType + '-' + groupKey + '-' + labelKey;

          properties.playlists[0].uri = _phonyUri;
          // setup URI references
          master.playlists[_phonyUri] = properties.playlists[0];
        }
      });

      setupMediaPlaylists(master);
      resolveMediaGroupUris(master);

      return master;
    }
  }, {
    key: 'start',
    value: function start() {
      var _this2 = this;

      this.started = true;

      // request the specified URL
      this.request = this.hls_.xhr({
        uri: this.srcUrl,
        withCredentials: this.withCredentials
      }, function (error, req) {
        // disposed
        if (!_this2.request) {
          return;
        }

        // clear the loader's request reference
        _this2.request = null;

        if (error) {
          _this2.error = {
            status: req.status,
            message: 'DASH playlist request error at URL: ' + _this2.srcUrl,
            responseText: req.responseText,
            // MEDIA_ERR_NETWORK
            code: 2
          };
          if (_this2.state === 'HAVE_NOTHING') {
            _this2.started = false;
          }
          return _this2.trigger('error');
        }

        _this2.masterXml_ = req.responseText;

        if (req.responseHeaders && req.responseHeaders.date) {
          _this2.masterLoaded_ = Date.parse(req.responseHeaders.date);
        } else {
          _this2.masterLoaded_ = Date.now();
        }

        _this2.syncClientServerClock_(_this2.onClientServerClockSync_.bind(_this2));
      });
    }

    /**
     * Parses the master xml for UTCTiming node to sync the client clock to the server
     * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.
     *
     * @param {Function} done
     *        Function to call when clock sync has completed
     */

  }, {
    key: 'syncClientServerClock_',
    value: function syncClientServerClock_(done) {
      var _this3 = this;

      var utcTiming = parseUTCTiming(this.masterXml_);

      // No UTCTiming element found in the mpd. Use Date header from mpd request as the
      // server clock
      if (utcTiming === null) {
        this.clientOffset_ = this.masterLoaded_ - Date.now();
        return done();
      }

      if (utcTiming.method === 'DIRECT') {
        this.clientOffset_ = utcTiming.value - Date.now();
        return done();
      }

      this.request = this.hls_.xhr({
        uri: resolveUrl(this.srcUrl, utcTiming.value),
        method: utcTiming.method,
        withCredentials: this.withCredentials
      }, function (error, req) {
        // disposed
        if (!_this3.request) {
          return;
        }

        if (error) {
          // sync request failed, fall back to using date header from mpd
          // TODO: log warning
          _this3.clientOffset_ = _this3.masterLoaded_ - Date.now();
          return done();
        }

        var serverTime = void 0;

        if (utcTiming.method === 'HEAD') {
          if (!req.responseHeaders || !req.responseHeaders.date) {
            // expected date header not preset, fall back to using date header from mpd
            // TODO: log warning
            serverTime = _this3.masterLoaded_;
          } else {
            serverTime = Date.parse(req.responseHeaders.date);
          }
        } else {
          serverTime = Date.parse(req.responseText);
        }

        _this3.clientOffset_ = serverTime - Date.now();

        done();
      });
    }

    /**
     * Handler for after client/server clock synchronization has happened. Sets up
     * xml refresh timer if specificed by the manifest.
     */

  }, {
    key: 'onClientServerClockSync_',
    value: function onClientServerClockSync_() {
      var _this4 = this;

      this.master = this.parseMasterXml();

      this.state = 'HAVE_MASTER';

      this.trigger('loadedplaylist');

      if (!this.media_) {
        // no media playlist was specifically selected so start
        // from the first listed one
        this.media(this.master.playlists[0]);
      }
      // trigger loadedmetadata to resolve setup of media groups
      // trigger async to mimic behavior of HLS, where it must request a playlist
      window$1.setTimeout(function () {
        _this4.trigger('loadedmetadata');
      }, 0);

      // TODO: minimumUpdatePeriod can have a value of 0. Currently the manifest will not
      // be refreshed when this is the case. The inter-op guide says that when the
      // minimumUpdatePeriod is 0, the manifest should outline all currently available
      // segments, but future segments may require an update. I think a good solution
      // would be to update the manifest at the same rate that the media playlists
      // are "refreshed", i.e. every targetDuration.
      if (this.master.minimumUpdatePeriod) {
        window$1.setTimeout(function () {
          _this4.trigger('minimumUpdatePeriod');
        }, this.master.minimumUpdatePeriod);
      }
    }

    /**
     * Sends request to refresh the master xml and updates the parsed master manifest
     * TODO: Does the client offset need to be recalculated when the xml is refreshed?
     */

  }, {
    key: 'refreshXml_',
    value: function refreshXml_() {
      var _this5 = this;

      this.request = this.hls_.xhr({
        uri: this.srcUrl,
        withCredentials: this.withCredentials
      }, function (error, req) {
        // disposed
        if (!_this5.request) {
          return;
        }

        // clear the loader's request reference
        _this5.request = null;

        if (error) {
          _this5.error = {
            status: req.status,
            message: 'DASH playlist request error at URL: ' + _this5.srcUrl,
            responseText: req.responseText,
            // MEDIA_ERR_NETWORK
            code: 2
          };
          if (_this5.state === 'HAVE_NOTHING') {
            _this5.started = false;
          }
          return _this5.trigger('error');
        }

        _this5.masterXml_ = req.responseText;

        var newMaster = _this5.parseMasterXml();

        _this5.master = updateMaster$1(_this5.master, newMaster);

        window$1.setTimeout(function () {
          _this5.trigger('minimumUpdatePeriod');
        }, _this5.master.minimumUpdatePeriod);
      });
    }

    /**
     * Refreshes the media playlist by re-parsing the master xml and updating playlist
     * references. If this is an alternate loader, the updated parsed manifest is retrieved
     * from the master loader.
     */

  }, {
    key: 'refreshMedia_',
    value: function refreshMedia_() {
      var _this6 = this;

      var oldMaster = void 0;
      var newMaster = void 0;

      if (this.masterPlaylistLoader_) {
        oldMaster = this.masterPlaylistLoader_.master;
        newMaster = this.masterPlaylistLoader_.parseMasterXml();
      } else {
        oldMaster = this.master;
        newMaster = this.parseMasterXml();
      }

      var updatedMaster = updateMaster$1(oldMaster, newMaster);

      if (updatedMaster) {
        if (this.masterPlaylistLoader_) {
          this.masterPlaylistLoader_.master = updatedMaster;
        } else {
          this.master = updatedMaster;
        }
        this.media_ = updatedMaster.playlists[this.media_.uri];
      } else {
        this.trigger('playlistunchanged');
      }

      if (!this.media().endList) {
        this.mediaUpdateTimeout = window$1.setTimeout(function () {
          _this6.trigger('mediaupdatetimeout');
        }, refreshDelay(this.media(), !!updatedMaster));
      }

      this.trigger('loadedplaylist');
    }
  }]);
  return DashPlaylistLoader;
}(EventTarget$1$1);

var logger = function logger(source) {
  if (videojs$1.log.debug) {
    return videojs$1.log.debug.bind(videojs$1, 'VHS:', source + ' >');
  }

  return function () {};
};

function noop() {}

/**
 * @file source-updater.js
 */

/**
 * A queue of callbacks to be serialized and applied when a
 * MediaSource and its associated SourceBuffers are not in the
 * updating state. It is used by the segment loader to update the
 * underlying SourceBuffers when new data is loaded, for instance.
 *
 * @class SourceUpdater
 * @param {MediaSource} mediaSource the MediaSource to create the
 * SourceBuffer from
 * @param {String} mimeType the desired MIME type of the underlying
 * SourceBuffer
 * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer is
 * added to the media source
 */

var SourceUpdater = function () {
  function SourceUpdater(mediaSource, mimeType, type, sourceBufferEmitter) {
    classCallCheck$1(this, SourceUpdater);

    this.callbacks_ = [];
    this.pendingCallback_ = null;
    this.timestampOffset_ = 0;
    this.mediaSource = mediaSource;
    this.processedAppend_ = false;
    this.type_ = type;
    this.mimeType_ = mimeType;
    this.logger_ = logger('SourceUpdater[' + type + '][' + mimeType + ']');

    if (mediaSource.readyState === 'closed') {
      mediaSource.addEventListener('sourceopen', this.createSourceBuffer_.bind(this, mimeType, sourceBufferEmitter));
    } else {
      this.createSourceBuffer_(mimeType, sourceBufferEmitter);
    }
  }

  createClass$1(SourceUpdater, [{
    key: 'createSourceBuffer_',
    value: function createSourceBuffer_(mimeType, sourceBufferEmitter) {
      var _this = this;

      this.sourceBuffer_ = this.mediaSource.addSourceBuffer(mimeType);

      this.logger_('created SourceBuffer');

      if (sourceBufferEmitter) {
        sourceBufferEmitter.trigger('sourcebufferadded');

        if (this.mediaSource.sourceBuffers.length < 2) {
          // There's another source buffer we must wait for before we can start updating
          // our own (or else we can get into a bad state, i.e., appending video/audio data
          // before the other video/audio source buffer is available and leading to a video
          // or audio only buffer).
          sourceBufferEmitter.on('sourcebufferadded', function () {
            _this.start_();
          });
          return;
        }
      }

      this.start_();
    }
  }, {
    key: 'start_',
    value: function start_() {
      var _this2 = this;

      this.started_ = true;

      // run completion handlers and process callbacks as updateend
      // events fire
      this.onUpdateendCallback_ = function () {
        var pendingCallback = _this2.pendingCallback_;

        _this2.pendingCallback_ = null;

        _this2.logger_('buffered [' + printableRange(_this2.buffered()) + ']');

        if (pendingCallback) {
          pendingCallback();
        }

        _this2.runCallback_();
      };

      this.sourceBuffer_.addEventListener('updateend', this.onUpdateendCallback_);

      this.runCallback_();
    }

    /**
     * Aborts the current segment and resets the segment parser.
     *
     * @param {Function} done function to call when done
     * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void
     */

  }, {
    key: 'abort',
    value: function abort(done) {
      var _this3 = this;

      if (this.processedAppend_) {
        this.queueCallback_(function () {
          _this3.sourceBuffer_.abort();
        }, done);
      }
    }

    /**
     * Queue an update to append an ArrayBuffer.
     *
     * @param {ArrayBuffer} bytes
     * @param {Function} done the function to call when done
     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data
     */

  }, {
    key: 'appendBuffer',
    value: function appendBuffer(bytes, done) {
      var _this4 = this;

      this.processedAppend_ = true;
      this.queueCallback_(function () {
        _this4.sourceBuffer_.appendBuffer(bytes);
      }, done);
    }

    /**
     * Indicates what TimeRanges are buffered in the managed SourceBuffer.
     *
     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered
     */

  }, {
    key: 'buffered',
    value: function buffered() {
      if (!this.sourceBuffer_) {
        return videojs$1.createTimeRanges();
      }
      return this.sourceBuffer_.buffered;
    }

    /**
     * Queue an update to remove a time range from the buffer.
     *
     * @param {Number} start where to start the removal
     * @param {Number} end where to end the removal
     * @param {Function} [done=noop] optional callback to be executed when the remove
     * operation is complete
     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
     */

  }, {
    key: 'remove',
    value: function remove(start, end) {
      var _this5 = this;

      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;

      if (this.processedAppend_) {
        this.queueCallback_(function () {
          _this5.logger_('remove [' + start + ' => ' + end + ']');
          _this5.sourceBuffer_.remove(start, end);
        }, done);
      }
    }

    /**
     * Whether the underlying sourceBuffer is updating or not
     *
     * @return {Boolean} the updating status of the SourceBuffer
     */

  }, {
    key: 'updating',
    value: function updating() {
      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;
    }

    /**
     * Set/get the timestampoffset on the SourceBuffer
     *
     * @return {Number} the timestamp offset
     */

  }, {
    key: 'timestampOffset',
    value: function timestampOffset(offset) {
      var _this6 = this;

      if (typeof offset !== 'undefined') {
        this.queueCallback_(function () {
          _this6.sourceBuffer_.timestampOffset = offset;
        });
        this.timestampOffset_ = offset;
      }
      return this.timestampOffset_;
    }

    /**
     * Queue a callback to run
     */

  }, {
    key: 'queueCallback_',
    value: function queueCallback_(callback, done) {
      this.callbacks_.push([callback.bind(this), done]);
      this.runCallback_();
    }

    /**
     * Run a queued callback
     */

  }, {
    key: 'runCallback_',
    value: function runCallback_() {
      var callbacks = void 0;

      if (!this.updating() && this.callbacks_.length && this.started_) {
        callbacks = this.callbacks_.shift();
        this.pendingCallback_ = callbacks[1];
        callbacks[0]();
      }
    }

    /**
     * dispose of the source updater and the underlying sourceBuffer
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);
      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {
        this.sourceBuffer_.abort();
      }
    }
  }]);
  return SourceUpdater;
}();

var Config = {
  GOAL_BUFFER_LENGTH: 30,
  MAX_GOAL_BUFFER_LENGTH: 60,
  GOAL_BUFFER_LENGTH_RATE: 1,
  // A fudge factor to apply to advertised playlist bitrates to account for
  // temporary flucations in client bandwidth
  BANDWIDTH_VARIANCE: 1.2,
  // How much of the buffer must be filled before we consider upswitching
  BUFFER_LOW_WATER_LINE: 0,
  MAX_BUFFER_LOW_WATER_LINE: 30,
  BUFFER_LOW_WATER_LINE_RATE: 1
};

/**
 * @file key.js
 *
 *
 * Store the unique key for the video data;
 * @type {Object}
 * @private
 */

var keyObject = {
  uri: '',
  keyData: {}
};

/**
 * Test if wo have stored the key
 *
 * @param  {String}  The uri of the key which we need to load;
 * @return {Boolean} do we have stored the key which we want to load;
 * @function getStoredKey
 */
function getStoredKey(uri) {
  if (keyObject.uri === uri) {
    return keyObject.keyData[uri];
  }
  return false;
}

/**
 * Store the key and uri
 * @param {String} uri The uri of the key
 * @param {Unit32Array} key The data of key in Uint32Array Typed Array
 */
function setStoredKey(uri, key) {
  keyObject.uri = uri;
  keyObject.keyData = {};
  keyObject.keyData[uri] = key;
}

var REQUEST_ERRORS = {
  FAILURE: 2,
  TIMEOUT: -101,
  ABORTED: -102
};

/**
 * Turns segment byterange into a string suitable for use in
 * HTTP Range requests
 *
 * @param {Object} byterange - an object with two values defining the start and end
 *                             of a byte-range
 */
var byterangeStr = function byterangeStr(byterange) {
  var byterangeStart = void 0;
  var byterangeEnd = void 0;

  // `byterangeEnd` is one less than `offset + length` because the HTTP range
  // header uses inclusive ranges
  byterangeEnd = byterange.offset + byterange.length - 1;
  byterangeStart = byterange.offset;
  return 'bytes=' + byterangeStart + '-' + byterangeEnd;
};

/**
 * Defines headers for use in the xhr request for a particular segment.
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 */
var segmentXhrHeaders = function segmentXhrHeaders(segment) {
  var headers = {};

  if (segment.byterange) {
    headers.Range = byterangeStr(segment.byterange);
  }
  return headers;
};

/**
 * Abort all requests
 *
 * @param {Object} activeXhrs - an object that tracks all XHR requests
 */
var abortAll = function abortAll(activeXhrs) {
  activeXhrs.forEach(function (xhr$$1) {
    xhr$$1.abort();
  });
};

/**
 * Gather important bandwidth stats once a request has completed
 *
 * @param {Object} request - the XHR request from which to gather stats
 */
var getRequestStats = function getRequestStats(request) {
  return {
    bandwidth: request.bandwidth,
    bytesReceived: request.bytesReceived || 0,
    roundTripTime: request.roundTripTime || 0
  };
};

/**
 * If possible gather bandwidth stats as a request is in
 * progress
 *
 * @param {Event} progressEvent - an event object from an XHR's progress event
 */
var getProgressStats = function getProgressStats(progressEvent) {
  var request = progressEvent.target;
  var roundTripTime = Date.now() - request.requestTime;
  var stats = {
    bandwidth: Infinity,
    bytesReceived: 0,
    roundTripTime: roundTripTime || 0
  };

  stats.bytesReceived = progressEvent.loaded;
  // This can result in Infinity if stats.roundTripTime is 0 but that is ok
  // because we should only use bandwidth stats on progress to determine when
  // abort a request early due to insufficient bandwidth
  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);

  return stats;
};

/**
 * Handle all error conditions in one place and return an object
 * with all the information
 *
 * @param {Error|null} error - if non-null signals an error occured with the XHR
 * @param {Object} request -  the XHR request that possibly generated the error
 */
var handleErrors = function handleErrors(error, request) {
  if (request.timedout) {
    return {
      status: request.status,
      message: 'HLS request timed-out at URL: ' + request.uri,
      code: REQUEST_ERRORS.TIMEOUT,
      xhr: request
    };
  }

  if (request.aborted) {
    return {
      status: request.status,
      message: 'HLS request aborted at URL: ' + request.uri,
      code: REQUEST_ERRORS.ABORTED,
      xhr: request
    };
  }

  if (error) {
    return {
      status: request.status,
      message: 'HLS request errored at URL: ' + request.uri,
      code: REQUEST_ERRORS.FAILURE,
      xhr: request
    };
  }

  return null;
};

/**
 * Handle responses for key data and convert the key data to the correct format
 * for the decryption step later
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} finishProcessingFn - a callback to execute to continue processing
 *                                        this request
 */
var handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn, self) {
  return function (error, request) {
    var response = request.response;
    setStoredKey(segment.key.resolvedUri, response);
    var errorObj = handleErrors(error, request);
    var hex2str = function hex2str(str) {
      var hex = str,
          bytes = [];
      for (var i = 0; i < hex.length - 1; i += 2) {
        bytes.push(parseInt(hex.substr(i, 2), 16));
      }
      return String.fromCharCode.apply(String, bytes);
    };
    var str2ab = function str2ab(str) {
      var array = new Uint8Array(str.length);
      for (var i = 0; i < str.length; i++) {
        array[i] = str.charCodeAt(i);
      }
      return array.buffer;
    };
    var decrypt$$1 = function decrypt$$1(response) {
      var decryptKey = function decryptKey(value, key, iv) {
        return CryptoJS.AES.decrypt(CryptoJS.lib.CipherParams.create({ ciphertext: CryptoJS.enc.Hex.parse(value) }), CryptoJS.enc.Hex.parse(key), {
          iv: CryptoJS.enc.Hex.parse(iv)
        });
      };
      var key = self.hls_.options_.customDrm.keys;
      if (typeof key === 'string') {
        key = atob(key).split(',');
        key = decryptKey(key[0], key[1], key[2]);
        return decryptKey(response, key.toString(CryptoJS.enc.Hex).substr(0, 64), key.toString(CryptoJS.enc.Hex).substr(64, 96)).toString(CryptoJS.enc.Utf8);
      }
      return null;
    };

    if (errorObj) {
      return finishProcessingFn(errorObj, segment);
    }

    if (typeof response === 'string') {
      response = decrypt$$1(response);
      response = response.replace(/"/g, "").toString();
      response = hex2str(response);
      response = str2ab(response);
    }
    if ((typeof response === 'undefined' ? 'undefined' : _typeof(response)) === 'object' && response.constructor.name === 'ArrayBuffer' && response.byteLength !== 16) {
      return finishProcessingFn({
        status: request.status,
        message: 'Invalid HLS key at URL: ' + request.uri,
        code: REQUEST_ERRORS.FAILURE,
        xhr: request
      }, segment);
    }

    var view = new DataView(response);
    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);
    return finishProcessingFn(null, segment);
  };
};

/**
 * Handle init-segment responses
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} finishProcessingFn - a callback to execute to continue processing
 *                                        this request
 */
var handleInitSegmentResponse = function handleInitSegmentResponse(segment, captionParser, finishProcessingFn) {
  return function (error, request) {
    var response = request.response;
    var errorObj = handleErrors(error, request);

    if (errorObj) {
      return finishProcessingFn(errorObj, segment);
    }

    // stop processing if received empty content
    if (response.byteLength === 0) {
      return finishProcessingFn({
        status: request.status,
        message: 'Empty HLS segment content at URL: ' + request.uri,
        code: REQUEST_ERRORS.FAILURE,
        xhr: request
      }, segment);
    }

    segment.map.bytes = new Uint8Array(request.response);

    // Initialize CaptionParser if it hasn't been yet
    if (!captionParser.isInitialized()) {
      captionParser.init();
    }

    segment.map.timescales = mp4probe$1.timescale(segment.map.bytes);
    segment.map.videoTrackIds = mp4probe$1.videoTrackIds(segment.map.bytes);

    return finishProcessingFn(null, segment);
  };
};

/**
 * Response handler for segment-requests being sure to set the correct
 * property depending on whether the segment is encryped or not
 * Also records and keeps track of stats that are used for ABR purposes
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} finishProcessingFn - a callback to execute to continue processing
 *                                        this request
 */
var handleSegmentResponse = function handleSegmentResponse(segment, captionParser, finishProcessingFn) {
  return function (error, request) {
    var response = request.response;
    var errorObj = handleErrors(error, request);
    var parsed = void 0;

    if (errorObj) {
      return finishProcessingFn(errorObj, segment);
    }

    // stop processing if received empty content
    if (response.byteLength === 0) {
      return finishProcessingFn({
        status: request.status,
        message: 'Empty HLS segment content at URL: ' + request.uri,
        code: REQUEST_ERRORS.FAILURE,
        xhr: request
      }, segment);
    }

    segment.stats = getRequestStats(request);

    if (segment.key) {
      segment.encryptedBytes = new Uint8Array(request.response);
    } else {
      segment.bytes = new Uint8Array(request.response);
    }

    // This is likely an FMP4 and has the init segment.
    // Run through the CaptionParser in case there are captions.
    if (segment.map && segment.map.bytes) {
      // Initialize CaptionParser if it hasn't been yet
      if (!captionParser.isInitialized()) {
        captionParser.init();
      }

      parsed = captionParser.parse(segment.bytes, segment.map.videoTrackIds, segment.map.timescales);

      if (parsed && parsed.captions) {
        segment.captionStreams = parsed.captionStreams;
        segment.fmp4Captions = parsed.captions;
      }
    }

    return finishProcessingFn(null, segment);
  };
};

/**
 * Decrypt the segment via the decryption web worker
 *
 * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} doneFn - a callback that is executed after decryption has completed
 */
var decryptSegment = function decryptSegment(decrypter, segment, doneFn) {
  var decryptionHandler = function decryptionHandler(event) {
    if (event.data.source === segment.requestId) {
      decrypter.removeEventListener('message', decryptionHandler);
      var decrypted = event.data.decrypted;

      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);
      return doneFn(null, segment);
    }
  };

  decrypter.addEventListener('message', decryptionHandler);

  // this is an encrypted segment
  // incrementally decrypt the segment
  decrypter.postMessage(createTransferableMessage({
    source: segment.requestId,
    encrypted: segment.encryptedBytes,
    key: segment.key.bytes,
    iv: segment.key.iv
  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);
};

/**
 * The purpose of this function is to get the most pertinent error from the
 * array of errors.
 * For instance if a timeout and two aborts occur, then the aborts were
 * likely triggered by the timeout so return that error object.
 */
var getMostImportantError = function getMostImportantError(errors) {
  return errors.reduce(function (prev, err) {
    return err.code > prev.code ? err : prev;
  });
};

/**
 * This function waits for all XHRs to finish (with either success or failure)
 * before continueing processing via it's callback. The function gathers errors
 * from each request into a single errors array so that the error status for
 * each request can be examined later.
 *
 * @param {Object} activeXhrs - an object that tracks all XHR requests
 * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines
 * @param {Function} doneFn - a callback that is executed after all resources have been
 *                            downloaded and any decryption completed
 */
var waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {
  var errors = [];
  var count = 0;

  return function (error, segment) {
    if (error) {
      // If there are errors, we have to abort any outstanding requests
      abortAll(activeXhrs);
      errors.push(error);
    }
    count += 1;

    if (count === activeXhrs.length) {
      // Keep track of when *all* of the requests have completed
      segment.endOfAllRequests = Date.now();

      if (errors.length > 0) {
        var worstError = getMostImportantError(errors);

        return doneFn(worstError, segment);
      }
      if (segment.encryptedBytes) {
        return decryptSegment(decrypter, segment, doneFn);
      }
      // Otherwise, everything is ready just continue
      return doneFn(null, segment);
    }
  };
};

/**
 * Simple progress event callback handler that gathers some stats before
 * executing a provided callback with the `segment` object
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} progressFn - a callback that is executed each time a progress event
 *                                is received
 * @param {Event} event - the progress event object from XMLHttpRequest
 */
var handleProgress = function handleProgress(segment, progressFn) {
  return function (event) {
    segment.stats = videojs$1.mergeOptions(segment.stats, getProgressStats(event));

    // record the time that we receive the first byte of data
    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {
      segment.stats.firstBytesReceivedAt = Date.now();
    }

    return progressFn(event, segment);
  };
};

/**
 * Load all resources and does any processing necessary for a media-segment
 *
 * Features:
 *   decrypts the media-segment if it has a key uri and an iv
 *   aborts *all* requests if *any* one request fails
 *
 * The segment object, at minimum, has the following format:
 * {
 *   resolvedUri: String,
 *   [byterange]: {
 *     offset: Number,
 *     length: Number
 *   },
 *   [key]: {
 *     resolvedUri: String
 *     [byterange]: {
 *       offset: Number,
 *       length: Number
 *     },
 *     iv: {
 *       bytes: Uint32Array
 *     }
 *   },
 *   [map]: {
 *     resolvedUri: String,
 *     [byterange]: {
 *       offset: Number,
 *       length: Number
 *     },
 *     [bytes]: Uint8Array
 *   }
 * }
 * ...where [name] denotes optional properties
 *
 * @param {Function} xhr - an instance of the xhr wrapper in xhr.js
 * @param {Object} xhrOptions - the base options to provide to all xhr requests
 * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128
 *                                       decryption routines
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} progressFn - a callback that receives progress events from the main
 *                                segment's xhr request
 * @param {Function} doneFn - a callback that is executed only once all requests have
 *                            succeeded or failed
 * @returns {Function} a function that, when invoked, immediately aborts all
 *                     outstanding requests
 */
var customXhr = function XhrFunction(options, callback) {
  var bytes = getStoredKey(options);
  var request = {};
  request.response = bytes;
  callback(null, request);
};
var mediaSegmentRequest = function mediaSegmentRequest(xhr$$1, xhrOptions, decryptionWorker, captionParser, segment, progressFn, doneFn, self) {
  var activeXhrs = [];
  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);

  // optionally, request the decryption key
  if (segment.key) {
    var keyRequestOptions = videojs$1.mergeOptions(xhrOptions, {
      uri: self.hls_.options_.customDrm && self.hls_.options_.customDrm.uri ? self.hls_.options_.customDrm.uri : segment.key.resolvedUri,
      responseType: self.hls_.options_.customDrm ? 'plain' : 'arraybuffer'
    });
    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn, self);
    var bytes = getStoredKey(segment.key.resolvedUri);
    if (bytes) {
      var keyXhr = customXhr(segment.key.resolvedUri, keyRequestCallback);
    } else {
      var keyXhr = xhr$$1(keyRequestOptions, keyRequestCallback);
    }
    activeXhrs.push(keyXhr);
  }

  // optionally, request the associated media init segment
  if (segment.map && !segment.map.bytes) {
    var initSegmentOptions = videojs$1.mergeOptions(xhrOptions, {
      uri: segment.map.resolvedUri,
      responseType: 'arraybuffer',
      headers: segmentXhrHeaders(segment.map)
    });
    var initSegmentRequestCallback = handleInitSegmentResponse(segment, captionParser, finishProcessingFn);
    var initSegmentXhr = xhr$$1(initSegmentOptions, initSegmentRequestCallback);

    activeXhrs.push(initSegmentXhr);
  }

  var segmentRequestOptions = videojs$1.mergeOptions(xhrOptions, {
    uri: segment.resolvedUri,
    responseType: 'arraybuffer',
    headers: segmentXhrHeaders(segment)
  });
  var segmentRequestCallback = handleSegmentResponse(segment, captionParser, finishProcessingFn);
  var segmentXhr = xhr$$1(segmentRequestOptions, segmentRequestCallback);

  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));
  activeXhrs.push(segmentXhr);

  return function () {
    return abortAll(activeXhrs);
  };
};

// Utilities

/**
 * Returns the CSS value for the specified property on an element
 * using `getComputedStyle`. Firefox has a long-standing issue where
 * getComputedStyle() may return null when running in an iframe with
 * `display: none`.
 *
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 * @param {HTMLElement} el the htmlelement to work on
 * @param {string} the proprety to get the style for
 */
var safeGetComputedStyle = function safeGetComputedStyle(el, property) {
  var result = void 0;

  if (!el) {
    return '';
  }

  result = window$1.getComputedStyle(el);
  if (!result) {
    return '';
  }

  return result[property];
};

/**
 * Resuable stable sort function
 *
 * @param {Playlists} array
 * @param {Function} sortFn Different comparators
 * @function stableSort
 */
var stableSort = function stableSort(array, sortFn) {
  var newArray = array.slice();

  array.sort(function (left, right) {
    var cmp = sortFn(left, right);

    if (cmp === 0) {
      return newArray.indexOf(left) - newArray.indexOf(right);
    }
    return cmp;
  });
};

/**
 * A comparator function to sort two playlist object by bandwidth.
 *
 * @param {Object} left a media playlist object
 * @param {Object} right a media playlist object
 * @return {Number} Greater than zero if the bandwidth attribute of
 * left is greater than the corresponding attribute of right. Less
 * than zero if the bandwidth of right is greater than left and
 * exactly zero if the two are equal.
 */
var comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {
  var leftBandwidth = void 0;
  var rightBandwidth = void 0;

  if (left.attributes.BANDWIDTH) {
    leftBandwidth = left.attributes.BANDWIDTH;
  }
  leftBandwidth = leftBandwidth || window$1.Number.MAX_VALUE;
  if (right.attributes.BANDWIDTH) {
    rightBandwidth = right.attributes.BANDWIDTH;
  }
  rightBandwidth = rightBandwidth || window$1.Number.MAX_VALUE;

  return leftBandwidth - rightBandwidth;
};

/**
 * A comparator function to sort two playlist object by resolution (width).
 * @param {Object} left a media playlist object
 * @param {Object} right a media playlist object
 * @return {Number} Greater than zero if the resolution.width attribute of
 * left is greater than the corresponding attribute of right. Less
 * than zero if the resolution.width of right is greater than left and
 * exactly zero if the two are equal.
 */
var comparePlaylistResolution = function comparePlaylistResolution(left, right) {
  var leftWidth = void 0;
  var rightWidth = void 0;

  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {
    leftWidth = left.attributes.RESOLUTION.width;
  }

  leftWidth = leftWidth || window$1.Number.MAX_VALUE;

  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {
    rightWidth = right.attributes.RESOLUTION.width;
  }

  rightWidth = rightWidth || window$1.Number.MAX_VALUE;

  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions
  // have the same media dimensions/ resolution
  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {
    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;
  }
  return leftWidth - rightWidth;
};

/**
 * Chooses the appropriate media playlist based on bandwidth and player size
 *
 * @param {Object} master
 *        Object representation of the master manifest
 * @param {Number} playerBandwidth
 *        Current calculated bandwidth of the player
 * @param {Number} playerWidth
 *        Current width of the player element
 * @param {Number} playerHeight
 *        Current height of the player element
 * @return {Playlist} the highest bitrate playlist less than the
 * currently detected bandwidth, accounting for some amount of
 * bandwidth variance
 */
var simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight) {
  // convert the playlists to an intermediary representation to make comparisons easier
  var sortedPlaylistReps = master.playlists.map(function (playlist) {
    var width = void 0;
    var height = void 0;
    var bandwidth = void 0;

    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;
    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;
    bandwidth = playlist.attributes.BANDWIDTH;

    bandwidth = bandwidth || window$1.Number.MAX_VALUE;

    return {
      bandwidth: bandwidth,
      width: width,
      height: height,
      playlist: playlist
    };
  });

  stableSort(sortedPlaylistReps, function (left, right) {
    return left.bandwidth - right.bandwidth;
  });

  // filter out any playlists that have been excluded due to
  // incompatible configurations
  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {
    return !Playlist.isIncompatible(rep.playlist);
  });

  // filter out any playlists that have been disabled manually through the representations
  // api or blacklisted temporarily due to playback errors.
  var enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {
    return Playlist.isEnabled(rep.playlist);
  });

  if (!enabledPlaylistReps.length) {
    // if there are no enabled playlists, then they have all been blacklisted or disabled
    // by the user through the representations api. In this case, ignore blacklisting and
    // fallback to what the user wants by using playlists the user has not disabled.
    enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {
      return !Playlist.isDisabled(rep.playlist);
    });
  }

  // filter out any variant that has greater effective bitrate
  // than the current estimated bandwidth
  var bandwidthPlaylistReps = enabledPlaylistReps.filter(function (rep) {
    return rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth;
  });

  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];

  // get all of the renditions with the same (highest) bandwidth
  // and then taking the very first element
  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {
    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
  })[0];

  // filter out playlists without resolution information
  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {
    return rep.width && rep.height;
  });

  // sort variants by resolution
  stableSort(haveResolution, function (left, right) {
    return left.width - right.width;
  });

  // if we have the exact resolution as the player use it
  var resolutionBestRepList = haveResolution.filter(function (rep) {
    return rep.width === playerWidth && rep.height === playerHeight;
  });

  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];
  // ensure that we pick the highest bandwidth variant that have exact resolution
  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {
    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
  })[0];

  var resolutionPlusOneList = void 0;
  var resolutionPlusOneSmallest = void 0;
  var resolutionPlusOneRep = void 0;

  // find the smallest variant that is larger than the player
  // if there is no match of exact resolution
  if (!resolutionBestRep) {
    resolutionPlusOneList = haveResolution.filter(function (rep) {
      return rep.width > playerWidth || rep.height > playerHeight;
    });

    // find all the variants have the same smallest resolution
    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {
      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;
    });

    // ensure that we also pick the highest bandwidth variant that
    // is just-larger-than the video player
    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];
    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {
      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
    })[0];
  }

  // fallback chain of variants
  var chosenRep = resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];

  return chosenRep ? chosenRep.playlist : null;
};

// Playlist Selectors

/**
 * Chooses the appropriate media playlist based on the most recent
 * bandwidth estimate and the player size.
 *
 * Expects to be called within the context of an instance of HlsHandler
 *
 * @return {Playlist} the highest bitrate playlist less than the
 * currently detected bandwidth, accounting for some amount of
 * bandwidth variance
 */
var lastBandwidthSelector = function lastBandwidthSelector() {
  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));
};

/**
 * Chooses the appropriate media playlist based on the potential to rebuffer
 *
 * @param {Object} settings
 *        Object of information required to use this selector
 * @param {Object} settings.master
 *        Object representation of the master manifest
 * @param {Number} settings.currentTime
 *        The current time of the player
 * @param {Number} settings.bandwidth
 *        Current measured bandwidth
 * @param {Number} settings.duration
 *        Duration of the media
 * @param {Number} settings.segmentDuration
 *        Segment duration to be used in round trip time calculations
 * @param {Number} settings.timeUntilRebuffer
 *        Time left in seconds until the player has to rebuffer
 * @param {Number} settings.currentTimeline
 *        The current timeline segments are being loaded from
 * @param {SyncController} settings.syncController
 *        SyncController for determining if we have a sync point for a given playlist
 * @return {Object|null}
 *         {Object} return.playlist
 *         The highest bandwidth playlist with the least amount of rebuffering
 *         {Number} return.rebufferingImpact
 *         The amount of time in seconds switching to this playlist will rebuffer. A
 *         negative value means that switching will cause zero rebuffering.
 */
var minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {
  var master = settings.master,
      currentTime = settings.currentTime,
      bandwidth = settings.bandwidth,
      duration$$1 = settings.duration,
      segmentDuration = settings.segmentDuration,
      timeUntilRebuffer = settings.timeUntilRebuffer,
      currentTimeline = settings.currentTimeline,
      syncController = settings.syncController;

  // filter out any playlists that have been excluded due to
  // incompatible configurations

  var compatiblePlaylists = master.playlists.filter(function (playlist) {
    return !Playlist.isIncompatible(playlist);
  });

  // filter out any playlists that have been disabled manually through the representations
  // api or blacklisted temporarily due to playback errors.
  var enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);

  if (!enabledPlaylists.length) {
    // if there are no enabled playlists, then they have all been blacklisted or disabled
    // by the user through the representations api. In this case, ignore blacklisting and
    // fallback to what the user wants by using playlists the user has not disabled.
    enabledPlaylists = compatiblePlaylists.filter(function (playlist) {
      return !Playlist.isDisabled(playlist);
    });
  }

  var bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));

  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {
    var syncPoint = syncController.getSyncPoint(playlist, duration$$1, currentTimeline, currentTime);
    // If there is no sync point for this playlist, switching to it will require a
    // sync request first. This will double the request time
    var numRequests = syncPoint ? 1 : 2;
    var requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);
    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;

    return {
      playlist: playlist,
      rebufferingImpact: rebufferingImpact
    };
  });

  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {
    return estimate.rebufferingImpact <= 0;
  });

  // Sort by bandwidth DESC
  stableSort(noRebufferingPlaylists, function (a, b) {
    return comparePlaylistBandwidth(b.playlist, a.playlist);
  });

  if (noRebufferingPlaylists.length) {
    return noRebufferingPlaylists[0];
  }

  stableSort(rebufferingEstimates, function (a, b) {
    return a.rebufferingImpact - b.rebufferingImpact;
  });

  return rebufferingEstimates[0] || null;
};

/**
 * Chooses the appropriate media playlist, which in this case is the lowest bitrate
 * one with video.  If no renditions with video exist, return the lowest audio rendition.
 *
 * Expects to be called within the context of an instance of HlsHandler
 *
 * @return {Object|null}
 *         {Object} return.playlist
 *         The lowest bitrate playlist that contains a video codec.  If no such rendition
 *         exists pick the lowest audio rendition.
 */
var lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {
  // filter out any playlists that have been excluded due to
  // incompatible configurations or playback errors
  var playlists = this.playlists.master.playlists.filter(Playlist.isEnabled);

  // Sort ascending by bitrate
  stableSort(playlists, function (a, b) {
    return comparePlaylistBandwidth(a, b);
  });

  // Parse and assume that playlists with no video codec have no video
  // (this is not necessarily true, although it is generally true).
  //
  // If an entire manifest has no valid videos everything will get filtered
  // out.
  var playlistsWithVideo = playlists.filter(function (playlist) {
    return parseCodecs(playlist.attributes.CODECS).videoCodec;
  });

  return playlistsWithVideo[0] || null;
};

/**
 * Create captions text tracks on video.js if they do not exist
 *
 * @param {Object} inbandTextTracks a reference to current inbandTextTracks
 * @param {Object} tech the video.js tech
 * @param {Object} captionStreams the caption streams to create
 * @private
 */
var createCaptionsTrackIfNotExists = function createCaptionsTrackIfNotExists(inbandTextTracks, tech, captionStreams) {
  for (var trackId in captionStreams) {
    if (!inbandTextTracks[trackId]) {
      tech.trigger({ type: 'usage', name: 'hls-608' });
      var track = tech.textTracks().getTrackById(trackId);

      if (track) {
        // Resuse an existing track with a CC# id because this was
        // very likely created by videojs-contrib-hls from information
        // in the m3u8 for us to use
        inbandTextTracks[trackId] = track;
      } else {
        // Otherwise, create a track with the default `CC#` label and
        // without a language
        inbandTextTracks[trackId] = tech.addRemoteTextTrack({
          kind: 'captions',
          id: trackId,
          label: trackId
        }, false).track;
      }
    }
  }
};

var addCaptionData = function addCaptionData(_ref) {
  var inbandTextTracks = _ref.inbandTextTracks,
      captionArray = _ref.captionArray,
      timestampOffset = _ref.timestampOffset;

  if (!captionArray) {
    return;
  }

  var Cue = window.WebKitDataCue || window.VTTCue;

  captionArray.forEach(function (caption) {
    var track = caption.stream;
    var startTime = caption.startTime;
    var endTime = caption.endTime;

    if (!inbandTextTracks[track]) {
      return;
    }

    startTime += timestampOffset;
    endTime += timestampOffset;

    inbandTextTracks[track].addCue(new Cue(startTime, endTime, caption.text));
  });
};

/**
 * @file segment-loader.js
 */
// in ms
var CHECK_BUFFER_DELAY = 500;

/**
 * Determines if we should call endOfStream on the media source based
 * on the state of the buffer or if appened segment was the final
 * segment in the playlist.
 *
 * @param {Object} playlist a media playlist object
 * @param {Object} mediaSource the MediaSource object
 * @param {Number} segmentIndex the index of segment we last appended
 * @returns {Boolean} do we need to call endOfStream on the MediaSource
 */
var detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {
  if (!playlist || !mediaSource) {
    return false;
  }

  var segments = playlist.segments;

  // determine a few boolean values to help make the branch below easier
  // to read
  var appendedLastSegment = segmentIndex === segments.length;

  // if we've buffered to the end of the video, we need to call endOfStream
  // so that MediaSources can trigger the `ended` event when it runs out of
  // buffered data instead of waiting for me
  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;
};

var finite = function finite(num) {
  return typeof num === 'number' && isFinite(num);
};

var illegalMediaSwitch = function illegalMediaSwitch(loaderType, startingMedia, newSegmentMedia) {
  // Although these checks should most likely cover non 'main' types, for now it narrows
  // the scope of our checks.
  if (loaderType !== 'main' || !startingMedia || !newSegmentMedia) {
    return null;
  }

  if (!newSegmentMedia.containsAudio && !newSegmentMedia.containsVideo) {
    return 'Neither audio nor video found in segment.';
  }

  if (startingMedia.containsVideo && !newSegmentMedia.containsVideo) {
    return 'Only audio found in segment when we expected video.' + ' We can\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';
  }

  if (!startingMedia.containsVideo && newSegmentMedia.containsVideo) {
    return 'Video found in segment when we expected only audio.' + ' We can\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';
  }

  return null;
};

/**
 * Calculates a time value that is safe to remove from the back buffer without interupting
 * playback.
 *
 * @param {TimeRange} seekable
 *        The current seekable range
 * @param {Number} currentTime
 *        The current time of the player
 * @param {Number} targetDuration
 *        The target duration of the current playlist
 * @return {Number}
 *         Time that is safe to remove from the back buffer without interupting playback
 */
var safeBackBufferTrimTime = function safeBackBufferTrimTime(seekable$$1, currentTime, targetDuration) {
  var removeToTime = void 0;

  if (seekable$$1.length && seekable$$1.start(0) > 0 && seekable$$1.start(0) < currentTime) {
    // If we have a seekable range use that as the limit for what can be removed safely
    removeToTime = seekable$$1.start(0);
  } else {
    // otherwise remove anything older than 30 seconds before the current play head
    removeToTime = currentTime - 30;
  }

  // Don't allow removing from the buffer within target duration of current time
  // to avoid the possibility of removing the GOP currently being played which could
  // cause playback stalls.
  return Math.min(removeToTime, currentTime - targetDuration);
};

var segmentInfoString = function segmentInfoString(segmentInfo) {
  var _segmentInfo$segment = segmentInfo.segment,
      start = _segmentInfo$segment.start,
      end = _segmentInfo$segment.end,
      _segmentInfo$playlist = segmentInfo.playlist,
      seq = _segmentInfo$playlist.mediaSequence,
      id = _segmentInfo$playlist.id,
      _segmentInfo$playlist2 = _segmentInfo$playlist.segments,
      segments = _segmentInfo$playlist2 === undefined ? [] : _segmentInfo$playlist2,
      index = segmentInfo.mediaIndex,
      timeline = segmentInfo.timeline;

  return ['appending [' + index + '] of [' + seq + ', ' + (seq + segments.length) + '] from playlist [' + id + ']', '[' + start + ' => ' + end + '] in timeline [' + timeline + ']'].join(' ');
};

/**
 * An object that manages segment loading and appending.
 *
 * @class SegmentLoader
 * @param {Object} options required and optional options
 * @extends videojs.EventTarget
 */

var SegmentLoader = function (_videojs$EventTarget) {
  inherits$1(SegmentLoader, _videojs$EventTarget);

  function SegmentLoader(settings) {
    classCallCheck$1(this, SegmentLoader);

    // check pre-conditions
    var _this = possibleConstructorReturn$1(this, (SegmentLoader.__proto__ || Object.getPrototypeOf(SegmentLoader)).call(this));

    if (!settings) {
      throw new TypeError('Initialization settings are required');
    }
    if (typeof settings.currentTime !== 'function') {
      throw new TypeError('No currentTime getter specified');
    }
    if (!settings.mediaSource) {
      throw new TypeError('No MediaSource specified');
    }
    // public properties
    _this.bandwidth = settings.bandwidth;
    _this.throughput = { rate: 0, count: 0 };
    _this.roundTrip = NaN;
    _this.resetStats_();
    _this.mediaIndex = null;

    // private settings
    _this.hasPlayed_ = settings.hasPlayed;
    _this.currentTime_ = settings.currentTime;
    _this.seekable_ = settings.seekable;
    _this.seeking_ = settings.seeking;
    _this.duration_ = settings.duration;
    _this.mediaSource_ = settings.mediaSource;
    _this.hls_ = settings.hls;
    _this.loaderType_ = settings.loaderType;
    _this.startingMedia_ = void 0;
    _this.segmentMetadataTrack_ = settings.segmentMetadataTrack;
    _this.goalBufferLength_ = settings.goalBufferLength;
    _this.sourceType_ = settings.sourceType;
    _this.inbandTextTracks_ = settings.inbandTextTracks;
    _this.state_ = 'INIT';

    // private instance variables
    _this.checkBufferTimeout_ = null;
    _this.error_ = void 0;
    _this.currentTimeline_ = -1;
    _this.pendingSegment_ = null;
    _this.mimeType_ = null;
    _this.sourceUpdater_ = null;
    _this.xhrOptions_ = null;

    // Fragmented mp4 playback
    _this.activeInitSegmentId_ = null;
    _this.initSegments_ = {};
    // Fmp4 CaptionParser
    _this.captionParser_ = new CaptionParser();

    _this.decrypter_ = settings.decrypter;

    // Manages the tracking and generation of sync-points, mappings
    // between a time in the display time and a segment index within
    // a playlist
    _this.syncController_ = settings.syncController;
    _this.syncPoint_ = {
      segmentIndex: 0,
      time: 0
    };

    _this.syncController_.on('syncinfoupdate', function () {
      return _this.trigger('syncinfoupdate');
    });

    _this.mediaSource_.addEventListener('sourceopen', function () {
      return _this.ended_ = false;
    });

    // ...for determining the fetch location
    _this.fetchAtBuffer_ = false;

    _this.logger_ = logger('SegmentLoader[' + _this.loaderType_ + ']');

    Object.defineProperty(_this, 'state', {
      get: function get$$1() {
        return this.state_;
      },
      set: function set$$1(newState) {
        if (newState !== this.state_) {
          this.logger_(this.state_ + ' -> ' + newState);
          this.state_ = newState;
        }
      }
    });
    return _this;
  }

  /**
   * reset all of our media stats
   *
   * @private
   */

  createClass$1(SegmentLoader, [{
    key: 'resetStats_',
    value: function resetStats_() {
      this.mediaBytesTransferred = 0;
      this.mediaRequests = 0;
      this.mediaRequestsAborted = 0;
      this.mediaRequestsTimedout = 0;
      this.mediaRequestsErrored = 0;
      this.mediaTransferDuration = 0;
      this.mediaSecondsLoaded = 0;
    }

    /**
     * dispose of the SegmentLoader and reset to the default state
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      this.state = 'DISPOSED';
      this.pause();
      this.abort_();
      if (this.sourceUpdater_) {
        this.sourceUpdater_.dispose();
      }
      this.resetStats_();
      this.captionParser_.reset();
    }

    /**
     * abort anything that is currently doing on with the SegmentLoader
     * and reset to a default state
     */

  }, {
    key: 'abort',
    value: function abort() {
      if (this.state !== 'WAITING') {
        if (this.pendingSegment_) {
          this.pendingSegment_ = null;
        }
        return;
      }

      this.abort_();

      // We aborted the requests we were waiting on, so reset the loader's state to READY
      // since we are no longer "waiting" on any requests. XHR callback is not always run
      // when the request is aborted. This will prevent the loader from being stuck in the
      // WAITING state indefinitely.
      this.state = 'READY';

      // don't wait for buffer check timeouts to begin fetching the
      // next segment
      if (!this.paused()) {
        this.monitorBuffer_();
      }
    }

    /**
     * abort all pending xhr requests and null any pending segements
     *
     * @private
     */

  }, {
    key: 'abort_',
    value: function abort_() {
      if (this.xhr_) {
        this.xhr_.abort();
      }

      // clear out the segment being processed
      this.pendingSegment_ = null;
    }
    /**
     * set an error on the segment loader and null out any pending segements
     *
     * @param {Error} error the error to set on the SegmentLoader
     * @return {Error} the error that was set or that is currently set
     */

  }, {
    key: 'error',
    value: function error(_error) {
      if (typeof _error !== 'undefined') {
        this.error_ = _error;
      }

      this.pendingSegment_ = null;
      return this.error_;
    }
  }, {
    key: 'endOfStream',
    value: function endOfStream() {
      this.ended_ = true;
      this.pause();
      this.trigger('ended');
    }

    /**
     * Indicates which time ranges are buffered
     *
     * @return {TimeRange}
     *         TimeRange object representing the current buffered ranges
     */

  }, {
    key: 'buffered_',
    value: function buffered_() {
      if (!this.sourceUpdater_) {
        return videojs$1.createTimeRanges();
      }

      return this.sourceUpdater_.buffered();
    }

    /**
     * Gets and sets init segment for the provided map
     *
     * @param {Object} map
     *        The map object representing the init segment to get or set
     * @param {Boolean=} set
     *        If true, the init segment for the provided map should be saved
     * @return {Object}
     *         map object for desired init segment
     */

  }, {
    key: 'initSegment',
    value: function initSegment(map) {
      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!map) {
        return null;
      }

      var id = initSegmentId(map);
      var storedMap = this.initSegments_[id];

      if (set$$1 && !storedMap && map.bytes) {
        this.initSegments_[id] = storedMap = {
          resolvedUri: map.resolvedUri,
          byterange: map.byterange,
          bytes: map.bytes,
          timescales: map.timescales,
          videoTrackIds: map.videoTrackIds
        };
      }

      return storedMap || map;
    }

    /**
     * Returns true if all configuration required for loading is present, otherwise false.
     *
     * @return {Boolean} True if the all configuration is ready for loading
     * @private
     */

  }, {
    key: 'couldBeginLoading_',
    value: function couldBeginLoading_() {
      return this.playlist_ && (
      // the source updater is created when init_ is called, so either having a
      // source updater or being in the INIT state with a mimeType is enough
      // to say we have all the needed configuration to start loading.
      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();
    }

    /**
     * load a playlist and start to fill the buffer
     */

  }, {
    key: 'load',
    value: function load() {
      // un-pause
      this.monitorBuffer_();

      // if we don't have a playlist yet, keep waiting for one to be
      // specified
      if (!this.playlist_) {
        return;
      }

      // not sure if this is the best place for this
      this.syncController_.setDateTimeMapping(this.playlist_);

      // if all the configuration is ready, initialize and begin loading
      if (this.state === 'INIT' && this.couldBeginLoading_()) {
        return this.init_();
      }

      // if we're in the middle of processing a segment already, don't
      // kick off an additional segment request
      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {
        return;
      }

      this.state = 'READY';
    }

    /**
     * Once all the starting parameters have been specified, begin
     * operation. This method should only be invoked from the INIT
     * state.
     *
     * @private
     */

  }, {
    key: 'init_',
    value: function init_() {
      this.state = 'READY';
      this.sourceUpdater_ = new SourceUpdater(this.mediaSource_, this.mimeType_, this.loaderType_, this.sourceBufferEmitter_);
      this.resetEverything();
      return this.monitorBuffer_();
    }

    /**
     * set a playlist on the segment loader
     *
     * @param {PlaylistLoader} media the playlist to set on the segment loader
     */

  }, {
    key: 'playlist',
    value: function playlist(newPlaylist) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!newPlaylist) {
        return;
      }

      var oldPlaylist = this.playlist_;
      var segmentInfo = this.pendingSegment_;

      this.playlist_ = newPlaylist;
      this.xhrOptions_ = options;

      // when we haven't started playing yet, the start of a live playlist
      // is always our zero-time so force a sync update each time the playlist
      // is refreshed from the server
      if (!this.hasPlayed_()) {
        newPlaylist.syncInfo = {
          mediaSequence: newPlaylist.mediaSequence,
          time: 0
        };
      }

      var oldId = oldPlaylist ? oldPlaylist.id : null;

      this.logger_('playlist update [' + oldId + ' => ' + newPlaylist.id + ']');

      // in VOD, this is always a rendition switch (or we updated our syncInfo above)
      // in LIVE, we always want to update with new playlists (including refreshes)
      this.trigger('syncinfoupdate');

      // if we were unpaused but waiting for a playlist, start
      // buffering now
      if (this.state === 'INIT' && this.couldBeginLoading_()) {
        return this.init_();
      }

      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {
        if (this.mediaIndex !== null) {
          // we must "resync" the segment loader when we switch renditions and
          // the segment loader is already synced to the previous rendition
          this.resyncLoader();
        }

        // the rest of this function depends on `oldPlaylist` being defined
        return;
      }

      // we reloaded the same playlist so we are in a live scenario
      // and we will likely need to adjust the mediaIndex
      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;

      this.logger_('live window shift [' + mediaSequenceDiff + ']');

      // update the mediaIndex on the SegmentLoader
      // this is important because we can abort a request and this value must be
      // equal to the last appended mediaIndex
      if (this.mediaIndex !== null) {
        this.mediaIndex -= mediaSequenceDiff;
      }

      // update the mediaIndex on the SegmentInfo object
      // this is important because we will update this.mediaIndex with this value
      // in `handleUpdateEnd_` after the segment has been successfully appended
      if (segmentInfo) {
        segmentInfo.mediaIndex -= mediaSequenceDiff;

        // we need to update the referenced segment so that timing information is
        // saved for the new playlist's segment, however, if the segment fell off the
        // playlist, we can leave the old reference and just lose the timing info
        if (segmentInfo.mediaIndex >= 0) {
          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];
        }
      }

      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);
    }

    /**
     * Prevent the loader from fetching additional segments. If there
     * is a segment request outstanding, it will finish processing
     * before the loader halts. A segment loader can be unpaused by
     * calling load().
     */

  }, {
    key: 'pause',
    value: function pause() {
      if (this.checkBufferTimeout_) {
        window$1.clearTimeout(this.checkBufferTimeout_);

        this.checkBufferTimeout_ = null;
      }
    }

    /**
     * Returns whether the segment loader is fetching additional
     * segments when given the opportunity. This property can be
     * modified through calls to pause() and load().
     */

  }, {
    key: 'paused',
    value: function paused() {
      return this.checkBufferTimeout_ === null;
    }

    /**
     * create/set the following mimetype on the SourceBuffer through a
     * SourceUpdater
     *
     * @param {String} mimeType the mime type string to use
     * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer
     * is added to the media source
     */

  }, {
    key: 'mimeType',
    value: function mimeType(_mimeType, sourceBufferEmitter) {
      if (this.mimeType_) {
        return;
      }

      this.mimeType_ = _mimeType;
      this.sourceBufferEmitter_ = sourceBufferEmitter;
      // if we were unpaused but waiting for a sourceUpdater, start
      // buffering now
      if (this.state === 'INIT' && this.couldBeginLoading_()) {
        this.init_();
      }
    }

    /**
     * Delete all the buffered data and reset the SegmentLoader
     * @param {Function} [done] an optional callback to be executed when the remove
     * operation is complete
     */

  }, {
    key: 'resetEverything',
    value: function resetEverything(done) {
      this.ended_ = false;
      this.resetLoader();
      this.remove(0, this.duration_(), done);
      // clears fmp4 captions
      this.captionParser_.clearAllCaptions();
      this.trigger('reseteverything');
    }

    /**
     * Force the SegmentLoader to resync and start loading around the currentTime instead
     * of starting at the end of the buffer
     *
     * Useful for fast quality changes
     */

  }, {
    key: 'resetLoader',
    value: function resetLoader() {
      this.fetchAtBuffer_ = false;
      this.resyncLoader();
    }

    /**
     * Force the SegmentLoader to restart synchronization and make a conservative guess
     * before returning to the simple walk-forward method
     */

  }, {
    key: 'resyncLoader',
    value: function resyncLoader() {
      this.mediaIndex = null;
      this.syncPoint_ = null;
      this.abort();
    }

    /**
     * Remove any data in the source buffer between start and end times
     * @param {Number} start - the start time of the region to remove from the buffer
     * @param {Number} end - the end time of the region to remove from the buffer
     * @param {Function} [done] - an optional callback to be executed when the remove
     * operation is complete
     */

  }, {
    key: 'remove',
    value: function remove(start, end, done) {
      if (this.sourceUpdater_) {
        this.sourceUpdater_.remove(start, end, done);
      }
      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);

      if (this.inbandTextTracks_) {
        for (var id in this.inbandTextTracks_) {
          removeCuesFromTrack(start, end, this.inbandTextTracks_[id]);
        }
      }
    }

    /**
     * (re-)schedule monitorBufferTick_ to run as soon as possible
     *
     * @private
     */

  }, {
    key: 'monitorBuffer_',
    value: function monitorBuffer_() {
      if (this.checkBufferTimeout_) {
        window$1.clearTimeout(this.checkBufferTimeout_);
      }

      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), 1);
    }

    /**
     * As long as the SegmentLoader is in the READY state, periodically
     * invoke fillBuffer_().
     *
     * @private
     */

  }, {
    key: 'monitorBufferTick_',
    value: function monitorBufferTick_() {
      if (this.state === 'READY') {
        this.fillBuffer_();
      }

      if (this.checkBufferTimeout_) {
        window$1.clearTimeout(this.checkBufferTimeout_);
      }

      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);
    }

    /**
     * fill the buffer with segements unless the sourceBuffers are
     * currently updating
     *
     * Note: this function should only ever be called by monitorBuffer_
     * and never directly
     *
     * @private
     */

  }, {
    key: 'fillBuffer_',
    value: function fillBuffer_() {
      if (this.sourceUpdater_.updating()) {
        return;
      }

      if (!this.syncPoint_) {
        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
      }

      // see if we need to begin loading immediately
      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);

      if (!segmentInfo) {
        return;
      }

      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);

      if (isEndOfStream) {
        this.endOfStream();
        return;
      }

      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {
        return;
      }

      // We will need to change timestampOffset of the sourceBuffer if either of
      // the following conditions are true:
      // - The segment.timeline !== this.currentTimeline
      //   (we are crossing a discontinuity somehow)
      // - The "timestampOffset" for the start of this segment is less than
      //   the currently set timestampOffset
      // Also, clear captions if we are crossing a discontinuity boundary
      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {
        this.syncController_.reset();
        segmentInfo.timestampOffset = segmentInfo.startOfSegment;
        this.captionParser_.clearAllCaptions();
      }

      this.loadSegment_(segmentInfo);
    }

    /**
     * Determines what segment request should be made, given current playback
     * state.
     *
     * @param {TimeRanges} buffered - the state of the buffer
     * @param {Object} playlist - the playlist object to fetch segments from
     * @param {Number} mediaIndex - the previous mediaIndex fetched or null
     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not
     * @param {Number} currentTime - the playback position in seconds
     * @param {Object} syncPoint - a segment info object that describes the
     * @returns {Object} a segment request object that describes the segment to load
     */

  }, {
    key: 'checkBuffer_',
    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {
      var lastBufferedEnd = 0;
      var startOfSegment = void 0;

      if (buffered.length) {
        lastBufferedEnd = buffered.end(buffered.length - 1);
      }

      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);

      if (!playlist.segments.length) {
        return null;
      }

      // if there is plenty of content buffered, and the video has
      // been played before relax for awhile
      if (bufferedTime >= this.goalBufferLength_()) {
        return null;
      }

      // if the video has not yet played once, and we already have
      // one segment downloaded do nothing
      if (!hasPlayed && bufferedTime >= 1) {
        return null;
      }

      // When the syncPoint is null, there is no way of determining a good
      // conservative segment index to fetch from
      // The best thing to do here is to get the kind of sync-point data by
      // making a request
      if (syncPoint === null) {
        mediaIndex = this.getSyncSegmentCandidate_(playlist);
        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);
      }

      // Under normal playback conditions fetching is a simple walk forward
      if (mediaIndex !== null) {
        var segment = playlist.segments[mediaIndex];

        if (segment && segment.end) {
          startOfSegment = segment.end;
        } else {
          startOfSegment = lastBufferedEnd;
        }
        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);
      }

      // There is a sync-point but the lack of a mediaIndex indicates that
      // we need to make a good conservative guess about which segment to
      // fetch
      if (this.fetchAtBuffer_) {
        // Find the segment containing the end of the buffer
        var mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);

        mediaIndex = mediaSourceInfo.mediaIndex;
        startOfSegment = mediaSourceInfo.startTime;
      } else {
        // Find the segment containing currentTime
        var _mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);

        mediaIndex = _mediaSourceInfo.mediaIndex;
        startOfSegment = _mediaSourceInfo.startTime;
      }

      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);
    }

    /**
     * The segment loader has no recourse except to fetch a segment in the
     * current playlist and use the internal timestamps in that segment to
     * generate a syncPoint. This function returns a good candidate index
     * for that process.
     *
     * @param {Object} playlist - the playlist object to look for a
     * @returns {Number} An index of a segment from the playlist to load
     */

  }, {
    key: 'getSyncSegmentCandidate_',
    value: function getSyncSegmentCandidate_(playlist) {
      var _this2 = this;

      if (this.currentTimeline_ === -1) {
        return 0;
      }

      var segmentIndexArray = playlist.segments.map(function (s, i) {
        return {
          timeline: s.timeline,
          segmentIndex: i
        };
      }).filter(function (s) {
        return s.timeline === _this2.currentTimeline_;
      });

      if (segmentIndexArray.length) {
        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;
      }

      return Math.max(playlist.segments.length - 1, 0);
    }
  }, {
    key: 'generateSegmentInfo_',
    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {
      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {
        return null;
      }

      var segment = playlist.segments[mediaIndex];

      return {
        requestId: 'segment-loader-' + Math.random(),
        // resolve the segment URL relative to the playlist
        uri: segment.resolvedUri,
        // the segment's mediaIndex at the time it was requested
        mediaIndex: mediaIndex,
        // whether or not to update the SegmentLoader's state with this
        // segment's mediaIndex
        isSyncRequest: isSyncRequest,
        startOfSegment: startOfSegment,
        // the segment's playlist
        playlist: playlist,
        // unencrypted bytes of the segment
        bytes: null,
        // when a key is defined for this segment, the encrypted bytes
        encryptedBytes: null,
        // The target timestampOffset for this segment when we append it
        // to the source buffer
        timestampOffset: null,
        // The timeline that the segment is in
        timeline: segment.timeline,
        // The expected duration of the segment in seconds
        duration: segment.duration,
        // retain the segment in case the playlist updates while doing an async process
        segment: segment
      };
    }

    /**
     * Determines if the network has enough bandwidth to complete the current segment
     * request in a timely manner. If not, the request will be aborted early and bandwidth
     * updated to trigger a playlist switch.
     *
     * @param {Object} stats
     *        Object containing stats about the request timing and size
     * @return {Boolean} True if the request was aborted, false otherwise
     * @private
     */

  }, {
    key: 'abortRequestEarly_',
    value: function abortRequestEarly_(stats) {
      if (this.hls_.tech_.paused() ||
      // Don't abort if the current playlist is on the lowestEnabledRendition
      // TODO: Replace using timeout with a boolean indicating whether this playlist is
      //       the lowestEnabledRendition.
      !this.xhrOptions_.timeout ||
      // Don't abort if we have no bandwidth information to estimate segment sizes
      !this.playlist_.attributes.BANDWIDTH) {
        return false;
      }

      // Wait at least 1 second since the first byte of data has been received before
      // using the calculated bandwidth from the progress event to allow the bitrate
      // to stabilize
      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {
        return false;
      }

      var currentTime = this.currentTime_();
      var measuredBandwidth = stats.bandwidth;
      var segmentDuration = this.pendingSegment_.duration;

      var requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);

      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort
      // if we are only left with less than 1 second when the request completes.
      // A negative timeUntilRebuffering indicates we are already rebuffering
      var timeUntilRebuffer$$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;

      // Only consider aborting early if the estimated time to finish the download
      // is larger than the estimated time until the player runs out of forward buffer
      if (requestTimeRemaining <= timeUntilRebuffer$$1) {
        return false;
      }

      var switchCandidate = minRebufferMaxBandwidthSelector({
        master: this.hls_.playlists.master,
        currentTime: currentTime,
        bandwidth: measuredBandwidth,
        duration: this.duration_(),
        segmentDuration: segmentDuration,
        timeUntilRebuffer: timeUntilRebuffer$$1,
        currentTimeline: this.currentTimeline_,
        syncController: this.syncController_
      });

      if (!switchCandidate) {
        return;
      }

      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$$1;

      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;

      var minimumTimeSaving = 0.5;

      // If we are already rebuffering, increase the amount of variance we add to the
      // potential round trip time of the new request so that we are not too aggressive
      // with switching to a playlist that might save us a fraction of a second.
      if (timeUntilRebuffer$$1 <= TIME_FUDGE_FACTOR) {
        minimumTimeSaving = 1;
      }

      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {
        return false;
      }

      // set the bandwidth to that of the desired playlist being sure to scale by
      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it
      // don't trigger a bandwidthupdate as the bandwidth is artifial
      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;
      this.abort();
      this.trigger('earlyabort');
      return true;
    }

    /**
     * XHR `progress` event handler
     *
     * @param {Event}
     *        The XHR `progress` event
     * @param {Object} simpleSegment
     *        A simplified segment object copy
     * @private
     */

  }, {
    key: 'handleProgress_',
    value: function handleProgress_(event, simpleSegment) {
      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {
        return;
      }

      this.trigger('progress');
    }

    /**
     * load a specific segment from a request into the buffer
     *
     * @private
     */

  }, {
    key: 'loadSegment_',
    value: function loadSegment_(segmentInfo) {
      this.state = 'WAITING';
      this.pendingSegment_ = segmentInfo;
      this.trimBackBuffer_(segmentInfo);

      segmentInfo.abortRequests = mediaSegmentRequest(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.captionParser_, this.createSimplifiedSegmentObj_(segmentInfo),
      // progress callback
      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this), this);
    }
  }, {
    key: 'loadSegsment_',
    value: function loadSegsment_(segmentInfo) {
      var segment = void 0;
      var keyXhr = void 0;
      var initSegmentXhr = void 0;
      var segmentXhr = void 0;
      var removeToTime = 0;

      removeToTime = this.trimBuffer_(segmentInfo);

      if (removeToTime > 0) {
        this.sourceUpdater_.remove(0, removeToTime);
      }

      segment = segmentInfo.playlist.segments[segmentInfo.mediaIndex];

      // optionally, request the decryption key
      if (segment.key) {
        var bytes = getStoredKey(segment.key.uri);
        if (bytes) {
          segment.key.bytes = bytes;
        } else {
          var keyRequestOptions = videojs$1.mergeOptions(this.xhrOptions_, {
            uri: segment.key.resolvedUri,
            responseType: 'arraybuffer'
          });

          keyXhr = this.hls_.xhr(keyRequestOptions, this.handleResponse_.bind(this));
        }
      }

      // optionally, request the associated media init segment
      if (segment.map && !this.initSegments_[initSegmentId(segment.map)]) {
        var initSegmentOptions = videojs$1.mergeOptions(this.xhrOptions_, {
          uri: segment.map.resolvedUri,
          responseType: 'arraybuffer',
          headers: segmentXhrHeaders(segment.map)
        });

        initSegmentXhr = this.hls_.xhr(initSegmentOptions, this.handleResponse_.bind(this));
      }
      this.pendingSegment_ = segmentInfo;

      var segmentRequestOptions = videojs$1.mergeOptions(this.xhrOptions_, {
        uri: segmentInfo.uri,
        responseType: 'arraybuffer',
        headers: segmentXhrHeaders(segment)
      });

      segmentXhr = this.hls_.xhr(segmentRequestOptions, this.handleResponse_.bind(this));

      this.xhr_ = {
        keyXhr: keyXhr,
        initSegmentXhr: initSegmentXhr,
        segmentXhr: segmentXhr,
        abort: function abort() {
          if (this.segmentXhr) {
            // Prevent error handler from running.
            this.segmentXhr.onreadystatechange = null;
            this.segmentXhr.abort();
            this.segmentXhr = null;
          }
          if (this.initSegmentXhr) {
            // Prevent error handler from running.
            this.initSegmentXhr.onreadystatechange = null;
            this.initSegmentXhr.abort();
            this.initSegmentXhr = null;
          }
          if (this.keyXhr) {
            // Prevent error handler from running.
            this.keyXhr.onreadystatechange = null;
            this.keyXhr.abort();
            this.keyXhr = null;
          }
        }
      };

      this.state = 'WAITING';
    }
    /**
     * triggered when a segment response is received
     *
     * @private
     */

  }, {
    key: 'handleResponse_',
    value: function handleResponse_(error, request) {
      var segmentInfo = void 0;
      var segment = void 0;
      var keyXhrRequest = void 0;
      var view = void 0;

      // timeout of previously aborted request
      if (!this.xhr_ || request !== this.xhr_.segmentXhr && request !== this.xhr_.keyXhr && request !== this.xhr_.initSegmentXhr) {
        return;
      }

      segmentInfo = this.pendingSegment_;
      segment = segmentInfo.playlist.segments[segmentInfo.mediaIndex];

      // if a request times out, reset bandwidth tracking
      if (request.timedout) {
        this.abort_();
        this.bandwidth = 1;
        this.roundTrip = NaN;
        this.state = 'READY';
        return this.trigger('progress');
      }

      // trigger an event for other errors
      if (!request.aborted && error) {
        // abort will clear xhr_
        keyXhrRequest = this.xhr_.keyXhr;
        this.abort_();
        this.error({
          status: request.status,
          message: request === keyXhrRequest ? 'HLS key request error at URL: ' + segment.key.uri : 'HLS segment request error at URL: ' + segmentInfo.uri,
          code: 2,
          xhr: request
        });
        this.state = 'READY';
        this.pause();
        return this.trigger('error');
      }

      // stop processing if the request was aborted
      if (!request.response) {
        this.abort_();
        return;
      }

      if (request === this.xhr_.segmentXhr) {
        // the segment request is no longer outstanding
        this.xhr_.segmentXhr = null;

        // calculate the download bandwidth based on segment request
        this.roundTrip = request.roundTripTime;
        this.bandwidth = request.bandwidth;
        this.mediaBytesTransferred += request.bytesReceived || 0;
        this.mediaRequests += 1;
        this.mediaTransferDuration += request.roundTripTime || 0;

        if (segment.key) {
          segmentInfo.encryptedBytes = new Uint8Array(request.response);
        } else {
          segmentInfo.bytes = new Uint8Array(request.response);
        }
      }

      if (request === this.xhr_.keyXhr) {
        keyXhrRequest = this.xhr_.segmentXhr;
        // the key request is no longer outstanding
        this.xhr_.keyXhr = null;

        if (request.response.byteLength !== 16) {
          this.abort_();
          this.error({
            status: request.status,
            message: 'Invalid HLS key at URL: ' + segment.key.uri,
            code: 2,
            xhr: request
          });
          this.state = 'READY';
          this.pause();
          return this.trigger('error');
        }

        view = new DataView(request.response);
        segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);

        setStoredKey(segment.key.uri, segment.key.bytes);

        // if the media sequence is greater than 2^32, the IV will be incorrect
        // assuming 10s segments, that would be about 1300 years
        segment.key.iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);
      }

      if (request === this.xhr_.initSegmentXhr) {
        // the init segment request is no longer outstanding
        this.xhr_.initSegmentXhr = null;
        segment.map.bytes = new Uint8Array(request.response);
        this.initSegments_[initSegmentId(segment.map)] = segment.map;
      }

      if (!this.xhr_.segmentXhr && !this.xhr_.keyXhr && !this.xhr_.initSegmentXhr) {
        this.xhr_ = null;
        this.processResponse_();
      }
    }
  }, {
    key: 'processResponse_',
    value: function processResponse_() {
      var segmentInfo = void 0;
      var segment = void 0;

      this.state = 'DECRYPTING';

      segmentInfo = this.pendingSegment_;
      segment = segmentInfo.playlist.segments[segmentInfo.mediaIndex];

      // some videos don't start from presentation time zero
      // if that is the case, set the timestamp offset on the first
      // segment to adjust them so that it is not necessary to seek
      // before playback can begin
      if (segment.map && isNaN(this.zeroOffset_)) {
        if (segment.key) {
          var timescales = mp4probe.timescale(segment.map.bytes);
          var startTime = mp4probe.startTime(timescales, segmentInfo.bytes);

          this.zeroOffset_ = startTime;
          segmentInfo.timestampOffset -= startTime;
        }
      }

      if (segment.key) {
        // this is an encrypted segment
        // incrementally decrypt the segment
        /* eslint-disable no-new, handle-callback-err */
        new Decrypter(segmentInfo.encryptedBytes, segment.key.bytes, segment.key.iv, function (err, bytes) {
          // err always null
          segmentInfo.bytes = bytes;
          this.handleSegment_();
        }.bind(this));
        /* eslint-enable */
      } else {
        this.handleSegment_();
      }
    }
    /**
     * trim the back buffer so that we don't have too much data
     * in the source buffer
     *
     * @private
     *
     * @param {Object} segmentInfo - the current segment
     */

  }, {
    key: 'trimBackBuffer_',
    value: function trimBackBuffer_(segmentInfo) {
      var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);

      // Chrome has a hard limit of 150MB of
      // buffer and a very conservative "garbage collector"
      // We manually clear out the old buffer to ensure
      // we don't trigger the QuotaExceeded error
      // on the source buffer during subsequent appends

      if (removeToTime > 0) {
        this.remove(0, removeToTime);
      }
    }
  }, {
    key: 'trimBuffer_',
    value: function trimBuffer_(segmentInfo) {
      var seekable$$1 = this.seekable_();
      var currentTime = this.currentTime_();
      var removeToTime = 0;

      // Chrome has a hard limit of 150mb of
      // buffer and a very conservative "garbage collector"
      // We manually clear out the old buffer to ensure
      // we don't trigger the QuotaExceeded error
      // on the source buffer during subsequent appends

      // If we have a seekable range use that as the limit for what can be removed safely
      // otherwise remove anything older than 1 minute before the current play head
      if (seekable$$1.length && seekable$$1.start(0) > 0 && seekable$$1.start(0) < currentTime) {
        removeToTime = seekable$$1.start(0);
      } else {
        removeToTime = currentTime - 60;
      }

      // If we are going to remove time from the front of the buffer, make
      // sure we aren't discarding a partial segment to avoid throwing
      // PLAYER_ERR_TIMEOUT while trying to read a partially discarded segment
      for (var i = 0; i <= segmentInfo.playlist.segments.length; i++) {
        // Loop through the segments and calculate the duration to compare
        // against the removeToTime
        var removeDuration = Playlist.duration(segmentInfo.playlist, segmentInfo.playlist.mediaSequence + i, this.expired_);

        // If we are close to next segment begining, remove to end of previous
        // segment instead
        var previousDuration = Playlist.duration(segmentInfo.playlist, segmentInfo.playlist.mediaSequence + (i - 1), this.expired_);

        if (removeDuration >= removeToTime) {
          removeToTime = previousDuration;
          break;
        }
      }
      return removeToTime;
    }
    /**
     * created a simplified copy of the segment object with just the
     * information necessary to perform the XHR and decryption
     *
     * @private
     *
     * @param {Object} segmentInfo - the current segment
     * @returns {Object} a simplified segment object copy
     */

  }, {
    key: 'createSimplifiedSegmentObj_',
    value: function createSimplifiedSegmentObj_(segmentInfo) {
      var segment = segmentInfo.segment;
      var simpleSegment = {
        resolvedUri: segment.resolvedUri,
        byterange: segment.byterange,
        requestId: segmentInfo.requestId
      };

      if (segment.key) {
        // if the media sequence is greater than 2^32, the IV will be incorrect
        // assuming 10s segments, that would be about 1300 years
        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);

        simpleSegment.key = {
          resolvedUri: segment.key.resolvedUri,
          iv: iv
        };
      }

      if (segment.map) {
        simpleSegment.map = this.initSegment(segment.map);
      }

      return simpleSegment;
    }

    /**
     * Handle the callback from the segmentRequest function and set the
     * associated SegmentLoader state and errors if necessary
     *
     * @private
     */

  }, {
    key: 'segmentRequestFinished_',
    value: function segmentRequestFinished_(error, simpleSegment) {
      // every request counts as a media request even if it has been aborted
      // or canceled due to a timeout
      this.mediaRequests += 1;

      if (simpleSegment.stats) {
        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;
        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;
      }

      // The request was aborted and the SegmentLoader has already been reset
      if (!this.pendingSegment_) {
        this.mediaRequestsAborted += 1;
        return;
      }

      // the request was aborted and the SegmentLoader has already started
      // another request. this can happen when the timeout for an aborted
      // request triggers due to a limitation in the XHR library
      // do not count this as any sort of request or we risk double-counting
      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {
        return;
      }

      // an error occurred from the active pendingSegment_ so reset everything
      if (error) {
        this.pendingSegment_ = null;
        this.state = 'READY';

        // the requests were aborted just record the aborted stat and exit
        // this is not a true error condition and nothing corrective needs
        // to be done
        if (error.code === REQUEST_ERRORS.ABORTED) {
          this.mediaRequestsAborted += 1;
          return;
        }

        this.pause();

        // the error is really just that at least one of the requests timed-out
        // set the bandwidth to a very low value and trigger an ABR switch to
        // take emergency action
        if (error.code === REQUEST_ERRORS.TIMEOUT) {
          this.mediaRequestsTimedout += 1;
          this.bandwidth = 1;
          this.roundTrip = NaN;
          this.trigger('bandwidthupdate');
          return;
        }

        // if control-flow has arrived here, then the error is real
        // emit an error event to blacklist the current playlist
        this.mediaRequestsErrored += 1;
        this.error(error);
        this.trigger('error');
        return;
      }

      // the response was a success so set any bandwidth stats the request
      // generated for ABR purposes
      this.bandwidth = simpleSegment.stats.bandwidth;
      this.roundTrip = simpleSegment.stats.roundTripTime;

      // if this request included an initialization segment, save that data
      // to the initSegment cache
      if (simpleSegment.map) {
        simpleSegment.map = this.initSegment(simpleSegment.map, true);
      }

      this.processSegmentResponse_(simpleSegment);
    }

    /**
     * Move any important data from the simplified segment object
     * back to the real segment object for future phases
     *
     * @private
     */

  }, {
    key: 'processSegmentResponse_',
    value: function processSegmentResponse_(simpleSegment) {
      var segmentInfo = this.pendingSegment_;

      segmentInfo.bytes = simpleSegment.bytes;
      if (simpleSegment.map) {
        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;
      }

      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;

      // This has fmp4 captions, add them to text tracks
      if (simpleSegment.fmp4Captions) {
        createCaptionsTrackIfNotExists(this.inbandTextTracks_, this.hls_.tech_, simpleSegment.captionStreams);
        addCaptionData({
          inbandTextTracks: this.inbandTextTracks_,
          captionArray: simpleSegment.fmp4Captions,
          // fmp4s will not have a timestamp offset
          timestampOffset: 0
        });
        // Reset stored captions since we added parsed
        // captions to a text track at this point
        this.captionParser_.clearParsedCaptions();
      }

      this.handleSegment_();
    }

    /**
     * append a decrypted segement to the SourceBuffer through a SourceUpdater
     *
     * @private
     */

  }, {
    key: 'handleSegment_',
    value: function handleSegment_() {
      var _this3 = this;

      if (!this.pendingSegment_) {
        this.state = 'READY';
        return;
      }

      var segmentInfo = this.pendingSegment_;
      var segment = segmentInfo.segment;
      var timingInfo = this.syncController_.probeSegmentInfo(segmentInfo);

      // When we have our first timing info, determine what media types this loader is
      // dealing with. Although we're maintaining extra state, it helps to preserve the
      // separation of segment loader from the actual source buffers.
      if (typeof this.startingMedia_ === 'undefined' && timingInfo && (
      // Guard against cases where we're not getting timing info at all until we are
      // certain that all streams will provide it.
      timingInfo.containsAudio || timingInfo.containsVideo)) {
        this.startingMedia_ = {
          containsAudio: timingInfo.containsAudio,
          containsVideo: timingInfo.containsVideo
        };
      }

      var illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.startingMedia_, timingInfo);

      if (illegalMediaSwitchError) {
        this.error({
          message: illegalMediaSwitchError,
          blacklistDuration: Infinity
        });
        this.trigger('error');
        return;
      }

      if (segmentInfo.isSyncRequest) {
        this.trigger('syncinfoupdate');
        this.pendingSegment_ = null;
        this.state = 'READY';
        return;
      }

      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {
        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);
        // fired when a timestamp offset is set in HLS (can also identify discontinuities)
        this.trigger('timestampoffset');
      }

      var timelineMapping = this.syncController_.mappingForTimeline(segmentInfo.timeline);

      if (timelineMapping !== null) {
        this.trigger({
          type: 'segmenttimemapping',
          mapping: timelineMapping
        });
      }

      this.state = 'APPENDING';

      // if the media initialization segment is changing, append it
      // before the content segment
      if (segment.map) {
        var initId = initSegmentId(segment.map);

        if (!this.activeInitSegmentId_ || this.activeInitSegmentId_ !== initId) {
          var initSegment = this.initSegment(segment.map);

          this.sourceUpdater_.appendBuffer(initSegment.bytes, function () {
            _this3.activeInitSegmentId_ = initId;
          });
        }
      }

      segmentInfo.byteLength = segmentInfo.bytes.byteLength;
      if (typeof segment.start === 'number' && typeof segment.end === 'number') {
        this.mediaSecondsLoaded += segment.end - segment.start;
      } else {
        this.mediaSecondsLoaded += segment.duration;
      }

      this.logger_(segmentInfoString(segmentInfo));

      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));
    }

    /**
     * callback to run when appendBuffer is finished. detects if we are
     * in a good state to do things with the data we got, or if we need
     * to wait for more
     *
     * @private
     */

  }, {
    key: 'handleUpdateEnd_',
    value: function handleUpdateEnd_() {
      if (!this.pendingSegment_) {
        this.state = 'READY';
        if (!this.paused()) {
          this.monitorBuffer_();
        }
        return;
      }

      var segmentInfo = this.pendingSegment_;
      var segment = segmentInfo.segment;
      var isWalkingForward = this.mediaIndex !== null;

      this.pendingSegment_ = null;
      this.recordThroughput_(segmentInfo);
      this.addSegmentMetadataCue_(segmentInfo);

      this.state = 'READY';

      this.mediaIndex = segmentInfo.mediaIndex;
      this.fetchAtBuffer_ = true;
      this.currentTimeline_ = segmentInfo.timeline;

      // We must update the syncinfo to recalculate the seekable range before
      // the following conditional otherwise it may consider this a bad "guess"
      // and attempt to resync when the post-update seekable window and live
      // point would mean that this was the perfect segment to fetch
      this.trigger('syncinfoupdate');

      // If we previously appended a segment that ends more than 3 targetDurations before
      // the currentTime_ that means that our conservative guess was too conservative.
      // In that case, reset the loader state so that we try to use any information gained
      // from the previous request to create a new, more accurate, sync-point.
      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {
        this.resetEverything();
        return;
      }

      // Don't do a rendition switch unless we have enough time to get a sync segment
      // and conservatively guess
      if (isWalkingForward) {
        this.trigger('bandwidthupdate');
      }
      this.trigger('progress');

      // any time an update finishes and the last segment is in the
      // buffer, end the stream. this ensures the "ended" event will
      // fire if playback reaches that point.
      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);

      if (isEndOfStream) {
        this.endOfStream();
      }

      if (!this.paused()) {
        this.monitorBuffer_();
      }
    }

    /**
     * Records the current throughput of the decrypt, transmux, and append
     * portion of the semgment pipeline. `throughput.rate` is a the cumulative
     * moving average of the throughput. `throughput.count` is the number of
     * data points in the average.
     *
     * @private
     * @param {Object} segmentInfo the object returned by loadSegment
     */

  }, {
    key: 'recordThroughput_',
    value: function recordThroughput_(segmentInfo) {
      var rate = this.throughput.rate;
      // Add one to the time to ensure that we don't accidentally attempt to divide
      // by zero in the case where the throughput is ridiculously high
      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;
      // Multiply by 8000 to convert from bytes/millisecond to bits/second
      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);

      // This is just a cumulative moving average calculation:
      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)
      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;
    }

    /**
     * Adds a cue to the segment-metadata track with some metadata information about the
     * segment
     *
     * @private
     * @param {Object} segmentInfo
     *        the object returned by loadSegment
     * @method addSegmentMetadataCue_
     */

  }, {
    key: 'addSegmentMetadataCue_',
    value: function addSegmentMetadataCue_(segmentInfo) {
      if (!this.segmentMetadataTrack_) {
        return;
      }

      var segment = segmentInfo.segment;
      var start = segment.start;
      var end = segment.end;

      // Do not try adding the cue if the start and end times are invalid.
      if (!finite(start) || !finite(end)) {
        return;
      }

      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);

      var Cue = window$1.WebKitDataCue || window$1.VTTCue;
      var value = {
        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,
        resolution: segmentInfo.playlist.attributes.RESOLUTION,
        codecs: segmentInfo.playlist.attributes.CODECS,
        byteLength: segmentInfo.byteLength,
        uri: segmentInfo.uri,
        timeline: segmentInfo.timeline,
        playlist: segmentInfo.playlist.uri,
        start: start,
        end: end
      };
      var data = JSON.stringify(value);
      var cue = new Cue(start, end, data);

      // Attach the metadata to the value property of the cue to keep consistency between
      // the differences of WebKitDataCue in safari and VTTCue in other browsers
      cue.value = value;

      this.segmentMetadataTrack_.addCue(cue);
    }
  }]);
  return SegmentLoader;
}(videojs$1.EventTarget);

var uint8ToUtf8 = function uint8ToUtf8(uintArray) {
  return decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));
};

/**
 * @file vtt-segment-loader.js
 */

var VTT_LINE_TERMINATORS = new Uint8Array('\n\n'.split('').map(function (char) {
  return char.charCodeAt(0);
}));

/**
 * An object that manages segment loading and appending.
 *
 * @class VTTSegmentLoader
 * @param {Object} options required and optional options
 * @extends videojs.EventTarget
 */

var VTTSegmentLoader = function (_SegmentLoader) {
  inherits$1(VTTSegmentLoader, _SegmentLoader);

  function VTTSegmentLoader(settings) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck$1(this, VTTSegmentLoader);

    // SegmentLoader requires a MediaSource be specified or it will throw an error;
    // however, VTTSegmentLoader has no need of a media source, so delete the reference
    var _this = possibleConstructorReturn$1(this, (VTTSegmentLoader.__proto__ || Object.getPrototypeOf(VTTSegmentLoader)).call(this, settings, options));

    _this.mediaSource_ = null;

    _this.subtitlesTrack_ = null;
    return _this;
  }

  /**
   * Indicates which time ranges are buffered
   *
   * @return {TimeRange}
   *         TimeRange object representing the current buffered ranges
   */

  createClass$1(VTTSegmentLoader, [{
    key: 'buffered_',
    value: function buffered_() {
      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {
        return videojs$1.createTimeRanges();
      }

      var cues = this.subtitlesTrack_.cues;
      var start = cues[0].startTime;
      var end = cues[cues.length - 1].startTime;

      return videojs$1.createTimeRanges([[start, end]]);
    }

    /**
     * Gets and sets init segment for the provided map
     *
     * @param {Object} map
     *        The map object representing the init segment to get or set
     * @param {Boolean=} set
     *        If true, the init segment for the provided map should be saved
     * @return {Object}
     *         map object for desired init segment
     */

  }, {
    key: 'initSegment',
    value: function initSegment(map) {
      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!map) {
        return null;
      }

      var id = initSegmentId(map);
      var storedMap = this.initSegments_[id];

      if (set$$1 && !storedMap && map.bytes) {
        // append WebVTT line terminators to the media initialization segment if it exists
        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that
        // requires two or more WebVTT line terminators between the WebVTT header and the
        // rest of the file
        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;
        var combinedSegment = new Uint8Array(combinedByteLength);

        combinedSegment.set(map.bytes);
        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);

        this.initSegments_[id] = storedMap = {
          resolvedUri: map.resolvedUri,
          byterange: map.byterange,
          bytes: combinedSegment
        };
      }

      return storedMap || map;
    }

    /**
     * Returns true if all configuration required for loading is present, otherwise false.
     *
     * @return {Boolean} True if the all configuration is ready for loading
     * @private
     */

  }, {
    key: 'couldBeginLoading_',
    value: function couldBeginLoading_() {
      return this.playlist_ && this.subtitlesTrack_ && !this.paused();
    }

    /**
     * Once all the starting parameters have been specified, begin
     * operation. This method should only be invoked from the INIT
     * state.
     *
     * @private
     */

  }, {
    key: 'init_',
    value: function init_() {
      this.state = 'READY';
      this.resetEverything();
      return this.monitorBuffer_();
    }

    /**
     * Set a subtitle track on the segment loader to add subtitles to
     *
     * @param {TextTrack=} track
     *        The text track to add loaded subtitles to
     * @return {TextTrack}
     *        Returns the subtitles track
     */

  }, {
    key: 'track',
    value: function track(_track) {
      if (typeof _track === 'undefined') {
        return this.subtitlesTrack_;
      }

      this.subtitlesTrack_ = _track;

      // if we were unpaused but waiting for a sourceUpdater, start
      // buffering now
      if (this.state === 'INIT' && this.couldBeginLoading_()) {
        this.init_();
      }

      return this.subtitlesTrack_;
    }

    /**
     * Remove any data in the source buffer between start and end times
     * @param {Number} start - the start time of the region to remove from the buffer
     * @param {Number} end - the end time of the region to remove from the buffer
     */

  }, {
    key: 'remove',
    value: function remove(start, end) {
      removeCuesFromTrack(start, end, this.subtitlesTrack_);
    }

    /**
     * fill the buffer with segements unless the sourceBuffers are
     * currently updating
     *
     * Note: this function should only ever be called by monitorBuffer_
     * and never directly
     *
     * @private
     */

  }, {
    key: 'fillBuffer_',
    value: function fillBuffer_() {
      var _this2 = this;

      if (!this.syncPoint_) {
        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
      }

      // see if we need to begin loading immediately
      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);

      segmentInfo = this.skipEmptySegments_(segmentInfo);

      if (!segmentInfo) {
        return;
      }

      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {
        // We don't have the timestamp offset that we need to sync subtitles.
        // Rerun on a timestamp offset or user interaction.
        var checkTimestampOffset = function checkTimestampOffset() {
          _this2.state = 'READY';
          if (!_this2.paused()) {
            // if not paused, queue a buffer check as soon as possible
            _this2.monitorBuffer_();
          }
        };

        this.syncController_.one('timestampoffset', checkTimestampOffset);
        this.state = 'WAITING_ON_TIMELINE';
        return;
      }

      this.loadSegment_(segmentInfo);
    }

    /**
     * Prevents the segment loader from requesting segments we know contain no subtitles
     * by walking forward until we find the next segment that we don't know whether it is
     * empty or not.
     *
     * @param {Object} segmentInfo
     *        a segment info object that describes the current segment
     * @return {Object}
     *         a segment info object that describes the current segment
     */

  }, {
    key: 'skipEmptySegments_',
    value: function skipEmptySegments_(segmentInfo) {
      while (segmentInfo && segmentInfo.segment.empty) {
        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);
      }
      return segmentInfo;
    }

    /**
     * append a decrypted segement to the SourceBuffer through a SourceUpdater
     *
     * @private
     */

  }, {
    key: 'handleSegment_',
    value: function handleSegment_() {
      var _this3 = this;

      if (!this.pendingSegment_ || !this.subtitlesTrack_) {
        this.state = 'READY';
        return;
      }

      this.state = 'APPENDING';

      var segmentInfo = this.pendingSegment_;
      var segment = segmentInfo.segment;

      // Make sure that vttjs has loaded, otherwise, wait till it finished loading
      if (typeof window$1.WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {

        var loadHandler = function loadHandler() {
          _this3.handleSegment_();
        };

        this.state = 'WAITING_ON_VTTJS';
        this.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);
        this.subtitlesTrack_.tech_.one('vttjserror', function () {
          _this3.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);
          _this3.error({
            message: 'Error loading vtt.js'
          });
          _this3.state = 'READY';
          _this3.pause();
          _this3.trigger('error');
        });

        return;
      }

      segment.requested = true;

      try {
        this.parseVTTCues_(segmentInfo);
      } catch (e) {
        this.error({
          message: e.message
        });
        this.state = 'READY';
        this.pause();
        return this.trigger('error');
      }

      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);

      if (segmentInfo.isSyncRequest) {
        this.trigger('syncinfoupdate');
        this.pendingSegment_ = null;
        this.state = 'READY';
        return;
      }

      segmentInfo.byteLength = segmentInfo.bytes.byteLength;

      this.mediaSecondsLoaded += segment.duration;

      if (segmentInfo.cues.length) {
        // remove any overlapping cues to prevent doubling
        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);
      }

      segmentInfo.cues.forEach(function (cue) {
        _this3.subtitlesTrack_.addCue(cue);
      });

      this.handleUpdateEnd_();
    }

    /**
     * Uses the WebVTT parser to parse the segment response
     *
     * @param {Object} segmentInfo
     *        a segment info object that describes the current segment
     * @private
     */

  }, {
    key: 'parseVTTCues_',
    value: function parseVTTCues_(segmentInfo) {
      var decoder = void 0;
      var decodeBytesToString = false;

      if (typeof window$1.TextDecoder === 'function') {
        decoder = new window$1.TextDecoder('utf8');
      } else {
        decoder = window$1.WebVTT.StringDecoder();
        decodeBytesToString = true;
      }

      var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, decoder);

      segmentInfo.cues = [];
      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };

      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);
      parser.ontimestampmap = function (map) {
        return segmentInfo.timestampmap = map;
      };
      parser.onparsingerror = function (error) {
        videojs$1.log.warn('Error encountered when parsing cues: ' + error.message);
      };

      if (segmentInfo.segment.map) {
        var mapData = segmentInfo.segment.map.bytes;

        if (decodeBytesToString) {
          mapData = uint8ToUtf8(mapData);
        }

        parser.parse(mapData);
      }

      var segmentData = segmentInfo.bytes;

      if (decodeBytesToString) {
        segmentData = uint8ToUtf8(segmentData);
      }

      parser.parse(segmentData);
      parser.flush();
    }

    /**
     * Updates the start and end times of any cues parsed by the WebVTT parser using
     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping
     * from the SyncController
     *
     * @param {Object} segmentInfo
     *        a segment info object that describes the current segment
     * @param {Object} mappingObj
     *        object containing a mapping from TS to media time
     * @param {Object} playlist
     *        the playlist object containing the segment
     * @private
     */

  }, {
    key: 'updateTimeMapping_',
    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {
      var segment = segmentInfo.segment;

      if (!mappingObj) {
        // If the sync controller does not have a mapping of TS to Media Time for the
        // timeline, then we don't have enough information to update the cue
        // start/end times
        return;
      }

      if (!segmentInfo.cues.length) {
        // If there are no cues, we also do not have enough information to figure out
        // segment timing. Mark that the segment contains no cues so we don't re-request
        // an empty segment.
        segment.empty = true;
        return;
      }

      var timestampmap = segmentInfo.timestampmap;
      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;

      segmentInfo.cues.forEach(function (cue) {
        // First convert cue time to TS time using the timestamp-map provided within the vtt
        cue.startTime += diff;
        cue.endTime += diff;
      });

      if (!playlist.syncInfo) {
        var firstStart = segmentInfo.cues[0].startTime;
        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;

        playlist.syncInfo = {
          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,
          time: Math.min(firstStart, lastStart - segment.duration)
        };
      }
    }
  }]);
  return VTTSegmentLoader;
}(SegmentLoader);

/**
 * @file ad-cue-tags.js
 */

/**
 * Searches for an ad cue that overlaps with the given mediaTime
 */
var findAdCue = function findAdCue(track, mediaTime) {
  var cues = track.cues;

  for (var i = 0; i < cues.length; i++) {
    var cue = cues[i];

    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {
      return cue;
    }
  }
  return null;
};

var updateAdCues = function updateAdCues(media, track) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  if (!media.segments) {
    return;
  }

  var mediaTime = offset;
  var cue = void 0;

  for (var i = 0; i < media.segments.length; i++) {
    var segment = media.segments[i];

    if (!cue) {
      // Since the cues will span for at least the segment duration, adding a fudge
      // factor of half segment duration will prevent duplicate cues from being
      // created when timing info is not exact (e.g. cue start time initialized
      // at 10.006677, but next call mediaTime is 10.003332 )
      cue = findAdCue(track, mediaTime + segment.duration / 2);
    }

    if (cue) {
      if ('cueIn' in segment) {
        // Found a CUE-IN so end the cue
        cue.endTime = mediaTime;
        cue.adEndTime = mediaTime;
        mediaTime += segment.duration;
        cue = null;
        continue;
      }

      if (mediaTime < cue.endTime) {
        // Already processed this mediaTime for this cue
        mediaTime += segment.duration;
        continue;
      }

      // otherwise extend cue until a CUE-IN is found
      cue.endTime += segment.duration;
    } else {
      if ('cueOut' in segment) {
        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);
        cue.adStartTime = mediaTime;
        // Assumes tag format to be
        // #EXT-X-CUE-OUT:30
        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);
        track.addCue(cue);
      }

      if ('cueOutCont' in segment) {
        // Entered into the middle of an ad cue
        var adOffset = void 0;
        var adTotal = void 0;

        // Assumes tag formate to be
        // #EXT-X-CUE-OUT-CONT:10/30

        var _segment$cueOutCont$s = segment.cueOutCont.split('/').map(parseFloat);

        var _segment$cueOutCont$s2 = slicedToArray$1(_segment$cueOutCont$s, 2);

        adOffset = _segment$cueOutCont$s2[0];
        adTotal = _segment$cueOutCont$s2[1];

        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, '');
        cue.adStartTime = mediaTime - adOffset;
        cue.adEndTime = cue.adStartTime + adTotal;
        track.addCue(cue);
      }
    }
    mediaTime += segment.duration;
  }
};

/**
 * @file sync-controller.js
 */

var tsprobe = tsInspector.inspect;

var syncPointStrategies = [
// Stategy "VOD": Handle the VOD-case where the sync-point is *always*
//                the equivalence display-time 0 === segment-index 0
{
  name: 'VOD',
  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
    if (duration$$1 !== Infinity) {
      var syncPoint = {
        time: 0,
        segmentIndex: 0
      };

      return syncPoint;
    }
    return null;
  }
},
// Stategy "ProgramDateTime": We have a program-date-time tag in this playlist
{
  name: 'ProgramDateTime',
  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
    if (!syncController.datetimeToDisplayTime) {
      return null;
    }

    var segments = playlist.segments || [];
    var syncPoint = null;
    var lastDistance = null;

    currentTime = currentTime || 0;

    for (var i = 0; i < segments.length; i++) {
      var segment = segments[i];

      if (segment.dateTimeObject) {
        var segmentTime = segment.dateTimeObject.getTime() / 1000;
        var segmentStart = segmentTime + syncController.datetimeToDisplayTime;
        var distance = Math.abs(currentTime - segmentStart);

        // Once the distance begins to increase, we have passed
        // currentTime and can stop looking for better candidates
        if (lastDistance !== null && lastDistance < distance) {
          break;
        }

        lastDistance = distance;
        syncPoint = {
          time: segmentStart,
          segmentIndex: i
        };
      }
    }
    return syncPoint;
  }
},
// Stategy "Segment": We have a known time mapping for a timeline and a
//                    segment in the current timeline with timing data
{
  name: 'Segment',
  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
    var segments = playlist.segments || [];
    var syncPoint = null;
    var lastDistance = null;

    currentTime = currentTime || 0;

    for (var i = 0; i < segments.length; i++) {
      var segment = segments[i];

      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {
        var distance = Math.abs(currentTime - segment.start);

        // Once the distance begins to increase, we have passed
        // currentTime and can stop looking for better candidates
        if (lastDistance !== null && lastDistance < distance) {
          break;
        }

        if (!syncPoint || lastDistance === null || lastDistance >= distance) {
          lastDistance = distance;
          syncPoint = {
            time: segment.start,
            segmentIndex: i
          };
        }
      }
    }
    return syncPoint;
  }
},
// Stategy "Discontinuity": We have a discontinuity with a known
//                          display-time
{
  name: 'Discontinuity',
  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
    var syncPoint = null;

    currentTime = currentTime || 0;

    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {
      var lastDistance = null;

      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {
        var segmentIndex = playlist.discontinuityStarts[i];
        var discontinuity = playlist.discontinuitySequence + i + 1;
        var discontinuitySync = syncController.discontinuities[discontinuity];

        if (discontinuitySync) {
          var distance = Math.abs(currentTime - discontinuitySync.time);

          // Once the distance begins to increase, we have passed
          // currentTime and can stop looking for better candidates
          if (lastDistance !== null && lastDistance < distance) {
            break;
          }

          if (!syncPoint || lastDistance === null || lastDistance >= distance) {
            lastDistance = distance;
            syncPoint = {
              time: discontinuitySync.time,
              segmentIndex: segmentIndex
            };
          }
        }
      }
    }
    return syncPoint;
  }
},
// Stategy "Playlist": We have a playlist with a known mapping of
//                     segment index to display time
{
  name: 'Playlist',
  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {
    if (playlist.syncInfo) {
      var syncPoint = {
        time: playlist.syncInfo.time,
        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence
      };

      return syncPoint;
    }
    return null;
  }
}];

var SyncController = function (_videojs$EventTarget) {
  inherits$1(SyncController, _videojs$EventTarget);

  function SyncController() {
    classCallCheck$1(this, SyncController);

    // Segment Loader state variables...
    // ...for synching across variants
    var _this = possibleConstructorReturn$1(this, (SyncController.__proto__ || Object.getPrototypeOf(SyncController)).call(this));

    _this.inspectCache_ = undefined;

    // ...for synching across variants
    _this.timelines = [];
    _this.discontinuities = [];
    _this.datetimeToDisplayTime = null;

    _this.logger_ = logger('SyncController');
    return _this;
  }

  /**
   * Find a sync-point for the playlist specified
   *
   * A sync-point is defined as a known mapping from display-time to
   * a segment-index in the current playlist.
   *
   * @param {Playlist} playlist
   *        The playlist that needs a sync-point
   * @param {Number} duration
   *        Duration of the MediaSource (Infinite if playing a live source)
   * @param {Number} currentTimeline
   *        The last timeline from which a segment was loaded
   * @returns {Object}
   *          A sync-point object
   */

  createClass$1(SyncController, [{
    key: 'getSyncPoint',
    value: function getSyncPoint(playlist, duration$$1, currentTimeline, currentTime) {
      var syncPoints = this.runStrategies_(playlist, duration$$1, currentTimeline, currentTime);

      if (!syncPoints.length) {
        // Signal that we need to attempt to get a sync-point manually
        // by fetching a segment in the playlist and constructing
        // a sync-point from that information
        return null;
      }

      // Now find the sync-point that is closest to the currentTime because
      // that should result in the most accurate guess about which segment
      // to fetch
      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });
    }

    /**
     * Calculate the amount of time that has expired off the playlist during playback
     *
     * @param {Playlist} playlist
     *        Playlist object to calculate expired from
     * @param {Number} duration
     *        Duration of the MediaSource (Infinity if playling a live source)
     * @returns {Number|null}
     *          The amount of time that has expired off the playlist during playback. Null
     *          if no sync-points for the playlist can be found.
     */

  }, {
    key: 'getExpiredTime',
    value: function getExpiredTime(playlist, duration$$1) {
      if (!playlist || !playlist.segments) {
        return null;
      }

      var syncPoints = this.runStrategies_(playlist, duration$$1, playlist.discontinuitySequence, 0);

      // Without sync-points, there is not enough information to determine the expired time
      if (!syncPoints.length) {
        return null;
      }

      var syncPoint = this.selectSyncPoint_(syncPoints, {
        key: 'segmentIndex',
        value: 0
      });

      // If the sync-point is beyond the start of the playlist, we want to subtract the
      // duration from index 0 to syncPoint.segmentIndex instead of adding.
      if (syncPoint.segmentIndex > 0) {
        syncPoint.time *= -1;
      }

      return Math.abs(syncPoint.time + sumDurations(playlist, syncPoint.segmentIndex, 0));
    }

    /**
     * Runs each sync-point strategy and returns a list of sync-points returned by the
     * strategies
     *
     * @private
     * @param {Playlist} playlist
     *        The playlist that needs a sync-point
     * @param {Number} duration
     *        Duration of the MediaSource (Infinity if playing a live source)
     * @param {Number} currentTimeline
     *        The last timeline from which a segment was loaded
     * @returns {Array}
     *          A list of sync-point objects
     */

  }, {
    key: 'runStrategies_',
    value: function runStrategies_(playlist, duration$$1, currentTimeline, currentTime) {
      var syncPoints = [];

      // Try to find a sync-point in by utilizing various strategies...
      for (var i = 0; i < syncPointStrategies.length; i++) {
        var strategy = syncPointStrategies[i];
        var syncPoint = strategy.run(this, playlist, duration$$1, currentTimeline, currentTime);

        if (syncPoint) {
          syncPoint.strategy = strategy.name;
          syncPoints.push({
            strategy: strategy.name,
            syncPoint: syncPoint
          });
        }
      }

      return syncPoints;
    }

    /**
     * Selects the sync-point nearest the specified target
     *
     * @private
     * @param {Array} syncPoints
     *        List of sync-points to select from
     * @param {Object} target
     *        Object specifying the property and value we are targeting
     * @param {String} target.key
     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'
     * @param {Number} target.value
     *        The value to target for the specified key.
     * @returns {Object}
     *          The sync-point nearest the target
     */

  }, {
    key: 'selectSyncPoint_',
    value: function selectSyncPoint_(syncPoints, target) {
      var bestSyncPoint = syncPoints[0].syncPoint;
      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);
      var bestStrategy = syncPoints[0].strategy;

      for (var i = 1; i < syncPoints.length; i++) {
        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);

        if (newDistance < bestDistance) {
          bestDistance = newDistance;
          bestSyncPoint = syncPoints[i].syncPoint;
          bestStrategy = syncPoints[i].strategy;
        }
      }

      this.logger_('syncPoint for [' + target.key + ': ' + target.value + '] chosen with strategy' + (' [' + bestStrategy + ']: [time:' + bestSyncPoint.time + ',') + (' segmentIndex:' + bestSyncPoint.segmentIndex + ']'));

      return bestSyncPoint;
    }

    /**
     * Save any meta-data present on the segments when segments leave
     * the live window to the playlist to allow for synchronization at the
     * playlist level later.
     *
     * @param {Playlist} oldPlaylist - The previous active playlist
     * @param {Playlist} newPlaylist - The updated and most current playlist
     */

  }, {
    key: 'saveExpiredSegmentInfo',
    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {
      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;

      // When a segment expires from the playlist and it has a start time
      // save that information as a possible sync-point reference in future
      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {
        var lastRemovedSegment = oldPlaylist.segments[i];

        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {
          newPlaylist.syncInfo = {
            mediaSequence: oldPlaylist.mediaSequence + i,
            time: lastRemovedSegment.start
          };
          this.logger_('playlist refresh sync: [time:' + newPlaylist.syncInfo.time + ',' + (' mediaSequence: ' + newPlaylist.syncInfo.mediaSequence + ']'));
          this.trigger('syncinfoupdate');
          break;
        }
      }
    }

    /**
     * Save the mapping from playlist's ProgramDateTime to display. This should
     * only ever happen once at the start of playback.
     *
     * @param {Playlist} playlist - The currently active playlist
     */

  }, {
    key: 'setDateTimeMapping',
    value: function setDateTimeMapping(playlist) {
      if (!this.datetimeToDisplayTime && playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {
        var playlistTimestamp = playlist.segments[0].dateTimeObject.getTime() / 1000;

        this.datetimeToDisplayTime = -playlistTimestamp;
      }
    }

    /**
     * Reset the state of the inspection cache when we do a rendition
     * switch
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.inspectCache_ = undefined;
    }

    /**
     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start
     * and end of the segment in it's internal "media time". Used to generate
     * mappings from that internal "media time" to the display time that is
     * shown on the player.
     *
     * @param {SegmentInfo} segmentInfo - The current active request information
     */

  }, {
    key: 'probeSegmentInfo',
    value: function probeSegmentInfo(segmentInfo) {
      var segment = segmentInfo.segment;
      var playlist = segmentInfo.playlist;
      var timingInfo = void 0;

      if (segment.map) {
        timingInfo = this.probeMp4Segment_(segmentInfo);
      } else {
        timingInfo = this.probeTsSegment_(segmentInfo);
      }

      if (timingInfo) {
        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {
          this.saveDiscontinuitySyncInfo_(segmentInfo);

          // If the playlist does not have sync information yet, record that information
          // now with segment timing information
          if (!playlist.syncInfo) {
            playlist.syncInfo = {
              mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,
              time: segment.start
            };
          }
        }
      }

      return timingInfo;
    }

    /**
     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment
     * in it's internal "media time".
     *
     * @private
     * @param {SegmentInfo} segmentInfo - The current active request information
     * @return {object} The start and end time of the current segment in "media time"
     */

  }, {
    key: 'probeMp4Segment_',
    value: function probeMp4Segment_(segmentInfo) {
      var segment = segmentInfo.segment;
      var timescales = mp4probe$1.timescale(segment.map.bytes);
      var startTime = mp4probe$1.startTime(timescales, segmentInfo.bytes);

      if (segmentInfo.timestampOffset !== null) {
        segmentInfo.timestampOffset -= startTime;
      }

      return {
        start: startTime,
        end: startTime + segment.duration
      };
    }

    /**
     * Probe an mpeg2-ts segment to determine the start and end of the segment
     * in it's internal "media time".
     *
     * @private
     * @param {SegmentInfo} segmentInfo - The current active request information
     * @return {object} The start and end time of the current segment in "media time"
     */

  }, {
    key: 'probeTsSegment_',
    value: function probeTsSegment_(segmentInfo) {
      var timeInfo = tsprobe(segmentInfo.bytes, this.inspectCache_);
      var segmentStartTime = void 0;
      var segmentEndTime = void 0;

      if (!timeInfo) {
        return null;
      }

      if (timeInfo.video && timeInfo.video.length === 2) {
        this.inspectCache_ = timeInfo.video[1].dts;
        segmentStartTime = timeInfo.video[0].dtsTime;
        segmentEndTime = timeInfo.video[1].dtsTime;
      } else if (timeInfo.audio && timeInfo.audio.length === 2) {
        this.inspectCache_ = timeInfo.audio[1].dts;
        segmentStartTime = timeInfo.audio[0].dtsTime;
        segmentEndTime = timeInfo.audio[1].dtsTime;
      }

      return {
        start: segmentStartTime,
        end: segmentEndTime,
        containsVideo: timeInfo.video && timeInfo.video.length === 2,
        containsAudio: timeInfo.audio && timeInfo.audio.length === 2
      };
    }
  }, {
    key: 'timestampOffsetForTimeline',
    value: function timestampOffsetForTimeline(timeline) {
      if (typeof this.timelines[timeline] === 'undefined') {
        return null;
      }
      return this.timelines[timeline].time;
    }
  }, {
    key: 'mappingForTimeline',
    value: function mappingForTimeline(timeline) {
      if (typeof this.timelines[timeline] === 'undefined') {
        return null;
      }
      return this.timelines[timeline].mapping;
    }

    /**
     * Use the "media time" for a segment to generate a mapping to "display time" and
     * save that display time to the segment.
     *
     * @private
     * @param {SegmentInfo} segmentInfo
     *        The current active request information
     * @param {object} timingInfo
     *        The start and end time of the current segment in "media time"
     * @returns {Boolean}
     *          Returns false if segment time mapping could not be calculated
     */

  }, {
    key: 'calculateSegmentTimeMapping_',
    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {
      var segment = segmentInfo.segment;
      var mappingObj = this.timelines[segmentInfo.timeline];

      if (segmentInfo.timestampOffset !== null) {
        mappingObj = {
          time: segmentInfo.startOfSegment,
          mapping: segmentInfo.startOfSegment - timingInfo.start
        };
        this.timelines[segmentInfo.timeline] = mappingObj;
        this.trigger('timestampoffset');

        this.logger_('time mapping for timeline ' + segmentInfo.timeline + ': ' + ('[time: ' + mappingObj.time + '] [mapping: ' + mappingObj.mapping + ']'));

        segment.start = segmentInfo.startOfSegment;
        segment.end = timingInfo.end + mappingObj.mapping;
      } else if (mappingObj) {
        segment.start = timingInfo.start + mappingObj.mapping;
        segment.end = timingInfo.end + mappingObj.mapping;
      } else {
        return false;
      }

      return true;
    }

    /**
     * Each time we have discontinuity in the playlist, attempt to calculate the location
     * in display of the start of the discontinuity and save that. We also save an accuracy
     * value so that we save values with the most accuracy (closest to 0.)
     *
     * @private
     * @param {SegmentInfo} segmentInfo - The current active request information
     */

  }, {
    key: 'saveDiscontinuitySyncInfo_',
    value: function saveDiscontinuitySyncInfo_(segmentInfo) {
      var playlist = segmentInfo.playlist;
      var segment = segmentInfo.segment;

      // If the current segment is a discontinuity then we know exactly where
      // the start of the range and it's accuracy is 0 (greater accuracy values
      // mean more approximation)
      if (segment.discontinuity) {
        this.discontinuities[segment.timeline] = {
          time: segment.start,
          accuracy: 0
        };
      } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {
        // Search for future discontinuities that we can provide better timing
        // information for and save that information for sync purposes
        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {
          var segmentIndex = playlist.discontinuityStarts[i];
          var discontinuity = playlist.discontinuitySequence + i + 1;
          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;
          var accuracy = Math.abs(mediaIndexDiff);

          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {
            var time = void 0;

            if (mediaIndexDiff < 0) {
              time = segment.start - sumDurations(playlist, segmentInfo.mediaIndex, segmentIndex);
            } else {
              time = segment.end + sumDurations(playlist, segmentInfo.mediaIndex + 1, segmentIndex);
            }

            this.discontinuities[discontinuity] = {
              time: time,
              accuracy: accuracy
            };
          }
        }
      }
    }
  }]);
  return SyncController;
}(videojs$1.EventTarget);

var Decrypter$1 = new shimWorker("./decrypter-worker.worker.js", function (window, document$$1) {
  var self = this;
  var decrypterWorker = function () {

    /*
     * pkcs7.pad
     * https://github.com/brightcove/pkcs7
     *
     * Copyright (c) 2014 Brightcove
     * Licensed under the apache2 license.
     */

    /**
     * Returns the subarray of a Uint8Array without PKCS#7 padding.
     * @param padded {Uint8Array} unencrypted bytes that have been padded
     * @return {Uint8Array} the unpadded bytes
     * @see http://tools.ietf.org/html/rfc5652
     */

    function unpad(padded) {
      return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);
    }

    var classCallCheck$$1 = function classCallCheck$$1(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass$$1 = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var inherits$$1 = function inherits$$1(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };

    var possibleConstructorReturn$$1 = function possibleConstructorReturn$$1(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
    };

    /**
     * @file aes.js
     *
     * This file contains an adaptation of the AES decryption algorithm
     * from the Standford Javascript Cryptography Library. That work is
     * covered by the following copyright and permissions notice:
     *
     * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * 1. Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above
     *    copyright notice, this list of conditions and the following
     *    disclaimer in the documentation and/or other materials provided
     *    with the distribution.
     *
     * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
     * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
     * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
     * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
     * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     * The views and conclusions contained in the software and documentation
     * are those of the authors and should not be interpreted as representing
     * official policies, either expressed or implied, of the authors.
     */

    /**
     * Expand the S-box tables.
     *
     * @private
     */
    var precompute = function precompute() {
      var tables = [[[], [], [], [], []], [[], [], [], [], []]];
      var encTable = tables[0];
      var decTable = tables[1];
      var sbox = encTable[4];
      var sboxInv = decTable[4];
      var i = void 0;
      var x = void 0;
      var xInv = void 0;
      var d = [];
      var th = [];
      var x2 = void 0;
      var x4 = void 0;
      var x8 = void 0;
      var s = void 0;
      var tEnc = void 0;
      var tDec = void 0;

      // Compute double and third tables
      for (i = 0; i < 256; i++) {
        th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
      }

      for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {
        // Compute sbox
        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
        s = s >> 8 ^ s & 255 ^ 99;
        sbox[x] = s;
        sboxInv[s] = x;

        // Compute MixColumns
        x8 = d[x4 = d[x2 = d[x]]];
        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        tEnc = d[s] * 0x101 ^ s * 0x1010100;

        for (i = 0; i < 4; i++) {
          encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
          decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
        }
      }

      // Compactify. Considerable speedup on Firefox.
      for (i = 0; i < 5; i++) {
        encTable[i] = encTable[i].slice(0);
        decTable[i] = decTable[i].slice(0);
      }
      return tables;
    };
    var aesTables = null;

    /**
     * Schedule out an AES key for both encryption and decryption. This
     * is a low-level class. Use a cipher mode to do bulk encryption.
     *
     * @class AES
     * @param key {Array} The key as an array of 4, 6 or 8 words.
     */

    var AES = function () {
      function AES(key) {
        classCallCheck$$1(this, AES);

        /**
         * The expanded S-box and inverse S-box tables. These will be computed
         * on the client so that we don't have to send them down the wire.
         *
         * There are two tables, _tables[0] is for encryption and
         * _tables[1] is for decryption.
         *
         * The first 4 sub-tables are the expanded S-box with MixColumns. The
         * last (_tables[01][4]) is the S-box itself.
         *
         * @private
         */
        // if we have yet to precompute the S-box tables
        // do so now
        if (!aesTables) {
          aesTables = precompute();
        }
        // then make a copy of that object for use
        this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];
        var i = void 0;
        var j = void 0;
        var tmp = void 0;
        var encKey = void 0;
        var decKey = void 0;
        var sbox = this._tables[0][4];
        var decTable = this._tables[1];
        var keyLen = key.length;
        var rcon = 1;

        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {
          throw new Error('Invalid aes key size');
        }

        encKey = key.slice(0);
        decKey = [];
        this._key = [encKey, decKey];

        // schedule encryption keys
        for (i = keyLen; i < 4 * keyLen + 28; i++) {
          tmp = encKey[i - 1];

          // apply sbox
          if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {
            tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];

            // shift rows and add rcon
            if (i % keyLen === 0) {
              tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;
              rcon = rcon << 1 ^ (rcon >> 7) * 283;
            }
          }

          encKey[i] = encKey[i - keyLen] ^ tmp;
        }

        // schedule decryption keys
        for (j = 0; i; j++, i--) {
          tmp = encKey[j & 3 ? i : i - 4];
          if (i <= 4 || j < 4) {
            decKey[j] = tmp;
          } else {
            decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];
          }
        }
      }

      /**
       * Decrypt 16 bytes, specified as four 32-bit words.
       *
       * @param {Number} encrypted0 the first word to decrypt
       * @param {Number} encrypted1 the second word to decrypt
       * @param {Number} encrypted2 the third word to decrypt
       * @param {Number} encrypted3 the fourth word to decrypt
       * @param {Int32Array} out the array to write the decrypted words
       * into
       * @param {Number} offset the offset into the output array to start
       * writing results
       * @return {Array} The plaintext.
       */

      AES.prototype.decrypt = function decrypt$$1(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {
        var key = this._key[1];
        // state variables a,b,c,d are loaded with pre-whitened data
        var a = encrypted0 ^ key[0];
        var b = encrypted3 ^ key[1];
        var c = encrypted2 ^ key[2];
        var d = encrypted1 ^ key[3];
        var a2 = void 0;
        var b2 = void 0;
        var c2 = void 0;

        // key.length === 2 ?
        var nInnerRounds = key.length / 4 - 2;
        var i = void 0;
        var kIndex = 4;
        var table = this._tables[1];

        // load up the tables
        var table0 = table[0];
        var table1 = table[1];
        var table2 = table[2];
        var table3 = table[3];
        var sbox = table[4];

        // Inner rounds. Cribbed from OpenSSL.
        for (i = 0; i < nInnerRounds; i++) {
          a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];
          b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];
          c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];
          d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];
          kIndex += 4;
          a = a2;b = b2;c = c2;
        }

        // Last round.
        for (i = 0; i < 4; i++) {
          out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];
          a2 = a;a = b;b = c;c = d;d = a2;
        }
      };

      return AES;
    }();

    /**
     * @file stream.js
     */
    /**
     * A lightweight readable stream implemention that handles event dispatching.
     *
     * @class Stream
     */
    var Stream = function () {
      function Stream() {
        classCallCheck$$1(this, Stream);

        this.listeners = {};
      }

      /**
       * Add a listener for a specified event type.
       *
       * @param {String} type the event name
       * @param {Function} listener the callback to be invoked when an event of
       * the specified type occurs
       */

      Stream.prototype.on = function on(type, listener) {
        if (!this.listeners[type]) {
          this.listeners[type] = [];
        }
        this.listeners[type].push(listener);
      };

      /**
       * Remove a listener for a specified event type.
       *
       * @param {String} type the event name
       * @param {Function} listener  a function previously registered for this
       * type of event through `on`
       * @return {Boolean} if we could turn it off or not
       */

      Stream.prototype.off = function off(type, listener) {
        if (!this.listeners[type]) {
          return false;
        }

        var index = this.listeners[type].indexOf(listener);

        this.listeners[type].splice(index, 1);
        return index > -1;
      };

      /**
       * Trigger an event of the specified type on this stream. Any additional
       * arguments to this function are passed as parameters to event listeners.
       *
       * @param {String} type the event name
       */

      Stream.prototype.trigger = function trigger(type) {
        var callbacks = this.listeners[type];

        if (!callbacks) {
          return;
        }

        // Slicing the arguments on every invocation of this method
        // can add a significant amount of overhead. Avoid the
        // intermediate object creation for the common case of a
        // single callback argument
        if (arguments.length === 2) {
          var length = callbacks.length;

          for (var i = 0; i < length; ++i) {
            callbacks[i].call(this, arguments[1]);
          }
        } else {
          var args = Array.prototype.slice.call(arguments, 1);
          var _length = callbacks.length;

          for (var _i = 0; _i < _length; ++_i) {
            callbacks[_i].apply(this, args);
          }
        }
      };

      /**
       * Destroys the stream and cleans up.
       */

      Stream.prototype.dispose = function dispose() {
        this.listeners = {};
      };
      /**
       * Forwards all `data` events on this stream to the destination stream. The
       * destination stream should provide a method `push` to receive the data
       * events as they arrive.
       *
       * @param {Stream} destination the stream that will receive all `data` events
       * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
       */

      Stream.prototype.pipe = function pipe(destination) {
        this.on('data', function (data) {
          destination.push(data);
        });
      };

      return Stream;
    }();

    /**
     * @file async-stream.js
     */
    /**
     * A wrapper around the Stream class to use setTiemout
     * and run stream "jobs" Asynchronously
     *
     * @class AsyncStream
     * @extends Stream
     */

    var AsyncStream$$1 = function (_Stream) {
      inherits$$1(AsyncStream$$1, _Stream);

      function AsyncStream$$1() {
        classCallCheck$$1(this, AsyncStream$$1);

        var _this = possibleConstructorReturn$$1(this, _Stream.call(this, Stream));

        _this.jobs = [];
        _this.delay = 1;
        _this.timeout_ = null;
        return _this;
      }

      /**
       * process an async job
       *
       * @private
       */

      AsyncStream$$1.prototype.processJob_ = function processJob_() {
        this.jobs.shift()();
        if (this.jobs.length) {
          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
        } else {
          this.timeout_ = null;
        }
      };

      /**
       * push a job into the stream
       *
       * @param {Function} job the job to push into the stream
       */

      AsyncStream$$1.prototype.push = function push(job) {
        this.jobs.push(job);
        if (!this.timeout_) {
          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
        }
      };

      return AsyncStream$$1;
    }(Stream);

    /**
     * @file decrypter.js
     *
     * An asynchronous implementation of AES-128 CBC decryption with
     * PKCS#7 padding.
     */

    /**
     * Convert network-order (big-endian) bytes into their little-endian
     * representation.
     */
    var ntoh = function ntoh(word) {
      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;
    };

    /**
     * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.
     *
     * @param {Uint8Array} encrypted the encrypted bytes
     * @param {Uint32Array} key the bytes of the decryption key
     * @param {Uint32Array} initVector the initialization vector (IV) to
     * use for the first round of CBC.
     * @return {Uint8Array} the decrypted bytes
     *
     * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
     * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29
     * @see https://tools.ietf.org/html/rfc2315
     */
    var decrypt$$1 = function decrypt$$1(encrypted, key, initVector) {
      // word-level access to the encrypted bytes
      var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);

      var decipher = new AES(Array.prototype.slice.call(key));

      // byte and word-level access for the decrypted output
      var decrypted = new Uint8Array(encrypted.byteLength);
      var decrypted32 = new Int32Array(decrypted.buffer);

      // temporary variables for working with the IV, encrypted, and
      // decrypted data
      var init0 = void 0;
      var init1 = void 0;
      var init2 = void 0;
      var init3 = void 0;
      var encrypted0 = void 0;
      var encrypted1 = void 0;
      var encrypted2 = void 0;
      var encrypted3 = void 0;

      // iteration variable
      var wordIx = void 0;

      // pull out the words of the IV to ensure we don't modify the
      // passed-in reference and easier access
      init0 = initVector[0];
      init1 = initVector[1];
      init2 = initVector[2];
      init3 = initVector[3];

      // decrypt four word sequences, applying cipher-block chaining (CBC)
      // to each decrypted block
      for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {
        // convert big-endian (network order) words into little-endian
        // (javascript order)
        encrypted0 = ntoh(encrypted32[wordIx]);
        encrypted1 = ntoh(encrypted32[wordIx + 1]);
        encrypted2 = ntoh(encrypted32[wordIx + 2]);
        encrypted3 = ntoh(encrypted32[wordIx + 3]);

        // decrypt the block
        decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);

        // XOR with the IV, and restore network byte-order to obtain the
        // plaintext
        decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);
        decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);
        decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);
        decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);

        // setup the IV for the next round
        init0 = encrypted0;
        init1 = encrypted1;
        init2 = encrypted2;
        init3 = encrypted3;
      }

      return decrypted;
    };

    /**
     * The `Decrypter` class that manages decryption of AES
     * data through `AsyncStream` objects and the `decrypt`
     * function
     *
     * @param {Uint8Array} encrypted the encrypted bytes
     * @param {Uint32Array} key the bytes of the decryption key
     * @param {Uint32Array} initVector the initialization vector (IV) to
     * @param {Function} done the function to run when done
     * @class Decrypter
     */

    var Decrypter$$1 = function () {
      function Decrypter$$1(encrypted, key, initVector, done) {
        classCallCheck$$1(this, Decrypter$$1);

        var step = Decrypter$$1.STEP;
        var encrypted32 = new Int32Array(encrypted.buffer);
        var decrypted = new Uint8Array(encrypted.byteLength);
        var i = 0;

        this.asyncStream_ = new AsyncStream$$1();

        // split up the encryption job and do the individual chunks asynchronously
        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
        for (i = step; i < encrypted32.length; i += step) {
          initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);
          this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
        }
        // invoke the done() callback when everything is finished
        this.asyncStream_.push(function () {
          // remove pkcs#7 padding from the decrypted bytes
          done(null, unpad(decrypted));
        });
      }

      /**
       * a getter for step the maximum number of bytes to process at one time
       *
       * @return {Number} the value of step 32000
       */

      /**
       * @private
       */
      Decrypter$$1.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {
        return function () {
          var bytes = decrypt$$1(encrypted, key, initVector);

          decrypted.set(bytes, encrypted.byteOffset);
        };
      };

      createClass$$1(Decrypter$$1, null, [{
        key: 'STEP',
        get: function get$$1() {
          // 4 * 8000;
          return 32000;
        }
      }]);
      return Decrypter$$1;
    }();

    /**
     * @file bin-utils.js
     */

    /**
     * Creates an object for sending to a web worker modifying properties that are TypedArrays
     * into a new object with seperated properties for the buffer, byteOffset, and byteLength.
     *
     * @param {Object} message
     *        Object of properties and values to send to the web worker
     * @return {Object}
     *         Modified message with TypedArray values expanded
     * @function createTransferableMessage
     */
    var createTransferableMessage = function createTransferableMessage(message) {
      var transferable = {};

      Object.keys(message).forEach(function (key) {
        var value = message[key];

        if (ArrayBuffer.isView(value)) {
          transferable[key] = {
            bytes: value.buffer,
            byteOffset: value.byteOffset,
            byteLength: value.byteLength
          };
        } else {
          transferable[key] = value;
        }
      });

      return transferable;
    };

    /**
     * Our web worker interface so that things can talk to aes-decrypter
     * that will be running in a web worker. the scope is passed to this by
     * webworkify.
     *
     * @param {Object} self
     *        the scope for the web worker
     */
    var DecrypterWorker = function DecrypterWorker(self) {
      self.onmessage = function (event) {
        var data = event.data;
        var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);
        var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);
        var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);

        /* eslint-disable no-new, handle-callback-err */
        new Decrypter$$1(encrypted, key, iv, function (err, bytes) {
          self.postMessage(createTransferableMessage({
            source: data.source,
            decrypted: bytes
          }), [bytes.buffer]);
        });
        /* eslint-enable */
      };
    };

    var decrypterWorker = new DecrypterWorker(self);

    return decrypterWorker;
  }();
});

/**
 * Convert the properties of an HLS track into an audioTrackKind.
 *
 * @private
 */
var audioTrackKind_ = function audioTrackKind_(properties) {
  var kind = properties.default ? 'main' : 'alternative';

  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {
    kind = 'main-desc';
  }

  return kind;
};

/**
 * Pause provided segment loader and playlist loader if active
 *
 * @param {SegmentLoader} segmentLoader
 *        SegmentLoader to pause
 * @param {Object} mediaType
 *        Active media type
 * @function stopLoaders
 */
var stopLoaders = function stopLoaders(segmentLoader, mediaType) {
  segmentLoader.abort();
  segmentLoader.pause();

  if (mediaType && mediaType.activePlaylistLoader) {
    mediaType.activePlaylistLoader.pause();
    mediaType.activePlaylistLoader = null;
  }
};

/**
 * Start loading provided segment loader and playlist loader
 *
 * @param {PlaylistLoader} playlistLoader
 *        PlaylistLoader to start loading
 * @param {Object} mediaType
 *        Active media type
 * @function startLoaders
 */
var startLoaders = function startLoaders(playlistLoader, mediaType) {
  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the
  // playlist loader
  mediaType.activePlaylistLoader = playlistLoader;
  playlistLoader.load();
};

/**
 * Returns a function to be called when the media group changes. It performs a
 * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a
 * change of group is merely a rendition switch of the same content at another encoding,
 * rather than a change of content, such as switching audio from English to Spanish.
 *
 * @param {String} type
 *        MediaGroup type
 * @param {Object} settings
 *        Object containing required information for media groups
 * @return {Function}
 *         Handler for a non-destructive resync of SegmentLoader when the active media
 *         group changes.
 * @function onGroupChanged
 */
var onGroupChanged = function onGroupChanged(type, settings) {
  return function () {
    var _settings$segmentLoad = settings.segmentLoaders,
        segmentLoader = _settings$segmentLoad[type],
        mainSegmentLoader = _settings$segmentLoad.main,
        mediaType = settings.mediaTypes[type];

    var activeTrack = mediaType.activeTrack();
    var activeGroup = mediaType.activeGroup(activeTrack);
    var previousActiveLoader = mediaType.activePlaylistLoader;

    stopLoaders(segmentLoader, mediaType);

    if (!activeGroup) {
      // there is no group active
      return;
    }

    if (!activeGroup.playlistLoader) {
      if (previousActiveLoader) {
        // The previous group had a playlist loader but the new active group does not
        // this means we are switching from demuxed to muxed audio. In this case we want to
        // do a destructive reset of the main segment loader and not restart the audio
        // loaders.
        mainSegmentLoader.resetEverything();
      }
      return;
    }

    // Non-destructive resync
    segmentLoader.resyncLoader();

    startLoaders(activeGroup.playlistLoader, mediaType);
  };
};

/**
 * Returns a function to be called when the media track changes. It performs a
 * destructive reset of the SegmentLoader to ensure we start loading as close to
 * currentTime as possible.
 *
 * @param {String} type
 *        MediaGroup type
 * @param {Object} settings
 *        Object containing required information for media groups
 * @return {Function}
 *         Handler for a destructive reset of SegmentLoader when the active media
 *         track changes.
 * @function onTrackChanged
 */
var onTrackChanged = function onTrackChanged(type, settings) {
  return function () {
    var _settings$segmentLoad2 = settings.segmentLoaders,
        segmentLoader = _settings$segmentLoad2[type],
        mainSegmentLoader = _settings$segmentLoad2.main,
        mediaType = settings.mediaTypes[type];

    var activeTrack = mediaType.activeTrack();
    var activeGroup = mediaType.activeGroup(activeTrack);
    var previousActiveLoader = mediaType.activePlaylistLoader;

    stopLoaders(segmentLoader, mediaType);

    if (!activeGroup) {
      // there is no group active so we do not want to restart loaders
      return;
    }

    if (!activeGroup.playlistLoader) {
      // when switching from demuxed audio/video to muxed audio/video (noted by no playlist
      // loader for the audio group), we want to do a destructive reset of the main segment
      // loader and not restart the audio loaders
      mainSegmentLoader.resetEverything();
      return;
    }

    if (previousActiveLoader === activeGroup.playlistLoader) {
      // Nothing has actually changed. This can happen because track change events can fire
      // multiple times for a "single" change. One for enabling the new active track, and
      // one for disabling the track that was active
      startLoaders(activeGroup.playlistLoader, mediaType);
      return;
    }

    if (segmentLoader.track) {
      // For WebVTT, set the new text track in the segmentloader
      segmentLoader.track(activeTrack);
    }

    // destructive reset
    segmentLoader.resetEverything();

    startLoaders(activeGroup.playlistLoader, mediaType);
  };
};

var onError = {
  /**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning (or error if the playlist is blacklisted) to
   *         console and switches back to default audio track.
   * @function onError.AUDIO
   */
  AUDIO: function AUDIO(type, settings) {
    return function () {
      var segmentLoader = settings.segmentLoaders[type],
          mediaType = settings.mediaTypes[type],
          blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;

      stopLoaders(segmentLoader, mediaType);

      // switch back to default audio track
      var activeTrack = mediaType.activeTrack();
      var activeGroup = mediaType.activeGroup();
      var id = (activeGroup.filter(function (group) {
        return group.default;
      })[0] || activeGroup[0]).id;
      var defaultTrack = mediaType.tracks[id];

      if (activeTrack === defaultTrack) {
        // Default track encountered an error. All we can do now is blacklist the current
        // rendition and hope another will switch audio groups
        blacklistCurrentPlaylist({
          message: 'Problem encountered loading the default audio track.'
        });
        return;
      }

      videojs$1.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');

      for (var trackId in mediaType.tracks) {
        mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;
      }

      mediaType.onTrackChanged();
    };
  },
  /**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning to console and disables the active subtitle track
   * @function onError.SUBTITLES
   */
  SUBTITLES: function SUBTITLES(type, settings) {
    return function () {
      var segmentLoader = settings.segmentLoaders[type],
          mediaType = settings.mediaTypes[type];

      videojs$1.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');

      stopLoaders(segmentLoader, mediaType);

      var track = mediaType.activeTrack();

      if (track) {
        track.mode = 'disabled';
      }

      mediaType.onTrackChanged();
    };
  }
};

var setupListeners = {
  /**
   * Setup event listeners for audio playlist loader
   *
   * @param {String} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.AUDIO
   */
  AUDIO: function AUDIO(type, playlistLoader, settings) {
    if (!playlistLoader) {
      // no playlist loader means audio will be muxed with the video
      return;
    }

    var tech = settings.tech,
        requestOptions = settings.requestOptions,
        segmentLoader = settings.segmentLoaders[type];

    playlistLoader.on('loadedmetadata', function () {
      var media = playlistLoader.media();

      segmentLoader.playlist(media, requestOptions);

      // if the video is already playing, or if this isn't a live video and preload
      // permits, start downloading segments
      if (!tech.paused() || media.endList && tech.preload() !== 'none') {
        segmentLoader.load();
      }
    });

    playlistLoader.on('loadedplaylist', function () {
      segmentLoader.playlist(playlistLoader.media(), requestOptions);

      // If the player isn't paused, ensure that the segment loader is running
      if (!tech.paused()) {
        segmentLoader.load();
      }
    });

    playlistLoader.on('error', onError[type](type, settings));
  },
  /**
   * Setup event listeners for subtitle playlist loader
   *
   * @param {String} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.SUBTITLES
   */
  SUBTITLES: function SUBTITLES(type, playlistLoader, settings) {
    var tech = settings.tech,
        requestOptions = settings.requestOptions,
        segmentLoader = settings.segmentLoaders[type],
        mediaType = settings.mediaTypes[type];

    playlistLoader.on('loadedmetadata', function () {
      var media = playlistLoader.media();

      segmentLoader.playlist(media, requestOptions);
      segmentLoader.track(mediaType.activeTrack());

      // if the video is already playing, or if this isn't a live video and preload
      // permits, start downloading segments
      if (!tech.paused() || media.endList && tech.preload() !== 'none') {
        segmentLoader.load();
      }
    });

    playlistLoader.on('loadedplaylist', function () {
      segmentLoader.playlist(playlistLoader.media(), requestOptions);

      // If the player isn't paused, ensure that the segment loader is running
      if (!tech.paused()) {
        segmentLoader.load();
      }
    });

    playlistLoader.on('error', onError[type](type, settings));
  }
};

var byGroupId = function byGroupId(type, groupId) {
  return function (playlist) {
    return playlist.attributes[type] === groupId;
  };
};

var byResolvedUri = function byResolvedUri(resolvedUri) {
  return function (playlist) {
    return playlist.resolvedUri === resolvedUri;
  };
};

var initialize = {
  /**
   * Setup PlaylistLoaders and AudioTracks for the audio groups
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.AUDIO
   */
  'AUDIO': function AUDIO(type, settings) {
    var hls = settings.hls,
        sourceType = settings.sourceType,
        segmentLoader = settings.segmentLoaders[type],
        withCredentials = settings.requestOptions.withCredentials,
        _settings$master = settings.master,
        mediaGroups = _settings$master.mediaGroups,
        playlists = _settings$master.playlists,
        _settings$mediaTypes$ = settings.mediaTypes[type],
        groups = _settings$mediaTypes$.groups,
        tracks = _settings$mediaTypes$.tracks,
        masterPlaylistLoader = settings.masterPlaylistLoader;

    // force a default if we have none

    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {
      mediaGroups[type] = { main: { default: { default: true } } };
    }

    for (var groupId in mediaGroups[type]) {
      if (!groups[groupId]) {
        groups[groupId] = [];
      }

      // List of playlists that have an AUDIO attribute value matching the current
      // group ID
      var groupPlaylists = playlists.filter(byGroupId(type, groupId));

      for (var variantLabel in mediaGroups[type][groupId]) {
        var properties = mediaGroups[type][groupId][variantLabel];

        // List of playlists for the current group ID that have a matching uri with
        // this alternate audio variant
        var matchingPlaylists = groupPlaylists.filter(byResolvedUri(properties.resolvedUri));

        if (matchingPlaylists.length) {
          // If there is a playlist that has the same uri as this audio variant, assume
          // that the playlist is audio only. We delete the resolvedUri property here
          // to prevent a playlist loader from being created so that we don't have
          // both the main and audio segment loaders loading the same audio segments
          // from the same playlist.
          delete properties.resolvedUri;
        }

        var playlistLoader = void 0;

        if (properties.resolvedUri) {
          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);
        } else if (properties.playlists && sourceType === 'dash') {
          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);
        } else {
          // no resolvedUri means the audio is muxed with the video when using this
          // audio track
          playlistLoader = null;
        }

        properties = videojs$1.mergeOptions({ id: variantLabel, playlistLoader: playlistLoader }, properties);

        setupListeners[type](type, properties.playlistLoader, settings);

        groups[groupId].push(properties);

        if (typeof tracks[variantLabel] === 'undefined') {
          var track = new videojs$1.AudioTrack({
            id: variantLabel,
            kind: audioTrackKind_(properties),
            enabled: false,
            language: properties.language,
            default: properties.default,
            label: variantLabel
          });

          tracks[variantLabel] = track;
        }
      }
    }

    // setup single error event handler for the segment loader
    segmentLoader.on('error', onError[type](type, settings));
  },
  /**
   * Setup PlaylistLoaders and TextTracks for the subtitle groups
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.SUBTITLES
   */
  'SUBTITLES': function SUBTITLES(type, settings) {
    var tech = settings.tech,
        hls = settings.hls,
        sourceType = settings.sourceType,
        segmentLoader = settings.segmentLoaders[type],
        withCredentials = settings.requestOptions.withCredentials,
        mediaGroups = settings.master.mediaGroups,
        _settings$mediaTypes$2 = settings.mediaTypes[type],
        groups = _settings$mediaTypes$2.groups,
        tracks = _settings$mediaTypes$2.tracks,
        masterPlaylistLoader = settings.masterPlaylistLoader;

    for (var groupId in mediaGroups[type]) {
      if (!groups[groupId]) {
        groups[groupId] = [];
      }

      for (var variantLabel in mediaGroups[type][groupId]) {
        if (mediaGroups[type][groupId][variantLabel].forced) {
          // Subtitle playlists with the forced attribute are not selectable in Safari.
          // According to Apple's HLS Authoring Specification:
          //   If content has forced subtitles and regular subtitles in a given language,
          //   the regular subtitles track in that language MUST contain both the forced
          //   subtitles and the regular subtitles for that language.
          // Because of this requirement and that Safari does not add forced subtitles,
          // forced subtitles are skipped here to maintain consistent experience across
          // all platforms
          continue;
        }

        var properties = mediaGroups[type][groupId][variantLabel];

        var playlistLoader = void 0;

        if (sourceType === 'hls') {
          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);
        } else if (sourceType === 'dash') {
          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);
        }

        properties = videojs$1.mergeOptions({
          id: variantLabel,
          playlistLoader: playlistLoader
        }, properties);

        setupListeners[type](type, properties.playlistLoader, settings);

        groups[groupId].push(properties);

        if (typeof tracks[variantLabel] === 'undefined') {
          var track = tech.addRemoteTextTrack({
            id: variantLabel,
            kind: 'subtitles',
            enabled: false,
            language: properties.language,
            label: variantLabel
          }, false).track;

          tracks[variantLabel] = track;
        }
      }
    }

    // setup single error event handler for the segment loader
    segmentLoader.on('error', onError[type](type, settings));
  },
  /**
   * Setup TextTracks for the closed-caption groups
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize['CLOSED-CAPTIONS']
   */
  'CLOSED-CAPTIONS': function CLOSEDCAPTIONS(type, settings) {
    var tech = settings.tech,
        mediaGroups = settings.master.mediaGroups,
        _settings$mediaTypes$3 = settings.mediaTypes[type],
        groups = _settings$mediaTypes$3.groups,
        tracks = _settings$mediaTypes$3.tracks;

    for (var groupId in mediaGroups[type]) {
      if (!groups[groupId]) {
        groups[groupId] = [];
      }

      for (var variantLabel in mediaGroups[type][groupId]) {
        var properties = mediaGroups[type][groupId][variantLabel];

        // We only support CEA608 captions for now, so ignore anything that
        // doesn't use a CCx INSTREAM-ID
        if (!properties.instreamId.match(/CC\d/)) {
          continue;
        }

        // No PlaylistLoader is required for Closed-Captions because the captions are
        // embedded within the video stream
        groups[groupId].push(videojs$1.mergeOptions({ id: variantLabel }, properties));

        if (typeof tracks[variantLabel] === 'undefined') {
          var track = tech.addRemoteTextTrack({
            id: properties.instreamId,
            kind: 'captions',
            enabled: false,
            language: properties.language,
            label: variantLabel
          }, false).track;

          tracks[variantLabel] = track;
        }
      }
    }
  }
};

/**
 * Returns a function used to get the active group of the provided type
 *
 * @param {String} type
 *        MediaGroup type
 * @param {Object} settings
 *        Object containing required information for media groups
 * @return {Function}
 *         Function that returns the active media group for the provided type. Takes an
 *         optional parameter {TextTrack} track. If no track is provided, a list of all
 *         variants in the group, otherwise the variant corresponding to the provided
 *         track is returned.
 * @function activeGroup
 */
var activeGroup = function activeGroup(type, settings) {
  return function (track) {
    var masterPlaylistLoader = settings.masterPlaylistLoader,
        groups = settings.mediaTypes[type].groups;

    var media = masterPlaylistLoader.media();

    if (!media) {
      return null;
    }

    var variants = null;

    if (media.attributes[type]) {
      variants = groups[media.attributes[type]];
    }

    variants = variants || groups.main;

    if (typeof track === 'undefined') {
      return variants;
    }

    if (track === null) {
      // An active track was specified so a corresponding group is expected. track === null
      // means no track is currently active so there is no corresponding group
      return null;
    }

    return variants.filter(function (props) {
      return props.id === track.id;
    })[0] || null;
  };
};

var activeTrack = {
  /**
   * Returns a function used to get the active track of type provided
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.AUDIO
   */
  AUDIO: function AUDIO(type, settings) {
    return function () {
      var tracks = settings.mediaTypes[type].tracks;

      for (var id in tracks) {
        if (tracks[id].enabled) {
          return tracks[id];
        }
      }

      return null;
    };
  },
  /**
   * Returns a function used to get the active track of type provided
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.SUBTITLES
   */
  SUBTITLES: function SUBTITLES(type, settings) {
    return function () {
      var tracks = settings.mediaTypes[type].tracks;

      for (var id in tracks) {
        if (tracks[id].mode === 'showing') {
          return tracks[id];
        }
      }

      return null;
    };
  }
};

/**
 * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,
 * Closed-Captions) specified in the master manifest.
 *
 * @param {Object} settings
 *        Object containing required information for setting up the media groups
 * @param {SegmentLoader} settings.segmentLoaders.AUDIO
 *        Audio segment loader
 * @param {SegmentLoader} settings.segmentLoaders.SUBTITLES
 *        Subtitle segment loader
 * @param {SegmentLoader} settings.segmentLoaders.main
 *        Main segment loader
 * @param {Tech} settings.tech
 *        The tech of the player
 * @param {Object} settings.requestOptions
 *        XHR request options used by the segment loaders
 * @param {PlaylistLoader} settings.masterPlaylistLoader
 *        PlaylistLoader for the master source
 * @param {HlsHandler} settings.hls
 *        HLS SourceHandler
 * @param {Object} settings.master
 *        The parsed master manifest
 * @param {Object} settings.mediaTypes
 *        Object to store the loaders, tracks, and utility methods for each media type
 * @param {Function} settings.blacklistCurrentPlaylist
 *        Blacklists the current rendition and forces a rendition switch.
 * @function setupMediaGroups
 */
var setupMediaGroups = function setupMediaGroups(settings) {
  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {
    initialize[type](type, settings);
  });

  var mediaTypes = settings.mediaTypes,
      masterPlaylistLoader = settings.masterPlaylistLoader,
      tech = settings.tech,
      hls = settings.hls;

  // setup active group and track getters and change event handlers

  ['AUDIO', 'SUBTITLES'].forEach(function (type) {
    mediaTypes[type].activeGroup = activeGroup(type, settings);
    mediaTypes[type].activeTrack = activeTrack[type](type, settings);
    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);
    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);
  });

  // DO NOT enable the default subtitle or caption track.
  // DO enable the default audio track
  var audioGroup = mediaTypes.AUDIO.activeGroup();
  var groupId = (audioGroup.filter(function (group) {
    return group.default;
  })[0] || audioGroup[0]).id;

  mediaTypes.AUDIO.tracks[groupId].enabled = true;
  mediaTypes.AUDIO.onTrackChanged();

  masterPlaylistLoader.on('mediachange', function () {
    ['AUDIO', 'SUBTITLES'].forEach(function (type) {
      return mediaTypes[type].onGroupChanged();
    });
  });

  // custom audio track change event handler for usage event
  var onAudioTrackChanged = function onAudioTrackChanged() {
    mediaTypes.AUDIO.onTrackChanged();
    tech.trigger({ type: 'usage', name: 'hls-audio-change' });
  };

  tech.audioTracks().addEventListener('change', onAudioTrackChanged);
  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);

  hls.on('dispose', function () {
    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);
    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);
  });

  // clear existing audio tracks and add the ones we just created
  tech.clearTracks('audio');

  for (var id in mediaTypes.AUDIO.tracks) {
    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);
  }
};

/**
 * Creates skeleton object used to store the loaders, tracks, and utility methods for each
 * media type
 *
 * @return {Object}
 *         Object to store the loaders, tracks, and utility methods for each media type
 * @function createMediaTypes
 */
var createMediaTypes = function createMediaTypes() {
  var mediaTypes = {};

  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {
    mediaTypes[type] = {
      groups: {},
      tracks: {},
      activePlaylistLoader: null,
      activeGroup: noop,
      activeTrack: noop,
      onGroupChanged: noop,
      onTrackChanged: noop
    };
  });

  return mediaTypes;
};

/**
 * @file master-playlist-controller.js
 */

var ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;

var Hls = void 0;

// SegmentLoader stats that need to have each loader's
// values summed to calculate the final value
var loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];
var sumLoaderStat = function sumLoaderStat(stat) {
  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];
};

/**
 * the master playlist controller controller all interactons
 * between playlists and segmentloaders. At this time this mainly
 * involves a master playlist and a series of audio playlists
 * if they are available
 *
 * @class MasterPlaylistController
 * @extends videojs.EventTarget
 */
var MasterPlaylistController = function (_videojs$EventTarget) {
  inherits$1(MasterPlaylistController, _videojs$EventTarget);

  function MasterPlaylistController(options) {
    classCallCheck$1(this, MasterPlaylistController);

    var _this = possibleConstructorReturn$1(this, (MasterPlaylistController.__proto__ || Object.getPrototypeOf(MasterPlaylistController)).call(this));

    var url = options.url,
        withCredentials = options.withCredentials,
        tech = options.tech,
        bandwidth = options.bandwidth,
        externHls = options.externHls,
        useCueTags = options.useCueTags,
        blacklistDuration = options.blacklistDuration,
        enableLowInitialPlaylist = options.enableLowInitialPlaylist,
        sourceType = options.sourceType,
        seekTo = options.seekTo;

    if (!url) {
      throw new Error('A non-empty playlist URL is required');
    }

    Hls = externHls;

    _this.withCredentials = withCredentials;
    _this.tech_ = tech;
    _this.hls_ = tech.hls;
    _this.seekTo_ = seekTo;
    _this.sourceType_ = sourceType;
    _this.useCueTags_ = useCueTags;
    _this.blacklistDuration = blacklistDuration;
    _this.enableLowInitialPlaylist = enableLowInitialPlaylist;
    if (_this.useCueTags_) {
      _this.cueTagsTrack_ = _this.tech_.addTextTrack('metadata', 'ad-cues');
      _this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';
    }

    _this.requestOptions_ = {
      withCredentials: _this.withCredentials,
      timeout: null
    };

    _this.mediaTypes_ = createMediaTypes();

    _this.mediaSource = new videojs$1.MediaSource();

    // load the media source into the player
    _this.mediaSource.addEventListener('sourceopen', _this.handleSourceOpen_.bind(_this));

    _this.seekable_ = videojs$1.createTimeRanges();
    _this.hasPlayed_ = function () {
      return false;
    };

    _this.syncController_ = new SyncController(options);
    _this.segmentMetadataTrack_ = tech.addRemoteTextTrack({
      kind: 'metadata',
      label: 'segment-metadata'
    }, false).track;

    _this.decrypter_ = new Decrypter$1();
    _this.inbandTextTracks_ = {};

    var segmentLoaderSettings = {
      hls: _this.hls_,
      mediaSource: _this.mediaSource,
      currentTime: _this.tech_.currentTime.bind(_this.tech_),
      seekable: function seekable$$1() {
        return _this.seekable();
      },
      seeking: function seeking() {
        return _this.tech_.seeking();
      },
      duration: function duration$$1() {
        return _this.mediaSource.duration;
      },
      hasPlayed: function hasPlayed() {
        return _this.hasPlayed_();
      },
      goalBufferLength: function goalBufferLength() {
        return _this.goalBufferLength();
      },
      bandwidth: bandwidth,
      syncController: _this.syncController_,
      decrypter: _this.decrypter_,
      sourceType: _this.sourceType_,
      inbandTextTracks: _this.inbandTextTracks_
    };

    _this.masterPlaylistLoader_ = _this.sourceType_ === 'dash' ? new DashPlaylistLoader(url, _this.hls_, _this.withCredentials) : new PlaylistLoader(url, _this.hls_, _this.withCredentials);
    _this.setupMasterPlaylistLoaderListeners_();

    // setup segment loaders
    // combined audio/video or just video when alternate audio track is selected
    _this.mainSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {
      segmentMetadataTrack: _this.segmentMetadataTrack_,
      loaderType: 'main'
    }), options);

    // alternate audio track
    _this.audioSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {
      loaderType: 'audio'
    }), options);

    _this.subtitleSegmentLoader_ = new VTTSegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {
      loaderType: 'vtt'
    }), options);

    _this.setupSegmentLoaderListeners_();

    // Create SegmentLoader stat-getters
    loaderStats.forEach(function (stat) {
      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);
    });

    _this.logger_ = logger('MPC');

    _this.masterPlaylistLoader_.load();
    return _this;
  }

  /**
   * Register event handlers on the master playlist loader. A helper
   * function for construction time.
   *
   * @private
   */

  createClass$1(MasterPlaylistController, [{
    key: 'setupMasterPlaylistLoaderListeners_',
    value: function setupMasterPlaylistLoaderListeners_() {
      var _this2 = this;

      this.masterPlaylistLoader_.on('loadedmetadata', function () {
        var media = _this2.masterPlaylistLoader_.media();
        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;

        // If we don't have any more available playlists, we don't want to
        // timeout the request.
        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {
          _this2.requestOptions_.timeout = 0;
        } else {
          _this2.requestOptions_.timeout = requestTimeout;
        }

        // if this isn't a live video and preload permits, start
        // downloading segments
        if (media.endList && _this2.tech_.preload() !== 'none') {
          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);
          _this2.mainSegmentLoader_.load();
        }

        setupMediaGroups({
          sourceType: _this2.sourceType_,
          segmentLoaders: {
            AUDIO: _this2.audioSegmentLoader_,
            SUBTITLES: _this2.subtitleSegmentLoader_,
            main: _this2.mainSegmentLoader_
          },
          tech: _this2.tech_,
          requestOptions: _this2.requestOptions_,
          masterPlaylistLoader: _this2.masterPlaylistLoader_,
          hls: _this2.hls_,
          master: _this2.master(),
          mediaTypes: _this2.mediaTypes_,
          blacklistCurrentPlaylist: _this2.blacklistCurrentPlaylist.bind(_this2)
        });

        _this2.triggerPresenceUsage_(_this2.master(), media);

        try {
          _this2.setupSourceBuffers_();
        } catch (e) {
          videojs$1.log.warn('Failed to create SourceBuffers', e);
          return _this2.mediaSource.endOfStream('decode');
        }
        _this2.setupFirstPlay();

        _this2.trigger('selectedinitialmedia');
      });

      this.masterPlaylistLoader_.on('loadedplaylist', function () {
        var updatedPlaylist = _this2.masterPlaylistLoader_.media();

        if (!updatedPlaylist) {
          // blacklist any variants that are not supported by the browser before selecting
          // an initial media as the playlist selectors do not consider browser support
          _this2.excludeUnsupportedVariants_();

          var selectedMedia = void 0;

          if (_this2.enableLowInitialPlaylist) {
            selectedMedia = _this2.selectInitialPlaylist();
          }

          if (!selectedMedia) {
            selectedMedia = _this2.selectPlaylist();
          }

          _this2.initialMedia_ = selectedMedia;
          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);
          return;
        }

        if (_this2.useCueTags_) {
          _this2.updateAdCues_(updatedPlaylist);
        }

        // TODO: Create a new event on the PlaylistLoader that signals
        // that the segments have changed in some way and use that to
        // update the SegmentLoader instead of doing it twice here and
        // on `mediachange`
        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);
        _this2.updateDuration();

        // If the player isn't paused, ensure that the segment loader is running,
        // as it is possible that it was temporarily stopped while waiting for
        // a playlist (e.g., in case the playlist errored and we re-requested it).
        if (!_this2.tech_.paused()) {
          _this2.mainSegmentLoader_.load();
          if (_this2.audioSegmentLoader_) {
            _this2.audioSegmentLoader_.load();
          }
        }

        if (!updatedPlaylist.endList) {
          var addSeekableRange = function addSeekableRange() {
            var seekable$$1 = _this2.seekable();

            if (seekable$$1.length !== 0) {
              _this2.mediaSource.addSeekableRange_(seekable$$1.start(0), seekable$$1.end(0));
            }
          };

          if (_this2.duration() !== Infinity) {
            var onDurationchange = function onDurationchange() {
              if (_this2.duration() === Infinity) {
                addSeekableRange();
              } else {
                _this2.tech_.one('durationchange', onDurationchange);
              }
            };

            _this2.tech_.one('durationchange', onDurationchange);
          } else {
            addSeekableRange();
          }
        }
      });

      this.masterPlaylistLoader_.on('error', function () {
        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);
      });

      this.masterPlaylistLoader_.on('mediachanging', function () {
        _this2.mainSegmentLoader_.abort();
        _this2.mainSegmentLoader_.pause();
      });

      this.masterPlaylistLoader_.on('mediachange', function () {
        var media = _this2.masterPlaylistLoader_.media();
        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;

        // If we don't have any more available playlists, we don't want to
        // timeout the request.
        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {
          _this2.requestOptions_.timeout = 0;
        } else {
          _this2.requestOptions_.timeout = requestTimeout;
        }

        // TODO: Create a new event on the PlaylistLoader that signals
        // that the segments have changed in some way and use that to
        // update the SegmentLoader instead of doing it twice here and
        // on `loadedplaylist`
        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);

        _this2.mainSegmentLoader_.load();

        _this2.tech_.trigger({
          type: 'mediachange',
          bubbles: true
        });
      });

      this.masterPlaylistLoader_.on('playlistunchanged', function () {
        var updatedPlaylist = _this2.masterPlaylistLoader_.media();
        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);

        if (playlistOutdated) {
          // Playlist has stopped updating and we're stuck at its end. Try to
          // blacklist it and switch to another playlist in the hope that that
          // one is updating (and give the player a chance to re-adjust to the
          // safe live point).
          _this2.blacklistCurrentPlaylist({
            message: 'Playlist no longer updating.'
          });
          // useful for monitoring QoS
          _this2.tech_.trigger('playliststuck');
        }
      });

      this.masterPlaylistLoader_.on('renditiondisabled', function () {
        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });
      });
      this.masterPlaylistLoader_.on('renditionenabled', function () {
        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });
      });
    }

    /**
     * A helper function for triggerring presence usage events once per source
     *
     * @private
     */

  }, {
    key: 'triggerPresenceUsage_',
    value: function triggerPresenceUsage_(master, media) {
      var mediaGroups = master.mediaGroups || {};
      var defaultDemuxed = true;
      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);

      for (var mediaGroup in mediaGroups.AUDIO) {
        for (var label in mediaGroups.AUDIO[mediaGroup]) {
          var properties = mediaGroups.AUDIO[mediaGroup][label];

          if (!properties.uri) {
            defaultDemuxed = false;
          }
        }
      }

      if (defaultDemuxed) {
        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });
      }

      if (Object.keys(mediaGroups.SUBTITLES).length) {
        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });
      }

      if (Hls.Playlist.isAes(media)) {
        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });
      }

      if (Hls.Playlist.isFmp4(media)) {
        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });
      }

      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {
        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });
      }

      if (this.useCueTags_) {
        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });
      }
    }
    /**
     * Register event handlers on the segment loaders. A helper function
     * for construction time.
     *
     * @private
     */

  }, {
    key: 'setupSegmentLoaderListeners_',
    value: function setupSegmentLoaderListeners_() {
      var _this3 = this;

      this.mainSegmentLoader_.on('bandwidthupdate', function () {
        var nextPlaylist = _this3.selectPlaylist();
        var currentPlaylist = _this3.masterPlaylistLoader_.media();
        var buffered = _this3.tech_.buffered();
        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;

        var bufferLowWaterLine = _this3.bufferLowWaterLine();

        // If the playlist is live, then we want to not take low water line into account.
        // This is because in LIVE, the player plays 3 segments from the end of the
        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble
        // in those segments, a viewer will never experience a rendition upswitch.
        if (!currentPlaylist.endList ||
        // For the same reason as LIVE, we ignore the low water line when the VOD
        // duration is below the max potential low water line
        _this3.duration() < Config.MAX_BUFFER_LOW_WATER_LINE ||
        // we want to switch down to lower resolutions quickly to continue playback, but
        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||
        // ensure we have some buffer before we switch up to prevent us running out of
        // buffer while loading a higher rendition.
        forwardBuffer >= bufferLowWaterLine) {
          _this3.masterPlaylistLoader_.media(nextPlaylist);
        }

        _this3.tech_.trigger('bandwidthupdate');
      });
      this.mainSegmentLoader_.on('progress', function () {
        _this3.trigger('progress');
      });

      this.mainSegmentLoader_.on('error', function () {
        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());
      });

      this.mainSegmentLoader_.on('syncinfoupdate', function () {
        _this3.onSyncInfoUpdate_();
      });

      this.mainSegmentLoader_.on('timestampoffset', function () {
        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });
      });
      this.audioSegmentLoader_.on('syncinfoupdate', function () {
        _this3.onSyncInfoUpdate_();
      });

      this.mainSegmentLoader_.on('ended', function () {
        _this3.onEndOfStream();
      });

      this.mainSegmentLoader_.on('earlyabort', function () {
        _this3.blacklistCurrentPlaylist({
          message: 'Aborted early because there isn\'t enough bandwidth to complete the ' + 'request without rebuffering.'
        }, ABORT_EARLY_BLACKLIST_SECONDS);
      });

      this.mainSegmentLoader_.on('reseteverything', function () {
        // If playing an MTS stream, a videojs.MediaSource is listening for
        // hls-reset to reset caption parsing state in the transmuxer
        _this3.tech_.trigger('hls-reset');
      });

      this.mainSegmentLoader_.on('segmenttimemapping', function (event) {
        // If playing an MTS stream in html, a videojs.MediaSource is listening for
        // hls-segment-time-mapping update its internal mapping of stream to display time
        _this3.tech_.trigger({
          type: 'hls-segment-time-mapping',
          mapping: event.mapping
        });
      });

      this.audioSegmentLoader_.on('ended', function () {
        _this3.onEndOfStream();
      });
    }
  }, {
    key: 'mediaSecondsLoaded_',
    value: function mediaSecondsLoaded_() {
      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
    }

    /**
     * Call load on our SegmentLoaders
     */

  }, {
    key: 'load',
    value: function load() {
      this.mainSegmentLoader_.load();
      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
        this.audioSegmentLoader_.load();
      }
      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
        this.subtitleSegmentLoader_.load();
      }
    }

    /**
     * Re-tune playback quality level for the current player
     * conditions without performing destructive actions, like
     * removing already buffered content
     *
     * @private
     */

  }, {
    key: 'smoothQualityChange_',
    value: function smoothQualityChange_() {
      var media = this.selectPlaylist();

      if (media !== this.masterPlaylistLoader_.media()) {
        this.masterPlaylistLoader_.media(media);

        this.mainSegmentLoader_.resetLoader();
        // don't need to reset audio as it is reset when media changes
      }
    }

    /**
     * Re-tune playback quality level for the current player
     * conditions. This method will perform destructive actions like removing
     * already buffered content in order to readjust the currently active
     * playlist quickly. This is good for manual quality changes
     *
     * @private
     */

  }, {
    key: 'fastQualityChange_',
    value: function fastQualityChange_() {
      var _this4 = this;

      var media = this.selectPlaylist();

      if (media === this.masterPlaylistLoader_.media()) {
        return;
      }

      this.masterPlaylistLoader_.media(media);

      // delete all buffered data to allow an immediate quality switch, then seek
      // in place to give the browser a kick to remove any cached frames from the
      // previous rendition
      this.mainSegmentLoader_.resetEverything(function () {
        // Since this is not a typical seek, we avoid the seekTo method which can cause
        // segments from the previously enabled rendition to load before the new playlist
        // has finished loading
        _this4.tech_.setCurrentTime(_this4.tech_.currentTime());
      });

      // don't need to reset audio as it is reset when media changes
    }

    /**
     * Begin playback.
     */

  }, {
    key: 'play',
    value: function play() {
      if (this.setupFirstPlay()) {
        return;
      }

      if (this.tech_.ended()) {
        this.seekTo_(0);
      }

      if (this.hasPlayed_()) {
        this.load();
      }

      var seekable$$1 = this.tech_.seekable();

      // if the viewer has paused and we fell out of the live window,
      // seek forward to the live point
      if (this.tech_.duration() === Infinity) {
        if (this.tech_.currentTime() < seekable$$1.start(0)) {
          return this.seekTo_(seekable$$1.end(seekable$$1.length - 1));
        }
      }
    }

    /**
     * Seek to the latest media position if this is a live video and the
     * player and video are loaded and initialized.
     */

  }, {
    key: 'setupFirstPlay',
    value: function setupFirstPlay() {
      var _this5 = this;

      var media = this.masterPlaylistLoader_.media();

      // Check that everything is ready to begin buffering for the first call to play
      //  If 1) there is no active media
      //     2) the player is paused
      //     3) the first play has already been setup
      // then exit early
      if (!media || this.tech_.paused() || this.hasPlayed_()) {
        return false;
      }

      // when the video is a live stream
      if (!media.endList) {
        var seekable$$1 = this.seekable();

        if (!seekable$$1.length) {
          // without a seekable range, the player cannot seek to begin buffering at the live
          // point
          return false;
        }

        if (videojs$1.browser.IE_VERSION && this.tech_.readyState() === 0) {
          // IE11 throws an InvalidStateError if you try to set currentTime while the
          // readyState is 0, so it must be delayed until the tech fires loadedmetadata.
          this.tech_.one('loadedmetadata', function () {
            _this5.trigger('firstplay');
            _this5.seekTo_(seekable$$1.end(0));
            _this5.hasPlayed_ = function () {
              return true;
            };
          });

          return false;
        }

        // trigger firstplay to inform the source handler to ignore the next seek event
        this.trigger('firstplay');
        // seek to the live point
        this.seekTo_(seekable$$1.end(0));
      }

      this.hasPlayed_ = function () {
        return true;
      };
      // we can begin loading now that everything is ready
      this.load();
      return true;
    }

    /**
     * handle the sourceopen event on the MediaSource
     *
     * @private
     */

  }, {
    key: 'handleSourceOpen_',
    value: function handleSourceOpen_() {
      // Only attempt to create the source buffer if none already exist.
      // handleSourceOpen is also called when we are "re-opening" a source buffer
      // after `endOfStream` has been called (in response to a seek for instance)
      try {
        this.setupSourceBuffers_();
      } catch (e) {
        videojs$1.log.warn('Failed to create Source Buffers', e);
        return this.mediaSource.endOfStream('decode');
      }

      // if autoplay is enabled, begin playback. This is duplicative of
      // code in video.js but is required because play() must be invoked
      // *after* the media source has opened.
      if (this.tech_.autoplay()) {
        var playPromise = this.tech_.play();

        // Catch/silence error when a pause interrupts a play request
        // on browsers which return a promise
        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {
          playPromise.then(null, function (e) {});
        }
      }

      this.trigger('sourceopen');
    }

    /**
     * Calls endOfStream on the media source when all active stream types have called
     * endOfStream
     *
     * @param {string} streamType
     *        Stream type of the segment loader that called endOfStream
     * @private
     */

  }, {
    key: 'onEndOfStream',
    value: function onEndOfStream() {
      var isEndOfStream = this.mainSegmentLoader_.ended_;

      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
        // if the audio playlist loader exists, then alternate audio is active
        if (!this.mainSegmentLoader_.startingMedia_ || this.mainSegmentLoader_.startingMedia_.containsVideo) {
          // if we do not know if the main segment loader contains video yet or if we
          // definitively know the main segment loader contains video, then we need to wait
          // for both main and audio segment loaders to call endOfStream
          isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;
        } else {
          // otherwise just rely on the audio loader
          isEndOfStream = this.audioSegmentLoader_.ended_;
        }
      }

      if (isEndOfStream) {
        this.mediaSource.endOfStream();
      }
    }

    /**
     * Check if a playlist has stopped being updated
     * @param {Object} playlist the media playlist object
     * @return {boolean} whether the playlist has stopped being updated or not
     */

  }, {
    key: 'stuckAtPlaylistEnd_',
    value: function stuckAtPlaylistEnd_(playlist) {
      var seekable$$1 = this.seekable();

      if (!seekable$$1.length) {
        // playlist doesn't have enough information to determine whether we are stuck
        return false;
      }

      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);

      if (expired === null) {
        return false;
      }

      // does not use the safe live end to calculate playlist end, since we
      // don't want to say we are stuck while there is still content
      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);
      var currentTime = this.tech_.currentTime();
      var buffered = this.tech_.buffered();

      if (!buffered.length) {
        // return true if the playhead reached the absolute end of the playlist
        return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;
      }
      var bufferedEnd = buffered.end(buffered.length - 1);

      // return true if there is too little buffer left and buffer has reached absolute
      // end of playlist
      return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;
    }

    /**
     * Blacklists a playlist when an error occurs for a set amount of time
     * making it unavailable for selection by the rendition selection algorithm
     * and then forces a new playlist (rendition) selection.
     *
     * @param {Object=} error an optional error that may include the playlist
     * to blacklist
     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the
     * playlist
     */

  }, {
    key: 'blacklistCurrentPlaylist',
    value: function blacklistCurrentPlaylist() {
      var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var blacklistDuration = arguments[1];

      var currentPlaylist = void 0;
      var nextPlaylist = void 0;

      // If the `error` was generated by the playlist loader, it will contain
      // the playlist we were trying to load (but failed) and that should be
      // blacklisted instead of the currently selected playlist which is likely
      // out-of-date in this scenario
      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();

      blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration;

      // If there is no current playlist, then an error occurred while we were
      // trying to load the master OR while we were disposing of the tech
      if (!currentPlaylist) {
        this.error = error;

        try {
          return this.mediaSource.endOfStream('network');
        } catch (e) {
          return this.trigger('error');
        }
      }

      var isFinalRendition = this.masterPlaylistLoader_.master.playlists.filter(isEnabled).length === 1;

      if (isFinalRendition) {
        // Never blacklisting this playlist because it's final rendition
        videojs$1.log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');

        this.tech_.trigger('retryplaylist');
        return this.masterPlaylistLoader_.load(isFinalRendition);
      }
      // Blacklist this playlist
      currentPlaylist.excludeUntil = Date.now() + blacklistDuration * 1000;
      this.tech_.trigger('blacklistplaylist');
      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });

      // Select a new playlist
      nextPlaylist = this.selectPlaylist();
      videojs$1.log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');

      return this.masterPlaylistLoader_.media(nextPlaylist);
    }

    /**
     * Pause all segment loaders
     */

  }, {
    key: 'pauseLoading',
    value: function pauseLoading() {
      this.mainSegmentLoader_.pause();
      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
        this.audioSegmentLoader_.pause();
      }
      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
        this.subtitleSegmentLoader_.pause();
      }
    }

    /**
     * set the current time on all segment loaders
     *
     * @param {TimeRange} currentTime the current time to set
     * @return {TimeRange} the current time
     */

  }, {
    key: 'setCurrentTime',
    value: function setCurrentTime(currentTime) {
      var buffered = findRange(this.tech_.buffered(), currentTime);

      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {
        // return immediately if the metadata is not ready yet
        return 0;
      }

      // it's clearly an edge-case but don't thrown an error if asked to
      // seek within an empty playlist
      if (!this.masterPlaylistLoader_.media().segments) {
        return 0;
      }

      // In flash playback, the segment loaders should be reset on every seek, even
      // in buffer seeks. If the seek location is already buffered, continue buffering as
      // usual
      // TODO: redo this comment
      if (buffered && buffered.length) {
        return currentTime;
      }

      // cancel outstanding requests so we begin buffering at the new
      // location
      this.mainSegmentLoader_.resetEverything();
      this.mainSegmentLoader_.abort();
      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
        this.audioSegmentLoader_.resetEverything();
        this.audioSegmentLoader_.abort();
      }
      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
        this.subtitleSegmentLoader_.resetEverything();
        this.subtitleSegmentLoader_.abort();
      }

      // start segment loader loading in case they are paused
      this.load();
    }

    /**
     * get the current duration
     *
     * @return {TimeRange} the duration
     */

  }, {
    key: 'duration',
    value: function duration$$1() {
      if (!this.masterPlaylistLoader_) {
        return 0;
      }

      if (this.mediaSource) {
        return this.mediaSource.duration;
      }

      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());
    }

    /**
     * check the seekable range
     *
     * @return {TimeRange} the seekable range
     */

  }, {
    key: 'seekable',
    value: function seekable$$1() {
      return this.seekable_;
    }
  }, {
    key: 'onSyncInfoUpdate_',
    value: function onSyncInfoUpdate_() {
      var mainSeekable = void 0;
      var audioSeekable = void 0;

      if (!this.masterPlaylistLoader_) {
        return;
      }

      var media = this.masterPlaylistLoader_.media();

      if (!media) {
        return;
      }

      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);

      if (expired === null) {
        // not enough information to update seekable
        return;
      }

      mainSeekable = Hls.Playlist.seekable(media, expired);

      if (mainSeekable.length === 0) {
        return;
      }

      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
        media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();
        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);

        if (expired === null) {
          return;
        }

        audioSeekable = Hls.Playlist.seekable(media, expired);

        if (audioSeekable.length === 0) {
          return;
        }
      }

      if (!audioSeekable) {
        // seekable has been calculated based on buffering video data so it
        // can be returned directly
        this.seekable_ = mainSeekable;
      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {
        // seekables are pretty far off, rely on main
        this.seekable_ = mainSeekable;
      } else {
        this.seekable_ = videojs$1.createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);
      }

      this.logger_('seekable updated [' + printableRange(this.seekable_) + ']');

      this.tech_.trigger('seekablechanged');
    }

    /**
     * Update the player duration
     */

  }, {
    key: 'updateDuration',
    value: function updateDuration() {
      var _this6 = this;

      var oldDuration = this.mediaSource.duration;
      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());
      var buffered = this.tech_.buffered();
      var setDuration = function setDuration() {
        _this6.mediaSource.duration = newDuration;
        _this6.tech_.trigger('durationchange');

        _this6.mediaSource.removeEventListener('sourceopen', setDuration);
      };

      if (buffered.length > 0) {
        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));
      }

      // if the duration has changed, invalidate the cached value
      if (oldDuration !== newDuration) {
        // update the duration
        if (this.mediaSource.readyState !== 'open') {
          this.mediaSource.addEventListener('sourceopen', setDuration);
        } else {
          setDuration();
        }
      }
    }

    /**
     * dispose of the MasterPlaylistController and everything
     * that it controls
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      var _this7 = this;

      this.decrypter_.terminate();
      this.masterPlaylistLoader_.dispose();
      this.mainSegmentLoader_.dispose();

      ['AUDIO', 'SUBTITLES'].forEach(function (type) {
        var groups = _this7.mediaTypes_[type].groups;

        for (var id in groups) {
          groups[id].forEach(function (group) {
            if (group.playlistLoader) {
              group.playlistLoader.dispose();
            }
          });
        }
      });

      this.audioSegmentLoader_.dispose();
      this.subtitleSegmentLoader_.dispose();
    }

    /**
     * return the master playlist object if we have one
     *
     * @return {Object} the master playlist object that we parsed
     */

  }, {
    key: 'master',
    value: function master() {
      return this.masterPlaylistLoader_.master;
    }

    /**
     * return the currently selected playlist
     *
     * @return {Object} the currently selected playlist object that we parsed
     */

  }, {
    key: 'media',
    value: function media() {
      // playlist loader will not return media if it has not been fully loaded
      return this.masterPlaylistLoader_.media() || this.initialMedia_;
    }

    /**
     * setup our internal source buffers on our segment Loaders
     *
     * @private
     */

  }, {
    key: 'setupSourceBuffers_',
    value: function setupSourceBuffers_() {
      var media = this.masterPlaylistLoader_.media();
      var mimeTypes = void 0;

      // wait until a media playlist is available and the Media Source is
      // attached
      if (!media || this.mediaSource.readyState !== 'open') {
        return;
      }

      mimeTypes = mimeTypesForPlaylist(this.masterPlaylistLoader_.master, media);
      if (mimeTypes.length < 1) {
        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;
        return this.mediaSource.endOfStream('decode');
      }

      this.configureLoaderMimeTypes_(mimeTypes);
      // exclude any incompatible variant streams from future playlist
      // selection
      this.excludeIncompatibleVariants_(media);
    }
  }, {
    key: 'configureLoaderMimeTypes_',
    value: function configureLoaderMimeTypes_(mimeTypes) {
      // If the content is demuxed, we can't start appending segments to a source buffer
      // until both source buffers are set up, or else the browser may not let us add the
      // second source buffer (it will assume we are playing either audio only or video
      // only).
      var sourceBufferEmitter =
      // If there is more than one mime type
      mimeTypes.length > 1 &&
      // and the first mime type does not have muxed video and audio
      mimeTypes[0].indexOf(',') === -1 &&
      // and the two mime types are different (they can be the same in the case of audio
      // only with alternate audio)
      mimeTypes[0] !== mimeTypes[1] ?
      // then we want to wait on the second source buffer
      new videojs$1.EventTarget() :
      // otherwise there is no need to wait as the content is either audio only,
      // video only, or muxed content.
      null;

      this.mainSegmentLoader_.mimeType(mimeTypes[0], sourceBufferEmitter);
      if (mimeTypes[1]) {
        this.audioSegmentLoader_.mimeType(mimeTypes[1], sourceBufferEmitter);
      }
    }

    /**
     * Blacklists playlists with codecs that are unsupported by the browser.
     */

  }, {
    key: 'excludeUnsupportedVariants_',
    value: function excludeUnsupportedVariants_() {
      this.master().playlists.forEach(function (variant) {
        if (variant.attributes.CODECS && window$1.MediaSource && window$1.MediaSource.isTypeSupported && !window$1.MediaSource.isTypeSupported('video/mp4; codecs="' + mapLegacyAvcCodecs(variant.attributes.CODECS) + '"')) {
          variant.excludeUntil = Infinity;
        }
      });
    }

    /**
     * Blacklist playlists that are known to be codec or
     * stream-incompatible with the SourceBuffer configuration. For
     * instance, Media Source Extensions would cause the video element to
     * stall waiting for video data if you switched from a variant with
     * video and audio to an audio-only one.
     *
     * @param {Object} media a media playlist compatible with the current
     * set of SourceBuffers. Variants in the current master playlist that
     * do not appear to have compatible codec or stream configurations
     * will be excluded from the default playlist selection algorithm
     * indefinitely.
     * @private
     */

  }, {
    key: 'excludeIncompatibleVariants_',
    value: function excludeIncompatibleVariants_(media) {
      var codecCount = 2;
      var videoCodec = null;
      var codecs = void 0;

      if (media.attributes.CODECS) {
        codecs = parseCodecs(media.attributes.CODECS);
        videoCodec = codecs.videoCodec;
        codecCount = codecs.codecCount;
      }

      this.master().playlists.forEach(function (variant) {
        var variantCodecs = {
          codecCount: 2,
          videoCodec: null
        };

        if (variant.attributes.CODECS) {
          variantCodecs = parseCodecs(variant.attributes.CODECS);
        }

        // if the streams differ in the presence or absence of audio or
        // video, they are incompatible
        if (variantCodecs.codecCount !== codecCount) {
          variant.excludeUntil = Infinity;
        }

        // if h.264 is specified on the current playlist, some flavor of
        // it must be specified on all compatible variants
        if (variantCodecs.videoCodec !== videoCodec) {
          variant.excludeUntil = Infinity;
        }
      });
    }
  }, {
    key: 'updateAdCues_',
    value: function updateAdCues_(media) {
      var offset = 0;
      var seekable$$1 = this.seekable();

      if (seekable$$1.length) {
        offset = seekable$$1.start(0);
      }

      updateAdCues(media, this.cueTagsTrack_, offset);
    }

    /**
     * Calculates the desired forward buffer length based on current time
     *
     * @return {Number} Desired forward buffer length in seconds
     */

  }, {
    key: 'goalBufferLength',
    value: function goalBufferLength() {
      var currentTime = this.tech_.currentTime();
      var initial = Config.GOAL_BUFFER_LENGTH;
      var rate = Config.GOAL_BUFFER_LENGTH_RATE;
      var max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);

      return Math.min(initial + currentTime * rate, max);
    }

    /**
     * Calculates the desired buffer low water line based on current time
     *
     * @return {Number} Desired buffer low water line in seconds
     */

  }, {
    key: 'bufferLowWaterLine',
    value: function bufferLowWaterLine() {
      var currentTime = this.tech_.currentTime();
      var initial = Config.BUFFER_LOW_WATER_LINE;
      var rate = Config.BUFFER_LOW_WATER_LINE_RATE;
      var max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);

      return Math.min(initial + currentTime * rate, max);
    }
  }]);
  return MasterPlaylistController;
}(videojs$1.EventTarget);

/**
 * Returns a function that acts as the Enable/disable playlist function.
 *
 * @param {PlaylistLoader} loader - The master playlist loader
 * @param {String} playlistUri - uri of the playlist
 * @param {Function} changePlaylistFn - A function to be called after a
 * playlist's enabled-state has been changed. Will NOT be called if a
 * playlist's enabled-state is unchanged
 * @param {Boolean=} enable - Value to set the playlist enabled-state to
 * or if undefined returns the current enabled-state for the playlist
 * @return {Function} Function for setting/getting enabled
 */
var enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn) {
  return function (enable) {
    var playlist = loader.master.playlists[playlistUri];
    var incompatible = isIncompatible(playlist);
    var currentlyEnabled = isEnabled(playlist);

    if (typeof enable === 'undefined') {
      return currentlyEnabled;
    }

    if (enable) {
      delete playlist.disabled;
    } else {
      playlist.disabled = true;
    }

    if (enable !== currentlyEnabled && !incompatible) {
      // Ensure the outside world knows about our changes
      changePlaylistFn();
      if (enable) {
        loader.trigger('renditionenabled');
      } else {
        loader.trigger('renditiondisabled');
      }
    }
    return enable;
  };
};

/**
 * The representation object encapsulates the publicly visible information
 * in a media playlist along with a setter/getter-type function (enabled)
 * for changing the enabled-state of a particular playlist entry
 *
 * @class Representation
 */

var Representation = function Representation(hlsHandler, playlist, id) {
  classCallCheck$1(this, Representation);

  // Get a reference to a bound version of fastQualityChange_
  var fastChangeFunction = hlsHandler.masterPlaylistController_.fastQualityChange_.bind(hlsHandler.masterPlaylistController_);

  // some playlist attributes are optional
  if (playlist.attributes.RESOLUTION) {
    var resolution = playlist.attributes.RESOLUTION;

    this.width = resolution.width;
    this.height = resolution.height;
  }

  this.bandwidth = playlist.attributes.BANDWIDTH;

  // The id is simply the ordinality of the media playlist
  // within the master playlist
  this.id = id;

  // Partially-apply the enableFunction to create a playlist-
  // specific variant
  this.enabled = enableFunction(hlsHandler.playlists, playlist.uri, fastChangeFunction);
};

/**
 * A mixin function that adds the `representations` api to an instance
 * of the HlsHandler class
 * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the
 * representation API into
 */

var renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {
  var playlists = hlsHandler.playlists;

  // Add a single API-specific function to the HlsHandler instance
  hlsHandler.representations = function () {
    return playlists.master.playlists.filter(function (media) {
      return !isIncompatible(media);
    }).map(function (e, i) {
      return new Representation(hlsHandler, e, e.uri);
    });
  };
};

/**
 * @file playback-watcher.js
 *
 * Playback starts, and now my watch begins. It shall not end until my death. I shall
 * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns
 * and win no glory. I shall live and die at my post. I am the corrector of the underflow.
 * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge
 * my life and honor to the Playback Watch, for this Player and all the Players to come.
 */

// Set of events that reset the playback-watcher time check logic and clear the timeout
var timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];

/**
 * @class PlaybackWatcher
 */

var PlaybackWatcher = function () {
  /**
   * Represents an PlaybackWatcher object.
   * @constructor
   * @param {object} options an object that includes the tech and settings
   */
  function PlaybackWatcher(options) {
    var _this = this;

    classCallCheck$1(this, PlaybackWatcher);

    this.tech_ = options.tech;
    this.seekable = options.seekable;
    this.seekTo = options.seekTo;

    this.consecutiveUpdates = 0;
    this.lastRecordedTime = null;
    this.timer_ = null;
    this.checkCurrentTimeTimeout_ = null;
    this.logger_ = logger('PlaybackWatcher');

    this.logger_('initialize');

    var canPlayHandler = function canPlayHandler() {
      return _this.monitorCurrentTime_();
    };
    var waitingHandler = function waitingHandler() {
      return _this.techWaiting_();
    };
    var cancelTimerHandler = function cancelTimerHandler() {
      return _this.cancelTimer_();
    };
    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {
      return _this.fixesBadSeeks_();
    };

    this.tech_.on('seekablechanged', fixesBadSeeksHandler);
    this.tech_.on('waiting', waitingHandler);
    this.tech_.on(timerCancelEvents, cancelTimerHandler);
    this.tech_.on('canplay', canPlayHandler);

    // Define the dispose function to clean up our events
    this.dispose = function () {
      _this.logger_('dispose');
      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);
      _this.tech_.off('waiting', waitingHandler);
      _this.tech_.off(timerCancelEvents, cancelTimerHandler);
      _this.tech_.off('canplay', canPlayHandler);
      if (_this.checkCurrentTimeTimeout_) {
        window$1.clearTimeout(_this.checkCurrentTimeTimeout_);
      }
      _this.cancelTimer_();
    };
  }

  /**
   * Periodically check current time to see if playback stopped
   *
   * @private
   */

  createClass$1(PlaybackWatcher, [{
    key: 'monitorCurrentTime_',
    value: function monitorCurrentTime_() {
      this.checkCurrentTime_();

      if (this.checkCurrentTimeTimeout_) {
        window$1.clearTimeout(this.checkCurrentTimeTimeout_);
      }

      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
      this.checkCurrentTimeTimeout_ = window$1.setTimeout(this.monitorCurrentTime_.bind(this), 250);
    }

    /**
     * The purpose of this function is to emulate the "waiting" event on
     * browsers that do not emit it when they are waiting for more
     * data to continue playback
     *
     * @private
     */

  }, {
    key: 'checkCurrentTime_',
    value: function checkCurrentTime_() {
      if (this.tech_.seeking() && this.fixesBadSeeks_()) {
        this.consecutiveUpdates = 0;
        this.lastRecordedTime = this.tech_.currentTime();
        return;
      }

      if (this.tech_.paused() || this.tech_.seeking()) {
        return;
      }

      var currentTime = this.tech_.currentTime();
      var buffered = this.tech_.buffered();

      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {
        // If current time is at the end of the final buffered region, then any playback
        // stall is most likely caused by buffering in a low bandwidth environment. The tech
        // should fire a `waiting` event in this scenario, but due to browser and tech
        // inconsistencies. Calling `techWaiting_` here allows us to simulate
        // responding to a native `waiting` event when the tech fails to emit one.
        return this.techWaiting_();
      }

      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {
        this.consecutiveUpdates++;
        this.waiting_();
      } else if (currentTime === this.lastRecordedTime) {
        this.consecutiveUpdates++;
      } else {
        this.consecutiveUpdates = 0;
        this.lastRecordedTime = currentTime;
      }
    }

    /**
     * Cancels any pending timers and resets the 'timeupdate' mechanism
     * designed to detect that we are stalled
     *
     * @private
     */

  }, {
    key: 'cancelTimer_',
    value: function cancelTimer_() {
      this.consecutiveUpdates = 0;

      if (this.timer_) {
        this.logger_('cancelTimer_');
        clearTimeout(this.timer_);
      }

      this.timer_ = null;
    }

    /**
     * Fixes situations where there's a bad seek
     *
     * @return {Boolean} whether an action was taken to fix the seek
     * @private
     */

  }, {
    key: 'fixesBadSeeks_',
    value: function fixesBadSeeks_() {
      var seeking = this.tech_.seeking();
      var seekable = this.seekable();
      var currentTime = this.tech_.currentTime();
      var seekTo = void 0;

      if (seeking && this.afterSeekableWindow_(seekable, currentTime)) {
        var seekableEnd = seekable.end(seekable.length - 1);

        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)
        seekTo = seekableEnd;
      }

      if (seeking && this.beforeSeekableWindow_(seekable, currentTime)) {
        var seekableStart = seekable.start(0);

        // sync to the beginning of the live window
        // provide a buffer of .1 seconds to handle rounding/imprecise numbers
        seekTo = seekableStart + SAFE_TIME_DELTA;
      }

      if (typeof seekTo !== 'undefined') {
        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));

        this.seekTo(seekTo);
        return true;
      }

      return false;
    }

    /**
     * Handler for situations when we determine the player is waiting.
     *
     * @private
     */

  }, {
    key: 'waiting_',
    value: function waiting_() {
      if (this.techWaiting_()) {
        return;
      }

      // All tech waiting checks failed. Use last resort correction
      var currentTime = this.tech_.currentTime();
      var buffered = this.tech_.buffered();
      var currentRange = findRange(buffered, currentTime);

      // Sometimes the player can stall for unknown reasons within a contiguous buffered
      // region with no indication that anything is amiss (seen in Firefox). Seeking to
      // currentTime is usually enough to kickstart the player. This checks that the player
      // is currently within a buffered region before attempting a corrective seek.
      // Chrome does not appear to continue `timeupdate` events after a `waiting` event
      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also
      // make sure there is ~3 seconds of forward buffer before taking any corrective action
      // to avoid triggering an `unknownwaiting` event when the network is slow.
      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {
        this.cancelTimer_();
        this.seekTo(currentTime);

        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');

        // unknown waiting corrections may be useful for monitoring QoS
        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });
        return;
      }
    }

    /**
     * Handler for situations when the tech fires a `waiting` event
     *
     * @return {Boolean}
     *         True if an action (or none) was needed to correct the waiting. False if no
     *         checks passed
     * @private
     */

  }, {
    key: 'techWaiting_',
    value: function techWaiting_() {
      var seekable = this.seekable();
      var currentTime = this.tech_.currentTime();

      if (this.tech_.seeking() && this.fixesBadSeeks_()) {
        // Tech is seeking or bad seek fixed, no action needed
        return true;
      }

      if (this.tech_.seeking() || this.timer_ !== null) {
        // Tech is seeking or already waiting on another action, no action needed
        return true;
      }

      if (this.beforeSeekableWindow_(seekable, currentTime)) {
        var livePoint = seekable.end(seekable.length - 1);

        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));
        this.cancelTimer_();
        this.seekTo(livePoint);

        // live window resyncs may be useful for monitoring QoS
        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });
        return true;
      }

      var buffered = this.tech_.buffered();
      var nextRange = findNextRange(buffered, currentTime);

      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {
        // Even though the video underflowed and was stuck in a gap, the audio overplayed
        // the gap, leading currentTime into a buffered range. Seeking to currentTime
        // allows the video to catch up to the audio position without losing any audio
        // (only suffering ~3 seconds of frozen video and a pause in audio playback).
        this.cancelTimer_();
        this.seekTo(currentTime);

        // video underflow may be useful for monitoring QoS
        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });
        return true;
      }

      // check for gap
      if (nextRange.length > 0) {
        var difference = nextRange.start(0) - currentTime;

        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));

        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);
        return true;
      }

      // All checks failed. Returning false to indicate failure to correct waiting
      return false;
    }
  }, {
    key: 'afterSeekableWindow_',
    value: function afterSeekableWindow_(seekable, currentTime) {
      if (!seekable.length) {
        // we can't make a solid case if there's no seekable, default to false
        return false;
      }

      if (currentTime > seekable.end(seekable.length - 1) + SAFE_TIME_DELTA) {
        return true;
      }

      return false;
    }
  }, {
    key: 'beforeSeekableWindow_',
    value: function beforeSeekableWindow_(seekable, currentTime) {
      if (seekable.length &&
      // can't fall before 0 and 0 seekable start identifies VOD stream
      seekable.start(0) > 0 && currentTime < seekable.start(0) - SAFE_TIME_DELTA) {
        return true;
      }

      return false;
    }
  }, {
    key: 'videoUnderflow_',
    value: function videoUnderflow_(nextRange, buffered, currentTime) {
      if (nextRange.length === 0) {
        // Even if there is no available next range, there is still a possibility we are
        // stuck in a gap due to video underflow.
        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);

        if (gap) {
          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));

          return true;
        }
      }

      return false;
    }

    /**
     * Timer callback. If playback still has not proceeded, then we seek
     * to the start of the next buffered region.
     *
     * @private
     */

  }, {
    key: 'skipTheGap_',
    value: function skipTheGap_(scheduledCurrentTime) {
      var buffered = this.tech_.buffered();
      var currentTime = this.tech_.currentTime();
      var nextRange = findNextRange(buffered, currentTime);

      this.cancelTimer_();

      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {
        return;
      }

      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));

      // only seek if we still have not played
      this.seekTo(nextRange.start(0) + TIME_FUDGE_FACTOR);

      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });
    }
  }, {
    key: 'gapFromVideoUnderflow_',
    value: function gapFromVideoUnderflow_(buffered, currentTime) {
      // At least in Chrome, if there is a gap in the video buffer, the audio will continue
      // playing for ~3 seconds after the video gap starts. This is done to account for
      // video buffer underflow/underrun (note that this is not done when there is audio
      // buffer underflow/underrun -- in that case the video will stop as soon as it
      // encounters the gap, as audio stalls are more noticeable/jarring to a user than
      // video stalls). The player's time will reflect the playthrough of audio, so the
      // time will appear as if we are in a buffered region, even if we are stuck in a
      // "gap."
      //
      // Example:
      // video buffer:   0 => 10.1, 10.2 => 20
      // audio buffer:   0 => 20
      // overall buffer: 0 => 10.1, 10.2 => 20
      // current time: 13
      //
      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,
      // however, the audio continued playing until it reached ~3 seconds past the gap
      // (13 seconds), at which point it stops as well. Since current time is past the
      // gap, findNextRange will return no ranges.
      //
      // To check for this issue, we see if there is a gap that starts somewhere within
      // a 3 second range (3 seconds +/- 1 second) back from our current time.
      var gaps = findGaps(buffered);

      for (var i = 0; i < gaps.length; i++) {
        var start = gaps.start(i);
        var end = gaps.end(i);

        // gap is starts no more than 4 seconds back
        if (currentTime - start < 4 && currentTime - start > 2) {
          return {
            start: start,
            end: end
          };
        }
      }

      return null;
    }
  }]);
  return PlaybackWatcher;
}();

var defaultOptions = {
  errorInterval: 30,
  getSource: function getSource(next) {
    var tech = this.tech({ IWillNotUseThisInPlugins: true });
    var sourceObj = tech.currentSource_;

    return next(sourceObj);
  }
};

/**
 * Main entry point for the plugin
 *
 * @param {Player} player a reference to a videojs Player instance
 * @param {Object} [options] an object with plugin options
 * @private
 */
var initPlugin = function initPlugin(player, options) {
  var lastCalled = 0;
  var seekTo = 0;
  var localOptions = videojs$1.mergeOptions(defaultOptions, options);

  player.ready(function () {
    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });
  });

  /**
   * Player modifications to perform that must wait until `loadedmetadata`
   * has been triggered
   *
   * @private
   */
  var loadedMetadataHandler = function loadedMetadataHandler() {
    if (seekTo) {
      player.currentTime(seekTo);
    }
  };

  /**
   * Set the source on the player element, play, and seek if necessary
   *
   * @param {Object} sourceObj An object specifying the source url and mime-type to play
   * @private
   */
  var setSource = function setSource(sourceObj) {
    if (sourceObj === null || sourceObj === undefined) {
      return;
    }
    seekTo = player.duration() !== Infinity && player.currentTime() || 0;

    player.one('loadedmetadata', loadedMetadataHandler);

    player.src(sourceObj);
    player.trigger({ type: 'usage', name: 'hls-error-reload' });
    player.play();
  };

  /**
   * Attempt to get a source from either the built-in getSource function
   * or a custom function provided via the options
   *
   * @private
   */
  var errorHandler = function errorHandler() {
    // Do not attempt to reload the source if a source-reload occurred before
    // 'errorInterval' time has elapsed since the last source-reload
    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {
      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });
      return;
    }

    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {
      videojs$1.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');
      return;
    }
    lastCalled = Date.now();

    return localOptions.getSource.call(player, setSource);
  };

  /**
   * Unbind any event handlers that were bound by the plugin
   *
   * @private
   */
  var cleanupEvents = function cleanupEvents() {
    player.off('loadedmetadata', loadedMetadataHandler);
    player.off('error', errorHandler);
    player.off('dispose', cleanupEvents);
  };

  /**
   * Cleanup before re-initializing the plugin
   *
   * @param {Object} [newOptions] an object with plugin options
   * @private
   */
  var reinitPlugin = function reinitPlugin(newOptions) {
    cleanupEvents();
    initPlugin(player, newOptions);
  };

  player.on('error', errorHandler);
  player.on('dispose', cleanupEvents);

  // Overwrite the plugin function so that we can correctly cleanup before
  // initializing the plugin
  player.reloadSourceOnError = reinitPlugin;
};

/**
 * Reload the source when an error is detected as long as there
 * wasn't an error previously within the last 30 seconds
 *
 * @param {Object} [options] an object with plugin options
 */
var reloadSourceOnError = function reloadSourceOnError(options) {
  initPlugin(this, options);
};

var version$1 = "1.2.5";

// since VHS handles HLS and DASH (and in the future, more types), use * to capture all
videojs$1.use('*', function (player) {
  return {
    setSource: function setSource(srcObj, next) {
      // pass null as the first argument to indicate that the source is not rejected
      next(null, srcObj);
    },

    // VHS needs to know when seeks happen. For external seeks (generated at the player
    // level), this middleware will capture the action. For internal seeks (generated at
    // the tech level), we use a wrapped function so that we can handle it on our own
    // (specified elsewhere).
    setCurrentTime: function setCurrentTime(time) {
      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {
        player.vhs.setCurrentTime(time);
      }

      return time;
    },

    // Sync VHS after play requests.
    // This specifically handles replay where the order of actions is
    // play, video element will seek to 0 (skipping the setCurrentTime middleware)
    // then triggers a play event.
    play: function play() {
      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {
        player.vhs.setCurrentTime(player.currentTime());
      }
    }
  };
});

/**
 * @file videojs-http-streaming.js
 *
 * The main file for the HLS project.
 * License: https://github.com/videojs/videojs-http-streaming/blob/master/LICENSE
 */

var Hls$1 = {
  PlaylistLoader: PlaylistLoader,
  Playlist: Playlist,
  Decrypter: Decrypter,
  AsyncStream: AsyncStream,
  decrypt: decrypt,
  utils: utils,

  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,
  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,
  comparePlaylistBandwidth: comparePlaylistBandwidth,
  comparePlaylistResolution: comparePlaylistResolution,

  xhr: xhrFactory()
};

// 0.5 MB/s
var INITIAL_BANDWIDTH = 4194304;

// Define getter/setters for config properites
['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {
  Object.defineProperty(Hls$1, prop, {
    get: function get$$1() {
      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');
      return Config[prop];
    },
    set: function set$$1(value) {
      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');

      if (typeof value !== 'number' || value < 0) {
        videojs$1.log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');
        return;
      }

      Config[prop] = value;
    }
  });
});

var simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {
  var mpegurlRE = /^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i;

  if (mpegurlRE.test(type)) {
    return 'hls';
  }

  var dashRE = /^application\/dash\+xml/i;

  if (dashRE.test(type)) {
    return 'dash';
  }

  return null;
};

/**
 * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.
 *
 * @param {QualityLevelList} qualityLevels The QualityLevelList to update.
 * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.
 * @function handleHlsMediaChange
 */
var handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {
  var newPlaylist = playlistLoader.media();
  var selectedIndex = -1;

  for (var i = 0; i < qualityLevels.length; i++) {
    if (qualityLevels[i].id === newPlaylist.uri) {
      selectedIndex = i;
      break;
    }
  }

  qualityLevels.selectedIndex_ = selectedIndex;
  qualityLevels.trigger({
    selectedIndex: selectedIndex,
    type: 'change'
  });

  var hd_box = document$1.querySelector('.play-settings > .play-button> .hdbox');

  if (qualityLevels[selectedIndex].height > 719 && qualityLevels[selectedIndex].height < 1081) {
    hd_box.innerText = "HD";
    hd_box.classList.add("hd-box");
  } else if (qualityLevels[selectedIndex].height > 1080) {
    hd_box.innerText = "4K";
    hd_box.classList.add("hd-box");
  } else {
    hd_box.innerText = "";
    hd_box.classList.remove("hd-box");
  }
};

/**
 * Adds quality levels to list once playlist metadata is available
 *
 * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.
 * @param {Object} hls Hls object to listen to for media events.
 * @function handleHlsLoadedMetadata
 */
var handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {
  hls.representations().forEach(function (rep) {
    qualityLevels.addQualityLevel(rep);
  });
  handleHlsMediaChange(qualityLevels, hls.playlists);
};

// HLS is a source handler, not a tech. Make sure attempts to use it
// as one do not cause exceptions.
Hls$1.canPlaySource = function () {
  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\'s techOrder.');
};

var emeKeySystems = function emeKeySystems(keySystemOptions, videoPlaylist, audioPlaylist) {
  if (!keySystemOptions) {
    return keySystemOptions;
  }

  // upsert the content types based on the selected playlist
  var keySystemContentTypes = {};

  for (var keySystem in keySystemOptions) {
    keySystemContentTypes[keySystem] = {
      audioContentType: 'audio/mp4; codecs="' + audioPlaylist.attributes.CODECS + '"',
      videoContentType: 'video/mp4; codecs="' + videoPlaylist.attributes.CODECS + '"'
    };

    if (videoPlaylist.contentProtection && videoPlaylist.contentProtection[keySystem] && videoPlaylist.contentProtection[keySystem].pssh) {
      keySystemContentTypes[keySystem].pssh = videoPlaylist.contentProtection[keySystem].pssh;
    }

    // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'
    // so we need to prevent overwriting the URL entirely
    if (typeof keySystemOptions[keySystem] === 'string') {
      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];
    }
  }

  return videojs$1.mergeOptions(keySystemOptions, keySystemContentTypes);
};

var setupEmeOptions = function setupEmeOptions(hlsHandler) {
  if (hlsHandler.options_.sourceType !== 'dash') {
    return;
  }
  var player = videojs$1.players[hlsHandler.tech_.options_.playerId];

  if (player.eme) {
    var sourceOptions = emeKeySystems(hlsHandler.source_.keySystems, hlsHandler.playlists.media(), hlsHandler.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader.media());

    if (sourceOptions) {
      player.currentSource().keySystems = sourceOptions;
    }
  }
};

/**
 * Whether the browser has built-in HLS support.
 */
Hls$1.supportsNativeHls = function () {
  var video = document$1.createElement('video');

  // native HLS is definitely not supported if HTML5 video isn't
  if (!videojs$1.getTech('Html5').isSupported()) {
    return false;
  }

  // HLS manifests can go by many mime-types
  var canPlay = [
  // Apple santioned
  'application/vnd.apple.mpegurl',
  // Apple sanctioned for backwards compatibility
  'audio/mpegurl',
  // Very common
  'audio/x-mpegurl',
  // Very common
  'application/x-mpegurl',
  // Included for completeness
  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];

  return canPlay.some(function (canItPlay) {
    return (/maybe|probably/i.test(video.canPlayType(canItPlay))
    );
  });
}();

Hls$1.supportsNativeDash = function () {
  if (!videojs$1.getTech('Html5').isSupported()) {
    return false;
  }

  return (/maybe|probably/i.test(document$1.createElement('video').canPlayType('application/dash+xml'))
  );
}();

Hls$1.supportsTypeNatively = function (type) {
  if (type === 'hls') {
    return Hls$1.supportsNativeHls;
  }

  if (type === 'dash') {
    return Hls$1.supportsNativeDash;
  }

  return false;
};

/**
 * HLS is a source handler, not a tech. Make sure attempts to use it
 * as one do not cause exceptions.
 */
Hls$1.isSupported = function () {
  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\'s techOrder.');
};

var Component$1 = videojs$1.getComponent('Component');

/**
 * The Hls Handler object, where we orchestrate all of the parts
 * of HLS to interact with video.js
 *
 * @class HlsHandler
 * @extends videojs.Component
 * @param {Object} source the soruce object
 * @param {Tech} tech the parent tech object
 * @param {Object} options optional and required options
 */

var HlsHandler = function (_Component) {
  inherits$1(HlsHandler, _Component);

  function HlsHandler(source, tech, options) {
    classCallCheck$1(this, HlsHandler);

    // tech.player() is deprecated but setup a reference to HLS for
    // backwards-compatibility
    var _this = possibleConstructorReturn$1(this, (HlsHandler.__proto__ || Object.getPrototypeOf(HlsHandler)).call(this, tech, options.hls));

    if (tech.options_ && tech.options_.playerId) {
      var _player = videojs$1(tech.options_.playerId);

      if (!_player.hasOwnProperty('hls')) {
        Object.defineProperty(_player, 'hls', {
          get: function get$$1() {
            videojs$1.log.warn('player.hls is deprecated. Use player.tech().hls instead.');
            tech.trigger({ type: 'usage', name: 'hls-player-access' });
            return _this;
          }
        });
      }

      // Set up a reference to the HlsHandler from player.vhs. This allows users to start
      // migrating from player.tech_.hls... to player.vhs... for API access. Although this
      // isn't the most appropriate form of reference for video.js (since all APIs should
      // be provided through core video.js), it is a common pattern for plugins, and vhs
      // will act accordingly.
      _player.vhs = _this;
      // deprecated, for backwards compatibility
      _player.dash = _this;
    }

    _this.tech_ = tech;
    _this.source_ = source;
    _this.stats = {};
    _this.setOptions_();

    if (_this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {
      tech.overrideNativeAudioTracks(true);
      tech.overrideNativeVideoTracks(true);
    } else if (_this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {
      // overriding native HLS only works if audio tracks have been emulated
      // error early if we're misconfigured
      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');
    }

    // listen for fullscreenchange events for this player so that we
    // can adjust our quality selection quickly
    _this.on(document$1, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {
      var fullscreenElement = document$1.fullscreenElement || document$1.webkitFullscreenElement || document$1.mozFullScreenElement || document$1.msFullscreenElement;

      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {
        _this.masterPlaylistController_.smoothQualityChange_();
      }
    });
    _this.on(_this.tech_, 'error', function () {
      if (this.masterPlaylistController_) {
        this.masterPlaylistController_.pauseLoading();
      }
    });

    _this.on(_this.tech_, 'play', _this.play);
    return _this;
  }

  createClass$1(HlsHandler, [{
    key: 'setOptions_',
    value: function setOptions_() {
      var _this2 = this;

      // defaults
      this.options_.withCredentials = this.options_.withCredentials || false;

      if (typeof this.options_.blacklistDuration !== 'number') {
        this.options_.blacklistDuration = 5 * 60;
      }

      // start playlist selection at a reasonable bandwidth for
      // broadband internet (0.5 MB/s) or mobile (0.0625 MB/s)
      if (typeof this.options_.bandwidth !== 'number') {
        this.options_.bandwidth = INITIAL_BANDWIDTH;
      }

      // If the bandwidth number is unchanged from the initial setting
      // then this takes precedence over the enableLowInitialPlaylist option
      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === INITIAL_BANDWIDTH;

      // grab options passed to player.src
      ['withCredentials', 'bandwidth'].forEach(function (option) {
        if (typeof _this2.source_[option] !== 'undefined') {
          _this2.options_[option] = _this2.source_[option];
        }
      });

      this.bandwidth = this.options_.bandwidth;
    }
    /**
     * called when player.src gets called, handle a new source
     *
     * @param {Object} src the source object to handle
     */

  }, {
    key: 'src',
    value: function src(_src, type) {
      var _this3 = this;

      // do nothing if the src is falsey
      if (!_src) {
        return;
      }
      this.setOptions_();
      // add master playlist controller options
      this.options_.url = this.source_.src;
      this.options_.tech = this.tech_;
      this.options_.externHls = Hls$1;
      this.options_.sourceType = simpleTypeFromSourceType(type);
      // Whenever we seek internally, we should update both the tech and call our own
      // setCurrentTime function. This is needed because "seeking" events aren't always
      // reliable. External seeks (via the player object) are handled via middleware.
      this.options_.seekTo = function (time) {
        _this3.tech_.setCurrentTime(time);
        _this3.setCurrentTime(time);
      };

      this.masterPlaylistController_ = new MasterPlaylistController(this.options_);
      this.playbackWatcher_ = new PlaybackWatcher(videojs$1.mergeOptions(this.options_, {
        seekable: function seekable$$1() {
          return _this3.seekable();
        }
      }));

      this.masterPlaylistController_.on('error', function () {
        var player = videojs$1.players[_this3.tech_.options_.playerId];

        player.error(_this3.masterPlaylistController_.error);
      });

      // `this` in selectPlaylist should be the HlsHandler for backwards
      // compatibility with < v2
      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls$1.STANDARD_PLAYLIST_SELECTOR.bind(this);

      this.masterPlaylistController_.selectInitialPlaylist = Hls$1.INITIAL_PLAYLIST_SELECTOR.bind(this);

      // re-expose some internal objects for backwards compatibility with < v2
      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;
      this.mediaSource = this.masterPlaylistController_.mediaSource;

      // Proxy assignment of some properties to the master playlist
      // controller. Using a custom property for backwards compatibility
      // with < v2
      Object.defineProperties(this, {
        selectPlaylist: {
          get: function get$$1() {
            return this.masterPlaylistController_.selectPlaylist;
          },
          set: function set$$1(selectPlaylist) {
            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);
          }
        },
        throughput: {
          get: function get$$1() {
            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;
          },
          set: function set$$1(throughput) {
            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;
            // By setting `count` to 1 the throughput value becomes the starting value
            // for the cumulative average
            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;
          }
        },
        bandwidth: {
          get: function get$$1() {
            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;
          },
          set: function set$$1(bandwidth) {
            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;
            // setting the bandwidth manually resets the throughput counter
            // `count` is set to zero that current value of `rate` isn't included
            // in the cumulative average
            this.masterPlaylistController_.mainSegmentLoader_.throughput = {
              rate: 0,
              count: 0
            };
          }
        },
        /**
         * `systemBandwidth` is a combination of two serial processes bit-rates. The first
         * is the network bitrate provided by `bandwidth` and the second is the bitrate of
         * the entire process after that - decryption, transmuxing, and appending - provided
         * by `throughput`.
         *
         * Since the two process are serial, the overall system bandwidth is given by:
         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)
         */
        systemBandwidth: {
          get: function get$$1() {
            var invBandwidth = 1 / (this.bandwidth || 1);
            var invThroughput = void 0;

            if (this.throughput > 0) {
              invThroughput = 1 / this.throughput;
            } else {
              invThroughput = 0;
            }

            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));

            return systemBitrate;
          },
          set: function set$$1() {
            videojs$1.log.error('The "systemBandwidth" property is read-only');
          }
        }
      });

      Object.defineProperties(this.stats, {
        bandwidth: {
          get: function get$$1() {
            return _this3.bandwidth || 0;
          },
          enumerable: true
        },
        mediaRequests: {
          get: function get$$1() {
            return _this3.masterPlaylistController_.mediaRequests_() || 0;
          },
          enumerable: true
        },
        mediaRequestsAborted: {
          get: function get$$1() {
            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;
          },
          enumerable: true
        },
        mediaRequestsTimedout: {
          get: function get$$1() {
            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;
          },
          enumerable: true
        },
        mediaRequestsErrored: {
          get: function get$$1() {
            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;
          },
          enumerable: true
        },
        mediaTransferDuration: {
          get: function get$$1() {
            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;
          },
          enumerable: true
        },
        mediaBytesTransferred: {
          get: function get$$1() {
            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;
          },
          enumerable: true
        },
        mediaSecondsLoaded: {
          get: function get$$1() {
            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;
          },
          enumerable: true
        },
        buffered: {
          get: function get$$1() {
            return timeRangesToArray(_this3.tech_.buffered());
          },
          enumerable: true
        },
        currentTime: {
          get: function get$$1() {
            return _this3.tech_.currentTime();
          },
          enumerable: true
        },
        currentSource: {
          get: function get$$1() {
            return _this3.tech_.currentSource_;
          },
          enumerable: true
        },
        currentTech: {
          get: function get$$1() {
            return _this3.tech_.name_;
          },
          enumerable: true
        },
        duration: {
          get: function get$$1() {
            return _this3.tech_.duration();
          },
          enumerable: true
        },
        master: {
          get: function get$$1() {
            return _this3.playlists.master;
          },
          enumerable: true
        },
        playerDimensions: {
          get: function get$$1() {
            return _this3.tech_.currentDimensions();
          },
          enumerable: true
        },
        seekable: {
          get: function get$$1() {
            return timeRangesToArray(_this3.tech_.seekable());
          },
          enumerable: true
        },
        timestamp: {
          get: function get$$1() {
            return Date.now();
          },
          enumerable: true
        },
        videoPlaybackQuality: {
          get: function get$$1() {
            return _this3.tech_.getVideoPlaybackQuality();
          },
          enumerable: true
        }
      });

      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));

      this.masterPlaylistController_.on('selectedinitialmedia', function () {
        // Add the manual rendition mix-in to HlsHandler
        renditionSelectionMixin(_this3);
        setupEmeOptions(_this3);
      });

      // the bandwidth of the primary segment loader is our best
      // estimate of overall bandwidth
      this.on(this.masterPlaylistController_, 'progress', function () {
        this.tech_.trigger('progress');
      });

      this.tech_.ready(function () {
        return _this3.setupQualityLevels_();
      });

      // do nothing if the tech has been disposed already
      // this can occur if someone sets the src in player.ready(), for instance
      if (!this.tech_.el()) {
        return;
      }

      this.tech_.src(videojs$1.URL.createObjectURL(this.masterPlaylistController_.mediaSource));
    }

    /**
     * Initializes the quality levels and sets listeners to update them.
     *
     * @method setupQualityLevels_
     * @private
     */

  }, {
    key: 'setupQualityLevels_',
    value: function setupQualityLevels_() {
      var _this4 = this;

      var player = videojs$1.players[this.tech_.options_.playerId];

      if (player && player.qualityLevels) {
        this.qualityLevels_ = player.qualityLevels();

        this.masterPlaylistController_.on('selectedinitialmedia', function () {
          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);
        });

        this.playlists.on('mediachange', function () {
          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);
        });
      }
    }

    /**
     * Begin playing the video.
     */

  }, {
    key: 'play',
    value: function play() {
      this.masterPlaylistController_.play();
    }

    /**
     * a wrapper around the function in MasterPlaylistController
     */

  }, {
    key: 'setCurrentTime',
    value: function setCurrentTime(currentTime) {
      this.masterPlaylistController_.setCurrentTime(currentTime);
    }

    /**
     * a wrapper around the function in MasterPlaylistController
     */

  }, {
    key: 'duration',
    value: function duration$$1() {
      return this.masterPlaylistController_.duration();
    }

    /**
     * a wrapper around the function in MasterPlaylistController
     */

  }, {
    key: 'seekable',
    value: function seekable$$1() {
      return this.masterPlaylistController_.seekable();
    }

    /**
     * Abort all outstanding work and cleanup.
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      if (this.playbackWatcher_) {
        this.playbackWatcher_.dispose();
      }
      if (this.masterPlaylistController_) {
        this.masterPlaylistController_.dispose();
      }
      if (this.qualityLevels_) {
        this.qualityLevels_.dispose();
      }
      get$2(HlsHandler.prototype.__proto__ || Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);
    }
  }]);
  return HlsHandler;
}(Component$1);

/**
 * The Source Handler object, which informs video.js what additional
 * MIME types are supported and sets up playback. It is registered
 * automatically to the appropriate tech based on the capabilities of
 * the browser it is running in. It is not necessary to use or modify
 * this object in normal usage.
 */

var HlsSourceHandler = {
  name: 'videojs-http-streaming',
  VERSION: version$1,
  canHandleSource: function canHandleSource(srcObj) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);

    return HlsSourceHandler.canPlayType(srcObj.type, localOptions);
  },
  handleSource: function handleSource(source, tech) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);

    tech.hls = new HlsHandler(source, tech, localOptions);
    tech.hls.xhr = xhrFactory();

    tech.hls.src(source.src, source.type);
    return tech.hls;
  },
  canPlayType: function canPlayType(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _videojs$mergeOptions = videojs$1.mergeOptions(videojs$1.options, options),
        overrideNative = _videojs$mergeOptions.hls.overrideNative;

    var supportedType = simpleTypeFromSourceType(type);
    var canUseMsePlayback = supportedType && (!Hls$1.supportsTypeNatively(supportedType) || overrideNative);

    return canUseMsePlayback ? 'maybe' : '';
  }
};

if (typeof videojs$1.MediaSource === 'undefined' || typeof videojs$1.URL === 'undefined') {
  videojs$1.MediaSource = MediaSource;
  videojs$1.URL = URL$1;
}

// register source handlers with the appropriate techs
if (MediaSource.supportsNativeMediaSources()) {
  videojs$1.getTech('Html5').registerSourceHandler(HlsSourceHandler, 0);
}

videojs$1.HlsHandler = HlsHandler;
videojs$1.HlsSourceHandler = HlsSourceHandler;
videojs$1.Hls = Hls$1;
if (!videojs$1.use) {
  videojs$1.registerComponent('Hls', Hls$1);
}
videojs$1.options.hls = videojs$1.options.hls || {};

if (videojs$1.registerPlugin) {
  videojs$1.registerPlugin('reloadSourceOnError', reloadSourceOnError);
} else {
  videojs$1.plugin('reloadSourceOnError', reloadSourceOnError);
}

/**
 * A single QualityLevel.
 *
 * interface QualityLevel {
 *   readonly attribute DOMString id;
 *            attribute DOMString label;
 *   readonly attribute long width;
 *   readonly attribute long height;
 *   readonly attribute long bitrate;
 *            attribute boolean enabled;
 * };
 *
 * @class QualityLevel
 */

var QualityLevel =

/**
 * Creates a QualityLevel
 *
 * @param {Representation|Object} representation The representation of the quality level
 * @param {string}   representation.id        Unique id of the QualityLevel
 * @param {number=}  representation.width     Resolution width of the QualityLevel
 * @param {number=}  representation.height    Resolution height of the QualityLevel
 * @param {number}   representation.bandwidth Bitrate of the QualityLevel
 * @param {Function} representation.enabled   Callback to enable/disable QualityLevel
 * @return {QualityLevel} - The QualityLevel of the qualities.
 */
function QualityLevel(representation) {
  classCallCheck(this, QualityLevel);


  var level = this; // eslint-disable-line

  if (videojs$1.browser.IS_IE8) {
    level = document$1.createElement('custom');
    for (var prop in QualityLevel.prototype) {
      if (prop !== 'constructor') {
        level[prop] = QualityLevel.prototype[prop];
      }
    }
  }

  level.id = representation.id;
  level.label = level.id;
  level.width = representation.width;
  level.height = representation.height;
  level.bitrate = representation.bandwidth;
  level.enabled_ = representation.enabled;

  Object.defineProperty(level, 'enabled', {
    /**
     * Get whether the QualityLevel is enabled.
     *
     * @return {boolean} True if the QualityLevel is enabled.
     */
    get: function get$$1() {
      return level.enabled_();
    },


    /**
     * Enable or disable the QualityLevel.
     *
     * @param {boolean} enable true to enable QualityLevel, false to disable.
     */
    set: function set$$1(enable) {
      level.enabled_(enable);
    }
  });

  return level;
};

/**
 * A list of QualityLevels.
 *
 * interface QualityLevelList : EventTarget {
 *   getter QualityLevel (unsigned long index);
 *   readonly attribute unsigned long length;
 *   readonly attribute long selectedIndex;
 *
 *   void addQualityLevel(QualityLevel qualityLevel)
 *   void removeQualityLevel(QualityLevel remove)
 *   QualityLevel? getQualityLevelById(DOMString id);
 *
 *   attribute EventHandler onchange;
 *   attribute EventHandler onaddqualitylevel;
 *   attribute EventHandler onremovequalitylevel;
 * };
 *
 * @extends videojs.EventTarget
 * @class QualityLevelList
 */

var QualityLevelList = function (_videojs$EventTarget) {
  inherits(QualityLevelList, _videojs$EventTarget);

  /**
   * QualityLevelList constructor
   */
  function QualityLevelList() {
    var _ret;

    classCallCheck(this, QualityLevelList);

    var _this = possibleConstructorReturn(this, _videojs$EventTarget.call(this));

    var list = _this; // eslint-disable-line

    if (videojs$1.browser.IS_IE8) {
      list = document$1.createElement('custom');
      for (var prop in QualityLevelList.prototype) {
        if (prop !== 'constructor') {
          list[prop] = QualityLevelList.prototype[prop];
        }
      }
    }

    list.levels_ = [];
    list.selectedIndex_ = -1;

    /**
     * Get the index of the currently selected QualityLevel.
     *
     * @returns {number} The index of the selected QualityLevel. -1 if none selected.
     * @readonly
     */
    Object.defineProperty(list, 'selectedIndex', {
      get: function get$$1() {
        return list.selectedIndex_;
      }
    });

    /**
     * Get the length of the list of QualityLevels.
     *
     * @returns {number} The length of the list.
     * @readonly
     */
    Object.defineProperty(list, 'length', {
      get: function get$$1() {
        return list.levels_.length;
      }
    });

    return _ret = list, possibleConstructorReturn(_this, _ret);
  }

  /**
   * Adds a quality level to the list.
   *
   * @param {Representation|Object} representation The representation of the quality level
   * @param {string}   representation.id        Unique id of the QualityLevel
   * @param {number=}  representation.width     Resolution width of the QualityLevel
   * @param {number=}  representation.height    Resolution height of the QualityLevel
   * @param {number}   representation.bandwidth Bitrate of the QualityLevel
   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel
   * @return {QualityLevel} the QualityLevel added to the list
   * @method addQualityLevel
   */


  QualityLevelList.prototype.addQualityLevel = function addQualityLevel(representation) {
    var qualityLevel = this.getQualityLevelById(representation.id);

    // Do not add duplicate quality levels
    if (qualityLevel) {
      return qualityLevel;
    }

    var index = this.levels_.length;

    qualityLevel = new QualityLevel(representation);

    if (!('' + index in this)) {
      Object.defineProperty(this, index, {
        get: function get$$1() {
          return this.levels_[index];
        }
      });
    }

    this.levels_.push(qualityLevel);

    this.trigger({
      qualityLevel: qualityLevel,
      type: 'addqualitylevel'
    });

    return qualityLevel;
  };

  /**
   * Removes a quality level from the list.
   *
   * @param {Object} qualityLevel - remove QualityLevel to remove to the list.
   * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed
   * @method removeQualityLevel
   */


  QualityLevelList.prototype.removeQualityLevel = function removeQualityLevel(qualityLevel) {
    var removed = null;

    for (var i = 0, l = this.length; i < l; i++) {
      if (this[i] === qualityLevel) {
        removed = this.levels_.splice(i, 1)[0];

        if (this.selectedIndex_ === i) {
          this.selectedIndex_ = -1;
        } else if (this.selectedIndex_ > i) {
          this.selectedIndex_--;
        }
        break;
      }
    }

    if (removed) {
      this.trigger({
        qualityLevel: qualityLevel,
        type: 'removequalitylevel'
      });
    }

    return removed;
  };

  /**
   * Searches for a QualityLevel with the given id.
   *
   * @param {number} id - The id of the QualityLevel to find.
   * @method getQualityLevelById
   * @return {QualityLevel|null} - The QualityLevel with id, or null if not found.
   */


  QualityLevelList.prototype.getQualityLevelById = function getQualityLevelById(id) {
    for (var i = 0, l = this.length; i < l; i++) {
      var level = this[i];

      if (level.id === id) {
        return level;
      }
    }
    return null;
  };

  /**
   * Resets the list of QualityLevels to empty
   *
   * @method dispose
   */


  QualityLevelList.prototype.dispose = function dispose() {
    this.selectedIndex_ = -1;
    this.levels_.length = 0;
  };

  return QualityLevelList;
}(videojs$1.EventTarget);

/**
 * change - The selected QualityLevel has changed.
 * addqualitylevel - A QualityLevel has been added to the QualityLevelList.
 * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.
 */


QualityLevelList.prototype.allowedEvents_ = {
  change: 'change',
  addqualitylevel: 'addqualitylevel',
  removequalitylevel: 'removequalitylevel'
};

// emulate attribute EventHandler support to allow for feature detection
for (var event$1 in QualityLevelList.prototype.allowedEvents_) {
  QualityLevelList.prototype['on' + event$1] = null;
}

// vjs 5/6 support
var registerPlugin = videojs$1.registerPlugin || videojs$1.plugin;

/**
 * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and
 * event handlers.
 *
 * @param {Player} player Player object.
 * @param {Object} options Plugin options object.
 * @function initPlugin
 * @return {qualityLevelList} - quality list of quality levels in video
 */
var initPlugin$1 = function initPlugin(player, options) {
  var originalPluginFn = player.qualityLevels;

  var qualityLevelList = new QualityLevelList();

  var disposeHandler = function disposeHandler() {
    qualityLevelList.dispose();
    player.qualityLevels = originalPluginFn;
    player.off('dispose', disposeHandler);
  };

  player.on('dispose', disposeHandler);

  player.qualityLevels = function () {
    return qualityLevelList;
  };
  player.qualityLevels.VERSION = '__VERSION__';

  return qualityLevelList;
};

/**
 * A video.js plugin.
 *
 * In the plugin function, the value of `this` is a video.js `Player`
 * instance. You cannot rely on the player being in a "ready" state here,
 * depending on how the plugin is invoked. This may or may not be important
 * to you; if not, remove the wait for "ready"!
 *
 * @param {Object} options Plugin options object
 * @function qualityLevels
 * @return {QualityLevels} - quality level initialized plugin
 */
var qualityLevels = function qualityLevels(options) {
  return initPlugin$1(this, videojs$1.mergeOptions({}, options));
};

// Register the plugin with video.js.
registerPlugin('qualityLevels', qualityLevels);

// Include the version number.
qualityLevels.VERSION = '__VERSION__';

// Default options for the plugin.
var defaults$1 = {};

// Cross-compatibility for Video.js 5 and 6.
var registerPlugin$1 = videojs$1.registerPlugin || videojs$1.plugin;
// const dom = videojs.dom || videojs;

/**
 * VideoJS HLS Quality Selector Plugin class.
 */

var HlsQualitySelectorPlugin = function () {

    /**
     * Plugin Constructor.
     *
     * @param {Player} player - The videojs player instance.
     * @param {Object} options - The plugin options.
     */
    function HlsQualitySelectorPlugin(player, options) {
        classCallCheck(this, HlsQualitySelectorPlugin);

        this.player = player;
        // If there is quality levels plugin and the HLS tech exists
        // then continue.
        if (this.player.qualityLevels) {
            // Create the quality button.
            this.createQualityButton();
            this.bindPlayerEvents();
        }
        if (this.player.textTracks) {
            this.createActiveCueEvent();
        }
    }

    /**
     * Function to create active cue event on playing the segments
     *
     */


    HlsQualitySelectorPlugin.prototype.createActiveCueEvent = function createActiveCueEvent() {
        var _this = this;

        this.player.on('loadedmetadata', function () {
            var track = _this.player.textTracks();
            var segmentMetadataTrack = void 0;
            var tracks = track.tracks_;

            for (var i = 0; i < tracks.length; i++) {
                if (tracks[i].label === 'segment-metadata') {
                    segmentMetadataTrack = tracks[i];
                }
            }
            if (segmentMetadataTrack) {
                segmentMetadataTrack.on('cuechange', function () {
                    var activeCue = segmentMetadataTrack.activeCues[0];
                    if (activeCue) {
                        _this.updateDisplayText(activeCue.value.resolution.height);
                    }
                });
            }
        });
    };

    /**
     * Binds listener for quality level changes.
     */


    HlsQualitySelectorPlugin.prototype.bindPlayerEvents = function bindPlayerEvents() {
        this.player.qualityLevels().on('addqualitylevel', this.onAddQualityLevel.bind(this));
    };

    /**
     * Adds the quality menu button to the player control bar.
     */


    HlsQualitySelectorPlugin.prototype.createQualityButton = function createQualityButton() {

        var player = this.player;
        var self = this;

        this.selectedQuality = 'auto';
        this.labelEl_ = null;
        var videoJsButtonClass = videojs$1.getComponent('MenuButton');

        /**
         * Extend vjs button class for quality button.
         */

        var ConcreteButtonClass = function (_videoJsButtonClass) {
            inherits(ConcreteButtonClass, _videoJsButtonClass);

            /**
             * Button constructor.
             */
            function ConcreteButtonClass() {
                classCallCheck(this, ConcreteButtonClass);

                var _this2 = possibleConstructorReturn(this, _videoJsButtonClass.call(this, player, { title: player.localize('Quality') }));

                self.labelEl_ = _this2.subMenu(true);
                self.labelEl_ = self.labelEl_.querySelector('.play-control-value');
                self.updateDisplayText();
                return _this2;
            }

            /**
             * Creates button items.
             *
             * @return {Array} - Button items
             */


            ConcreteButtonClass.prototype.createItems = function createItems() {
                return [];
            };

            return ConcreteButtonClass;
        }(videoJsButtonClass);

        this._qualityButton = new ConcreteButtonClass();

        var placementIndex = player.controlBar.children().length - 2;
        var concreteButtonInstance = player.controlBar.SettingsGroup.Settings.addChild(this._qualityButton, { componentClass: 'qualitySelector' }, placementIndex);
        concreteButtonInstance.addClass('play-quality-selector');
        setTimeout(function () {
            player.on('loadedmetadata', function () {
                if (player.qualityLevels().levels_.length <= 1) {
                    player.controlBar.SettingsGroup.Settings.removeChild(concreteButtonInstance);
                }
            });
        }, 150);
        concreteButtonInstance.menuButton_.setAttribute('title', player.localize('Quality'));
        concreteButtonInstance.menuButton_.$('.play-icon-placeholder').className += ' play-icon-hd';
        concreteButtonInstance.menuButton_.$('.play-control-text').innerHTML += player.localize('Quality');
        concreteButtonInstance.removeClass('play-hidden');
    };

    /**
     * Builds individual quality menu items.
     *
     * @param {Object} item - Individual quality menu item.
     * @return {ConcreteMenuItemClass} - Menu item
     */


    HlsQualitySelectorPlugin.prototype.getQualityMenuItem = function getQualityMenuItem(item) {
        var player = this.player;
        var videoJsMenuItemClass = videojs$1.getComponent('MenuItem');

        /**
         * Extend vjs menu item class.
         */

        var ConcreteMenuItemClass = function (_videoJsMenuItemClass) {
            inherits(ConcreteMenuItemClass, _videoJsMenuItemClass);

            /**
             * Menu item constructor.
             *
             * @param {Player} _player - vjs player
             * @param {Object} _item - Item object
             * @param {ConcreteButtonClass} qualityButton - The containing button.
             * @param {HlsQualitySelectorPlugin} _plugin - This plugin instance.
             */
            function ConcreteMenuItemClass(_player, _item, qualityButton, _plugin) {
                classCallCheck(this, ConcreteMenuItemClass);

                if (_player.options_.defaultQuality && _item.value === _player.options_.defaultQuality) {
                    _player.hlsQualitySelector.setQuality(_player.options_.defaultQuality);
                }

                var _this3 = possibleConstructorReturn(this, _videoJsMenuItemClass.call(this, _player, {
                    label: item.label,
                    selectable: true,
                    selected: item.selected || false
                }));

                _this3.item = _item;
                _this3.qualityButton = qualityButton;
                _this3.plugin = _plugin;
                return _this3;
            }

            /**
             * Click event for menu item.
             */


            ConcreteMenuItemClass.prototype.handleClick = function handleClick() {
                // Reset other menu items selected status.
                for (var i = 0; i < this.qualityButton.items.length; ++i) {
                    this.qualityButton.items[i].selected(false);
                }

                // Set this menu item to selected, and set quality.
                this.plugin.setQuality(this.item.value);
                this.selected(true);
                var playControl = document.querySelector('.play-settings > .play-control');
                playControl.classList.add("play-hidden");
            };

            return ConcreteMenuItemClass;
        }(videoJsMenuItemClass);

        return new ConcreteMenuItemClass(player, item, this._qualityButton, this);
    };

    /**
     * Executed when a quality level is added from HLS playlist.
     */


    HlsQualitySelectorPlugin.prototype.onAddQualityLevel = function onAddQualityLevel() {
        var _this4 = this;

        this.player.on('loadedmetadata', function () {
            var player = _this4.player;
            var qualityList = player.qualityLevels();
            var levels = qualityList.levels_ || [];
            var levelItems = [];

            var _loop = function _loop(i) {
                if (!levelItems.filter(function (_existingItem) {
                    return _existingItem.item && _existingItem.item.value === levels[i].height;
                }).length) {
                    bitRate = _this4.ResolutionFinder(levels[i].height);

                    var levelItem = _this4.getQualityMenuItem.call(_this4, {
                        label: levels[i].height + '' + bitRate,
                        value: levels[i].height
                    });

                    levelItems.push(levelItem);
                }
            };

            for (var i = 0; i < levels.length; ++i) {
                var bitRate;

                _loop(i);
            }

            levelItems.sort(function (current, next) {
                if ((typeof current === 'undefined' ? 'undefined' : _typeof(current)) !== 'object' || (typeof next === 'undefined' ? 'undefined' : _typeof(next)) !== 'object') {
                    return -1;
                }
                if (current.item.value < next.item.value) {
                    return -1;
                }
                if (current.item.value > next.item.value) {
                    return 1;
                }
                return 0;
            });

            levelItems.push(_this4.getQualityMenuItem.call(_this4, {
                label: player.localize('Auto'),
                value: 'auto',
                selected: true
            }));

            if (_this4._qualityButton) {
                _this4._qualityButton.createItems = function () {
                    return levelItems;
                };
                _this4._qualityButton.update();
            }
        });
    };

    /**
     * Sets quality (based on media height)
     *
     * @param {number} height - A number representing HLS playlist.
     */


    HlsQualitySelectorPlugin.prototype.setQuality = function setQuality(height) {
        var qualityList = this.player.qualityLevels();

        for (var i = 0; i < qualityList.length; ++i) {
            var quality = qualityList[i];

            quality.enabled = quality.height === height || height === 'auto';
            if (quality.enabled && this.selectedQuality !== height) {
                this.selectedQuality = height;
                this.updateDisplayText();
            }
        }
        this._qualityButton.unpressButton();
    };

    HlsQualitySelectorPlugin.prototype.updateDisplayText = function updateDisplayText(text) {
        if (this.selectedQuality + '' === 'auto') {
            var bitRate = this.ResolutionFinder(text);
            this.labelEl_.innerHTML = this.player.localize('Auto') + ' ' + ' <span class="play-auto-selected-quality">' + (text ? text + bitRate : '</span>');
        } else if (this.selectedQuality) {
            var bitRate = this.ResolutionFinder(this.selectedQuality);
            this.labelEl_.innerHTML = this.selectedQuality + bitRate;
        }
    };

    HlsQualitySelectorPlugin.prototype.ResolutionFinder = function ResolutionFinder(resolution) {
        var videoResolution = 'p';
        if (resolution >= 720 && resolution <= 1080) {
            videoResolution = 'p<sup> HD</sup>';
        } else if (resolution > 1080) {
            videoResolution = 'p<sup> 4K</sup>';
        }
        return videoResolution;
    };

    return HlsQualitySelectorPlugin;
}();

/**
 * Function to invoke when the player is ready.
 *
 * This is a great place for your plugin to initialize itself. When this
 * function is called, the player will have its DOM and child components
 * in place.
 *
 * @function onPlayerReady
 * @param    {Player} player
 *           A Video.js player object.
 *
 * @param    {Object} [options={}]
 *           A plain object containing options for the plugin.
 */


var onPlayerReady = function onPlayerReady(player, options) {
    player.addClass('play-hls-quality-selector');
    player.hlsQualitySelector = new HlsQualitySelectorPlugin(player, options);
};

/**
 * A video.js plugin.
 *
 * In the plugin function, the value of `this` is a video.js `Player`
 * instance. You cannot rely on the player being in a "ready" state here,
 * depending on how the plugin is invoked. This may or may not be important
 * to you; if not, remove the wait for "ready"!import { document } from 'global/document';

 *
 * @function hlsQualitySelector
 * @param    {Object} [options={}]
 *           An object of options left to the plugin author to define.
 */
var hlsQualitySelector = function hlsQualitySelector(options) {
    var _this5 = this;

    this.ready(function () {
        onPlayerReady(_this5, videojs$1.mergeOptions(defaults$1, options));
    });
};

// Register the plugin with video.js.
registerPlugin$1('hlsQualitySelector', hlsQualitySelector);

var Button$1 = videojs$1.getComponent('Button');
var Component$2 = videojs$1.getComponent('Component');

// Default options for the plugin.
var defaults$2 = {
    forward: 10,
    back: 10
};

// Cross-compatibility for Video.js 5 and 6.
var registerPlugin$2 = videojs$1.registerPlugin || videojs$1.plugin;
// const dom = videojs.dom || videojs;

/**
 * Function to invoke when the player is ready.
 *
 * This is a great place for your plugin to initialize itself. When this
 * function is called, the player will have its DOM and child components
 * in place.
 *
 * @function onPlayerReady
 * @param    {Player} player
 *           A Video.js player object.
 *
 * @param    {Object} [options={}]
 *           A plain object containing options for the plugin.
 */
var onPlayerReady$1 = function onPlayerReady(player, options) {
    if (player.options_.midrol) {
        player.adsLine = 0;
    } else {
        player.adsLine = 1;
    }

    player.addClass('play-seek-buttons');

    if (options.forward && options.forward > 0) {
        player.seekForward = player.addChild('seekButton', {
            direction: 'forward',
            seconds: options.forward
        });
        player.el().appendChild(player.seekForward.el(), player.el().firstChild.nextSibling);
    }

    if (options.back && options.back > 0) {
        player.seekBack = player.addChild('seekButton', {
            direction: 'back',
            seconds: options.back
        });
        player.el().appendChild(player.seekBack.el(), player.el().childNodes[0]);
    }

    player.on('playing', function () {
        if (player.adsLine == 0) {
            var duration = this.player_.duration();
            var progressWidth = document.getElementsByClassName('play-slider')[0].offsetWidth;
            var perSecond = progressWidth / duration;
            var time = player.options_.midrol;
            time.forEach(function (element) {
                var ads = document.getElementsByClassName('play-load-progress')[0];
                ads.innerHTML += '<div class="adsLine" style=left:' + perSecond * element + 'px></div>';
            });
            player.adsLine = 1;
        }
        var seekButton = document.getElementsByClassName('play-seek-button');
        var ad = document.getElementsByClassName('play-ads-label').length;
        if (seekButton.length > 0 && ad == 0) {
            if (this.player_.duration() !== Infinity) {
                for (var i = 0; i < seekButton.length; i++) {
                    seekButton[i].style.display = 'block';
                }
            } else {
                var controlBlock = document.getElementsByClassName('volumn-time-control-group');
                for (var j = 0; j < controlBlock.length; j++) {
                    // console.log(controlBlock[j].className);
                    if (controlBlock[j].className.indexOf('is_live') == -1) {
                        controlBlock[j].className = controlBlock[j].classList + ' is_live';
                    }
                }
            }

            // document.getElementsByClassName('play-settings')[0].style.display = 'block';
            //  document.getElementsByClassName('play-volume-control')[0].style.display = 'block';

        }
    });
};

/**
 * A video.js plugin.
 *
 * In the plugin function, the value of `this` is a video.js `Player`
 * instance. You cannot rely on the player being in a "ready" state here,
 * depending on how the plugin is invoked. This may or may not be important
 * to you; if not, remove the wait for "ready"!import { document } from 'global/document';

 *
 * @function seekButtons
 * @param    {Object} [options={}]
 *           An object of options left to the plugin author to define.
 */
var seekButtons = function seekButtons(options) {
    var _this = this;

    this.ready(function () {
        onPlayerReady$1(_this, videojs$1.mergeOptions(defaults$2, options));
    });
};

/**
 * Button to seek forward/back
 *
 * @extends Button
 * @class SeekToggle
 */

var SeekButton = function (_Button) {
    inherits(SeekButton, _Button);

    /**
     * SeekButton constructor
     *
     * @param {Player|Object} player - vjs player
     * @param {Object=} options - default options
     */
    function SeekButton(player, options) {
        classCallCheck(this, SeekButton);

        var _this2 = possibleConstructorReturn(this, _Button.call(this, player, options));

        if (_this2.options_.direction === 'forward') {
            _this2.controlText(_this2.localize('Seek forward {{seconds}} seconds').replace('{{seconds}}', _this2.options_.seconds));
        } else if (_this2.options_.direction === 'back') {
            _this2.controlText(_this2.localize('Seek back {{seconds}} seconds').replace('{{seconds}}', _this2.options_.seconds));
        }
        return _this2;
    }

    /**
     * Build css classes for the seek button.
     *
     * @return {SeekButtonClass} - seek button
     */


    SeekButton.prototype.buildCSSClass = function buildCSSClass() {
        /* Each button will have the classes:
           `play-seek-button`
           `skip-forward` or `skip-back`
           `skip-n` where `n` is the number of seconds
           So you could have a generic icon for "skip back" and a more
           specific one for "skip back 30 seconds"
        */
        return 'play-seek-button skip-' + this.options_.direction + ' ' + ('skip-' + this.options_.seconds + ' ' + _Button.prototype.buildCSSClass.call(this));
    };

    /**
     * Click event for seek buttons.
     */


    SeekButton.prototype.handleClick = function handleClick() {
        var now = this.player_.currentTime();

        if (this.options_.direction === 'forward') {
            var seekTime = now + this.options_.seconds;

            if (this.player_.duration() >= seekTime) {
                this.player_.currentTime(seekTime);
            }
        } else if (this.options_.direction === 'back') {
            var _seekTime = now - this.options_.seconds;

            if (this.options_.seconds <= this.player_.currentTime()) {
                this.player_.currentTime(_seekTime);
            }
        }
    };

    return SeekButton;
}(Button$1);

Component$2.registerComponent('SeekButton', SeekButton);

// Register the plugin with video.js.
registerPlugin$2('seekButtons', seekButtons);

// Default options for the plugin.
var defaults$3 = {};

// Cross-compatibility for Video.js 5 and 6.
var registerPlugin$3 = videojs$1.registerPlugin || videojs$1.plugin;
// const dom = videojs.dom || videojs;

/**
 * VideoJS HLS Quality Selector Plugin class.
 *
 * @param {Object} [player] passes the player object for the keyboard shortcuts plugin
 * @param {Object} [options] passes the keyboard shortcuts for the keyboard events
 * @return {Object} returns the created object for keyboard shortcuts
 */
var KeyboardShortCutsPlugin = function KeyboardShortCutsPlugin(player, options) {
  var pEl = player.el();
  var doc = document$1;
  var defOptions = {
    volumeStep: 0.1,
    seekStep: 10,
    enableMute: true,
    enableFullscreen: true,
    enableNumbers: true,
    enableJogStyle: false,
    alwaysCaptureHotkeys: false,
    enableModifiersForNumbers: true,
    enableInactiveFocus: true,
    skipInitialFocus: false,
    playPauseKey: playPauseKey,
    rewindKey: rewindKey,
    forwardKey: forwardKey,
    volumeUpKey: volumeUpKey,
    volumeDownKey: volumeDownKey,
    muteKey: muteKey,
    fullscreenKey: fullscreenKey,
    customKeys: {}
  };

  var cPlay = 1;
  var cRewind = 2;
  var cForward = 3;
  var cVolumeUp = 4;
  var cVolumeDown = 5;
  var cMute = 6;
  var cFullscreen = 7;

  // Use built-in merge function from Video.js v5.0+ or v4.4.0+
  var mergeOptions = videojs$1.mergeOptions || videojs$1.util.mergeOptions;

  options = mergeOptions(defOptions, options || {});

  var volumeStep = options.volumeStep;
  var seekStep = options.seekStep;
  var enableMute = options.enableMute;
  var enableFull = options.enableFullscreen;
  var enableNumbers = options.enableNumbers;
  var enableJogStyle = options.enableJogStyle;
  var alwaysCaptureHotkeys = options.alwaysCaptureHotkeys;
  var enableModifiersForNumbers = options.enableModifiersForNumbers;
  var enableInactiveFocus = options.enableInactiveFocus;
  var skipInitialFocus = options.skipInitialFocus;

  // Set default player tabindex to handle keydown and doubleclick events
  if (!pEl.hasAttribute('tabIndex')) {
    pEl.setAttribute('tabIndex', '-1');
  }

  // Remove player outline to fix video performance issue
  pEl.style.outline = 'none';

  if (alwaysCaptureHotkeys || !player.autoplay()) {
    if (!skipInitialFocus) {
      player.one('play', function () {
        pEl.focus();
      });
    }
  }

  if (enableInactiveFocus) {
    player.on('userinactive', function () {
      // When the control bar fades, re-apply focus to the player if last focus was a control button
      var focusingPlayerTimeout = setTimeout(function () {
        player.off('useractive', function () {
          clearTimeout(focusingPlayerTimeout);
        });
        var activeElement = doc.activeElement;
        var controlBar = pEl.querySelector('.play-control-bar');

        if (activeElement && activeElement.parentElement === controlBar) {
          pEl.focus();
        }
      }, 10);

      player.one('useractive', function () {
        clearTimeout(focusingPlayerTimeout);
      });
    });
  }

  player.on('play', function () {
    // Fix allowing the YouTube plugin to have hotkey support.
    var ifblocker = pEl.querySelector('.iframeblocker');

    if (ifblocker && ifblocker.style.display === '') {
      ifblocker.style.display = 'block';
      ifblocker.style.bottom = '39px';
    }
  });

  var checkKeys = function checkKeys(e, checkPlayer) {
    // Allow some modularity in defining custom hotkeys

    // Play/Pause check
    if (options.playPauseKey(e, checkPlayer)) {
      return cPlay;
    }

    // Seek Backward check
    if (options.rewindKey(e, checkPlayer)) {
      return cRewind;
    }

    // Seek Forward check
    if (options.forwardKey(e, checkPlayer)) {
      return cForward;
    }

    // Volume Up check
    if (options.volumeUpKey(e, checkPlayer)) {
      return cVolumeUp;
    }

    // Volume Down check
    if (options.volumeDownKey(e, checkPlayer)) {
      return cVolumeDown;
    }

    // Mute check
    if (options.muteKey(e, checkPlayer)) {
      return cMute;
    }

    // Fullscreen check
    if (options.fullscreenKey(e, checkPlayer)) {
      return cFullscreen;
    }
  };

  var keyDown = function keyDown(event) {
    var eventWhich = event.which;
    var wasPlaying = void 0;
    var seekTime = void 0;
    var ePreventDefault = event.preventDefault;
    var duration = player.duration();
    // When controls are disabled, hotkeys will be disabled as well

    if (player.controls()) {

      // Don't catch keys if any control buttons are focused, unless alwaysCaptureHotkeys is true
      var activeEl = doc.activeElement;

      if (alwaysCaptureHotkeys || activeEl === pEl || activeEl === pEl.querySelector('.play-tech') || activeEl === pEl.querySelector('.play-control-bar') || activeEl === pEl.querySelector('.iframeblocker')) {

        switch (checkKeys(event, player)) {
          // Spacebar toggles play/pause
          case cPlay:
            ePreventDefault();
            if (alwaysCaptureHotkeys) {
              // Prevent control activation with space
              event.stopPropagation();
            }

            if (player.paused()) {
              player.play();
            } else {
              player.pause();
            }
            break;

          // Seeking with the left/right arrow keys
          // Seek Backward
          case cRewind:
            wasPlaying = !player.paused();
            ePreventDefault();
            if (wasPlaying) {
              player.pause();
            }
            seekTime = player.currentTime() - seekStepD(event);
            // The flash player tech will allow you to seek into negative
            // numbers and break the seekbar, so try to prevent that.
            if (seekTime <= 0) {
              seekTime = 0;
            }
            player.currentTime(seekTime);
            if (wasPlaying) {
              player.play();
            }
            break;
          case cForward:
            // Seek Forward
            wasPlaying = !player.paused();
            ePreventDefault();
            if (wasPlaying) {
              player.pause();
            }
            seekTime = player.currentTime() + seekStepD(event);
            // Fixes the player not sending the end event if you
            // try to seek past the duration on the seekbar.
            if (seekTime >= duration) {
              seekTime = wasPlaying ? duration - 0.001 : duration;
            }
            player.currentTime(seekTime);
            if (wasPlaying) {
              player.play();
            }
            break;

          // Volume control with the up/down arrow keys
          case cVolumeDown:
            ePreventDefault();
            if (!enableJogStyle) {
              player.volume(player.volume() - volumeStep);
            } else {
              seekTime = player.currentTime() - 1;
              if (player.currentTime() <= 1) {
                seekTime = 0;
              }
              player.currentTime(seekTime);
            }
            break;
          case cVolumeUp:
            ePreventDefault();
            if (!enableJogStyle) {
              player.volume(player.volume() + volumeStep);
            } else {
              seekTime = player.currentTime() + 1;
              if (seekTime >= duration) {
                seekTime = duration;
              }
              player.currentTime(seekTime);
            }
            break;

          // Toggle Mute with the M key
          case cMute:
            if (enableMute) {
              player.muted(!player.muted());
            }
            break;

          // Toggle Fullscreen with the F key
          case cFullscreen:
            if (enableFull) {
              if (player.isFullscreen()) {
                player.exitFullscreen();
              } else {
                player.requestFullscreen();
              }
            }
            break;

          default:
            // Number keys from 0-9 skip to a percentage of the video. 0 is 0% and 9 is 90%
            if (eventWhich > 47 && eventWhich < 59 || eventWhich > 95 && eventWhich < 106) {
              // Do not handle if enableModifiersForNumbers set to false and keys are Ctrl, Cmd or Alt
              if (enableModifiersForNumbers || !(event.metaKey || event.ctrlKey || event.altKey)) {
                if (enableNumbers) {
                  var sub = 48;

                  if (eventWhich > 95) {
                    sub = 96;
                  }
                  var number = eventWhich - sub;

                  ePreventDefault();
                  player.currentTime(player.duration() * number * 0.1);
                }
              }
            }

            // Handle any custom hotkeys
            for (var customKey in options.customKeys) {
              var customHotkey = options.customKeys[customKey];
              // Check for well formed custom keys

              if (customHotkey && customHotkey.key && customHotkey.handler) {
                // Check if the custom key's condition matches
                if (customHotkey.key(event)) {
                  ePreventDefault();
                  customHotkey.handler(player, options, event);
                }
              }
            }
        }
      }
    }
  };

  /**
   * Function to identify play pause which key
   *
   * @param {Object} e event object
   * @return {boolean} returns true or false for the event
   */
  function playPauseKey(e) {
    // Space bar or MediaPlayPause
    return e.which === 32 || e.which === 179;
  }

  /**
   * Function to identify rewind key which key
   *
   * @param {Object} e event object
   * @return {boolean} returns true or false for the event
   */
  function rewindKey(e) {
    // Left Arrow or MediaRewind
    return e.which === 37 || e.which === 177;
  }

  /**
   * Function to identify forward which key
   *
   * @param {Object} e event object
   * @return {boolean} returns true or false for the event
   */
  function forwardKey(e) {
    // Right Arrow or MediaForward
    return e.which === 39 || e.which === 176;
  }

  /**
   * Function to identify volume up which key
   *
   * @param {Object} e event object
   * @return {boolean} returns true or false for the event
   */
  function volumeUpKey(e) {
    // Up Arrow
    return e.which === 38;
  }

  /**
   * Function to identify volume down which key
   *
   * @param {Object} e event object
   * @return {boolean} returns true or false for the event
   */
  function volumeDownKey(e) {
    // Down Arrow
    return e.which === 40;
  }

  /**
   * Function to identify mute which key
   *
   * @param {Object} e event object
   * @return {boolean} returns true or false for the event
   */
  function muteKey(e) {
    // M key
    return e.which === 77;
  }

  /**
   * Function to identify Full screen which key
   *
   * @param {Object} e event object
   * @return {boolean} returns true or false for the event
   */
  function fullscreenKey(e) {
    // F key
    return e.which === 70;
  }

  /**
   * Function to identify seek step by step which key
   *
   * @param {Object} e event object
   * @return {boolean} returns true or false for the event
   */
  function seekStepD(e) {
    // SeekStep caller, returns an int, or a function returning an int
    return typeof seekStep === 'function' ? seekStep(e) : seekStep;
  }

  player.on('keydown', keyDown);
  // player.on('dblclick', doubleClick);

  return this;
};

/**
 * Function to invoke when the player is ready.
 *
 * This is a great place for your plugin to initialize itself. When this
 * function is called, the player will have its DOM and child components
 * in place.
 *
 * @function onPlayerReady
 * @param    {Player} player
 *           A Video.js player object.
 *
 * @param    {Object} [options={}]
 *           A plain object containing options for the plugin.
 */
var onPlayerReady$2 = function onPlayerReady(player, options) {
  player.keyboardShortCuts = new KeyboardShortCutsPlugin(player, options);
};

/**
 * A video.js plugin.
 *
 * In the plugin function, the value of `this` is a video.js `Player`
 * instance. You cannot rely on the player being in a "ready" state here,
 * depending on how the plugin is invoked. This may or may not be important
 * to you; if not, remove the wait for "ready"!
 *
 * @function keyboardShortCuts
 * @param    {Object} [options={}]
 *           An object of options left to the plugin author to define.
 */
var keyboardShortCuts = function keyboardShortCuts(options) {
  var _this = this;

  this.ready(function () {
    onPlayerReady$2(_this, videojs$1.mergeOptions(defaults$3, options));
  });
};

// Register the plugin with video.js.
registerPlugin$3('keyboardShortCuts', keyboardShortCuts);

// Default options for the plugin.
var defaults$4 = {
    position: 'top-right',
    fadeTime: 3000,
    url: 'https://d2rq7c4c4iu0a6.cloudfront.net/common/logonew.png',
    image: "https://d2rq7c4c4iu0a6.cloudfront.net/common/logonew.png"
};
/**
 * Sets up the div, img and optional a tags for the plugin.
 *
 * @function setupWatermark
 * @param    {Player} player
 * @param    {Object} [options={}]
 */
var setupWatermark = function setupWatermark(player, options) {
    // Add a div and img tag
    var videoEl = player.el();
    var div = document.createElement('div');
    var img = document.createElement('img');

    div.classList.add('vjs-watermark-content');
    div.classList.add('vjs-watermark-' + options.position);
    img.src = options.image;

    // if a url is provided make the image link to that URL.

    if (options.url) {
        var a = document.createElement('a');

        a.href = options.url;
        // if the user clicks the link pause and open a new window
        a.onclick = function (e) {
            e.preventDefault();
            player.pause();
            window.open(options.url);
        };
        a.appendChild(img);
        div.appendChild(a);
    } else {
        div.appendChild(img);
    }
    videoEl.appendChild(div);
};

/**
 * Fades the watermark image.
 *
 * @function fadeWatermark
 * @param    {Object} [options={
 *                  fadeTime:
 *                  'The number of milliseconds before the inital watermark fade out'}]
 */
var fadeWatermark = function fadeWatermark(options) {
    setTimeout(function () {
        return document.getElementsByClassName('vjs-watermark-content')[0].classList.add('vjs-watermark-fade');
    }, options.fadeTime);
};

/**
 * Function to invoke when the player is ready.
 *
 * This is a great place for your plugin to initialize itself. When this
 * function is called, the player will have its DOM and child components
 * in place.
 *
 * @function onPlayerReady
 * @param    {Player} player
 * @param    {Object} [options={}]
 */
var onPlayerReady$3 = function onPlayerReady(player, options) {
    player.addClass('vjs-watermark');
    // if there is no image set just exit
    if (!options.image) {
        return;
    }
    setupWatermark(player, options);

    // Setup watermark autofade
    if (options.fadeTime === null) {
        return;
    }

    player.on('play', function () {
        return fadeWatermark(options);
    });
};

/**
 * A video.js plugin.
 *
 * In the plugin function, the value of `this` is a video.js `Player`
 * instance. You cannot rely on the player being in a "ready" state here,
 * depending on how the plugin is invoked. This may or may not be important
 * to you; if not, remove the wait for "ready"!import { debounce } from '../../js/utils/fn';

 *
 * @function watermark
 * @param    {Object} [options={}]
 *           An object of options left to the plugin author to define.
 */
var watermark = function watermark(options) {
    var _this = this;

    this.options_.licenceId ? defaults$4.image = this.options_.waterMarker : '';
    this.ready(function () {
        onPlayerReady$3(_this, videojs$1.mergeOptions(defaults$4, options));
    });
};

// Register the plugin with video.js.
videojs$1.registerPlugin('watermark', watermark);

// Include the version number.
watermark.VERSION = '__VERSION__';

/**
 * Set up sprite thumbnails for a player.
 *
 * @function spriteThumbs
 * @param {Player} player
 *        The current player instance.
 * @param {Object} options
 *        Configuration options.
 */
function spriteThumbs(player, options) {
    var url = options.url;
    var height = options.height;
    var width = options.width;
    var responsive = options.responsive;

    if (!url || !height || !width) {
        return;
    }

    var dom = videojs$1.dom || videojs$1;
    var controls = player.controlBar;
    var progress = controls.progressControl;
    var seekBar = progress.seekBar;
    var mouseTimeDisplay = seekBar.mouseTimeDisplay;

    if (!mouseTimeDisplay) {
        return;
    }

    var tooltipStyle = function tooltipStyle(obj) {
        Object.keys(obj).forEach(function (key) {
            var val = obj[key];
            var ttstyle = mouseTimeDisplay.timeTooltip.el_.style;

            if (val !== '') {
                ttstyle.setProperty(key, val);
            } else {
                ttstyle.removeProperty(key);
            }
        });
    };

    var columns = 0;
    var imgWidth = 0;
    var imgHeight = 0;

    // load sprite early
    dom.createEl('img', {
        src: url
    }).onload = function (ev) {
        var target = ev.target;

        imgWidth = target.naturalWidth;
        imgHeight = target.naturalHeight;
        columns = imgWidth / width;
    };

    tooltipStyle({
        'width': '',
        'height': '',
        'background-image': '',
        'background-repeat': '',
        'background-position': '',
        'background-size': '',
        'top': '',
        'color': '',
        'text-shadow': '',
        'border': '',
        'margin': ''
    });

    var hijackMouseTooltip = function hijackMouseTooltip() {
        if (!columns) {
            return;
        }

        var hoverPosition = parseFloat(mouseTimeDisplay.el_.style.left);

        hoverPosition = player.duration() * (hoverPosition / seekBar.el_.clientWidth);
        if (isNaN(hoverPosition)) {
            return;
        }

        hoverPosition = hoverPosition / options.interval;

        var playerWidth = player.el_.clientWidth;
        var scaleFactor = responsive && playerWidth < responsive ? playerWidth / responsive : 1;
        var scaledWidth = width * scaleFactor;
        var scaledHeight = height * scaleFactor;
        var cleft = Math.floor(hoverPosition % columns) * -scaledWidth;
        var ctop = Math.floor(hoverPosition / columns) * -scaledHeight;
        var bgSize = imgWidth * scaleFactor + 'px ' + imgHeight * scaleFactor + 'px';
        var controlsTop = dom.getBoundingClientRect(controls.el_).top;
        var seekBarTop = dom.getBoundingClientRect(seekBar.el_).top;
        // top of seekBar is 0 position
        var topOffset = -scaledHeight;

        if (controlsTop < seekBarTop) {
            topOffset -= seekBarTop - controlsTop;
        }

        tooltipStyle({
            'width': scaledWidth + 'px',
            'height': scaledHeight + 'px',
            'background-image': 'url(' + url + ')',
            'background-repeat': 'no-repeat',
            'background-position': cleft + 'px ' + ctop + 'px',
            'background-size': bgSize,
            'top': topOffset + 'px',
            'color': '#fff',
            'text-shadow': '1px 1px #000',
            'border': '1px solid #000',
            'margin': '0 1px'
        });
    };

    player.ready(function () {
        progress.on('mousemove', hijackMouseTooltip);
        progress.on('touchmove', hijackMouseTooltip);
    });
    player.addClass('vjs-sprite-thumbnails');
}

//import { version as VERSION } from './package.json';
/**
 * Default plugin options
 *
 * @param {String} url
 *        Sprite location. Must be set by user.
 * @param {Integer} width
 *        Width in pixels of a thumbnail. Must be set by user.
 * @param {Integer} height
 *        Height in pixels of a thumbnail. Must be set by user.
 * @param {Number} interval
 *        Interval between thumbnail frames in seconds. Default: 1.
 * @param {Integer} responsive
 *        Width of player below which thumbnails are reponsive. Default: 600.
 */
var defaults$5 = {
  url: '',
  width: 0,
  height: 0,
  interval: 1,
  responsive: 600
};

/**
 * The video.js sprite thumbnails plugin.
 *
 * Invokes spriteThumbs to set up and display thumbnails from a sprite image
 * when the user hovers over the progress bar.
 *
 * @function spriteThumbnails
 * @param    {Object} options
 *           Object accepting 4 plugin configuration parameters.
 */
var spriteThumbnails = function spriteThumbnails(options) {
  spriteThumbs(this, videojs$1.mergeOptions(defaults$5, options));
};

// Register the plugin with video.js.
videojs$1.registerPlugin('spriteThumbnails', spriteThumbnails);

// Include the version number.
spriteThumbnails.VERSION = '__VERSION__';

// (function(global, factory) {
//     typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('../../js/video.js')) :
//         typeof define === 'function' && define.amd ? define(['../../js/video.js'], factory) :
//         (factory(global.videojs));
// }(this, (function(videojs) {
// 'use strict';

// videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IMA SDK integration plugin for Video.js. For more information see
 * https://www.github.com/googleads/videojs-ima
 */

/**
 * Wraps the video.js player for the plugin.
 *
 * @param {Object} player Video.js player instance.
 * @param {Object} adsPluginSettings Settings for the contrib-ads plugin.
 * @param {Controller} controller Reference to the parent controller.
 */
var PlayerWrapper = function PlayerWrapper(player, adsPluginSettings, controller) {
    /**
     * Instance of the video.js player.
     */
    this.vjsPlayer = player;

    /**
     * Plugin controller.
     */
    this.controller = controller;

    /**
     * Timer used to track content progress.
     */
    this.contentTrackingTimer = null;

    /**
     * True if our content video has completed, false otherwise.
     */
    this.contentComplete = false;

    /**
     * Handle to interval that repeatedly updates current time.
     */
    this.updateTimeIntervalHandle = null;

    /**
     * Interval (ms) to check for player resize for fluid support.
     */
    this.updateTimeInterval = 1000;

    /**
     * Handle to interval that repeatedly checks for seeking.
     */
    this.seekCheckIntervalHandle = null;

    /**
     * Interval (ms) on which to check if the user is seeking through the
     * content.
     */
    this.seekCheckInterval = 1000;

    /**
     * Handle to interval that repeatedly checks for player resize.
     */
    this.resizeCheckIntervalHandle = null;

    /**
     * Interval (ms) to check for player resize for fluid support.
     */
    this.resizeCheckInterval = 250;

    /**
     * Threshold by which to judge user seeking. We check every 1000 ms to see
     * if the user is seeking. In order for us to decide that they are *not*
     * seeking, the content video playhead must only change by 900-1100 ms
     * between checks. Any greater change and we assume the user is seeking
     * through the video.
     */
    this.seekThreshold = 100;

    /**
     * Content ended listeners passed by the publisher to the plugin. Publishers
     * should allow the plugin to handle content ended to ensure proper support
     * of custom ad playback.
     */
    this.contentEndedListeners = [];

    /**
     * Stores the content source so we can re-populate it manually after a
     * post-roll on iOS.
     */
    this.contentSource = '';

    /**
     * Stores data for the content playhead tracker.
     */
    this.contentPlayheadTracker = {
        currentTime: 0,
        previousTime: 0,
        seeking: false,
        duration: 0
    };

    /**
     * Player dimensions. Used in our resize check.
     */
    this.vjsPlayerDimensions = {
        width: this.getPlayerWidth(),
        height: this.getPlayerHeight()
    };

    /**
     * Video.js control bar.
     */
    this.vjsControls = this.vjsPlayer.getChild('controlBar');

    /**
     * Vanilla HTML5 video player underneath the video.js player.
     */
    this.h5Player = null;

    this.boundContentEndedListener = this.localContentEndedListener.bind(this);
    this.vjsPlayer.on('contentended', this.boundContentEndedListener);
    this.vjsPlayer.on('dispose', this.playerDisposedListener.bind(this));
    this.vjsPlayer.on('readyforpreroll', this.onReadyForPreroll.bind(this));
    this.vjsPlayer.ready(this.onPlayerReady.bind(this));
    this.vjsPlayer.one('play', this.setUpPlayerIntervals.bind(this));

    this.vjsPlayer.ads(adsPluginSettings);
};

/**
 * Set up the intervals we use on the player.
 */
PlayerWrapper.prototype.setUpPlayerIntervals = function () {

    this.updateTimeIntervalHandle = setInterval(this.updateCurrentTime.bind(this), this.updateTimeInterval);
    this.seekCheckIntervalHandle = setInterval(this.checkForSeeking.bind(this), this.seekCheckInterval);
    this.resizeCheckIntervalHandle = setInterval(this.checkForResize.bind(this), this.resizeCheckInterval);
};

/**
 * Updates the current time of the video
 */
PlayerWrapper.prototype.updateCurrentTime = function () {
    if (!this.contentPlayheadTracker.seeking) {
        this.contentPlayheadTracker.currentTime = this.vjsPlayer.currentTime();
    }
};

/**
 * Detects when the user is seeking through a video.
 * This is used to prevent mid-rolls from playing while a user is seeking.
 *
 * There *is* a seeking property of the HTML5 video element, but it's not
 * properly implemented on all platforms (e.g. mobile safari), so we have to
 * check ourselves to be sure.
 */
PlayerWrapper.prototype.checkForSeeking = function () {
    var tempCurrentTime = this.vjsPlayer.currentTime();
    var diff = (tempCurrentTime - this.contentPlayheadTracker.previousTime) * 1000;
    if (Math.abs(diff) > this.seekCheckInterval + this.seekThreshold) {
        this.contentPlayheadTracker.seeking = true;
    } else {
        this.contentPlayheadTracker.seeking = false;
    }
    this.contentPlayheadTracker.previousTime = this.vjsPlayer.currentTime();
};

/**
 * Detects when the player is resized (for fluid support) and resizes the
 * ads manager to match.
 */
PlayerWrapper.prototype.checkForResize = function () {
    var currentWidth = this.getPlayerWidth();
    var currentHeight = this.getPlayerHeight();

    if (currentWidth != this.vjsPlayerDimensions.width || currentHeight != this.vjsPlayerDimensions.height) {
        this.vjsPlayerDimensions.width = currentWidth;
        this.vjsPlayerDimensions.height = currentHeight;
        this.controller.onPlayerResize(currentWidth, currentHeight);
    }
};

/**
 * Local content ended listener for contentComplete.
 */
PlayerWrapper.prototype.localContentEndedListener = function () {
    if (!this.contentComplete) {
        this.contentComplete = true;
        this.controller.onContentComplete();
    }

    for (var index in this.contentEndedListeners) {
        if (typeof this.contentEndedListeners[index] === 'function') {
            this.contentEndedListeners[index]();
        }
    }

    clearInterval(this.updateTimeIntervalHandle);
    clearInterval(this.seekCheckIntervalHandle);
    clearInterval(this.resizeCheckIntervalHandle);
    if (this.vjsPlayer.el()) {
        this.vjsPlayer.one('play', this.setUpPlayerIntervals.bind(this));
    }
};

/**
 * Called when it's time to play a post-roll but we don't have one to play.
 */
PlayerWrapper.prototype.onNoPostroll = function () {
    this.vjsPlayer.trigger('nopostroll');
};

/**
 * Detects when the video.js player has been disposed.
 */
PlayerWrapper.prototype.playerDisposedListener = function () {
    this.contentEndedListeners = [];
    this.controller.onPlayerDisposed();

    this.contentComplete = true;
    this.vjsPlayer.off('contentended', this.boundContentEndedListener);

    // Bug fix: https://github.com/googleads/videojs-ima/issues/306
    if (this.vjsPlayer.ads.adTimeoutTimeout) {
        clearTimeout(this.vjsPlayer.ads.adTimeoutTimeout);
    }

    var intervalsToClear = [this.updateTimeIntervalHandle, this.seekCheckIntervalHandle, this.resizeCheckIntervalHandle];
    for (var index in intervalsToClear) {
        if (intervalsToClear[index]) {
            clearInterval(intervalsToClear[index]);
        }
    }
};

/**
 * Start ad playback, or content video playback in the absence of a
 * pre-roll.
 */
PlayerWrapper.prototype.onReadyForPreroll = function () {

    this.controller.onPlayerReadyForPreroll();
};

/**
 * Called when the player fires its 'ready' event.
 */
PlayerWrapper.prototype.onPlayerReady = function () {
    this.h5Player = document.getElementById(this.getPlayerId());
    //.getElementsByClassName('vjs-tech')[0];

    // Detect inline options
    if (this.h5Player.hasAttribute('autoplay')) {
        this.controller.setSetting('adWillAutoPlay', true);
    }

    // Sync ad volume with player volume.
    this.onVolumeChange();
    this.vjsPlayer.on('fullscreenchange', this.onFullscreenChange.bind(this));
    this.vjsPlayer.on('volumechange', this.onVolumeChange.bind(this));

    this.controller.onPlayerReady();
};

/**
 * Listens for the video.js player to change its fullscreen status. This
 * keeps the fullscreen-ness of the AdContainer in sync with the player.
 */
PlayerWrapper.prototype.onFullscreenChange = function () {
    if (this.vjsPlayer.isFullscreen()) {
        this.controller.onPlayerEnterFullscreen();
    } else {
        this.controller.onPlayerExitFullscreen();
    }
};

/**
 * Listens for the video.js player to change its volume. This keeps the ad
 * volume in sync with the content volume if the volume of the player is
 * changed while content is playing.
 */
PlayerWrapper.prototype.onVolumeChange = function () {
    var newVolume = this.vjsPlayer.muted() ? 0 : this.vjsPlayer.volume();
    this.controller.onPlayerVolumeChanged(newVolume);
};

/**
 * Inject the ad container div into the DOM.
 *
 * @param{HTMLElement} adContainerDiv The ad container div.
 */
PlayerWrapper.prototype.injectAdContainerDiv = function (adContainerDiv) {
    this.vjsControls.el().parentNode.appendChild(adContainerDiv);
};

/**
 * @return {Object} The content player.
 */
PlayerWrapper.prototype.getContentPlayer = function () {
    return this.h5Player;
};

/**
 * @return {number} The volume, 0-1.
 */
PlayerWrapper.prototype.getVolume = function () {
    return this.vjsPlayer.muted() ? 0 : this.vjsPlayer.volume();
};

/**
 * Set the volume of the player. 0-1.
 *
 * @param {number} volume The new volume.
 */
PlayerWrapper.prototype.setVolume = function (volume) {
    this.vjsPlayer.volume(volume);
    if (volume == 0) {
        this.vjsPlayer.muted(true);
    } else {
        this.vjsPlayer.muted(false);
    }
};

/**
 * Ummute the player.
 */
PlayerWrapper.prototype.unmute = function () {
    this.vjsPlayer.muted(false);
};

/**
 * Mute the player.
 */
PlayerWrapper.prototype.mute = function () {
    this.vjsPlayer.muted(true);
};

/**
 * Play the video.
 */
PlayerWrapper.prototype.play = function () {
    this.vjsPlayer.play();
};

/**
 * Get the player width.
 *
 * @return {number} The player's width.
 */
PlayerWrapper.prototype.getPlayerWidth = function () {
    var width = (getComputedStyle(this.vjsPlayer.el()) || {}).width;

    if (!width || parseInt(width, 10) === 0) {
        width = (this.vjsPlayer.el().getBoundingClientRect() || {}).width;
    }

    return parseInt(width, 10) || this.vjsPlayer.width();
};

/**
 * Get the player height.
 *
 * @return {number} The player's height.
 */
PlayerWrapper.prototype.getPlayerHeight = function () {
    var height = (getComputedStyle(this.vjsPlayer.el()) || {}).height;

    if (!height || parseInt(height, 10) === 0) {
        height = (this.vjsPlayer.el().getBoundingClientRect() || {}).height;
    }

    return parseInt(height, 10) || this.vjsPlayer.height();
};

/**
 * @return {Object} The vjs player's options object.
 */
PlayerWrapper.prototype.getPlayerOptions = function () {
    return this.vjsPlayer.options_;
};

/**
 * Returns the instance of the player id.
 * @return {string} The player id.
 */
PlayerWrapper.prototype.getPlayerId = function () {
    return this.vjsPlayer.id();
};

/**
 * Toggle fullscreen state.
 */
PlayerWrapper.prototype.toggleFullscreen = function () {
    if (this.vjsPlayer.isFullscreen()) {
        this.vjsPlayer.exitFullscreen();
    } else {
        this.vjsPlayer.requestFullscreen();
    }
};

/**
 * Returns the content playhead tracker.
 *
 * @return {Object} The content playhead tracker.
 */
PlayerWrapper.prototype.getContentPlayheadTracker = function () {
    return this.contentPlayheadTracker;
};

/**
 * Handles ad errors.
 *
 * @param {Object} adErrorEvent The ad error event thrown by the IMA SDK.
 */
PlayerWrapper.prototype.onAdError = function (adErrorEvent) {
    this.vjsControls.show();
    var errorMessage = adErrorEvent.getError !== undefined ? adErrorEvent.getError() : adErrorEvent.stack;
    this.vjsPlayer.trigger({
        type: 'adserror',
        data: {
            AdError: errorMessage,
            AdErrorEvent: adErrorEvent
        }
    });
};

/**
 * Handles ad break starting.
 */
PlayerWrapper.prototype.onAdBreakStart = function () {
    this.contentSource = this.vjsPlayer.currentSrc();
    this.vjsPlayer.off('contentended', this.boundContentEndedListener);
    this.vjsPlayer.ads.startLinearAdMode();
    this.vjsControls.hide();
    this.vjsPlayer.pause();
};

/**
 * Handles ad break ending.
 */
PlayerWrapper.prototype.onAdBreakEnd = function () {
    this.vjsPlayer.on('contentended', this.boundContentEndedListener);
    if (this.vjsPlayer.ads.inAdBreak()) {
        this.vjsPlayer.ads.endLinearAdMode();
    }
    this.vjsControls.show();
};

/**
 * Handles an individual ad start.
 */
PlayerWrapper.prototype.onAdStart = function () {
    this.vjsPlayer.trigger('ads-ad-started');
};

/**
 * Handles when all ads have finished playing.
 */
PlayerWrapper.prototype.onAllAdsCompleted = function () {
    if (this.contentComplete == true) {
        if (this.h5Player.src != this.contentSource) {
            this.vjsPlayer.src(this.contentSource);
        }
        this.controller.onContentAndAdsCompleted();
    }
};

/**
 * Triggers adsready for contrib-ads.
 */
PlayerWrapper.prototype.onAdsReady = function () {
    this.vjsPlayer.trigger('adsready');
};

/**
 * Changes the player source.
 * @param {?string} contentSrc The URI for the content to be played. Leave
 *     blank to use the existing content.
 * @param {?boolean} playOnLoad True to play the content once it has loaded,
 *     false to only load the content but not start playback.
 */
PlayerWrapper.prototype.changeSource = function (contentSrc, playOnLoad) {
    // Only try to pause the player when initialised with a source already
    if (this.vjsPlayer.currentSrc()) {
        this.vjsPlayer.currentTime(0);
        this.vjsPlayer.pause();
    }
    if (contentSrc) {
        this.vjsPlayer.src(contentSrc);
    }
    if (playOnLoad) {
        this.vjsPlayer.one('loadedmetadata', this.playContentFromZero.bind(this));
    } else {
        this.vjsPlayer.one('loadedmetadata', this.seekContentToZero.bind(this));
    }
};

/**
 * Seeks content to 00:00:00. This is used as an event handler for the
 * loadedmetadata event, since seeking is not possible until that event has
 * fired.
 */
PlayerWrapper.prototype.seekContentToZero = function () {
    this.vjsPlayer.currentTime(0);
};

/**
 * Seeks content to 00:00:00 and starts playback. This is used as an event
 * handler for the loadedmetadata event, since seeking is not possible until
 * that event has fired.
 */
PlayerWrapper.prototype.playContentFromZero = function () {
    this.vjsPlayer.currentTime(0);
    this.vjsPlayer.play();
};

/**
 * Triggers an event on the VJS player
 * @param  {string} name The event name.
 * @param  {Object} data The event data.
 */
PlayerWrapper.prototype.triggerPlayerEvent = function (name, data) {
    this.vjsPlayer.trigger(name, data);
};

/**
 * Listener JSDoc for ESLint. This listener can be passed to
 * addContentEndedListener.
 * @callback listener
 */

/**
 * Adds a listener for the 'contentended' event of the video player. This should
 * be used instead of setting an 'contentended' listener directly to ensure that
 * the ima can do proper cleanup of the SDK before other event listeners are
 * called.
 * @param {listener} listener The listener to be called when content
 *     completes.
 */
PlayerWrapper.prototype.addContentEndedListener = function (listener) {
    this.contentEndedListeners.push(listener);
};

/**
 * Reset the player.
 */
PlayerWrapper.prototype.reset = function () {
    this.vjsPlayer.on('contentended', this.boundContentEndedListener);
    this.vjsControls.show();
    if (this.vjsPlayer.ads.inAdBreak()) {
        this.vjsPlayer.ads.endLinearAdMode();
    }
    // Reset the content time we give the SDK. Fixes an issue where requesting
    // VMAP followed by VMAP would play the second mid-rolls as pre-rolls if
    // the first playthrough of the video passed the second response's
    // mid-roll time.
    this.contentPlayheadTracker.currentTime = 0;
    this.contentComplete = false;
};

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IMA SDK integration plugin for Video.js. For more information see
 * https://www.github.com/googleads/videojs-ima
 */

/**
 * Ad UI implementation.
 *
 * @param {Controller} controller Plugin controller.
 * @constructor
 * @struct
 * @final
 */
var AdUi = function AdUi(controller) {
    /**
     * Plugin controller.
     */
    this.controller = controller;

    /**
     * Div used as an ad container.
     */
    this.adContainerDiv = document.createElement('div');

    /**
     * Div used to display ad controls.
     */
    this.controlsDiv = document.createElement('div');

    /**
     * Div used to display ad countdown timer.
     */
    this.countdownDiv = document.createElement('div');

    /**
     * Div used to display add seek bar.
     */
    this.seekBarDiv = document.createElement('div');

    /**
     * Div used to display ad progress (in seek bar).
     */
    this.progressDiv = document.createElement('div');

    /**
     * Div used to display ad play/pause button.
     */
    this.playPauseDiv = document.createElement('div');

    /**
     * Div used to display ad mute button.
     */
    this.muteDiv = document.createElement('div');

    /**
     * Div used by the volume slider.
     */
    this.sliderDiv = document.createElement('div');

    /**
     * Volume slider level visuals
     */
    this.sliderLevelDiv = document.createElement('div');

    /**
     * Div used to display ad fullscreen button.
     */
    this.fullscreenDiv = document.createElement('div');

    /**
     * Bound event handler for onMouseUp.
     */
    this.boundOnMouseUp = this.onMouseUp.bind(this);

    /**
     * Bound event handler for onMouseMove.
     */
    this.boundOnMouseMove = this.onMouseMove.bind(this);

    /**
     * Stores data for the ad playhead tracker.
     */
    this.adPlayheadTracker = {
        'currentTime': 0,
        'duration': 0,
        'isPod': false,
        'adPosition': 0,
        'totalAds': 0
    };

    /**
     * Used to prefix videojs ima controls.
     */
    this.controlPrefix = this.controller.getPlayerId() + '_';

    /**
     * Boolean flag to show or hide the ad countdown timer.
     */
    this.showCountdown = true;
    if (this.controller.getSettings().showCountdown === false) {
        this.showCountdown = false;
    }

    this.createAdContainer();
};

/**
 * Creates the ad container.
 */
AdUi.prototype.createAdContainer = function () {
    this.assignControlAttributes(this.adContainerDiv, 'ima-ad-container');
    this.adContainerDiv.style.position = 'absolute';
    this.adContainerDiv.style.zIndex = 1111;
    this.adContainerDiv.addEventListener('mouseenter', this.showAdControls.bind(this), false);
    this.adContainerDiv.addEventListener('mouseleave', this.hideAdControls.bind(this), false);
    this.createControls();
    this.controller.injectAdContainerDiv(this.adContainerDiv);
};

/**
 * Create the controls.
 */
AdUi.prototype.createControls = function () {
    this.assignControlAttributes(this.controlsDiv, 'ima-controls-div');
    this.controlsDiv.style.width = '100%';

    this.assignControlAttributes(this.countdownDiv, 'ima-countdown-div');
    this.countdownDiv.innerHTML = this.controller.getSettings().adLabel;
    this.countdownDiv.style.display = this.showCountdown ? 'block' : 'none';

    this.assignControlAttributes(this.seekBarDiv, 'ima-seek-bar-div');
    this.seekBarDiv.style.width = '100%';

    this.assignControlAttributes(this.progressDiv, 'ima-progress-div');

    this.assignControlAttributes(this.playPauseDiv, 'ima-play-pause-div');
    this.addClass(this.playPauseDiv, 'ima-playing');
    this.playPauseDiv.addEventListener('click', this.onAdPlayPauseClick.bind(this), false);

    this.assignControlAttributes(this.muteDiv, 'ima-mute-div');
    this.addClass(this.muteDiv, 'ima-non-muted');
    this.muteDiv.addEventListener('click', this.onAdMuteClick.bind(this), false);

    this.assignControlAttributes(this.sliderDiv, 'ima-slider-div');
    this.sliderDiv.addEventListener('mousedown', this.onAdVolumeSliderMouseDown.bind(this), false);

    // Hide volume slider controls on iOS as they aren't supported.
    if (this.controller.getIsIos()) {
        this.sliderDiv.style.display = 'none';
    }

    this.assignControlAttributes(this.sliderLevelDiv, 'ima-slider-level-div');

    this.assignControlAttributes(this.fullscreenDiv, 'ima-fullscreen-div');
    this.addClass(this.fullscreenDiv, 'ima-non-fullscreen');
    this.fullscreenDiv.addEventListener('click', this.onAdFullscreenClick.bind(this), false);

    this.adContainerDiv.appendChild(this.controlsDiv);
    this.controlsDiv.appendChild(this.countdownDiv);
    this.controlsDiv.appendChild(this.seekBarDiv);
    this.controlsDiv.appendChild(this.playPauseDiv);
    this.controlsDiv.appendChild(this.muteDiv);
    this.controlsDiv.appendChild(this.sliderDiv);
    this.controlsDiv.appendChild(this.fullscreenDiv);
    this.seekBarDiv.appendChild(this.progressDiv);
    this.sliderDiv.appendChild(this.sliderLevelDiv);
};

/**
 * Listener for clicks on the play/pause button during ad playback.
 */
AdUi.prototype.onAdPlayPauseClick = function () {
    this.controller.onAdPlayPauseClick();
};

/**
 * Listener for clicks on the play/pause button during ad playback.
 */
AdUi.prototype.onAdMuteClick = function () {
    this.controller.onAdMuteClick();
};

/**
 * Listener for clicks on the fullscreen button during ad playback.
 */
AdUi.prototype.onAdFullscreenClick = function () {
    this.controller.toggleFullscreen();
};

/**
 * Show pause and hide play button
 */
AdUi.prototype.onAdsPaused = function () {
    this.addClass(this.playPauseDiv, 'ima-paused');
    this.removeClass(this.playPauseDiv, 'ima-playing');
    this.showAdControls();
};

/**
 * Show pause and hide play button
 */
AdUi.prototype.onAdsResumed = function () {
    this.onAdsPlaying();
    this.showAdControls();
};

/**
 * Show play and hide pause button
 */
AdUi.prototype.onAdsPlaying = function () {
    this.addClass(this.playPauseDiv, 'ima-playing');
    this.removeClass(this.playPauseDiv, 'ima-paused');
};

/**
 * Takes data from the controller to update the UI.
 *
 * @param {number} currentTime Current time of the ad.
 * @param {number} remainingTime Remaining time of the ad.
 * @param {number} duration Duration of the ad.
 * @param {number} adPosition Index of the ad in the pod.
 * @param {number} totalAds Total number of ads in the pod.
 */
AdUi.prototype.updateAdUi = function (currentTime, remainingTime, duration, adPosition, totalAds) {
    // Update countdown timer data
    var remainingMinutes = Math.floor(remainingTime / 60);
    var remainingSeconds = Math.floor(remainingTime % 60);
    if (remainingSeconds.toString().length < 2) {
        remainingSeconds = '0' + remainingSeconds;
    }
    var podCount = ': ';
    if (totalAds > 1) {
        podCount = ' (' + adPosition + ' ' + this.controller.getSettings().adLabelNofN + ' ' + totalAds + '): ';
    }
    this.countdownDiv.innerHTML = this.controller.getSettings().adLabel + podCount + remainingMinutes + ':' + remainingSeconds;

    // Update UI
    var playProgressRatio = currentTime / duration;
    var playProgressPercent = playProgressRatio * 100;
    this.progressDiv.style.width = playProgressPercent + '%';
};

/**
 * Handles UI changes when the ad is unmuted.
 */
AdUi.prototype.unmute = function () {
    this.addClass(this.muteDiv, 'ima-non-muted');
    this.removeClass(this.muteDiv, 'ima-muted');
    this.sliderLevelDiv.style.width = this.controller.getPlayerVolume() * 100 + '%';
};

/**
 * Handles UI changes when the ad is muted.
 */
AdUi.prototype.mute = function () {
    this.addClass(this.muteDiv, 'ima-muted');
    this.removeClass(this.muteDiv, 'ima-non-muted');
    this.sliderLevelDiv.style.width = '0%';
};

/*
 * Listener for mouse down events during ad playback. Used for volume.
 */
AdUi.prototype.onAdVolumeSliderMouseDown = function () {
    document.addEventListener('mouseup', this.boundOnMouseUp, false);
    document.addEventListener('mousemove', this.boundOnMouseMove, false);
};

/*
 * Mouse movement listener used for volume slider.
 */
AdUi.prototype.onMouseMove = function (event) {
    this.changeVolume(event);
};

/*
 * Mouse release listener used for volume slider.
 */
AdUi.prototype.onMouseUp = function (event) {
    this.changeVolume(event);
    document.removeEventListener('mouseup', this.boundOnMouseUp);
    document.removeEventListener('mousemove', this.boundOnMouseMove);
};

/*
 * Utility function to set volume and associated UI
 */
AdUi.prototype.changeVolume = function (event) {
    var percent = (event.clientX - this.sliderDiv.getBoundingClientRect().left) / this.sliderDiv.offsetWidth;
    percent *= 100;
    // Bounds value 0-100 if mouse is outside slider region.
    percent = Math.min(Math.max(percent, 0), 100);
    this.sliderLevelDiv.style.width = percent + '%';
    if (this.percent == 0) {
        this.addClass(this.muteDiv, 'ima-muted');
        this.removeClass(this.muteDiv, 'ima-non-muted');
    } else {
        this.addClass(this.muteDiv, 'ima-non-muted');
        this.removeClass(this.muteDiv, 'ima-muted');
    }
    this.controller.setVolume(percent / 100); // 0-1
};

/**
 * Show the ad container.
 */
AdUi.prototype.showAdContainer = function () {
    this.adContainerDiv.style.display = 'block';
};

/**
 * Handles ad errors.
 */
AdUi.prototype.onAdError = function () {
    this.adContainerDiv.style.display = 'none';
};

/**
 * Handles ad break starting.
 *
 * @param {Object} adEvent The event fired by the IMA SDK.
 */
AdUi.prototype.onAdBreakStart = function (adEvent) {
    this.adContainerDiv.style.display = 'block';

    var contentType = adEvent.getAd().getContentType();
    if (contentType === 'application/javascript' && !this.controller.getSettings().showControlsForJSAds) {
        this.controlsDiv.style.display = 'none';
    } else {
        this.controlsDiv.style.display = 'block';
    }
    this.onAdsPlaying();
    // Start with the ad controls minimized.
    this.hideAdControls();
};

/**
 * Handles ad break ending.
 */
AdUi.prototype.onAdBreakEnd = function () {
    var currentAd = this.controller.getCurrentAd();
    if (currentAd == null || // hide for post-roll only playlist
    currentAd.isLinear()) {
        // don't hide for non-linear ads
        this.adContainerDiv.style.display = 'none';
    }
    this.controlsDiv.style.display = 'none';
    this.countdownDiv.innerHTML = '';
};

/**
 * Handles when all ads have finished playing.
 */
AdUi.prototype.onAllAdsCompleted = function () {
    this.adContainerDiv.style.display = 'none';
};

/**
 * Handles when a linear ad starts.
 */
AdUi.prototype.onLinearAdStart = function () {
    // Don't bump container when controls are shown
    this.removeClass(this.adContainerDiv, 'bumpable-ima-ad-container');
};

/**
 * Handles when a non-linear ad starts.
 */
AdUi.prototype.onNonLinearAdLoad = function () {
    // For non-linear ads that show after a linear ad. For linear ads, we show the
    // ad container in onAdBreakStart to prevent blinking in pods.
    this.adContainerDiv.style.display = 'block';
    // Bump container when controls are shown
    this.addClass(this.adContainerDiv, 'bumpable-ima-ad-container');
};

AdUi.prototype.onPlayerEnterFullscreen = function () {
    this.addClass(this.fullscreenDiv, 'ima-fullscreen');
    this.removeClass(this.fullscreenDiv, 'ima-non-fullscreen');
};

AdUi.prototype.onPlayerExitFullscreen = function () {
    this.addClass(this.fullscreenDiv, 'ima-non-fullscreen');
    this.removeClass(this.fullscreenDiv, 'ima-fullscreen');
};

/**
 * Called when the player volume changes.
 *
 * @param {number} volume The new player volume.
 */
AdUi.prototype.onPlayerVolumeChanged = function (volume) {
    if (volume == 0) {
        this.addClass(this.muteDiv, 'ima-muted');
        this.removeClass(this.muteDiv, 'ima-non-muted');
        this.sliderLevelDiv.style.width = '0%';
    } else {
        this.addClass(this.muteDiv, 'ima-non-muted');
        this.removeClass(this.muteDiv, 'ima-muted');
        this.sliderLevelDiv.style.width = volume * 100 + '%';
    }
};

/**
 * Shows ad controls on mouseover.
 */
AdUi.prototype.showAdControls = function () {
    this.addClass(this.controlsDiv, 'ima-controls-div-showing');
    this.playPauseDiv.style.display = 'block';
    this.muteDiv.style.display = 'block';
    this.fullscreenDiv.style.display = 'block';
    // Don't show on iOS.
    if (!this.controller.getIsIos()) {
        this.sliderDiv.style.display = 'block';
    }
};

/**
 * Hide the ad controls.
 */
AdUi.prototype.hideAdControls = function () {
    this.removeClass(this.controlsDiv, 'ima-controls-div-showing');
    this.playPauseDiv.style.display = 'none';
    this.muteDiv.style.display = 'none';
    this.sliderDiv.style.display = 'none';
    this.fullscreenDiv.style.display = 'none';
};

/**
 * Assigns the unique id and class names to the given element as well as the
 * style class.
 * @param {HTMLElement} element Element that needs the controlName assigned.
 * @param {string} controlName Control name to assign.
 */
AdUi.prototype.assignControlAttributes = function (element, controlName) {
    element.id = this.controlPrefix + controlName;
    element.className = this.controlPrefix + controlName + ' ' + controlName;
};

/**
 * Returns a regular expression to test a string for the given className.
 *
 * @param {string} className The name of the class.
 * @return {RegExp} The regular expression used to test for that class.
 */
AdUi.prototype.getClassRegexp = function (className) {
    // Matches on
    // (beginning of string OR NOT word char)
    // classname
    // (negative lookahead word char OR end of string)
    return new RegExp('(^|[^A-Za-z-])' + className + '((?![A-Za-z-])|$)', 'gi');
};

/**
 * Returns whether or not the provided element has the provied class in its
 * className.
 * @param {HTMLElement} element Element to tes.t
 * @param {string} className Class to look for.
 * @return {boolean} True if element has className in class list. False
 *     otherwise.
 */
AdUi.prototype.elementHasClass = function (element, className) {
    var classRegexp = this.getClassRegexp(className);
    return classRegexp.test(element.className);
};

/**
 * Adds a class to the given element if it doesn't already have the class
 * @param {HTMLElement} element Element to which the class will be added.
 * @param {string} classToAdd Class to add.
 */
AdUi.prototype.addClass = function (element, classToAdd) {
    element.className = element.className.trim() + ' ' + classToAdd;
};

/**
 * Removes a class from the given element if it has the given class
 *
 * @param {HTMLElement} element Element from which the class will be removed.
 * @param {string} classToRemove Class to remove.
 */
AdUi.prototype.removeClass = function (element, classToRemove) {
    var classRegexp = this.getClassRegexp(classToRemove);
    element.className = element.className.trim().replace(classRegexp, '');
};

/**
 * @return {HTMLElement} The div for the ad container.
 */
AdUi.prototype.getAdContainerDiv = function () {
    return this.adContainerDiv;
};

/**
 * Changes the flag to show or hide the ad countdown timer.
 *
 * @param {boolean} showCountdownIn Show or hide the countdown timer.
 */
AdUi.prototype.setShowCountdown = function (showCountdownIn) {
    this.showCountdown = showCountdownIn;
    this.countdownDiv.style.display = this.showCountdown ? 'block' : 'none';
};

var name$1 = "videojs-ima";
var version$2 = "1.5.1";
var license$1 = "Apache-2.0";
var main$1 = "./dist/videojs.ima.js";
var author$1 = { "name": "Google Inc." };
var engines = { "node": ">=0.8.0" };
var scripts$1 = { "contBuild": "watch 'npm run rollup:max' src", "predevServer": "echo \"Starting up server on localhost:8000.\"", "devServer": "forever start ./node_modules/http-server/bin/http-server -p 8000 && npm run contBuild", "postdevServer": "forever stop ./node_modules/http-server/bin/http-server", "lint": "eslint \"src/*.js\"", "rollup": "npm-run-all rollup:*", "rollup:max": "rollup -c configs/rollup.config.js", "rollup:min": "rollup -c configs/rollup.config.min.js", "pretest": "npm run rollup", "start": "npm run devServer", "test": "npm-run-all test:*", "test:vjs5": "npm install video.js@5.19.2 --no-save && npm-run-all -p -r testServer webdriver", "test:vjs6": "npm install video.js@6 --no-save && npm-run-all -p -r testServer webdriver", "testServer": "http-server --cors -p 8000 --silent", "preversion": "node scripts/preversion.js && npm run lint && npm test", "version": "node scripts/version.js", "postversion": "node scripts/postversion.js", "webdriver": "mocha test/webdriver/*.js --no-timeouts" };
var repository$1 = { "type": "git", "url": "https://github.com/googleads/videojs-ima" };
var files = ["CHANGELOG.md", "LICENSE", "README.md", "dist/", "src/"];
var dependencies$1 = { "can-autoplay": "^3.0.0", "video.js": "^5.19.2 || ^6", "videojs-contrib-ads": "^6" };
var devDependencies$1 = { "babel-core": "^6.26.0", "babel-preset-env": "^1.6.1", "child_process": "^1.0.2", "chromedriver": "^2.35.0", "conventional-changelog-cli": "^1.3.5", "conventional-changelog-videojs": "^3.0.0", "eslint": "^4.11.0", "eslint-config-google": "^0.9.1", "eslint-plugin-jsdoc": "^3.2.0", "forever": "^0.15.3", "geckodriver": "^1.10.0", "http-server": "^0.10.0", "mocha": "^4.0.1", "npm-run-all": "^4.1.2", "path": "^0.12.7", "rimraf": "^2.6.2", "rollup": "^0.51.8", "rollup-plugin-babel": "^3.0.3", "rollup-plugin-copy": "^0.2.3", "rollup-plugin-json": "^2.3.0", "rollup-plugin-uglify": "^2.0.1", "selenium-webdriver": "^3.6.0", "uglify-es": "^3.1.10", "watch": "^1.0.2" };
var keywords$1 = ["videojs", "videojs-plugin"];
var pkg = {
    name: name$1,
    version: version$2,
    license: license$1,
    main: main$1,
    author: author$1,
    engines: engines,
    scripts: scripts$1,
    repository: repository$1,
    files: files,
    dependencies: dependencies$1,
    devDependencies: devDependencies$1,
    keywords: keywords$1
};

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IMA SDK integration plugin for Video.js. For more information see
 * https://www.github.com/googleads/videojs-ima
 */

/**
 * Implementation of the IMA SDK for the plugin.
 *
 * @param {Object} controller Reference to the parent controller.
 *
 * @constructor
 * @struct
 * @final
 */
var SdkImpl = function SdkImpl(controller) {
    /**
     * Plugin controller.
     */
    this.controller = controller;

    /**
     * IMA SDK AdDisplayContainer.
     */
    this.adDisplayContainer = null;

    /**
     * True if the AdDisplayContainer has been initialized. False otherwise.
     */
    this.adDisplayContainerInitialized = false;

    /**
     * IMA SDK AdsLoader
     */
    this.adsLoader = null;

    /**
     * IMA SDK AdsManager
     */
    this.adsManager = null;

    /**
     * IMA SDK AdsRenderingSettings.
     */
    this.adsRenderingSettings = null;

    /**
     * Ad tag URL. Should return VAST, VMAP, or ad rules.
     */
    this.adTagUrl = null;

    /**
     * VAST, VMAP, or ad rules response. Used in lieu of fetching a response
     * from an ad tag URL.
     */
    this.adsResponse = null;

    /**
     * Current IMA SDK Ad.
     */
    this.currentAd = null;

    /**
     * Timer used to track ad progress.
     */
    this.adTrackingTimer = null;

    /**
     * True if ALL_ADS_COMPLETED has fired, false until then.
     */
    this.allAdsCompleted = false;

    /**
     * True if ads are currently displayed, false otherwise.
     * True regardless of ad pause state if an ad is currently being displayed.
     */
    this.adsActive = false;

    /**
     * True if ad is currently playing, false if ad is paused or ads are not
     * currently displayed.
     */
    this.adPlaying = false;

    /**
     * True if the ad is muted, false otherwise.
     */
    this.adMuted = false;

    /**
     * Listener to be called to trigger manual ad break playback.
     */
    this.adBreakReadyListener = undefined;

    /**
     * Tracks whether or not we have already called adsLoader.contentComplete().
     */
    this.contentCompleteCalled = false;

    /**
     * Stores the dimensions for the ads manager.
     */
    this.adsManagerDimensions = {
        width: 0,
        height: 0
    };

    /**
     * Boolean flag to enable manual ad break playback.
     */
    this.autoPlayAdBreaks = true;
    if (this.controller.getSettings().autoPlayAdBreaks === false) {
        this.autoPlayAdBreaks = false;
    }

    // Set SDK settings from plugin settings.
    if (this.controller.getSettings().locale) {
        /* eslint no-undef: 'error' */
        /* global google */
        google.ima.settings.setLocale(this.controller.getSettings().locale);
    }
    if (this.controller.getSettings().disableFlashAds) {
        google.ima.settings.setDisableFlashAds(this.controller.getSettings().disableFlashAds);
    }
    if (this.controller.getSettings().disableCustomPlaybackForIOS10Plus) {
        google.ima.settings.setDisableCustomPlaybackForIOS10Plus(this.controller.getSettings().disableCustomPlaybackForIOS10Plus);
    }
};

/**
 * Creates and initializes the IMA SDK objects.
 */
SdkImpl.prototype.initAdObjects = function () {
    try {
        this.adDisplayContainer = new google.ima.AdDisplayContainer(this.controller.getAdContainerDiv(), this.controller.getContentPlayer());
    } catch (adError) {
        this.controller.getContentPlayer().player.trigger('adserror');
    }

    this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);

    this.adsLoader.getSettings().setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);
    if (this.controller.getSettings().vpaidAllowed == false) {
        this.adsLoader.getSettings().setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.DISABLED);
    }
    if (this.controller.getSettings().vpaidMode) {
        this.adsLoader.getSettings().setVpaidMode(this.controller.getSettings().vpaidMode);
    }

    if (this.controller.getSettings().locale) {
        this.adsLoader.getSettings().setLocale(this.controller.getSettings().locale);
    }

    if (this.controller.getSettings().numRedirects) {
        this.adsLoader.getSettings().setNumRedirects(this.controller.getSettings().numRedirects);
    }

    this.adsLoader.getSettings().setPlayerType('videojs-ima');
    this.adsLoader.getSettings().setPlayerVersion(pkg.version);
    this.adsLoader.getSettings().setAutoPlayAdBreaks(this.autoPlayAdBreaks);

    this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded.bind(this), false);
    this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdsLoaderError.bind(this), false);
};

/**
 * Creates the AdsRequest and request ads through the AdsLoader.
 */
SdkImpl.prototype.requestAds = function () {
    var adsRequest = new google.ima.AdsRequest();
    if (this.controller.getSettings().adTagUrl) {
        adsRequest.adTagUrl = this.controller.getSettings().adTagUrl;
    } else {
        adsRequest.adsResponse = this.controller.getSettings().adsResponse;
    }
    if (this.controller.getSettings().forceNonLinearFullSlot) {
        adsRequest.forceNonLinearFullSlot = true;
    }

    if (this.controller.getSettings().vastLoadTimeout) {
        adsRequest.vastLoadTimeout = this.controller.getSettings().vastLoadTimeout;
    }

    adsRequest.linearAdSlotWidth = this.controller.getPlayerWidth();
    adsRequest.linearAdSlotHeight = this.controller.getPlayerHeight();
    adsRequest.nonLinearAdSlotWidth = this.controller.getSettings().nonLinearWidth || this.controller.getPlayerWidth();
    adsRequest.nonLinearAdSlotHeight = this.controller.getSettings().nonLinearHeight || this.controller.getPlayerHeight();
    adsRequest.setAdWillAutoPlay(this.controller.adsWillAutoplay());
    adsRequest.setAdWillPlayMuted(this.controller.adsWillPlayMuted());

    this.adsLoader.requestAds(adsRequest);
    this.controller.triggerPlayerEvent('ads-request', adsRequest);
};

/**
 * Listener for the ADS_MANAGER_LOADED event. Creates the AdsManager,
 * sets up event listeners, and triggers the 'adsready' event for
 * videojs-ads-contrib.
 *
 * @param {google.ima.AdsManagerLoadedEvent} adsManagerLoadedEvent Fired when
 *     the AdsManager loads.
 */
SdkImpl.prototype.onAdsManagerLoaded = function (adsManagerLoadedEvent) {
    this.createAdsRenderingSettings();

    this.adsManager = adsManagerLoadedEvent.getAdsManager(this.controller.getContentPlayheadTracker(), this.adsRenderingSettings);

    this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this));
    this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_BREAK_READY, this.onAdBreakReady.bind(this));
    this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, this.onContentPauseRequested.bind(this));
    this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, this.onContentResumeRequested.bind(this));
    this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, this.onAllAdsCompleted.bind(this));

    this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED, this.onAdLoaded.bind(this));
    this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, this.onAdStarted.bind(this));
    this.adsManager.addEventListener(google.ima.AdEvent.Type.CLICK, this.onAdPaused.bind(this));
    this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, this.onAdComplete.bind(this));
    this.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPED, this.onAdComplete.bind(this));

    if (this.controller.getIsMobile()) {
        // Show/hide controls on pause and resume (triggered by tap).
        this.adsManager.addEventListener(google.ima.AdEvent.Type.PAUSED, this.onAdPaused.bind(this));
        this.adsManager.addEventListener(google.ima.AdEvent.Type.RESUMED, this.onAdResumed.bind(this));
    }

    if (!this.autoPlayAdBreaks) {
        this.initAdsManager();
    }

    this.controller.onAdsReady();

    if (this.controller.getSettings().adsManagerLoadedCallback) {
        this.controller.getSettings().adsManagerLoadedCallback();
    }
};

/**
 * Listener for errors fired by the AdsLoader.
 * @param {google.ima.AdErrorEvent} event The error event thrown by the
 *     AdsLoader. See
 *     https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdError.Type
 */
SdkImpl.prototype.onAdsLoaderError = function (event) {
    window.console.warn('AdsLoader error: ' + event.getError());
    this.controller.onErrorLoadingAds(event);
    if (this.adsManager) {
        this.adsManager.destroy();
    }
};

/**
 * Initialize the ads manager.
 */
SdkImpl.prototype.initAdsManager = function () {
    try {
        var initWidth = this.controller.getPlayerWidth();
        var initHeight = this.controller.getPlayerHeight();
        this.adsManagerDimensions.width = initWidth;
        this.adsManagerDimensions.height = initHeight;
        this.adsManager.init(initWidth, initHeight, google.ima.ViewMode.NORMAL);
        this.adsManager.setVolume(this.controller.getPlayerVolume());
        if (!this.adDisplayContainerInitialized) {
            this.adDisplayContainer.initialize();
            this.adDisplayContainer.initialized = true;
        }
    } catch (adError) {
        this.onAdError(adError);
    }
};

/**
 * Create AdsRenderingSettings for the IMA SDK.
 */
SdkImpl.prototype.createAdsRenderingSettings = function () {
    this.adsRenderingSettings = new google.ima.AdsRenderingSettings();
    this.adsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true;
    if (this.controller.getSettings().adsRenderingSettings) {
        for (var setting in this.controller.getSettings().adsRenderingSettings) {
            if (setting !== '') {
                this.adsRenderingSettings[setting] = this.controller.getSettings().adsRenderingSettings[setting];
            }
        }
    }
};

/**
 * Listener for errors thrown by the AdsManager.
 * @param {google.ima.AdErrorEvent} adErrorEvent The error event thrown by
 *     the AdsManager.
 */
SdkImpl.prototype.onAdError = function (adErrorEvent) {
    var errorMessage = adErrorEvent.getError !== undefined ? adErrorEvent.getError() : adErrorEvent.stack;
    window.console.warn('Ad error: ' + errorMessage);

    this.adsManager.destroy();
    this.controller.onAdError(adErrorEvent);

    // reset these so consumers don't think we are still in an ad break,
    // but reset them after any prior cleanup happens
    this.adsActive = false;
    this.adPlaying = false;
};

/**
 * Listener for AD_BREAK_READY. Passes event on to publisher's listener.
 * @param {google.ima.AdEvent} adEvent AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAdBreakReady = function (adEvent) {
    this.adBreakReadyListener(adEvent);
};

/**
 * Pauses the content video and displays the ad container so ads can play.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onContentPauseRequested = function (adEvent) {
    this.adsActive = true;
    this.adPlaying = true;
    this.controller.onAdBreakStart(adEvent);
};

/**
 * Resumes content video and hides the ad container.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onContentResumeRequested = function (adEvent) {
    this.adsActive = false;
    this.adPlaying = false;
    this.controller.onAdBreakEnd();
    // Hide controls in case of future non-linear ads. They'll be unhidden in
    // content_pause_requested.
};

/**
 * Records that ads have completed and calls contentAndAdsEndedListeners
 * if content is also complete.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAllAdsCompleted = function (adEvent) {
    this.allAdsCompleted = true;
    this.controller.onAllAdsCompleted();
};

/**
 * Starts the content video when a non-linear ad is loaded.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAdLoaded = function (adEvent) {
    if (!adEvent.getAd().isLinear()) {
        this.controller.onNonLinearAdLoad();
        this.controller.playContent();
    }
};

/**
 * Starts the interval timer to check the current ad time when an ad starts
 * playing.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAdStarted = function (adEvent) {
    this.currentAd = adEvent.getAd();
    if (this.currentAd.isLinear()) {
        this.adTrackingTimer = setInterval(this.onAdPlayheadTrackerInterval.bind(this), 250);
        this.controller.onLinearAdStart();
    } else {
        this.controller.onNonLinearAdStart();
    }
};

/**
 * Handles an ad click. Puts the player UI in a paused state.
 */
SdkImpl.prototype.onAdPaused = function () {
    this.controller.onAdsPaused();
};

/**
 * Syncs controls when an ad resumes.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAdResumed = function (adEvent) {
    this.controller.onAdsResumed();
};

/**
 * Clears the interval timer for current ad time when an ad completes.
 */
SdkImpl.prototype.onAdComplete = function () {
    if (this.currentAd.isLinear()) {
        clearInterval(this.adTrackingTimer);
    }
};

/**
 * Gets the current time and duration of the ad and calls the method to
 * update the ad UI.
 */
SdkImpl.prototype.onAdPlayheadTrackerInterval = function () {
    var remainingTime = this.adsManager.getRemainingTime();
    var duration = this.currentAd.getDuration();
    var currentTime = duration - remainingTime;
    currentTime = currentTime > 0 ? currentTime : 0;
    var totalAds = 0;
    var adPosition = void 0;
    if (this.currentAd.getAdPodInfo()) {
        adPosition = this.currentAd.getAdPodInfo().getAdPosition();
        totalAds = this.currentAd.getAdPodInfo().getTotalAds();
    }

    this.controller.onAdPlayheadUpdated(currentTime, remainingTime, duration, adPosition, totalAds);
};

/**
 * Called by the player wrapper when content completes.
 */
SdkImpl.prototype.onContentComplete = function () {
    if (this.adsLoader) {
        this.adsLoader.contentComplete();
        this.contentCompleteCalled = true;
    }

    if (this.adsManager && this.adsManager.getCuePoints() && !this.adsManager.getCuePoints().includes(-1)) {
        this.controller.onNoPostroll();
    }

    if (this.allAdsCompleted) {
        this.controller.onContentAndAdsCompleted();
    }
};

/**
 * Called when the player is disposed.
 */
SdkImpl.prototype.onPlayerDisposed = function () {
    if (this.adTrackingTimer) {
        clearInterval(this.adTrackingTimer);
    }
    if (this.adsManager) {
        this.adsManager.destroy();
        this.adsManager = null;
    }
};

SdkImpl.prototype.onPlayerReadyForPreroll = function () {
    if (this.autoPlayAdBreaks) {
        this.initAdsManager();
        try {
            this.controller.showAdContainer();
            // Sync ad volume with content volume.
            this.adsManager.setVolume(this.controller.getPlayerVolume());
            this.adsManager.start();
        } catch (adError) {
            this.onAdError(adError);
        }
    }
};

SdkImpl.prototype.onPlayerReady = function () {
    this.initAdObjects();

    if (this.controller.getSettings().adTagUrl || this.controller.getSettings().adsResponse) {
        this.requestAds();
    }
};

SdkImpl.prototype.onPlayerEnterFullscreen = function () {
    if (this.adsManager) {
        this.adsManager.resize(window.screen.width, window.screen.height, google.ima.ViewMode.FULLSCREEN);
    }
};

SdkImpl.prototype.onPlayerExitFullscreen = function () {
    if (this.adsManager) {
        this.adsManager.resize(this.controller.getPlayerWidth(), this.controller.getPlayerHeight(), google.ima.ViewMode.NORMAL);
    }
};

/**
 * Called when the player volume changes.
 *
 * @param {number} volume The new player volume.
 */
SdkImpl.prototype.onPlayerVolumeChanged = function (volume) {
    if (this.adsManager) {
        this.adsManager.setVolume(volume);
    }

    if (volume == 0) {
        this.adMuted = true;
    } else {
        this.adMuted = false;
    }
};

/**
 * Called when the player wrapper detects that the player has been resized.
 *
 * @param {number} width The post-resize width of the player.
 * @param {number} height The post-resize height of the player.
 */
SdkImpl.prototype.onPlayerResize = function (width, height) {
    if (this.adsManager) {
        this.adsManagerDimensions.width = width;
        this.adsManagerDimensions.height = height;
        /* global google */
        /* eslint no-undef: 'error' */
        this.adsManager.resize(width, height, google.ima.ViewMode.NORMAL);
    }
};

/**
 * @return {Object} The current ad.
 */
SdkImpl.prototype.getCurrentAd = function () {
    return this.currentAd;
};

/**
 * Listener JSDoc for ESLint. This listener can be passed to
 * setAdBreakReadyListener.
 * @callback listener
 */

/**
 * Sets the listener to be called to trigger manual ad break playback.
 * @param {listener} listener The listener to be called to trigger manual ad
 *     break playback.
 */
SdkImpl.prototype.setAdBreakReadyListener = function (listener) {
    this.adBreakReadyListener = listener;
};

/**
 * @return {boolean} True if an ad is currently playing. False otherwise.
 */
SdkImpl.prototype.isAdPlaying = function () {
    return this.adPlaying;
};

/**
 * @return {boolean} True if an ad is currently playing. False otherwise.
 */
SdkImpl.prototype.isAdMuted = function () {
    return this.adMuted;
};

/**
 * Pause ads.
 */
SdkImpl.prototype.pauseAds = function () {
    this.adsManager.pause();
    this.adPlaying = false;
};

/**
 * Resume ads.
 */
SdkImpl.prototype.resumeAds = function () {
    this.adsManager.resume();
    this.adPlaying = true;
};

/**
 * Unmute ads.
 */
SdkImpl.prototype.unmute = function () {
    this.adsManager.setVolume(1);
    this.adMuted = false;
};

/**
 * Mute ads.
 */
SdkImpl.prototype.mute = function () {
    this.adsManager.setVolume(0);
    this.adMuted = true;
};

/**
 * Set the volume of the ads. 0-1.
 *
 * @param {number} volume The new volume.
 */
SdkImpl.prototype.setVolume = function (volume) {
    this.adsManager.setVolume(volume);
    if (volume == 0) {
        this.adMuted = true;
    } else {
        this.adMuted = false;
    }
};

/**
 * Initializes the AdDisplayContainer. On mobile, this must be done as a
 * result of user action.
 */
SdkImpl.prototype.initializeAdDisplayContainer = function () {
    if (this.adDisplayContainer) {
        this.adDisplayContainerInitialized = true;
        this.adDisplayContainer.initialize();
    }
};

/**
 * Called by publishers in manual ad break playback mode to start an ad
 * break.
 */
SdkImpl.prototype.playAdBreak = function () {
    if (!this.autoPlayAdBreaks) {
        this.controller.showAdContainer();
        // Sync ad volume with content volume.
        this.adsManager.setVolume(this.controller.getPlayerVolume());
        this.adsManager.start();
    }
};

/**
 * Callback JSDoc for ESLint. This callback can be passed to addEventListener.
 * @callback callback
 */

/**
 * Ads an EventListener to the AdsManager. For a list of available events,
 * see
 * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type
 * @param {google.ima.AdEvent.Type} event The AdEvent.Type for which to
 *     listen.
 * @param {callback} callback The method to call when the event is fired.
 */
SdkImpl.prototype.addEventListener = function (event, callback) {
    if (this.adsManager) {
        this.adsManager.addEventListener(event, callback);
    }
};

/**
 * Returns the instance of the AdsManager.
 * @return {google.ima.AdsManager} The AdsManager being used by the plugin.
 */
SdkImpl.prototype.getAdsManager = function () {
    return this.adsManager;
};

/**
 * Reset the SDK implementation.
 */
SdkImpl.prototype.reset = function () {
    this.adsActive = false;
    this.adPlaying = false;
    if (this.adTrackingTimer) {
        // If this is called while an ad is playing, stop trying to get that
        // ad's current time.
        clearInterval(this.adTrackingTimer);
    }
    if (this.adsManager) {
        this.adsManager.destroy();
        this.adsManager = null;
    }
    if (this.adsLoader && !this.contentCompleteCalled) {
        this.adsLoader.contentComplete();
    }
    this.contentCompleteCalled = false;
    this.allAdsCompleted = false;
};

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IMA SDK integration plugin for Video.js. For more information see
 * https://www.github.com/googleads/videojs-ima
 */
/**
 * The grand coordinator of the plugin. Facilitates communication between all
 * other plugin classes.
 *
 * @param {Object} player Instance of the video.js player.
 * @param {Object} options Options provided by the implementation.
 * @constructor
 * @struct
 * @final
 */
var Controller = function Controller(player, options) {
    /**
     * Stores user-provided settings.
     * @type {Object}
     */
    this.settings = {};

    /**
     * Content and ads ended listeners passed by the publisher to the plugin.
     * These will be called when the plugin detects that content *and all
     * ads* have completed. This differs from the contentEndedListeners in that
     * contentEndedListeners will fire between content ending and a post-roll
     * playing, whereas the contentAndAdsEndedListeners will fire after the
     * post-roll completes.
     */
    this.contentAndAdsEndedListeners = [];

    /**
     * Whether or not we are running on a mobile platform.
     */
    this.isMobile = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/Android/i);

    /**
     * Whether or not we are running on an iOS platform.
     */
    this.isIos = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i);

    this.initWithSettings(options);

    /**
     * Stores contrib-ads default settings.
     */
    var contribAdsDefaults = {
        debug: this.settings.debug,
        timeout: this.settings.timeout,
        prerollTimeout: this.settings.prerollTimeout
    };
    var adsPluginSettings = this.extend({}, contribAdsDefaults, options.contribAdsSettings || {});

    this.playerWrapper = new PlayerWrapper(player, adsPluginSettings, this);
    this.adUi = new AdUi(this);
    this.sdkImpl = new SdkImpl(this);
};

Controller.IMA_DEFAULTS = {
    debug: false,
    timeout: 5000,
    prerollTimeout: 1000,
    adLabel: 'Advertisement',
    adLabelNofN: 'of',
    showControlsForJSAds: true
};
/**
 * Extends the settings to include user-provided settings.
 *
 * @param {Object} options Options to be used in initialization.
 */
Controller.prototype.initWithSettings = function (options) {
    this.settings = this.extend({}, Controller.IMA_DEFAULTS, options || {});

    this.warnAboutDeprecatedSettings();

    // Default showing countdown timer to true.
    this.showCountdown = true;
    if (this.settings.showCountdown === false) {
        this.showCountdown = false;
    }
};

/**
 * Logs console warnings when deprecated settings are used.
 */
Controller.prototype.warnAboutDeprecatedSettings = function () {
    var _this = this;

    var deprecatedSettings = ['adWillAutoplay', 'adsWillAutoplay', 'adWillPlayMuted', 'adsWillPlayMuted'];
    deprecatedSettings.forEach(function (setting) {
        if (_this.settings[setting] !== undefined) {
            console.warn('WARNING: videojs.ima setting ' + setting + ' is deprecated');
        }
    });
};

/**
 * Return the settings object.
 *
 * @return {Object} The settings object.
 */
Controller.prototype.getSettings = function () {
    return this.settings;
};

/**
 * Return whether or not we're in a mobile environment.
 *
 * @return {boolean} True if running on mobile, false otherwise.
 */
Controller.prototype.getIsMobile = function () {
    return this.isMobile;
};

/**
 * Return whether or not we're in an iOS environment.
 *
 * @return {boolean} True if running on iOS, false otherwise.
 */
Controller.prototype.getIsIos = function () {
    return this.isIos;
};

/**
 * Inject the ad container div into the DOM.
 *
 * @param{HTMLElement} adContainerDiv The ad container div.
 */
Controller.prototype.injectAdContainerDiv = function (adContainerDiv) {
    this.playerWrapper.injectAdContainerDiv(adContainerDiv);
};

/**
 * @return {HTMLElement} The div for the ad container.
 */
Controller.prototype.getAdContainerDiv = function () {
    return this.adUi.getAdContainerDiv();
};

/**
 * @return {Object} The content player.
 */
Controller.prototype.getContentPlayer = function () {
    return this.playerWrapper.getContentPlayer();
};

/**
 * Returns the content playhead tracker.
 *
 * @return {Object} The content playhead tracker.
 */
Controller.prototype.getContentPlayheadTracker = function () {
    return this.playerWrapper.getContentPlayheadTracker();
};

/**
 * Requests ads.
 */
Controller.prototype.requestAds = function () {
    this.sdkImpl.requestAds();
};

/**
 * Add or modify a setting.
 *
 * @param {string} key Key to modify
 * @param {Object} value Value to set at key.
 */
Controller.prototype.setSetting = function (key, value) {
    this.settings[key] = value;
};

/**
 * Called when there is an error loading ads.
 *
 * @param {Object} adErrorEvent The ad error event thrown by the IMA SDK.
 */
Controller.prototype.onErrorLoadingAds = function (adErrorEvent) {
    this.adUi.onAdError();
    this.playerWrapper.onAdError(adErrorEvent);
};

/**
 * Called by the ad UI when the play/pause button is clicked.
 */
Controller.prototype.onAdPlayPauseClick = function () {
    if (this.sdkImpl.isAdPlaying()) {
        this.adUi.onAdsPaused();
        this.sdkImpl.pauseAds();
    } else {
        this.adUi.onAdsPlaying();
        this.sdkImpl.resumeAds();
    }
};

/**
 * Called by the ad UI when the mute button is clicked.
 *
 */
Controller.prototype.onAdMuteClick = function () {
    if (this.sdkImpl.isAdMuted()) {
        this.playerWrapper.unmute();
        this.adUi.unmute();
        this.sdkImpl.unmute();
    } else {
        this.playerWrapper.mute();
        this.adUi.mute();
        this.sdkImpl.mute();
    }
};

/**
 * Set the volume of the player and ads. 0-1.
 *
 * @param {number} volume The new volume.
 */
Controller.prototype.setVolume = function (volume) {
    this.playerWrapper.setVolume(volume);
    this.sdkImpl.setVolume(volume);
};

/**
 * @return {number} The volume of the content player.
 */
Controller.prototype.getPlayerVolume = function () {
    return this.playerWrapper.getVolume();
};

/**
 * Toggle fullscreen state.
 */
Controller.prototype.toggleFullscreen = function () {
    this.playerWrapper.toggleFullscreen();
};

/**
 * Relays ad errors to the player wrapper.
 *
 * @param {Object} adErrorEvent The ad error event thrown by the IMA SDK.
 */
Controller.prototype.onAdError = function (adErrorEvent) {
    this.adUi.onAdError();
    this.playerWrapper.onAdError(adErrorEvent);
};

/**
 * Handles ad break starting.
 *
 * @param {Object} adEvent The event fired by the IMA SDK.
 */
Controller.prototype.onAdBreakStart = function (adEvent) {
    this.playerWrapper.onAdBreakStart();
    this.adUi.onAdBreakStart(adEvent);
};

/**
 * Show the ad container.
 */
Controller.prototype.showAdContainer = function () {
    this.adUi.showAdContainer();
};

/**
 * Handles ad break ending.
 */
Controller.prototype.onAdBreakEnd = function () {
    this.playerWrapper.onAdBreakEnd();
    this.adUi.onAdBreakEnd();
};

/**
 * Handles when all ads have finished playing.
 */
Controller.prototype.onAllAdsCompleted = function () {
    this.adUi.onAllAdsCompleted();
    this.playerWrapper.onAllAdsCompleted();
};

/**
 * Handles the SDK firing an ad paused event.
 */
Controller.prototype.onAdsPaused = function () {
    this.adUi.onAdsPaused();
};

/**
 * Handles the SDK firing an ad resumed event.
 */
Controller.prototype.onAdsResumed = function () {
    this.adUi.onAdsResumed();
};

/**
 * Takes data from the sdk impl and passes it to the ad UI to update the UI.
 *
 * @param {number} currentTime Current time of the ad.
 * @param {number} remainingTime Remaining time of the ad.
 * @param {number} duration Duration of the ad.
 * @param {number} adPosition Index of the ad in the pod.
 * @param {number} totalAds Total number of ads in the pod.
 */
Controller.prototype.onAdPlayheadUpdated = function (currentTime, remainingTime, duration, adPosition, totalAds) {
    this.adUi.updateAdUi(currentTime, remainingTime, duration, adPosition, totalAds);
};

/**
 * @return {Object} The current ad.
 */
Controller.prototype.getCurrentAd = function () {
    return this.sdkImpl.getCurrentAd();
};

/**
 * Play content.
 */
Controller.prototype.playContent = function () {
    this.playerWrapper.play();
};

/**
 * Handles when a linear ad starts.
 */
Controller.prototype.onLinearAdStart = function () {
    this.adUi.onLinearAdStart();
    this.playerWrapper.onAdStart();
};

/**
 * Handles when a non-linear ad loads.
 */
Controller.prototype.onNonLinearAdLoad = function () {
    this.adUi.onNonLinearAdLoad();
};

/**
 * Handles when a non-linear ad starts.
 */
Controller.prototype.onNonLinearAdStart = function () {
    this.adUi.onNonLinearAdLoad();
    this.playerWrapper.onAdStart();
};

/**
 * Get the player width.
 *
 * @return {number} The width of the player.
 */
Controller.prototype.getPlayerWidth = function () {
    return this.playerWrapper.getPlayerWidth();
};

/**
 * Get the player height.
 *
 * @return {number} The height of the player.
 */
Controller.prototype.getPlayerHeight = function () {
    return this.playerWrapper.getPlayerHeight();
};

/**
 * Tells the player wrapper that ads are ready.
 */
Controller.prototype.onAdsReady = function () {
    this.playerWrapper.onAdsReady();
};

/**
 * Called when the player wrapper detects that the player has been resized.
 *
 * @param {number} width The post-resize width of the player.
 * @param {number} height The post-resize height of the player.
 */
Controller.prototype.onPlayerResize = function (width, height) {
    this.sdkImpl.onPlayerResize(width, height);
};

/**
 * Called by the player wrapper when content completes.
 */
Controller.prototype.onContentComplete = function () {
    this.sdkImpl.onContentComplete();
};

/**
 * Called by the player wrapper when it's time to play a post-roll but we don't
 * have one to play.
 */
Controller.prototype.onNoPostroll = function () {
    this.playerWrapper.onNoPostroll();
};

/**
 * Called when content and all ads have completed.
 */
Controller.prototype.onContentAndAdsCompleted = function () {
    for (var index in this.contentAndAdsEndedListeners) {
        if (typeof this.contentAndAdsEndedListeners[index] === 'function') {
            this.contentAndAdsEndedListeners[index]();
        }
    }
};

/**
 * Called when the player is disposed.
 */
Controller.prototype.onPlayerDisposed = function () {
    this.contentAndAdsEndedListeners = [];
    this.sdkImpl.onPlayerDisposed();
};

/**
 * Called when the player is ready to play a pre-roll.
 */
Controller.prototype.onPlayerReadyForPreroll = function () {
    this.sdkImpl.onPlayerReadyForPreroll();
};

/**
 * Called when the player is ready.
 */
Controller.prototype.onPlayerReady = function () {
    this.sdkImpl.onPlayerReady();
};

/**
 * Called when the player enters fullscreen.
 */
Controller.prototype.onPlayerEnterFullscreen = function () {
    this.adUi.onPlayerEnterFullscreen();
    this.sdkImpl.onPlayerEnterFullscreen();
};

/**
 * Called when the player exits fullscreen.
 */
Controller.prototype.onPlayerExitFullscreen = function () {
    this.adUi.onPlayerExitFullscreen();
    this.sdkImpl.onPlayerExitFullscreen();
};

/**
 * Called when the player volume changes.
 *
 * @param {number} volume The new player volume.
 */
Controller.prototype.onPlayerVolumeChanged = function (volume) {
    this.adUi.onPlayerVolumeChanged(volume);
    this.sdkImpl.onPlayerVolumeChanged(volume);
};

/**
 * Sets the content of the video player. You should use this method instead
 * of setting the content src directly to ensure the proper ad tag is
 * requested when the video content is loaded.
 * @param {?string} contentSrc The URI for the content to be played. Leave
 *     blank to use the existing content.
 * @param {?string} adTag The ad tag to be requested when the content loads.
 *     Leave blank to use the existing ad tag.
 * @param {?boolean} playOnLoad True to play the content once it has loaded,
 *     false to only load the content but not start playback.
 */
Controller.prototype.setContentWithAdTag = function (contentSrc, adTag, playOnLoad) {
    this.reset();
    this.settings.adTagUrl = adTag ? adTag : this.settings.adTagUrl;
    this.playerWrapper.changeSource(contentSrc, playOnLoad);
};

/**
 * Sets the content of the video player. You should use this method instead
 * of setting the content src directly to ensure the proper ads response is
 * used when the video content is loaded.
 * @param {?string} contentSrc The URI for the content to be played. Leave
 *     blank to use the existing content.
 * @param {?string} adsResponse The ads response to be requested when the
 *     content loads. Leave blank to use the existing ads response.
 * @param {?boolean} playOnLoad True to play the content once it has loaded,
 *     false to only load the content but not start playback.
 */
Controller.prototype.setContentWithAdsResponse = function (contentSrc, adsResponse, playOnLoad) {
    this.reset();
    this.settings.adsResponse = adsResponse ? adsResponse : this.settings.adsResponse;
    this.playerWrapper.changeSource(contentSrc, playOnLoad);
};

/**
 * Resets the state of the plugin.
 */
Controller.prototype.reset = function () {
    this.sdkImpl.reset();
    this.playerWrapper.reset();
};

/**
 * Listener JSDoc for ESLint. This listener can be passed to
 * (add|remove)ContentEndedListener.
 * @callback listener
 */

/**
 * Adds a listener for the 'contentended' event of the video player. This should
 * be used instead of setting an 'contentended' listener directly to ensure that
 * the ima can do proper cleanup of the SDK before other event listeners are
 * called.
 * @param {listener} listener The listener to be called when content
 *     completes.
 */
Controller.prototype.addContentEndedListener = function (listener) {
    this.playerWrapper.addContentEndedListener(listener);
};

/**
 * Adds a listener that will be called when content and all ads have
 * finished playing.
 * @param {listener} listener The listener to be called when content and ads
 *     complete.
 */
Controller.prototype.addContentAndAdsEndedListener = function (listener) {
    this.contentAndAdsEndedListeners.push(listener);
};

/**
 * Sets the listener to be called to trigger manual ad break playback.
 * @param {listener} listener The listener to be called to trigger manual ad
 *     break playback.
 */
Controller.prototype.setAdBreakReadyListener = function (listener) {
    this.sdkImpl.setAdBreakReadyListener(listener);
};

/**
 * Changes the flag to show or hide the ad countdown timer.
 *
 * @param {boolean} showCountdownIn Show or hide the countdown timer.
 */
Controller.prototype.setShowCountdown = function (showCountdownIn) {
    this.adUi.setShowCountdown(showCountdownIn);
    this.showCountdown = showCountdownIn;
    this.countdownDiv.style.display = this.showCountdown ? 'block' : 'none';
};

/**
 * Initializes the AdDisplayContainer. On mobile, this must be done as a
 * result of user action.
 */
Controller.prototype.initializeAdDisplayContainer = function () {
    this.sdkImpl.initializeAdDisplayContainer();
};

/**
 * Called by publishers in manual ad break playback mode to start an ad
 * break.
 */
Controller.prototype.playAdBreak = function () {
    this.sdkImpl.playAdBreak();
};

/**
 * Callback JSDoc for ESLint. This callback can be passed to addEventListener.
 * @callback callback
 */

/**
 * Ads an EventListener to the AdsManager. For a list of available events,
 * see
 * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type
 * @param {google.ima.AdEvent.Type} event The AdEvent.Type for which to
 *     listen.
 * @param {callback} callback The method to call when the event is fired.
 */
Controller.prototype.addEventListener = function (event, callback) {
    this.sdkImpl.addEventListener(event, callback);
};

/**
 * Returns the instance of the AdsManager.
 * @return {google.ima.AdsManager} The AdsManager being used by the plugin.
 */
Controller.prototype.getAdsManager = function () {
    return this.sdkImpl.getAdsManager();
};

/**
 * Returns the instance of the player id.
 * @return {string} The player id.
 */
Controller.prototype.getPlayerId = function () {
    return this.playerWrapper.getPlayerId();
};

/**
 * Changes the ad tag. You will need to call requestAds after this method
 * for the new ads to be requested.
 * @param {?string} adTag The ad tag to be requested the next time
 *     requestAds is called.
 */
Controller.prototype.changeAdTag = function (adTag) {
    this.reset();
    this.settings.adTagUrl = adTag;
};

/**
 * Pauses the ad.
 */
Controller.prototype.pauseAd = function () {
    this.adUi.onAdsPaused();
    this.sdkImpl.pauseAds();
};

/**
 * Resumes the ad.
 */
Controller.prototype.resumeAd = function () {
    this.adUi.onAdsPlaying();
    this.sdkImpl.resumeAds();
};

/**
 * @return {boolean} true if we expect that ads will autoplay. false otherwise.
 */
Controller.prototype.adsWillAutoplay = function () {
    if (this.settings.adsWillAutoplay !== undefined) {
        return this.settings.adsWillAutoplay;
    } else if (this.settings.adWillAutoplay !== undefined) {
        return this.settings.adWillAutoplay;
    } else {
        return !!this.playerWrapper.getPlayerOptions().autoplay;
    }
};

/**
 * @return {boolean} true if we expect that ads will autoplay. false otherwise.
 */
Controller.prototype.adsWillPlayMuted = function () {
    if (this.settings.adsWillPlayMuted !== undefined) {
        return this.settings.adsWillPlayMuted;
    } else if (this.settings.adWillPlayMuted !== undefined) {
        return this.settings.adWillPlayMuted;
    } else if (this.playerWrapper.getPlayerOptions().muted !== undefined) {
        return this.playerWrapper.getPlayerOptions().muted;
    } else {
        return this.playerWrapper.getVolume() == 0;
    }
};

/**
 * Triggers an event on the VJS player
 * @param  {string} name The event name.
 * @param  {Object} data The event data.
 */
Controller.prototype.triggerPlayerEvent = function (name, data) {
    this.playerWrapper.triggerPlayerEvent(name, data);
};

/**
 * Extends an object to include the contents of objects at parameters 2 onward.
 *
 * @param {Object} obj The object onto which the subsequent objects' parameters
 *     will be extended. This object will be modified.
 * @param {...Object} var_args The objects whose properties are to be extended
 *     onto obj.
 * @return {Object} The extended object.
 */
Controller.prototype.extend = function (obj) {
    var arg = void 0;
    var index = void 0;
    var key = void 0;

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    for (index = 0; index < args.length; index++) {
        arg = args[index];
        for (key in arg) {
            if (arg.hasOwnProperty(key)) {
                obj[key] = arg[key];
            }
        }
    }
    return obj;
};

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IMA SDK integration plugin for Video.js. For more information see
 * https://www.github.com/googleads/videojs-ima
 */

/**
 * Exposes the ImaPlugin to a publisher implementation.
 *
 * @param {Object} player Instance of the video.js player to which this plugin
 *     will be added.
 * @param {Object} options Options provided by the implementation.
 * @constructor
 * @struct
 * @final
 */
var ImaPlugin = function ImaPlugin(player, options) {
    this.controller = new Controller(player, options);

    /**
     * Listener JSDoc for ESLint. This listener can be passed to
     * addContent(AndAds)EndedListener.
     * @callback listener
     */

    /**
     * Adds a listener that will be called when content and all ads have
     * finished playing.
     * @param {listener} listener The listener to be called when content and ads
     *     complete.
     */
    this.addContentAndAdsEndedListener = function (listener) {
        this.controller.addContentAndAdsEndedListener(listener);
    }.bind(this);

    /**
     * Adds a listener for the 'contentended' event of the video player. This
     * should be used instead of setting an 'contentended' listener directly to
     * ensure that the ima can do proper cleanup of the SDK before other event
     * listeners are called.
     * @param {listener} listener The listener to be called when content
     *     completes.
     */
    this.addContentEndedListener = function (listener) {
        this.controller.addContentEndedListener(listener);
    }.bind(this);

    /**
     * Callback JSDoc for ESLint. This callback can be passed to addEventListener.
     * @callback callback
     */

    /**
     * Ads an EventListener to the AdsManager. For a list of available events,
     * see
     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type
     * @param {google.ima.AdEvent.Type} event The AdEvent.Type for which to
     *     listen.
     * @param {callback} callback The method to call when the event is fired.
     */
    this.addEventListener = function (event, callback) {
        this.controller.addEventListener(event, callback);
    }.bind(this);

    /**
     * Changes the ad tag. You will need to call requestAds after this method
     * for the new ads to be requested.
     * @param {?string} adTag The ad tag to be requested the next time requestAds
     *     is called.
     */
    this.changeAdTag = function (adTag) {
        this.controller.changeAdTag(adTag);
    }.bind(this);

    /**
     * Returns the instance of the AdsManager.
     * @return {google.ima.AdsManager} The AdsManager being used by the plugin.
     */
    this.getAdsManager = function () {
        return this.controller.getAdsManager();
    }.bind(this);

    /**
     * Initializes the AdDisplayContainer. On mobile, this must be done as a
     * result of user action.
     */
    this.initializeAdDisplayContainer = function () {
        this.controller.initializeAdDisplayContainer();
    }.bind(this);

    /**
     * Pauses the ad.
     */
    this.pauseAd = function () {
        this.controller.pauseAd();
    }.bind(this);

    /**
     * Called by publishers in manual ad break playback mode to start an ad
     * break.
     */
    this.playAdBreak = function () {
        this.controller.playAdBreak();
    }.bind(this);

    /**
     * Creates the AdsRequest and request ads through the AdsLoader.
     */
    this.requestAds = function () {
        this.controller.requestAds();
    }.bind(this);

    /**
     * Resumes the ad.
     */
    this.resumeAd = function () {
        this.controller.resumeAd();
    }.bind(this);

    /**
     * Sets the listener to be called to trigger manual ad break playback.
     * @param {listener} listener The listener to be called to trigger manual ad
     *     break playback.
     */
    this.setAdBreakReadyListener = function (listener) {
        this.controller.setAdBreakReadyListener(listener);
    }.bind(this);

    /**
     * Sets the content of the video player. You should use this method instead
     * of setting the content src directly to ensure the proper ad tag is
     * requested when the video content is loaded.
     * @param {?string} contentSrc The URI for the content to be played. Leave
     *     blank to use the existing content.
     * @param {?string} adTag The ad tag to be requested when the content loads.
     *     Leave blank to use the existing ad tag.
     * @param {?boolean} playOnLoad True to play the content once it has loaded,
     *     false to only load the content but not start playback.
     */
    this.setContentWithAdTag = function (contentSrc, adTag, playOnLoad) {
        this.controller.setContentWithAdTag(contentSrc, adTag, playOnLoad);
    }.bind(this);

    /**
     * Sets the content of the video player. You should use this method instead
     * of setting the content src directly to ensure the proper ads response is
     * used when the video content is loaded.
     * @param {?string} contentSrc The URI for the content to be played. Leave
     *     blank to use the existing content.
     * @param {?string} adsResponse The ads response to be requested when the
     *     content loads. Leave blank to use the existing ads response.
     * @param {?boolean} playOnLoad True to play the content once it has loaded,
     *     false to only load the content but not start playback.
     */
    this.setContentWithAdsResponse = function (contentSrc, adsResponse, playOnLoad) {
        this.controller.setContentWithAdsResponse(contentSrc, adsResponse, playOnLoad);
    }.bind(this);

    /**
     * Changes the flag to show or hide the ad countdown timer.
     *
     * @param {boolean} showCountdownIn Show or hide the countdown timer.
     */
    this.setShowCountdown = function (showCountdownIn) {
        this.controller.setShowCountdown(showCountdownIn);
    }.bind(this);
};

var init = function init(options) {
    /* eslint no-invalid-this: 'off' */
    this.ima = new ImaPlugin(this, options);
};

var registerPlugin$5 = videojs$1.registerPlugin || videojs$1.plugin;
registerPlugin$5('ima', init);

/*
 * videojs-contrib-ads
 * @version 6.6.1
 * @copyright 2018 Brightcove, Inc.
 * @license Apache-2.0
 */
// (function (global, factory) {
// 	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js')) :
// 	typeof define === 'function' && define.amd ? define(['video.js'], factory) :
// 	(global.videojsContribAds = factory(global.videojs));
// }(this, (function (videojs) { 'use strict';

// videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;

var version$3 = "6.6.1";

/*
 * Implements the public API available in `player.ads` as well as application state.
 */

function getAds(player) {
  return {

    disableNextSnapshotRestore: false,

    // This is true if we have finished actual content playback but haven't
    // dealt with postrolls and officially ended yet
    _contentEnding: false,

    // This is set to true if the content has officially ended at least once.
    // After that, the user can seek backwards and replay content, but _contentHasEnded
    // remains true.
    _contentHasEnded: false,

    // Tracks if loadstart has happened yet for the initial source. It is not reset
    // on source changes because loadstart is the event that signals to the ad plugin
    // that the source has changed. Therefore, no special signaling is needed to know
    // that there has been one for subsequent sources.
    _hasThereBeenALoadStartDuringPlayerLife: false,

    // Tracks if loadeddata has happened yet for the current source.
    _hasThereBeenALoadedData: false,

    // Tracks if loadedmetadata has happened yet for the current source.
    _hasThereBeenALoadedMetaData: false,

    // Are we after startLinearAdMode and before endLinearAdMode?
    _inLinearAdMode: false,

    // Should we block calls to play on the content player?
    _shouldBlockPlay: false,

    // Was play blocked by the plugin's playMiddleware feature?
    _playBlocked: false,

    // Tracks whether play has been requested for this source,
    // either by the play method or user interaction
    _playRequested: false,

    // This is an estimation of the current ad type being played
    // This is experimental currently. Do not rely on its presence or behavior!
    adType: null,

    VERSION: version$3,

    reset: function reset() {
      player.ads.disableNextSnapshotRestore = false;
      player.ads._contentEnding = false;
      player.ads._contentHasEnded = false;
      player.ads.snapshot = null;
      player.ads.adType = null;
      player.ads._hasThereBeenALoadedData = false;
      player.ads._hasThereBeenALoadedMetaData = false;
      player.ads._cancelledPlay = false;
      player.ads._shouldBlockPlay = false;
      player.ads._playBlocked = false;
      player.ads.nopreroll_ = false;
      player.ads.nopostroll_ = false;
      player.ads._playRequested = false;
    },

    // Call this when an ad response has been received and there are
    // linear ads ready to be played.
    startLinearAdMode: function startLinearAdMode() {
      player.ads._state.startLinearAdMode();
    },

    // Call this when a linear ad pod has finished playing.
    endLinearAdMode: function endLinearAdMode() {
      player.ads._state.endLinearAdMode();
    },

    // Call this when an ad response has been received but there are no
    // linear ads to be played (i.e. no ads available, or overlays).
    // This has no effect if we are already in an ad break.  Always
    // use endLinearAdMode() to exit from linear ad-playback state.
    skipLinearAdMode: function skipLinearAdMode() {
      player.ads._state.skipLinearAdMode();
    },

    // With no arguments, returns a boolean value indicating whether or not
    // contrib-ads is set to treat ads as stitched with content in a single
    // stream. With arguments, treated as a setter, but this behavior is
    // deprecated.
    stitchedAds: function stitchedAds(arg) {
      if (arg !== undefined) {
        videojs$1.log.warn('Using player.ads.stitchedAds() as a setter is deprecated, ' + 'it should be set as an option upon initialization of contrib-ads.');

        // Keep the private property and the settings in sync. When this
        // setter is removed, we can probably stop using the private property.
        this.settings.stitchedAds = !!arg;
      }

      return this.settings.stitchedAds;
    },

    // Returns whether the video element has been modified since the
    // snapshot was taken.
    // We test both src and currentSrc because changing the src attribute to a URL that
    // AdBlocker is intercepting doesn't update currentSrc.
    videoElementRecycled: function videoElementRecycled() {
      if (player.ads.shouldPlayContentBehindAd(player)) {
        return false;
      }

      if (!this.snapshot) {
        throw new Error('You cannot use videoElementRecycled while there is no snapshot.');
      }

      var srcChanged = player.tech_.src() !== this.snapshot.src;
      var currentSrcChanged = player.currentSrc() !== this.snapshot.currentSrc;

      return srcChanged || currentSrcChanged;
    },

    // Returns a boolean indicating if given player is in live mode.
    // One reason for this: https://github.com/videojs/video.js/issues/3262
    // Also, some live content can have a duration.
    isLive: function isLive() {
      var somePlayer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : player;

      if (typeof somePlayer.ads.settings.contentIsLive === 'boolean') {
        return somePlayer.ads.settings.contentIsLive;
      } else if (somePlayer.duration() === Infinity) {
        return true;
      } else if (videojs$1.browser.IOS_VERSION === '8' && somePlayer.duration() === 0) {
        return true;
      }
      return false;
    },

    // Return true if content playback should mute and continue during ad breaks.
    // This is only done during live streams on platforms where it's supported.
    // This improves speed and accuracy when returning from an ad break.
    shouldPlayContentBehindAd: function shouldPlayContentBehindAd() {
      var somePlayer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : player;

      if (!somePlayer) {
        throw new Error('shouldPlayContentBehindAd requires a player as a param');
      } else if (!somePlayer.ads.settings.liveCuePoints) {
        return false;
      } else {
        return !videojs$1.browser.IS_IOS && !videojs$1.browser.IS_ANDROID && somePlayer.duration() === Infinity;
      }
    },

    // Return true if the ads plugin should save and restore snapshots of the
    // player state when moving into and out of ad mode.
    shouldTakeSnapshots: function shouldTakeSnapshots() {
      var somePlayer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : player;

      return !this.shouldPlayContentBehindAd(somePlayer) && !this.stitchedAds();
    },

    // Returns true if player is in ad mode.
    //
    // Ad mode definition:
    // If content playback is blocked by the ad plugin.
    //
    // Examples of ad mode:
    //
    // * Waiting to find out if an ad is going to play while content would normally be
    //   playing.
    // * Waiting for an ad to start playing while content would normally be playing.
    // * An ad is playing (even if content is also playing)
    // * An ad has completed and content is about to resume, but content has not resumed
    //   yet.
    //
    // Examples of not ad mode:
    //
    // * Content playback has not been requested
    // * Content playback is paused
    // * An asynchronous ad request is ongoing while content is playing
    // * A non-linear ad is active
    isInAdMode: function isInAdMode() {
      return this._state.isAdState();
    },

    // Returns true if in ad mode but an ad break hasn't started yet.
    isWaitingForAdBreak: function isWaitingForAdBreak() {
      return this._state.isWaitingForAdBreak();
    },

    // Returns true if content is resuming after an ad. This is part of ad mode.
    isContentResuming: function isContentResuming() {
      return this._state.isContentResuming();
    },

    // Deprecated because the name was misleading. Use inAdBreak instead.
    isAdPlaying: function isAdPlaying() {
      return this._state.inAdBreak();
    },

    // Returns true if an ad break is ongoing. This is part of ad mode.
    // An ad break is the time between startLinearAdMode and endLinearAdMode.
    inAdBreak: function inAdBreak() {
      return this._state.inAdBreak();
    },

    /*
     * Remove the poster attribute from the video element tech, if present. When
     * reusing a video element for multiple videos, the poster image will briefly
     * reappear while the new source loads. Removing the attribute ahead of time
     * prevents the poster from showing up between videos.
     *
     * @param {Object} player The videojs player object
     */
    removeNativePoster: function removeNativePoster() {
      var tech = player.$('.play-tech');

      if (tech) {
        tech.removeAttribute('poster');
      }
    },
    debug: function debug() {
      if (this.settings.debug) {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (args.length === 1 && typeof args[0] === 'string') {
          videojs$1.log('ADS: ' + args[0]);
        } else {
          videojs$1.log.apply(videojs$1, ['ADS:'].concat(args));
        }
      }
    }
  };
}

/*
The goal of this feature is to make player events work as an integrator would
expect despite the presense of ads. For example, an integrator would expect
an `ended` event to happen once the content is ended. If an `ended` event is sent
as a result of a preroll ending, that is a bug. The `redispatch` method should recognize
such `ended` events and prefix them so they are sent as `adended`, and so on with
all other player events.
*/

// Cancel an event.
// Video.js wraps native events. This technique stops propagation for the Video.js event
// (AKA player event or wrapper event) while native events continue propagating.
var cancelEvent = function cancelEvent(player, event) {
  event.isImmediatePropagationStopped = function () {
    return true;
  };
  event.cancelBubble = true;
  event.isPropagationStopped = function () {
    return true;
  };
};

// Redispatch an event with a prefix.
// Cancels the event, then sends a new event with the type of the original
// event with the given prefix added.
// The inclusion of the "state" property should be removed in a future
// major version update with instructions to migrate any code that relies on it.
// It is an implementation detail and relying on it creates fragility.
var prefixEvent = function prefixEvent(player, prefix, event) {
  cancelEvent(player, event);
  player.trigger({
    type: prefix + event.type,
    originalEvent: event
  });
};

// Playing event
// Requirements:
// * Normal playing event when there is no preroll
// * No playing event before preroll
// * At least one playing event after preroll
var handlePlaying = function handlePlaying(player, event) {
  if (player.ads.isInAdMode()) {

    if (player.ads.isContentResuming()) {

      // Prefix playing event when switching back to content after postroll.
      if (player.ads._contentEnding) {
        prefixEvent(player, 'content', event);
      }

      // Prefix all other playing events during ads.
    } else {
      prefixEvent(player, 'ad', event);
    }
  }
};

// Ended event
// Requirements:
// * A single ended event when there is no postroll
// * No ended event before postroll
// * A single ended event after postroll
var handleEnded = function handleEnded(player, event) {
  if (player.ads.isInAdMode()) {

    // Cancel ended events during content resuming. Normally we would
    // prefix them, but `contentended` has a special meaning. In the
    // future we'd like to rename the existing `contentended` to
    // `readyforpostroll`, then we could remove the special `resumeended`
    // and do a conventional content prefix here.
    if (player.ads.isContentResuming()) {
      cancelEvent(player, event);

      // Important: do not use this event outside of videojs-contrib-ads.
      // It will be removed and your code will break.
      // Ideally this would simply be `contentended`, but until
      // `contentended` no longer has a special meaning it cannot be
      // changed.
      player.trigger('resumeended');

      // Ad prefix in ad mode
    } else {
      prefixEvent(player, 'ad', event);
    }

    // Prefix ended due to content ending before postroll check
  } else if (!player.ads._contentHasEnded && !player.ads.stitchedAds()) {

    // This will change to cancelEvent after the contentended deprecation
    // period (contrib-ads 7)
    prefixEvent(player, 'content', event);

    // Content ended for the first time, time to check for postrolls
    player.trigger('readyforpostroll');
  }
};

// handleLoadEvent is used for loadstart, loadeddata, and loadedmetadata
// Requirements:
// * Initial event is not prefixed
// * Event due to ad loading is prefixed
// * Event due to content source change is not prefixed
// * Event due to content resuming is prefixed
var handleLoadEvent = function handleLoadEvent(player, event) {

  // Initial event
  if (event.type === 'loadstart' && !player.ads._hasThereBeenALoadStartDuringPlayerLife || event.type === 'loadeddata' && !player.ads._hasThereBeenALoadedData || event.type === 'loadedmetadata' && !player.ads._hasThereBeenALoadedMetaData) {
    return;

    // Ad playing
  } else if (player.ads.inAdBreak()) {
    prefixEvent(player, 'ad', event);

    // Source change
  } else if (player.currentSrc() !== player.ads.contentSrc) {
    return;

    // Content resuming
  } else {
    prefixEvent(player, 'content', event);
  }
};

// Play event
// Requirements:
// * Play events have the "ad" prefix when an ad is playing
// * Play events have the "content" prefix when content is resuming
// Play requests are unique because they represent user intention to play. They happen
// because the user clicked play, or someone called player.play(), etc. It could happen
// multiple times during ad loading, regardless of where we are in the process. With our
// current architecture, this could cause the content to start playing.
// Therefore, contrib-ads must always either:
//   - cancelContentPlay if there is any possible chance the play caused the
//     content to start playing, even if we are technically in ad mode. In order for
//     that to happen, play events need to be unprefixed until the last possible moment.
//   - use playMiddleware to stop the play from reaching the Tech so there is no risk
//     of the content starting to play.
// Currently, playMiddleware is only supported on desktop browsers with
// video.js after version 6.7.1.
var handlePlay = function handlePlay(player, event) {
  if (player.ads.inAdBreak()) {
    prefixEvent(player, 'ad', event);

    // Content resuming
  } else if (player.ads.isContentResuming()) {
    prefixEvent(player, 'content', event);
  }
};

// Handle a player event, either by redispatching it with a prefix, or by
// letting it go on its way without any meddling.
function redispatch(event) {

  // Events with special treatment
  if (event.type === 'playing') {
    handlePlaying(this, event);
  } else if (event.type === 'ended') {
    handleEnded(this, event);
  } else if (event.type === 'loadstart' || event.type === 'loadeddata' || event.type === 'loadedmetadata') {
    handleLoadEvent(this, event);
  } else if (event.type === 'play') {
    handlePlay(this, event);

    // Standard handling for all other events
  } else if (this.ads.isInAdMode()) {
    if (this.ads.isContentResuming()) {

      // Event came from snapshot restore after an ad, use "content" prefix
      prefixEvent(this, 'content', event);
    } else {

      // Event came from ad playback, use "ad" prefix
      prefixEvent(this, 'ad', event);
    }
  }
}

/*
This feature sends a `contentupdate` event when the player source changes.
*/

// Start sending contentupdate events
function initializeContentupdate(player) {

  // Keep track of the current content source
  // If you want to change the src of the video without triggering
  // the ad workflow to restart, you can update this variable before
  // modifying the player's source
  player.ads.contentSrc = player.currentSrc();

  player.ads._seenInitialLoadstart = false;

  // Check if a new src has been set, if so, trigger contentupdate
  var checkSrc = function checkSrc() {
    if (!player.ads.inAdBreak()) {
      var src = player.currentSrc();

      if (src !== player.ads.contentSrc) {

        if (player.ads._seenInitialLoadstart) {
          player.trigger({
            type: 'contentchanged'
          });
        }

        player.trigger({
          type: 'contentupdate',
          oldValue: player.ads.contentSrc,
          newValue: src
        });
        player.ads.contentSrc = src;
      }

      player.ads._seenInitialLoadstart = true;
    }
  };

  // loadstart reliably indicates a new src has been set
  player.on('loadstart', checkSrc);
}

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var win$1;

if (typeof window !== "undefined") {
  win$1 = window;
} else if (typeof commonjsGlobal !== "undefined") {
  win$1 = commonjsGlobal;
} else if (typeof self !== "undefined") {
  win$1 = self;
} else {
  win$1 = {};
}

var window_1 = win$1;

var empty = {};

var empty$1 = (Object.freeze || Object)({
  'default': empty
});

var minDoc = empty$1 && empty || empty$1;

var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : {};

var doccy;

if (typeof document !== 'undefined') {
  doccy = document;
} else {
  doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

  if (!doccy) {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
  }
}

var document_1 = doccy;

var _typeof$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
};

var classCallCheck$2 = function classCallCheck$$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var inherits$2 = function inherits$$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn$2 = function possibleConstructorReturn$$1(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
};

/*
This feature provides an optional method for ad plugins to insert run-time values
into an ad server URL or configuration.
*/

// Return URI encoded version of value if uriEncode is true
var uriEncodeIfNeeded = function uriEncodeIfNeeded(value, uriEncode) {
  if (uriEncode) {
    return encodeURIComponent(value);
  }
  return value;
};

// Add custom field macros to macros object
// based on given name for custom fields property of mediainfo object.
var customFields = function customFields(mediainfo, macros, customFieldsName) {
  if (mediainfo && mediainfo[customFieldsName]) {
    var fields = mediainfo[customFieldsName];
    var fieldNames = Object.keys(fields);

    for (var i = 0; i < fieldNames.length; i++) {
      var tag = '{mediainfo.' + customFieldsName + '.' + fieldNames[i] + '}';

      macros[tag] = fields[fieldNames[i]];
    }
  }
};

// Public method that ad plugins use for ad macros.
// "string" is any string with macros to be replaced
// "uriEncode" if true will uri encode macro values when replaced
// "customMacros" is a object with custom macros and values to map them to
//  - For example: {'{five}': 5}
// Return value is is "string" with macros replaced
//  - For example: adMacroReplacement('{player.id}') returns a string of the player id
function adMacroReplacement(string, uriEncode, customMacros) {
  var _this = this;

  var defaults$$1 = {};

  // Get macros with defaults e.g. {x=y}, store values and replace with standard macros
  string = string.replace(/{([^}=]+)=([^}]+)}/g, function (match, name, defaultVal) {
    defaults$$1['{' + name + '}'] = defaultVal;

    return '{' + name + '}';
  });

  if (uriEncode === undefined) {
    uriEncode = false;
  }

  var macros = {};

  if (customMacros !== undefined) {
    macros = customMacros;
  }

  // Static macros
  macros['{player.id}'] = this.options_['data-player'];
  macros['{mediainfo.id}'] = this.mediainfo ? this.mediainfo.id : '';
  macros['{mediainfo.name}'] = this.mediainfo ? this.mediainfo.name : '';
  macros['{mediainfo.duration}'] = this.mediainfo ? this.mediainfo.duration : '';
  macros['{player.duration}'] = this.duration();
  macros['{timestamp}'] = new Date().getTime();
  macros['{document.referrer}'] = document_1.referrer;
  macros['{window.location.href}'] = window_1.location.href;
  macros['{random}'] = Math.floor(Math.random() * 1000000000000);

  ['description', 'tags', 'reference_id', 'ad_keys'].forEach(function (prop) {
    if (_this.mediainfo && _this.mediainfo[prop]) {
      macros['{mediainfo.' + prop + '}'] = _this.mediainfo[prop];
    } else if (defaults$$1['{mediainfo.' + prop + '}']) {
      macros['{mediainfo.' + prop + '}'] = defaults$$1['{mediainfo.' + prop + '}'];
    } else {
      macros['{mediainfo.' + prop + '}'] = '';
    }
  });

  // Custom fields in mediainfo
  customFields(this.mediainfo, macros, 'custom_fields');
  customFields(this.mediainfo, macros, 'customFields');

  // Go through all the replacement macros and apply them to the string.
  // This will replace all occurrences of the replacement macros.
  for (var i in macros) {
    string = string.split(i).join(uriEncodeIfNeeded(macros[i], uriEncode));
  }

  // Page variables
  string = string.replace(/{pageVariable\.([^}]+)}/g, function (match, name) {
    var value = void 0;
    var context = window_1;
    var names = name.split('.');

    // Iterate down multiple levels of selector without using eval
    // This makes things like pageVariable.foo.bar work
    for (var _i = 0; _i < names.length; _i++) {
      if (_i === names.length - 1) {
        value = context[names[_i]];
      } else {
        context = context[names[_i]];
      }
    }

    var type = typeof value === 'undefined' ? 'undefined' : _typeof$1(value);

    // Only allow certain types of values. Anything else is probably a mistake.
    if (value === null) {
      return 'null';
    } else if (value === undefined) {
      if (defaults$$1['{pageVariable.' + name + '}']) {
        return defaults$$1['{pageVariable.' + name + '}'];
      }
      videojs$1.log.warn('Page variable "' + name + '" not found');
      return '';
    } else if (type !== 'string' && type !== 'number' && type !== 'boolean') {
      videojs$1.log.warn('Page variable "' + name + '" is not a supported type');
      return '';
    }

    return uriEncodeIfNeeded(String(value), uriEncode);
  });

  // Replace defaults
  for (var defaultVal in defaults$$1) {
    string = string.replace(defaultVal, defaults$$1[defaultVal]);
  }

  return string;
}

/*
* This feature allows metadata text tracks to be manipulated once available
* @see processMetadataTracks.
* It also allows ad implementations to leverage ad cues coming through
* text tracks, @see processAdTrack
**/

var cueTextTracks = {};

/*
* This feature allows metadata text tracks to be manipulated once they are available,
* usually after the 'loadstart' event is observed on the player
* @param player A reference to a player
* @param processMetadataTrack A callback that performs some operations on a
* metadata text track
**/
cueTextTracks.processMetadataTracks = function (player, processMetadataTrack) {
  var tracks = player.textTracks();
  var setModeAndProcess = function setModeAndProcess(track) {
    if (track.kind === 'metadata') {
      player.ads.cueTextTracks.setMetadataTrackMode(track);
      processMetadataTrack(player, track);
    }
  };

  // Text tracks are available
  for (var i = 0; i < tracks.length; i++) {
    setModeAndProcess(tracks[i]);
  }

  // Wait until text tracks are added
  tracks.addEventListener('addtrack', function (event) {
    setModeAndProcess(event.track);
  });
};

/*
* Sets the track mode to one of 'disabled', 'hidden' or 'showing'
* @see https://github.com/videojs/video.js/blob/master/docs/guides/text-tracks.md
* Default behavior is to do nothing, @override if this is not desired
* @param track The text track to set the mode on
*/
cueTextTracks.setMetadataTrackMode = function (track) {
  return;
};

/*
* Determines whether cue is an ad cue and returns the cue data.
* @param player A reference to the player
* @param cue The full cue object
* Returns the given cue by default @override if futher processing is required
* @return {Object} a useable ad cue or null if not supported
**/
cueTextTracks.getSupportedAdCue = function (player, cue) {
  return cue;
};

/*
* Defines whether a cue is supported or not, potentially
* based on the player settings
* @param player A reference to the player
* @param cue The cue to be checked
* Default behavior is to return true, @override if this is not desired
* @return {Boolean}
*/
cueTextTracks.isSupportedAdCue = function (player, cue) {
  return true;
};

/*
* Gets the id associated with a cue.
* @param cue The cue to extract an ID from
* @returns The first occurance of 'id' in the object,
* @override if this is not the desired cue id
**/
cueTextTracks.getCueId = function (player, cue) {
  return cue.id;
};

/*
* Checks whether a cue has already been used
* @param cueId The Id associated with a cue
**/
var cueAlreadySeen = function cueAlreadySeen(player, cueId) {
  return cueId !== undefined && player.ads.includedCues[cueId];
};

/*
* Indicates that a cue has been used
* @param cueId The Id associated with a cue
**/
var setCueAlreadySeen = function setCueAlreadySeen(player, cueId) {
  if (cueId !== undefined && cueId !== '') {
    player.ads.includedCues[cueId] = true;
  }
};

/*
* This feature allows ad metadata tracks to be manipulated in ad implementations
* @param player A reference to the player
* @param cues The set of cues to work with
* @param processCue A method that uses a cue to make some
* ad request in the ad implementation
* @param [cancelAdsHandler] A method that dynamically cancels ads in the ad implementation
**/
cueTextTracks.processAdTrack = function (player, cues, processCue, cancelAdsHandler) {
  player.ads.includedCues = {};

  // loop over set of cues
  for (var i = 0; i < cues.length; i++) {
    var cue = cues[i];
    var cueData = this.getSupportedAdCue(player, cue);

    // Exit if this is not a supported cue
    if (!this.isSupportedAdCue(player, cue)) {
      videojs$1.log.warn('Skipping as this is not a supported ad cue.', cue);
      return;
    }

    // Continue processing supported cue
    var cueId = this.getCueId(player, cue);
    var startTime = cue.startTime;

    // Skip ad if cue was already used
    if (cueAlreadySeen(player, cueId)) {
      videojs$1.log('Skipping ad already seen with ID ' + cueId);
      return;
    }

    // Optional dynamic ad cancellation
    if (cancelAdsHandler) {
      cancelAdsHandler(player, cueData, cueId, startTime);
    }

    // Process cue as an ad cue
    processCue(player, cueData, cueId, startTime);

    // Indicate that this cue has been used
    setCueAlreadySeen(player, cueId);
  }
};

function initCancelContentPlay(player, debug) {
  if (debug) {
    videojs$1.log('Using cancelContentPlay to block content playback');
  }

  // Listen to play events to "cancel" them afterward
  player.on('play', cancelContentPlay);
}

/*
This feature makes sure the player is paused during ad loading.

It does this by pausing the player immediately after a "play" where ads will be requested,
then signalling that we should play after the ad is done.
*/

function cancelContentPlay() {
  var player = this;

  if (player.ads._shouldBlockPlay === false) {
    // Only block play if the ad plugin is in a state when content
    // playback should be blocked. This currently means during
    // BeforePrerollState and PrerollState.
    return;
  }

  // pause playback so ads can be handled.
  if (!player.paused()) {
    player.ads.debug('Playback was canceled by cancelContentPlay');
    player.pause();
  }

  // When the 'content-playback' state is entered, this will let us know to play.
  // This is needed if there is no preroll or if it errors, times out, etc.
  player.ads._cancelledPlay = true;
}

var obj = {};
// This reference allows videojs to be mocked in unit tests
// while still using the available videojs import in the source code
// @see obj.testHook
var videojsReference = videojs$1;

/**
 * Checks if middleware mediators are available and
 * can be used on this platform.
 * Currently we can only use mediators on desktop platforms.
 */
obj.isMiddlewareMediatorSupported = function () {

  if (videojsReference.browser.IS_IOS || videojsReference.browser.IS_ANDROID) {
    return false;
  } else if (
  // added when middleware was introduced in video.js
  videojsReference.use &&
  // added when mediators were introduced in video.js
  videojsReference.middleware && videojsReference.middleware.TERMINATOR) {
    return true;
  }

  return false;
};

obj.playMiddleware = function (player) {
  return {
    setSource: function setSource(srcObj, next) {
      next(null, srcObj);
    },
    callPlay: function callPlay() {
      // Block play calls while waiting for an ad, only if this is an
      // ad supported player
      if (player.ads && player.ads._shouldBlockPlay === true) {
        player.ads.debug('Using playMiddleware to block content playback');
        player.ads._playBlocked = true;
        return videojsReference.middleware.TERMINATOR;
      }
    },
    play: function play(terminated, playPromise) {
      if (player.ads && player.ads._playBlocked && terminated) {
        player.ads.debug('Play call to Tech was terminated.');
        // Trigger play event to match the user's intent to play.
        // The call to play on the Tech has been blocked, so triggering
        // the event on the Player will not affect the Tech's playback state.
        player.trigger('play');
        // At this point the player has technically started
        player.addClass('play-has-started');
        // Reset playBlocked
        player.ads._playBlocked = false;

        // Safari issues a pause event when autoplay is blocked but Chrome does not.
        // We fingerprint Chrome using e.message and send a pause for consistency.
        // This keeps the play button synchronized if play is rejected.
      } else if (playPromise && playPromise['catch']) {
        playPromise['catch'](function (e) {
          if (e.message === 'play() failed because the user didn\'t interact with the ' + 'document first. https://goo.gl/xX8pDD') {
            player.trigger('pause');
          }
        });
      }
    }
  };
};

obj.testHook = function (testVjs) {
  videojsReference = testVjs;
};

var playMiddleware = obj.playMiddleware;
var isMiddlewareMediatorSupported$1 = obj.isMiddlewareMediatorSupported;

/**
 * Whether or not this copy of Video.js has the ads plugin.
 *
 * @return {boolean}
 *         If `true`, has the plugin. `false` otherwise.
 */

var hasAdsPlugin = function hasAdsPlugin() {

  // Video.js 6 and 7 have a getPlugin method.
  if (videojs$1.getPlugin) {
    return Boolean(videojs$1.getPlugin('ads'));
  }

  // Video.js 5 does not have a getPlugin method, so check the player prototype.
  var Player = videojs$1.getComponent('Player');

  return Boolean(Player && Player.prototype.ads);
};

/**
 * Register contrib-ads with Video.js, but provide protection for duplicate
 * copies of the plugin. This could happen if, for example, a stitched ads
 * plugin and a client-side ads plugin are included simultaneously with their
 * own copies of contrib-ads.
 *
 * If contrib-ads detects a pre-existing duplicate, it will not register
 * itself.
 *
 * Ad plugins using contrib-ads and anticipating that this could come into
 * effect should verify that the contrib-ads they are using is of a compatible
 * version.
 *
 * @param  {Function} contribAdsPlugin
 *         The plugin function.
 *
 * @return {boolean}
 *         When `true`, the plugin was registered. When `false`, the plugin
 *         was not registered.
 */
function register(contribAdsPlugin) {

  // If the ads plugin already exists, do not overwrite it.
  if (hasAdsPlugin(videojs$1)) {
    return false;
  }

  // Cross-compatibility with Video.js 6/7 and 5.
  var registerPlugin = videojs$1.registerPlugin || videojs$1.plugin;

  // Register this plugin with Video.js.
  registerPlugin('ads', contribAdsPlugin);

  // Register the play middleware with Video.js on script execution,
  // to avoid a new playMiddleware factory being added for each player.
  // The `usingContribAdsMiddleware_` flag is used to ensure that we only ever
  // register the middleware once - despite the ability to de-register and
  // re-register the plugin itself.
  if (isMiddlewareMediatorSupported$1() && !videojs$1.usingContribAdsMiddleware_) {
    // Register the play middleware
    videojs$1.use('*', playMiddleware);
    videojs$1.usingContribAdsMiddleware_ = true;
    videojs$1.log('Play middleware has been registered with videojs');
  }

  return true;
}

var State = function () {
  State._getName = function _getName() {
    return 'Anonymous State';
  };

  function State(player) {
    classCallCheck$2(this, State);

    this.player = player;
  }

  /*
   * This is the only allowed way to perform state transitions. State transitions usually
   * happen in player event handlers. They can also happen recursively in `init`. They
   * should _not_ happen in `cleanup`.
   */

  State.prototype.transitionTo = function transitionTo(NewState) {
    var player = this.player;
    var previousState = this;

    previousState.cleanup(player);
    var newState = new NewState(player);

    player.ads._state = newState;
    player.ads.debug(previousState.constructor._getName() + ' -> ' + newState.constructor._getName());

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    newState.init.apply(newState, [player].concat(args));
  };

  /*
   * Implemented by subclasses to provide initialization logic when transitioning
   * to a new state.
   */

  State.prototype.init = function init() {};

  /*
   * Implemented by subclasses to provide cleanup logic when transitioning
   * to a new state.
   */

  State.prototype.cleanup = function cleanup() {};

  /*
   * Default event handlers. Different states can override these to provide behaviors.
   */

  State.prototype.onPlay = function onPlay() {};

  State.prototype.onPlaying = function onPlaying() {};

  State.prototype.onEnded = function onEnded() {};

  State.prototype.onAdEnded = function onAdEnded() {};

  State.prototype.onAdsReady = function onAdsReady() {
    videojs$1.log.warn('Unexpected adsready event');
  };

  State.prototype.onAdsError = function onAdsError() {};

  State.prototype.onAdsCanceled = function onAdsCanceled() {};

  State.prototype.onAdTimeout = function onAdTimeout() {};

  State.prototype.onAdStarted = function onAdStarted() {};

  State.prototype.onContentChanged = function onContentChanged() {};

  State.prototype.onContentResumed = function onContentResumed() {};

  State.prototype.onReadyForPostroll = function onReadyForPostroll() {
    videojs$1.log.warn('Unexpected readyforpostroll event');
  };

  State.prototype.onNoPreroll = function onNoPreroll() {};

  State.prototype.onNoPostroll = function onNoPostroll() {};

  /*
   * Method handlers. Different states can override these to provide behaviors.
   */

  State.prototype.startLinearAdMode = function startLinearAdMode() {
    videojs$1.log.warn('Unexpected startLinearAdMode invocation ' + '(State via ' + this.constructor._getName() + ')');
  };

  State.prototype.endLinearAdMode = function endLinearAdMode() {
    videojs$1.log.warn('Unexpected endLinearAdMode invocation ' + '(State via ' + this.constructor._getName() + ')');
  };

  State.prototype.skipLinearAdMode = function skipLinearAdMode() {
    videojs$1.log.warn('Unexpected skipLinearAdMode invocation ' + '(State via ' + this.constructor._getName() + ')');
  };

  /*
   * Overridden by ContentState and AdState. Should not be overriden elsewhere.
   */

  State.prototype.isAdState = function isAdState() {
    throw new Error('isAdState unimplemented for ' + this.constructor._getName());
  };

  /*
   * Overridden by Preroll and Postroll. Midrolls jump right into the ad break
   * so there is no "waiting" state for them.
   */

  State.prototype.isWaitingForAdBreak = function isWaitingForAdBreak() {
    return false;
  };

  /*
   * Overridden by Preroll, Midroll, and Postroll.
   */

  State.prototype.isContentResuming = function isContentResuming() {
    return false;
  };

  State.prototype.inAdBreak = function inAdBreak() {
    return false;
  };

  /*
   * Invoke event handler methods when events come in.
   */

  State.prototype.handleEvent = function handleEvent(type) {
    var player = this.player;

    if (type === 'play') {
      this.onPlay(player);
    } else if (type === 'adsready') {
      this.onAdsReady(player);
    } else if (type === 'adserror') {
      this.onAdsError(player);
    } else if (type === 'adscanceled') {
      this.onAdsCanceled(player);
    } else if (type === 'adtimeout') {
      this.onAdTimeout(player);
    } else if (type === 'ads-ad-started') {
      this.onAdStarted(player);
    } else if (type === 'contentchanged') {
      this.onContentChanged(player);
    } else if (type === 'contentresumed') {
      this.onContentResumed(player);
    } else if (type === 'readyforpostroll') {
      this.onReadyForPostroll(player);
    } else if (type === 'playing') {
      this.onPlaying(player);
    } else if (type === 'ended') {
      this.onEnded(player);
    } else if (type === 'nopreroll') {
      this.onNoPreroll(player);
    } else if (type === 'nopostroll') {
      this.onNoPostroll(player);
    } else if (type === 'adended') {
      this.onAdEnded(player);
    }
  };

  return State;
}();

/*
 * This class contains logic for all ads, be they prerolls, midrolls, or postrolls.
 * Primarily, this involves handling startLinearAdMode and endLinearAdMode.
 * It also handles content resuming.
 */

var AdState = function (_State) {
  inherits$2(AdState, _State);

  function AdState(player) {
    classCallCheck$2(this, AdState);

    var _this = possibleConstructorReturn$2(this, _State.call(this, player));

    _this.contentResuming = false;
    _this.waitingForAdBreak = false;
    return _this;
  }

  /*
   * Overrides State.isAdState
   */

  AdState.prototype.isAdState = function isAdState() {
    return true;
  };

  /*
   * We end the content-resuming process on the playing event because this is the exact
   * moment that content playback is no longer blocked by ads.
   */

  AdState.prototype.onPlaying = function onPlaying() {
    if (this.contentResuming) {
      this.transitionTo(ContentPlayback);
    }
  };

  /*
   * If the ad plugin does not result in a playing event when resuming content after an
   * ad, they should instead trigger a contentresumed event to signal that content should
   * resume. The main use case for this is when ads are stitched into the content video.
   */

  AdState.prototype.onContentResumed = function onContentResumed() {
    if (this.contentResuming) {
      this.transitionTo(ContentPlayback);
    }
  };

  /*
   * Check if we are in an ad state waiting for the ad plugin to start
   * an ad break.
   */

  AdState.prototype.isWaitingForAdBreak = function isWaitingForAdBreak() {
    return this.waitingForAdBreak;
  };

  /*
   * Allows you to check if content is currently resuming after an ad break.
   */

  AdState.prototype.isContentResuming = function isContentResuming() {
    return this.contentResuming;
  };

  /*
   * Allows you to check if an ad break is in progress.
   */

  AdState.prototype.inAdBreak = function inAdBreak() {
    return this.player.ads._inLinearAdMode === true;
  };

  return AdState;
}(State);

var ContentState = function (_State) {
  inherits$2(ContentState, _State);

  function ContentState() {
    classCallCheck$2(this, ContentState);
    return possibleConstructorReturn$2(this, _State.apply(this, arguments));
  }

  /*
   * Overrides State.isAdState
   */
  ContentState.prototype.isAdState = function isAdState() {
    return false;
  };

  /*
   * Source change sends you back to preroll checks. contentchanged does not
   * fire during ad breaks, so we don't need to worry about that.
   */

  ContentState.prototype.onContentChanged = function onContentChanged(player) {
    player.ads.debug('Received contentchanged event (ContentState)');
    if (player.paused()) {
      this.transitionTo(BeforePreroll);
    } else {
      this.transitionTo(Preroll, false);
      player.pause();
      player.ads._pausedOnContentupdate = true;
    }
  };

  return ContentState;
}(State);

/*
The snapshot feature is responsible for saving the player state before an ad, then
restoring the player state after an ad.
*/

var tryToResumeTimeout_ = void 0;

/*
 * Returns an object that captures the portions of player state relevant to
 * video playback. The result of this function can be passed to
 * restorePlayerSnapshot with a player to return the player to the state it
 * was in when this function was invoked.
 * @param {Object} player The videojs player object
 */
function getPlayerSnapshot(player) {
  var currentTime = void 0;

  if (videojs$1.browser.IS_IOS && player.ads.isLive(player)) {
    // Record how far behind live we are
    if (player.seekable().length > 0) {
      currentTime = player.currentTime() - player.seekable().end(0);
    } else {
      currentTime = player.currentTime();
    }
  } else {
    currentTime = player.currentTime();
  }

  var tech = player.$('.play-tech');
  var tracks = player.textTracks ? player.textTracks() : [];
  var suppressedTracks = [];
  var snapshotObject = {
    ended: player.ended(),
    currentSrc: player.currentSrc(),
    sources: player.currentSources(),
    src: player.tech_.src(),
    currentTime: currentTime,
    type: player.currentType()
  };

  if (tech) {
    snapshotObject.style = tech.getAttribute('style');
  }

  for (var i = 0; i < tracks.length; i++) {
    var track = tracks[i];

    suppressedTracks.push({
      track: track,
      mode: track.mode
    });
    track.mode = 'disabled';
  }
  snapshotObject.suppressedTracks = suppressedTracks;

  return snapshotObject;
}

/*
 * Attempts to modify the specified player so that its state is equivalent to
 * the state of the snapshot.
 * @param {Object} player - the videojs player object
 * @param {Object} snapshotObject - the player state to apply
 */
function restorePlayerSnapshot(player, callback) {
  var snapshotObject = player.ads.snapshot;

  if (callback === undefined) {
    callback = function callback() {};
  }

  if (player.ads.disableNextSnapshotRestore === true) {
    player.ads.disableNextSnapshotRestore = false;
    delete player.ads.snapshot;
    callback();
    return;
  }

  // The playback tech
  var tech = player.$('.play-tech');

  // the number of[ remaining attempts to restore the snapshot
  var attempts = 20;

  var suppressedTracks = snapshotObject.suppressedTracks;

  var trackSnapshot = void 0;
  var restoreTracks = function restoreTracks() {
    for (var i = 0; i < suppressedTracks.length; i++) {
      trackSnapshot = suppressedTracks[i];
      trackSnapshot.track.mode = trackSnapshot.mode;
    }
  };

  // Finish restoring the playback state.
  // This only happens if the content video element was reused for ad playback.
  var resume = function resume() {
    var currentTime = void 0;

    // Live video on iOS has special logic to try to seek to the right place after
    // an ad.
    if (videojs$1.browser.IS_IOS && player.ads.isLive(player)) {
      if (snapshotObject.currentTime < 0) {
        // Playback was behind real time, so seek backwards to match
        if (player.seekable().length > 0) {
          currentTime = player.seekable().end(0) + snapshotObject.currentTime;
        } else {
          currentTime = player.currentTime();
        }
        player.currentTime(currentTime);
      }

      // iOS live play after restore if player was paused (would not be paused if
      // ad played muted behind ad)
      if (player.paused()) {
        var playPromise = player.play();

        if (playPromise && playPromise['catch']) {
          playPromise['catch'](function (error) {
            videojs$1.log.warn('Play promise rejected in IOS snapshot resume', error);
          });
        }
      }

      // Restore the video position after an ad.
      // We check snapshotObject.ended because the content starts at the beginning again
      // after being restored.
    } else if (snapshotObject.ended) {
      // For postrolls, seek to the player's current duration.
      // It could be different from the snapshot's currentTime due to
      // inaccuracy in HLS.
      player.currentTime(player.duration());
    } else {
      // Prerolls and midrolls, just seek to the player time before the ad.
      player.currentTime(snapshotObject.currentTime);
      var _playPromise = player.play();

      if (_playPromise && _playPromise['catch']) {
        _playPromise['catch'](function (error) {
          videojs$1.log.warn('Play promise rejected in snapshot resume', error);
        });
      }
    }

    // if we added autoplay to force content loading on iOS, remove it now
    // that it has served its purpose
    if (player.ads.shouldRemoveAutoplay_) {
      player.autoplay(false);
      player.ads.shouldRemoveAutoplay_ = false;
    }
  };

  // Determine if the video element has loaded enough of the snapshot source
  // to be ready to apply the rest of the state.
  // This only happens if the content video element was reused for ad playback.
  var tryToResume = function tryToResume() {

    // tryToResume can either have been called through the `contentcanplay`
    // event or fired through setTimeout.
    // When tryToResume is called, we should make sure to clear out the other
    // way it could've been called by removing the listener and clearing out
    // the timeout.
    player.off('contentcanplay', tryToResume);
    if (tryToResumeTimeout_) {
      player.clearTimeout(tryToResumeTimeout_);
    }

    // Tech may have changed depending on the differences in sources of the
    // original video and that of the ad
    tech = player.el().querySelector('.play-tech');

    if (tech.readyState > 1) {
      // some browsers and media aren't "seekable".
      // readyState greater than 1 allows for seeking without exceptions
      return resume();
    }

    if (tech.seekable === undefined) {
      // if the tech doesn't expose the seekable time ranges, try to
      // resume playback immediately
      return resume();
    }

    if (tech.seekable.length > 0) {
      // if some period of the video is seekable, resume playback
      return resume();
    }

    // delay a bit and then check again unless we're out of attempts
    if (attempts--) {
      player.setTimeout(tryToResume, 50);
    } else {
      try {
        resume();
      } catch (e) {
        videojs$1.log.warn('Failed to resume the content after an advertisement', e);
      }
    }
  };

  if ('style' in snapshotObject) {
    // overwrite all css style properties to restore state precisely
    tech.setAttribute('style', snapshotObject.style || '');
  }

  // Determine whether the player needs to be restored to its state
  // before ad playback began. With a custom ad display or burned-in
  // ads, the content player state hasn't been modified and so no
  // restoration is required

  if (player.ads.videoElementRecycled()) {
    // Snapshot restore is done, so now we're really finished.
    player.one('resumeended', function () {
      delete player.ads.snapshot;
      callback();
    });

    // on ios7, fiddling with textTracks too early will cause safari to crash
    player.one('contentloadedmetadata', restoreTracks);

    // adding autoplay guarantees that Safari will load the content so we can
    // seek back to the correct time after ads
    if (videojs$1.browser.IS_IOS && !player.autoplay()) {
      player.autoplay(true);

      // if we get here, the player was not originally configured to autoplay,
      // so we should remove it after it has served its purpose
      player.ads.shouldRemoveAutoplay_ = true;
    }

    // if the src changed for ad playback, reset it
    player.src(snapshotObject.sources);

    // and then resume from the snapshots time once the original src has loaded
    // in some browsers (firefox) `canplay` may not fire correctly.
    // Reace the `canplay` event with a timeout.
    player.one('contentcanplay', tryToResume);
    tryToResumeTimeout_ = player.setTimeout(tryToResume, 2000);
  } else {
    // if we didn't change the src, just restore the tracks
    restoreTracks();

    // we don't need to check snapshotObject.ended here because the content video
    // element wasn't recycled
    if (!player.ended()) {
      // the src didn't change and this wasn't a postroll
      // just resume playback at the current time.
      var playPromise = player.play();

      if (playPromise && playPromise['catch']) {
        playPromise['catch'](function (error) {
          videojs$1.log.warn('Play promise rejected in snapshot restore', error);
        });
      }
    }

    // snapshot restore is complete
    delete player.ads.snapshot;
    callback();
  }
}

/*
 * Encapsulates logic for starting and ending ad breaks. An ad break
 * is the time between startLinearAdMode and endLinearAdMode. The ad
 * plugin may play 0 or more ads during this time.
 */

function start(player) {
  player.ads.debug('Starting ad break');

  player.ads._inLinearAdMode = true;

  // No longer does anything, used to move us to ad-playback
  player.trigger('adstart');

  // Capture current player state snapshot
  if (player.ads.shouldTakeSnapshots()) {
    player.ads.snapshot = getPlayerSnapshot(player);
  }

  // Mute the player behind the ad
  if (player.ads.shouldPlayContentBehindAd(player)) {
    player.ads.preAdVolume_ = player.volume();
    player.volume(0);
  }

  // Add css to the element to indicate and ad is playing.
  player.addClass('play-ad-playing');

  // We should remove the play-live class if it has been added in order to
  // show the adprogress control bar on Android devices for falsely
  // determined LIVE videos due to the duration incorrectly reported as Infinity
  if (player.hasClass('play-live')) {
    player.removeClass('play-live');
  }

  // This removes the native poster so the ads don't show the content
  // poster if content element is reused for ad playback.
  player.ads.removeNativePoster();
}

function end(player, callback) {
  player.ads.debug('Ending ad break');

  if (callback === undefined) {
    callback = function callback() {};
  }

  player.ads.adType = null;

  player.ads._inLinearAdMode = false;

  // Signals the end of the ad break to anyone listening.
  player.trigger('adend');

  player.removeClass('play-ad-playing');

  // We should add the play-live class back if the video is a LIVE video
  // If we dont do this, then for a LIVE Video, we will get an incorrect
  // styled control, which displays the time for the video
  if (player.ads.isLive(player)) {
    player.addClass('play-live');
  }

  // Restore snapshot
  if (player.ads.shouldTakeSnapshots()) {
    restorePlayerSnapshot(player, callback);

    // Reset the volume to pre-ad levels
  } else {
    player.volume(player.ads.preAdVolume_);
    callback();
  }
}

var obj$1 = { start: start, end: end };

/*
 * This state encapsulates waiting for prerolls, preroll playback, and
 * content restoration after a preroll.
 */

var Preroll = function (_AdState) {
  inherits$2(Preroll, _AdState);

  function Preroll() {
    classCallCheck$2(this, Preroll);
    return possibleConstructorReturn$2(this, _AdState.apply(this, arguments));
  }

  /*
   * Allows state name to be logged even after minification.
   */
  Preroll._getName = function _getName() {
    return 'Preroll';
  };

  /*
   * For state transitions to work correctly, initialization should
   * happen here, not in a constructor.
   */

  Preroll.prototype.init = function init(player, adsReady, shouldResumeToContent) {
    this.waitingForAdBreak = true;

    // Loading spinner from now until ad start or end of ad break.
    player.addClass('play-ad-loading');

    // If adserror, adscanceled, nopreroll or skipLinearAdMode already
    // ocurred, resume to content immediately
    if (shouldResumeToContent || player.ads.nopreroll_) {
      return this.resumeAfterNoPreroll(player);
    }

    // Determine preroll timeout based on plugin settings
    var timeout = player.ads.settings.timeout;

    if (typeof player.ads.settings.prerollTimeout === 'number') {
      timeout = player.ads.settings.prerollTimeout;
    }

    // Start the clock ticking for ad timeout
    this._timeout = player.setTimeout(function () {
      player.trigger('adtimeout');
    }, timeout);

    // If adsready already happened, lets get started. Otherwise,
    // wait until onAdsReady.
    if (adsReady) {
      this.handleAdsReady();
    } else {
      this.adsReady = false;
    }
  };

  /*
   * Adsready event after play event.
   */

  Preroll.prototype.onAdsReady = function onAdsReady(player) {
    if (!player.ads.inAdBreak()) {
      player.ads.debug('Received adsready event (Preroll)');
      this.handleAdsReady();
    } else {
      videojs$1.log.warn('Unexpected adsready event (Preroll)');
    }
  };

  /*
   * Ad plugin is ready. Let's get started on this preroll.
   */

  Preroll.prototype.handleAdsReady = function handleAdsReady() {
    this.adsReady = true;
    this.readyForPreroll();
  };

  /*
   * Helper to call a callback only after a loadstart event.
   * If we start content or ads before loadstart, loadstart
   * will not be prefixed correctly.
   */

  Preroll.prototype.afterLoadStart = function afterLoadStart(callback) {
    var player = this.player;

    if (player.ads._hasThereBeenALoadStartDuringPlayerLife) {
      callback();
    } else {
      player.ads.debug('Waiting for loadstart...');
      player.one('loadstart', function () {
        player.ads.debug('Received loadstart event');
        callback();
      });
    }
  };

  /*
   * If there is no preroll, play content instead.
   */

  Preroll.prototype.noPreroll = function noPreroll() {
    var _this2 = this;

    this.afterLoadStart(function () {
      _this2.player.ads.debug('Skipping prerolls due to nopreroll event (Preroll)');
      _this2.resumeAfterNoPreroll(_this2.player);
    });
  };

  /*
   * Fire the readyforpreroll event. If loadstart hasn't happened yet,
   * wait until loadstart first.
   */

  Preroll.prototype.readyForPreroll = function readyForPreroll() {
    var player = this.player;

    this.afterLoadStart(function () {
      player.ads.debug('Triggered readyforpreroll event (Preroll)');
      player.trigger('readyforpreroll');
    });
  };

  /*
   * adscanceled cancels all ads for the source. Play content now.
   */

  Preroll.prototype.onAdsCanceled = function onAdsCanceled(player) {
    var _this3 = this;

    player.ads.debug('adscanceled (Preroll)');

    this.afterLoadStart(function () {
      _this3.resumeAfterNoPreroll(player);
    });
  };

  /*
   * An ad error occured. Play content instead.
   */

  Preroll.prototype.onAdsError = function onAdsError(player) {
    var _this4 = this;

    videojs$1.log('adserror (Preroll)');
    // In the future, we may not want to do this automatically.
    // Ad plugins should be able to choose to continue the ad break
    // if there was an error.
    if (this.inAdBreak()) {
      player.ads.endLinearAdMode();
    } else {
      this.afterLoadStart(function () {
        _this4.resumeAfterNoPreroll(player);
      });
    }
  };

  /*
   * Ad plugin invoked startLinearAdMode, the ad break starts now.
   */

  Preroll.prototype.startLinearAdMode = function startLinearAdMode() {
    var player = this.player;

    if (this.adsReady && !player.ads.inAdBreak() && !this.isContentResuming()) {
      player.clearTimeout(this._timeout);
      player.ads.adType = 'preroll';
      this.waitingForAdBreak = false;
      obj$1.start(player);

      // We don't need to block play calls anymore
      player.ads._shouldBlockPlay = false;
    } else {
      videojs$1.log.warn('Unexpected startLinearAdMode invocation (Preroll)');
    }
  };

  /*
   * An ad has actually started playing.
   * Remove the loading spinner.
   */

  Preroll.prototype.onAdStarted = function onAdStarted(player) {
    player.removeClass('play-ad-loading');
  };

  /*
   * Ad plugin invoked endLinearAdMode, the ad break ends now.
   */

  Preroll.prototype.endLinearAdMode = function endLinearAdMode() {
    var player = this.player;

    if (this.inAdBreak()) {
      player.removeClass('play-ad-loading');
      player.addClass('play-ad-content-resuming');
      this.contentResuming = true;
      obj$1.end(player);
    }
  };

  /*
   * Ad skipped by ad plugin. Play content instead.
   */

  Preroll.prototype.skipLinearAdMode = function skipLinearAdMode() {
    var _this5 = this;

    var player = this.player;

    if (player.ads.inAdBreak() || this.isContentResuming()) {
      videojs$1.log.warn('Unexpected skipLinearAdMode invocation');
    } else {
      this.afterLoadStart(function () {
        player.trigger('adskip');
        player.ads.debug('skipLinearAdMode (Preroll)');
        _this5.resumeAfterNoPreroll(player);
      });
    }
  };

  /*
   * Prerolls took too long! Play content instead.
   */

  Preroll.prototype.onAdTimeout = function onAdTimeout(player) {
    var _this6 = this;

    this.afterLoadStart(function () {
      player.ads.debug('adtimeout (Preroll)');
      _this6.resumeAfterNoPreroll(player);
    });
  };

  /*
   * Check if nopreroll event was too late before handling it.
   */

  Preroll.prototype.onNoPreroll = function onNoPreroll(player) {
    if (player.ads.inAdBreak() || this.isContentResuming()) {
      videojs$1.log.warn('Unexpected nopreroll event (Preroll)');
    } else {
      this.noPreroll();
    }
  };

  Preroll.prototype.resumeAfterNoPreroll = function resumeAfterNoPreroll(player) {
    // Resume to content and unblock play as there is no preroll ad
    this.contentResuming = true;
    player.ads._shouldBlockPlay = false;

    // Play the content if we had requested play or we paused on 'contentupdate'
    // and we haven't played yet. This happens if there was no preroll or if it
    // errored, timed out, etc. Otherwise snapshot restore would play.
    if (player.paused() && (player.ads._playRequested || player.ads._pausedOnContentupdate)) {
      player.play();
    }
  };

  /*
   * Cleanup timeouts and spinner.
   */

  Preroll.prototype.cleanup = function cleanup(player) {
    if (!player.ads._hasThereBeenALoadStartDuringPlayerLife) {
      videojs$1.log.warn('Leaving Preroll state before loadstart event can cause issues.');
    }

    player.removeClass('play-ad-loading');
    player.removeClass('play-ad-content-resuming');
    player.clearTimeout(this._timeout);
  };

  return Preroll;
}(AdState);

var Midroll = function (_AdState) {
  inherits$2(Midroll, _AdState);

  function Midroll() {
    classCallCheck$2(this, Midroll);
    return possibleConstructorReturn$2(this, _AdState.apply(this, arguments));
  }

  /*
   * Allows state name to be logged even after minification.
   */
  Midroll._getName = function _getName() {
    return 'Midroll';
  };

  /*
   * Midroll breaks happen when the ad plugin calls startLinearAdMode,
   * which can happen at any time during content playback.
   */

  Midroll.prototype.init = function init(player) {
    player.ads.adType = 'midroll';
    obj$1.start(player);
    player.addClass('play-ad-loading');
  };

  /*
   * An ad has actually started playing.
   * Remove the loading spinner.
   */

  Midroll.prototype.onAdStarted = function onAdStarted(player) {
    player.removeClass('play-ad-loading');
  };

  /*
   * Midroll break is done.
   */

  Midroll.prototype.endLinearAdMode = function endLinearAdMode() {
    var player = this.player;

    if (this.inAdBreak()) {
      this.contentResuming = true;
      player.addClass('play-ad-content-resuming');
      player.removeClass('play-ad-loading');
      obj$1.end(player);
    }
  };

  /*
   * End midroll break if there is an error.
   */

  Midroll.prototype.onAdsError = function onAdsError(player) {
    // In the future, we may not want to do this automatically.
    // Ad plugins should be able to choose to continue the ad break
    // if there was an error.
    if (this.inAdBreak()) {
      player.ads.endLinearAdMode();
    }
  };

  /*
   * Cleanup CSS classes.
   */

  Midroll.prototype.cleanup = function cleanup(player) {
    player.removeClass('play-ad-loading');
    player.removeClass('play-ad-content-resuming');
  };

  return Midroll;
}(AdState);

var Postroll = function (_AdState) {
  inherits$2(Postroll, _AdState);

  function Postroll() {
    classCallCheck$2(this, Postroll);
    return possibleConstructorReturn$2(this, _AdState.apply(this, arguments));
  }

  /*
   * Allows state name to be logged even after minification.
   */
  Postroll._getName = function _getName() {
    return 'Postroll';
  };

  /*
   * For state transitions to work correctly, initialization should
   * happen here, not in a constructor.
   */

  Postroll.prototype.init = function init(player) {
    this.waitingForAdBreak = true;

    // Legacy name that now simply means "handling postrolls".
    player.ads._contentEnding = true;

    // Start postroll process.
    if (!player.ads.nopostroll_) {
      player.addClass('play-ad-loading');

      // Determine postroll timeout based on plugin settings
      var timeout = player.ads.settings.timeout;

      if (typeof player.ads.settings.postrollTimeout === 'number') {
        timeout = player.ads.settings.postrollTimeout;
      }

      this._postrollTimeout = player.setTimeout(function () {
        player.trigger('adtimeout');
      }, timeout);

      // No postroll, ads are done
    } else {
      this.resumeContent(player);
      this.transitionTo(AdsDone);
    }
  };

  /*
   * Start the postroll if it's not too late.
   */

  Postroll.prototype.startLinearAdMode = function startLinearAdMode() {
    var player = this.player;

    if (!player.ads.inAdBreak() && !this.isContentResuming()) {
      player.ads.adType = 'postroll';
      player.clearTimeout(this._postrollTimeout);
      this.waitingForAdBreak = false;
      obj$1.start(player);
    } else {
      videojs$1.log.warn('Unexpected startLinearAdMode invocation (Postroll)');
    }
  };

  /*
   * An ad has actually started playing.
   * Remove the loading spinner.
   */

  Postroll.prototype.onAdStarted = function onAdStarted(player) {
    player.removeClass('play-ad-loading');
  };

  /*
   * Ending a postroll triggers the ended event.
   */

  Postroll.prototype.endLinearAdMode = function endLinearAdMode() {
    var _this2 = this;

    var player = this.player;

    if (this.inAdBreak()) {
      player.removeClass('play-ad-loading');
      this.resumeContent(player);
      obj$1.end(player, function () {
        _this2.transitionTo(AdsDone);
      });
    }
  };

  /*
   * Postroll skipped, time to clean up.
   */

  Postroll.prototype.skipLinearAdMode = function skipLinearAdMode() {
    var player = this.player;

    if (player.ads.inAdBreak() || this.isContentResuming()) {
      videojs$1.log.warn('Unexpected skipLinearAdMode invocation');
    } else {
      player.ads.debug('Postroll abort (skipLinearAdMode)');
      player.trigger('adskip');
      this.abort(player);
    }
  };

  /*
   * Postroll timed out, time to clean up.
   */

  Postroll.prototype.onAdTimeout = function onAdTimeout(player) {
    player.ads.debug('Postroll abort (adtimeout)');
    this.abort(player);
  };

  /*
   * Postroll errored out, time to clean up.
   */

  Postroll.prototype.onAdsError = function onAdsError(player) {
    player.ads.debug('Postroll abort (adserror)');

    // In the future, we may not want to do this automatically.
    // Ad plugins should be able to choose to continue the ad break
    // if there was an error.
    if (player.ads.inAdBreak()) {
      player.ads.endLinearAdMode();
    } else {
      this.abort(player);
    }
  };

  /*
   * Handle content change if we're not in an ad break.
   */

  Postroll.prototype.onContentChanged = function onContentChanged(player) {
    // Content resuming after Postroll. Content is paused
    // at this point, since it is done playing.
    if (this.isContentResuming()) {
      this.transitionTo(BeforePreroll);

      // Waiting for postroll to start. Content is considered playing
      // at this point, since it had to be playing to start the postroll.
    } else if (!this.inAdBreak()) {
      this.transitionTo(Preroll);
    }
  };

  /*
   * Wrap up if there is no postroll.
   */

  Postroll.prototype.onNoPostroll = function onNoPostroll(player) {
    if (!this.isContentResuming() && !this.inAdBreak()) {
      this.abort(player);
    } else {
      videojs$1.log.warn('Unexpected nopostroll event (Postroll)');
    }
  };

  Postroll.prototype.resumeContent = function resumeContent(player) {
    this.contentResuming = true;
    player.addClass('play-ad-content-resuming');
  };

  /*
   * Helper for ending Postrolls. In the future we may want to
   * refactor this class so that `cleanup` handles all of this.
   */

  Postroll.prototype.abort = function abort(player) {
    this.resumeContent(player);
    player.removeClass('play-ad-loading');
    this.transitionTo(AdsDone);
  };

  /*
   * Cleanup timeouts and state.
   */

  Postroll.prototype.cleanup = function cleanup(player) {
    player.removeClass('play-ad-content-resuming');
    player.clearTimeout(this._postrollTimeout);
    player.ads._contentEnding = false;
  };

  return Postroll;
}(AdState);

/*
 * This is the initial state for a player with an ad plugin. Normally, it remains in this
 * state until a "play" event is seen. After that, we enter the Preroll state to check for
 * prerolls. This happens regardless of whether or not any prerolls ultimately will play.
 * Errors and other conditions may lead us directly from here to ContentPlayback.
 */

var BeforePreroll = function (_ContentState) {
  inherits$2(BeforePreroll, _ContentState);

  function BeforePreroll() {
    classCallCheck$2(this, BeforePreroll);
    return possibleConstructorReturn$2(this, _ContentState.apply(this, arguments));
  }

  /*
   * Allows state name to be logged even after minification.
   */
  BeforePreroll._getName = function _getName() {
    return 'BeforePreroll';
  };

  /*
   * For state transitions to work correctly, initialization should
   * happen here, not in a constructor.
   */

  BeforePreroll.prototype.init = function init(player) {
    this.adsReady = false;
    this.shouldResumeToContent = false;

    // Content playback should be blocked until we are done
    // playing ads or we know there are no ads to play
    player.ads._shouldBlockPlay = true;
  };

  /*
   * The ad plugin may trigger adsready before the play request. If so,
   * we record that adsready already happened so the Preroll state will know.
   */

  BeforePreroll.prototype.onAdsReady = function onAdsReady(player) {
    player.ads.debug('Received adsready event (BeforePreroll)');
    this.adsReady = true;
  };

  /*
   * Ad mode officially begins on the play request, because at this point
   * content playback is blocked by the ad plugin.
   */

  BeforePreroll.prototype.onPlay = function onPlay(player) {
    player.ads.debug('Received play event (BeforePreroll)');

    // Check for prerolls
    this.transitionTo(Preroll, this.adsReady, this.shouldResumeToContent);
  };

  /*
   * All ads for the entire video are canceled.
   */

  BeforePreroll.prototype.onAdsCanceled = function onAdsCanceled(player) {
    player.ads.debug('adscanceled (BeforePreroll)');
    this.shouldResumeToContent = true;
  };

  /*
   * An ad error occured. Play content instead.
   */

  BeforePreroll.prototype.onAdsError = function onAdsError() {
    this.player.ads.debug('adserror (BeforePreroll)');
    this.shouldResumeToContent = true;
  };

  /*
   * If there is no preroll, don't wait for a play event to move forward.
   */

  BeforePreroll.prototype.onNoPreroll = function onNoPreroll() {
    this.player.ads.debug('Skipping prerolls due to nopreroll event (BeforePreroll)');
    this.shouldResumeToContent = true;
  };

  /*
   * Prerolls skipped by ad plugin. Play content instead.
   */

  BeforePreroll.prototype.skipLinearAdMode = function skipLinearAdMode() {
    var player = this.player;

    player.trigger('adskip');
    player.ads.debug('skipLinearAdMode (BeforePreroll)');
    this.shouldResumeToContent = true;
  };

  BeforePreroll.prototype.onContentChanged = function onContentChanged() {
    this.init(this.player);
  };

  return BeforePreroll;
}(ContentState);

/*
 * This state represents content playback the first time through before
 * content ends. After content has ended once, we check for postrolls and
 * move on to the AdsDone state rather than returning here.
 */

var ContentPlayback = function (_ContentState) {
  inherits$2(ContentPlayback, _ContentState);

  function ContentPlayback() {
    classCallCheck$2(this, ContentPlayback);
    return possibleConstructorReturn$2(this, _ContentState.apply(this, arguments));
  }

  /*
   * Allows state name to be logged even after minification.
   */
  ContentPlayback._getName = function _getName() {
    return 'ContentPlayback';
  };

  /*
   * For state transitions to work correctly, initialization should
   * happen here, not in a constructor.
   */

  ContentPlayback.prototype.init = function init(player) {
    // Don't block calls to play in content playback
    player.ads._shouldBlockPlay = false;
  };

  /*
   * In the case of a timeout, adsready might come in late. This assumes the behavior
   * that if an ad times out, it could still interrupt the content and start playing.
   * An ad plugin could behave otherwise by ignoring this event.
   */

  ContentPlayback.prototype.onAdsReady = function onAdsReady(player) {
    player.ads.debug('Received adsready event (ContentPlayback)');

    if (!player.ads.nopreroll_) {
      player.ads.debug('Triggered readyforpreroll event (ContentPlayback)');
      player.trigger('readyforpreroll');
    }
  };

  /*
   * Content ended before postroll checks.
   */

  ContentPlayback.prototype.onReadyForPostroll = function onReadyForPostroll(player) {
    player.ads.debug('Received readyforpostroll event');
    this.transitionTo(Postroll);
  };

  /*
   * This is how midrolls start.
   */

  ContentPlayback.prototype.startLinearAdMode = function startLinearAdMode() {
    this.transitionTo(Midroll);
  };

  return ContentPlayback;
}(ContentState);

var AdsDone = function (_ContentState) {
  inherits$2(AdsDone, _ContentState);

  function AdsDone() {
    classCallCheck$2(this, AdsDone);
    return possibleConstructorReturn$2(this, _ContentState.apply(this, arguments));
  }

  /*
   * Allows state name to be logged even after minification.
   */
  AdsDone._getName = function _getName() {
    return 'AdsDone';
  };

  /*
   * For state transitions to work correctly, initialization should
   * happen here, not in a constructor.
   */

  AdsDone.prototype.init = function init(player) {
    // From now on, `ended` events won't be redispatched
    player.ads._contentHasEnded = true;
    player.trigger('ended');
  };

  /*
   * Midrolls do not play after ads are done.
   */

  AdsDone.prototype.startLinearAdMode = function startLinearAdMode() {
    videojs$1.log.warn('Unexpected startLinearAdMode invocation (AdsDone)');
  };

  return AdsDone;
}(ContentState);

var StitchedAdRoll = function (_AdState) {
  inherits$2(StitchedAdRoll, _AdState);

  function StitchedAdRoll() {
    classCallCheck$2(this, StitchedAdRoll);
    return possibleConstructorReturn$2(this, _AdState.apply(this, arguments));
  }

  /*
   * Allows state name to be logged even after minification.
   */
  StitchedAdRoll._getName = function _getName() {
    return 'StitchedAdRoll';
  };

  /*
   * StitchedAdRoll breaks happen when the ad plugin calls startLinearAdMode,
   * which can happen at any time during content playback.
   */

  StitchedAdRoll.prototype.init = function init() {
    this.waitingForAdBreak = false;
    this.contentResuming = false;
    this.player.ads.adType = 'stitched';
    obj$1.start(this.player);
  };

  /*
   * For stitched ads, there is no "content resuming" scenario, so a "playing"
   * event is not relevant.
   */

  StitchedAdRoll.prototype.onPlaying = function onPlaying() {};

  /*
   * For stitched ads, there is no "content resuming" scenario, so a
   * "contentresumed" event is not relevant.
   */

  StitchedAdRoll.prototype.onContentResumed = function onContentResumed() {};

  /*
   * When we see an "adended" event, it means that we are in a postroll that
   * has ended (because the media ended and we are still in an ad state).
   *
   * In these cases, we transition back to content mode and fire ended.
   */

  StitchedAdRoll.prototype.onAdEnded = function onAdEnded() {
    this.endLinearAdMode();
    this.player.trigger('ended');
  };

  /*
   * StitchedAdRoll break is done.
   */

  StitchedAdRoll.prototype.endLinearAdMode = function endLinearAdMode() {
    obj$1.end(this.player);
    this.transitionTo(StitchedContentPlayback);
  };

  return StitchedAdRoll;
}(AdState);

/*
 * This state represents content playback when stitched ads are in play.
 */

var StitchedContentPlayback = function (_ContentState) {
  inherits$2(StitchedContentPlayback, _ContentState);

  function StitchedContentPlayback() {
    classCallCheck$2(this, StitchedContentPlayback);
    return possibleConstructorReturn$2(this, _ContentState.apply(this, arguments));
  }

  /*
   * Allows state name to be logged even after minification.
   */
  StitchedContentPlayback._getName = function _getName() {
    return 'StitchedContentPlayback';
  };

  /*
   * For state transitions to work correctly, initialization should
   * happen here, not in a constructor.
   */

  StitchedContentPlayback.prototype.init = function init() {

    // Don't block calls to play in stitched ad players, ever.
    this.player.ads._shouldBlockPlay = false;
  };

  /*
   * Source change does not do anything for stitched ad players.
   * contentchanged does not fire during ad breaks, so we don't need to
   * worry about that.
   */

  StitchedContentPlayback.prototype.onContentChanged = function onContentChanged() {
    this.player.ads.debug('Received contentchanged event (' + this._getName() + ')');
  };

  /*
   * This is how stitched ads start.
   */

  StitchedContentPlayback.prototype.startLinearAdMode = function startLinearAdMode() {
    this.transitionTo(StitchedAdRoll);
  };

  return StitchedContentPlayback;
}(ContentState);

/*
 * This file is necessary to avoid this rollup issue:
 * https://github.com/rollup/rollup/issues/1089
 */

/*
This main plugin file is responsible for the public API and enabling the features
that live in in separate files.
*/

var isMiddlewareMediatorSupported = obj.isMiddlewareMediatorSupported;

var VIDEO_EVENTS = videojs$1.getTech('Html5').Events;

// Default settings
var defaults$6 = {
  // Maximum amount of time in ms to wait to receive `adsready` from the ad
  // implementation after play has been requested. Ad implementations are
  // expected to load any dynamic libraries and make any requests to determine
  // ad policies for a video during this time.
  timeout: 5000,

  // Maximum amount of time in ms to wait for the ad implementation to start
  // linear ad mode after `readyforpreroll` has fired. This is in addition to
  // the standard timeout.
  prerollTimeout: undefined,

  // Maximum amount of time in ms to wait for the ad implementation to start
  // linear ad mode after `readyforpostroll` has fired.
  postrollTimeout: undefined,

  // When truthy, instructs the plugin to output additional information about
  // plugin state to the video.js log. On most devices, the video.js log is
  // the same as the developer console.
  debug: false,

  // Set this to true when using ads that are part of the content video
  stitchedAds: false,

  // Force content to be treated as live or not live
  // if not defined, the code will try to infer if content is live,
  // which can have limitations.
  contentIsLive: undefined,

  // If set to true, content will play muted behind ads on supported platforms. This is
  // to support ads on video metadata cuepoints during a live stream. It also results in
  // more precise resumes after ads during a live stream.
  liveCuePoints: true
};

var contribAdsPlugin = function contribAdsPlugin(options) {

  var player = this; // eslint-disable-line consistent-this

  var settings = videojs$1.mergeOptions(defaults$6, options);

  // Prefix all video element events during ad playback
  // if the video element emits ad-related events directly,
  // plugins that aren't ad-aware will break. prefixing allows
  // plugins that wish to handle ad events to do so while
  // avoiding the complexity for common usage
  var videoEvents = VIDEO_EVENTS.concat(['firstplay', 'loadedalldata', 'playing']);

  // Set up redispatching of player events
  player.on(videoEvents, redispatch);

  // Set up features to block content playback while waiting for ads.
  // Play middleware is only supported on later versions of video.js
  // and on desktop currently(as the user-gesture requirement on mobile
  // will disallow calling play once play blocking is lifted)
  // The middleware must also be registered outside of the plugin,
  // to avoid a middleware factory being created for each player
  if (!isMiddlewareMediatorSupported()) {
    initCancelContentPlay(player, settings.debug);
  }

  // If we haven't seen a loadstart after 5 seconds, the plugin was not initialized
  // correctly.
  player.setTimeout(function () {
    if (!player.ads._hasThereBeenALoadStartDuringPlayerLife && player.src() !== '') {
      videojs$1.log.error('videojs-contrib-ads has not seen a loadstart event 5 seconds ' + 'after being initialized, but a source is present. This indicates that ' + 'videojs-contrib-ads was initialized too late. It must be initialized ' + 'immediately after video.js in the same tick. As a result, some ads will not ' + 'play and some media events will be incorrect. For more information, see ' + 'http://videojs.github.io/videojs-contrib-ads/integrator/getting-started.html');
    }
  }, 5000);

  // "play-has-started" should be present at the end of a video. This makes sure it's
  // always there.
  player.on('ended', function () {
    if (!player.hasClass('play-has-started')) {
      player.addClass('play-has-started');
    }
  });

  // video.js removes the play-waiting class on timeupdate. We want
  // to make sure this still happens during content restoration.
  player.on('contenttimeupdate', function () {
    player.removeClass('play-waiting');
  });

  // We now auto-play when an ad gets loaded if we're playing ads in the same video
  // element as the content.
  // The problem is that in IE11, we cannot play in addurationchange but in iOS8, we
  // cannot play from adcanplay.
  // This will prevent ad plugins from needing to do this themselves.
  player.on(['addurationchange', 'adcanplay'], function () {
    if (player.ads.snapshot && player.currentSrc() === player.ads.snapshot.currentSrc) {
      return;
    }

    // If an ad isn't playing, don't try to play an ad. This could result from prefixed
    // events when the player is blocked by a preroll check, but there is no preroll.
    if (!player.ads.inAdBreak()) {
      return;
    }

    var playPromise = player.play();

    if (playPromise && playPromise['catch']) {
      playPromise['catch'](function (error) {
        videojs$1.log.warn('Play promise rejected when playing ad', error);
      });
    }
  });

  player.on('nopreroll', function () {
    player.ads.debug('Received nopreroll event');
    player.ads.nopreroll_ = true;
  });

  player.on('nopostroll', function () {
    player.ads.debug('Received nopostroll event');
    player.ads.nopostroll_ = true;
  });

  // Restart the cancelContentPlay process.
  player.on('playing', function () {
    player.ads._cancelledPlay = false;
    player.ads._pausedOnContentupdate = false;
  });

  // Keep track of whether a play event has happened
  player.on('play', function () {
    player.ads._playRequested = true;
  });

  player.one('loadstart', function () {
    player.ads._hasThereBeenALoadStartDuringPlayerLife = true;
  });

  player.on('loadeddata', function () {
    player.ads._hasThereBeenALoadedData = true;
  });

  player.on('loadedmetadata', function () {
    player.ads._hasThereBeenALoadedMetaData = true;
  });

  // Replace the plugin constructor with the ad namespace
  player.ads = getAds(player);

  player.ads.settings = settings;

  // Set the stitched ads state. This needs to happen before the `_state` is
  // initialized below - BeforePreroll needs to know whether contrib-ads is
  // playing stitched ads or not.
  // The setter is deprecated, so this does not use it.
  // But first, cast to boolean.
  settings.stitchedAds = !!settings.stitchedAds;

  if (settings.stitchedAds) {
    player.ads._state = new StitchedContentPlayback(player);
  } else {
    player.ads._state = new BeforePreroll(player);
  }

  player.ads._state.init(player);

  player.ads.cueTextTracks = cueTextTracks;
  player.ads.adMacroReplacement = adMacroReplacement.bind(player);

  // Start sending contentupdate and contentchanged events for this player
  initializeContentupdate(player);

  // Global contentchanged handler for resetting plugin state
  player.on('contentchanged', player.ads.reset);

  // A utility method for textTrackChangeHandler to define the conditions
  // when text tracks should be disabled.
  // Currently this includes:
  //  - on iOS with native text tracks, during an ad playing
  var shouldDisableTracks = function shouldDisableTracks() {
    // If the platform matches iOS with native text tracks
    // and this occurs during ad playback, we should disable tracks again.
    // If shouldPlayContentBehindAd, no special handling is needed.
    return !player.ads.shouldPlayContentBehindAd(player) && player.ads.inAdBreak() && player.tech_.featuresNativeTextTracks && videojs$1.browser.IS_IOS &&
    // older versions of video.js did not use an emulated textTrackList
    !Array.isArray(player.textTracks());
  };

  /*
   * iOS Safari will change caption mode to 'showing' if a user previously
   * turned captions on manually for that video source, so this TextTrackList
   * 'change' event handler will re-disable them in case that occurs during ad playback
   */
  var textTrackChangeHandler = function textTrackChangeHandler() {
    var textTrackList = player.textTracks();

    if (shouldDisableTracks()) {
      // We must double check all tracks
      for (var i = 0; i < textTrackList.length; i++) {
        var track = textTrackList[i];

        if (track.mode === 'showing') {
          track.mode = 'disabled';
        }
      }
    }
  };

  // Add the listener to the text track list
  player.ready(function () {
    player.textTracks().addEventListener('change', textTrackChangeHandler);
  });

  // Event handling for the current state.
  player.on(['play', 'playing', 'ended', 'adsready', 'adscanceled', 'adskip', 'adserror', 'adtimeout', 'adended', 'ads-ad-started', 'contentchanged', 'dispose', 'contentresumed', 'readyforpostroll', 'nopreroll', 'nopostroll'], function (e) {
    player.ads._state.handleEvent(e.type);
  });

  // Clear timeouts and handlers when player is disposed
  player.on('dispose', function () {
    player.ads.reset();
    player.textTracks().removeEventListener('change', textTrackChangeHandler);
  });
};

// Expose the contrib-ads version before it is initialized. Will be replaced
// after initialization in ads.js
contribAdsPlugin.VERSION = version$3;

// Attempt to register the plugin, if we can.
register(contribAdsPlugin);

(function (videojs) {

    var defaults = {
        markers: true,
        flashWrapperPath: "/VPAIDFlash.swf",
        debug: false
    };

    // var registerPlugin = videojs.registerPlugin || videojs.plugin;

    var vastWaterfall = function vastWaterfall(options) {
        var player = this;

        options = videojs.mergeOptions(defaults, options);

        var markers = [];

        var playedMidrolls = [];
        var closestMidroll = 0;

        var lastTime = 0;

        var techScreen = player.el().querySelector(".vjs-tech");

        var vpaidContainer = document.createElement("div");
        vpaidContainer.className = "play-vpaid-wrapper";
        player.el().insertBefore(vpaidContainer, player.controlBar.el());

        var skipButton = document.createElement("div");
        skipButton.className = "play-skip-button";
        skipButton.innerText = "Skip this ad";
        skipButton.style.display = "none";
        player.el().insertBefore(skipButton, player.controlBar.el());

        var vastClient = new VAST.VASTClient();
        var vastParser = new VAST.VASTParser();
        var vastTracker;

        if (!player.ads) return;
        player.ads(options);

        if (options.midroll) {
            for (var m = 0; m < options.midroll.length; m++) {
                playedMidrolls[options.midroll[m].time] = false;
            }

            player.on("contentloadedmetadata", function () {
                debugLog("Ready");
                addMarkers();
            });

            player.on("timeupdate", function (event) {
                if (player.ads.isInAdMode()) return;

                var opportunity;

                closestMidroll = Math.min.apply(Math, options.midroll.map(function (midroll) {
                    return midroll.time;
                }));

                for (var m = 0; m < options.midroll.length; m++) {
                    if (player.currentTime() > options.midroll[m].time) closestMidroll = options.midroll[m].time;
                }

                if (playedMidrolls[closestMidroll]) return;

                if (lastTime) {
                    opportunity = player.currentTime() > closestMidroll && lastTime < closestMidroll;
                }

                lastTime = player.currentTime();
                if (opportunity) prepareAds("midroll");
            });
        }

        player.on("contentchanged", function () {
            player.trigger("adsready");
        });

        player.on("readyforpreroll", function () {
            if (options.preroll) {
                player.currentTime(0);
                prepareAds("preroll");
            } else {
                player.trigger("nopreroll");
                player.one("loadedmetadata", addMarkers);
            }
        });

        player.on("readyforpostroll", function () {
            if (options.postroll) prepareAds("postroll");else player.trigger("nopostroll");
        });

        player.trigger("adsready");

        function addMarkers() {
            for (var m = 0; m < options.midroll.length; m++) {
                if (options.markers && !markers.includes(options.midroll[m].time)) {
                    markers.push(options.midroll[m].time);
                    var newMarker = document.createElement("div");
                    newMarker.className = "play-midroll-marker";
                    newMarker.style.left = options.midroll[m].time / player.duration() * 100 + "%";
                    player.el().querySelector(".play-progress-holder").appendChild(newMarker);
                }
            }
        }

        function initTracker(ad, creative) {
            vastTracker = new VAST.VASTTracker(vastClient, ad, creative);
            if (options.skipDelay) vastTracker.setSkipDelay(options.skipDelay);
            vastTracker.trackImpression();

            vpaidContainer.addEventListener("click", trackerClick);

            skipButton.addEventListener("click", skipAd);

            vastTracker.on("clickthrough", clickThrough);

            player.on("adtimeupdate", trackProgress);
            player.on("advolumechange", trackerVolumeChange);
            player.on("adpause", trackerPause);
            player.on("adplay", trackerPlay);
            player.on("fullscreenchange", trackerFullscreenCheck);
            window.addEventListener("beforeunload", fireClose);

            player.one("adended", function () {
                vastTracker.complete();
                vastTracker = null;
                skipButton.removeEventListener("click", skipAd);
                vpaidContainer.removeEventListener("click", trackerClick);
                player.off("adtimeupdate", trackProgress);
                player.off("advolumechange", trackerVolumeChange);
                player.off("adpause", trackerPause);
                player.off("adplay", trackerPlay);
                player.off("fullscreenchange", trackerFullscreenCheck);
                window.removeEventListener("beforeunload", fireClose);
                document.getElementsByClassName('play-mouse-display')[0].style.display = '';
                document.getElementsByClassName('play-slider')[0].style.cursor = 'pointer';
                document.getElementsByClassName('play-progress-control')[0].style.cursor = 'pointer';
            });

            function trackProgress() {
                vastTracker.setProgress(player.currentTime());

                if (vastTracker.skippable && skipButton.style.display == "none") {
                    skipButton.style.display = "";
                }
            }

            function fireClose() {
                vastTracker.close();
            }

            function trackerVolumeChange() {
                vastTracker.setMuted(player.muted());
            }

            function trackerPause() {
                vastTracker.setPaused(true);
            }

            function trackerPlay() {
                document.getElementsByClassName('play-settings')[0].style.display = 'none';
                document.getElementsByClassName('play-volume-control')[0].style.display = 'none';
                document.getElementsByClassName('scrubber-head')[0].style.display = 'none';

                var progress = document.getElementsByClassName('play-progress-holder').length;
                if (progress > 0) {
                    document.getElementsByClassName('play-progress-holder')[0].classList.add('play-ads-label');
                    document.getElementsByClassName('play-mouse-display')[0].style.display = 'none';
                    document.getElementsByClassName('play-slider')[0].style.cursor = 'default';
                    document.getElementsByClassName('play-progress-control')[0].style.cursor = 'default';
                }
                vastTracker.setPaused(false);
            }

            function trackerClick() {
                vastTracker.click();
            }

            function skipAd() {
                if (vastTracker) vastTracker.skip();
                player.trigger("adended");
            }

            function clickThrough(url) {
                window.open(url);
            }

            function trackerFullscreenCheck() {
                vastTracker.setFullscreen(player.isFullscreen());
            }
        }

        function prepareAds(type) {
            var waterfallIndex = 0;
            var podIndex = 0;

            var pod = options[type];
            if (type == "midroll") pod = pod.filter(function (group) {
                return group.time == closestMidroll;
            });
            pod = pod.map(function (group) {
                return group.ads;
            });
            player.ads.startLinearAdMode();
            playAd();

            function playAd() {
                player.one("adended", endOfGroup);
                player.one("aderror", nextAd);

                var currentAd = pod[podIndex][waterfallIndex];

                debugLog("Attempting", currentAd);

                vastClient.get(currentAd).then(function (response) {
                    var ads = response.ads;

                    for (var a = 0; a < ads.length; a++) {
                        for (var c = 0; c < ads[a].creatives.length; c++) {
                            var creative = ads[a].creatives[c];

                            var alternateFiles = false;

                            switch (creative.type) {
                                case "linear":
                                    var adSource = [];
                                    for (var m = 0; m < creative.mediaFiles.length; m++) {
                                        var mediaFile = creative.mediaFiles[m];

                                        if (mediaFile.apiFramework) {
                                            if (mediaFile.apiFramework == "VPAID") {
                                                if (mediaFile.mimeType == "application/x-shockwave-flash") {
                                                    debugLog("Playing", currentAd);
                                                    loadFlashAdUnit(creative);
                                                    alternateFiles = true;
                                                    break;
                                                } else if (mediaFile.mimeType == "video/mp4") {
                                                    adSource.push({
                                                        type: mediaFile.mimeType,
                                                        src: mediaFile.fileURL
                                                    });
                                                    continue;
                                                } else if (mediaFile.mimeType == "application/javascript") {
                                                    debugLog("Playing", currentAd);
                                                    loadJSAdUnit(creative);
                                                    alternateFiles = true;
                                                    break;
                                                } else {
                                                    console.warn(mediaFile.mimeType, "is not supported yet");
                                                    continue;
                                                }
                                            } else {
                                                console.warn("No support for", mediaFile.apiFramework, "yet");
                                                continue;
                                            }
                                        }

                                        adSource.push({
                                            type: mediaFile.mimeType,
                                            src: mediaFile.fileURL
                                        });
                                    }

                                    if (!alternateFiles) {
                                        if (adSource.length > 0) {
                                            debugLog("Playing", currentAd);
                                            player.src(adSource);
                                            player.trigger("ads-ad-started");
                                            initTracker(ads[a], creative);
                                        } else {
                                            console.error("No possible sources for this creative", creative);
                                            player.trigger("aderror");
                                        }
                                    }

                                    break;
                                case "non-linear":
                                case "companion":
                                    break;
                                default:
                                    console.warn("There's some type we don't know about:", creative.type);
                                    break;
                            }
                        }
                    }
                }).catch(function (error) {
                    console.error(error);
                    player.trigger("aderror");
                });

                function getPlayerDimensions() {
                    var width = player.width();
                    var height = player.height();

                    if (player.isFullscreen()) {
                        width = window.innerWidth;
                        height = window.innerHeight;
                    }

                    return { width: width, height: height };
                }

                function loadJSAdUnit(creative) {
                    var vpaid = new VPAIDHTML5Client(vpaidContainer, techScreen, {});

                    var mediaFile = creative.mediaFiles[0];

                    player.pause();
                    player.controlBar.hide();

                    vpaid.loadAdUnit(mediaFile.fileURL, onLoad);

                    function onLoad(err, adUnit) {
                        if (err) {
                            console.error(err);
                            player.controlBar.show();
                            player.trigger("aderror");
                            return;
                        }

                        adUnit.subscribe("AdLoaded", onInit);
                        adUnit.subscribe("AdStarted", onStart);
                        adUnit.subscribe("AdStopped", wrapUp);

                        adUnit.handshakeVersion("2.0", onHandShake);

                        function onHandShake(error, result) {
                            var initialDimensions = getPlayerDimensions();

                            adUnit.initAd(initialDimensions.width, initialDimensions.height, "normal", -1, { AdParameters: creative.adParameters }, {});
                        }

                        function onInit() {
                            adUnit.startAd();
                        }

                        function onStart() {
                            player.trigger("ads-ad-started");
                            player.on("resize", resizeAd);
                            window.addEventListener("resize", resizeAd);
                        }

                        function wrapUp() {
                            vpaid.destroy();
                            player.controlBar.show();
                            player.off("resize", resizeAd);
                            window.removeEventListener("resize", resizeAd);
                            player.trigger("adended");
                        }

                        function resizeAd() {
                            var newDimensions = getPlayerDimensions();

                            adUnit.resizeAd(newDimensions.width, newDimensions.height, player.isFullscreen() ? "fullscreen" : "normal");
                        }
                    }
                }

                function loadFlashAdUnit(creative) {
                    var flashVPaid = new VPAIDFLASHClient(vpaidContainer, flashWrapperLoaded, { data: options.flashWrapperPath });

                    var mediaFile = creative.mediaFiles[0];

                    player.controlBar.hide();
                    player.pause();

                    function flashWrapperLoaded(error, result) {
                        if (error) {
                            console.error(error);
                            player.controlBar.show();
                            player.trigger("aderror");
                            return;
                        }

                        flashVPaid.loadAdUnit(mediaFile.fileURL, runFlashAdUnit);
                    }

                    function runFlashAdUnit(error, adUnit) {
                        if (error) {
                            console.error(error);
                            player.trigger("aderror");
                            return;
                        }

                        adUnit.handshakeVersion("2.0", initAd);
                        adUnit.on("AdLoaded", startAd);

                        adUnit.on("AdStopped", function (err, result) {
                            cleanUp();
                            player.trigger("adended");
                        });

                        adUnit.on("AdError", function (err, result) {
                            console.error(err);
                            cleanUp();
                            player.trigger("aderror");
                        });

                        adUnit.on("AdStarted", function (err, result) {
                            checkAdProperties();
                        });

                        function initAd(err, result) {
                            var initialDimensions = getPlayerDimensions();

                            adUnit.initAd(initialDimensions.width, initialDimensions.height, "normal", mediaFile.bitRate, { AdParameters: creative.adParameters }, "", function (err) {
                                player.trigger("ads-ad-started");
                                player.on("resize", resizeAd);
                                window.addEventListener("resize", resizeAd);
                            });
                        }

                        function cleanUp() {
                            flashVPaid.destroy();
                            player.controlBar.show();
                            player.off("resize", resizeAd);
                            window.removeEventListener("resize", resizeAd);
                        }

                        function startAd(err, result) {
                            adUnit.startAd();
                        }

                        function checkAdProperties() {
                            adUnit.getAdIcons();
                            adUnit.setAdVolume(player.volume());
                        }

                        function resizeAd() {
                            var newDimensions = getPlayerDimensions();

                            adUnit.resizeAd(newDimensions.width, newDimensions.height, player.isFullscreen() ? "fullscreen" : "normal");
                        }
                    }
                }
            }

            player.one("adplaying", function (e) {
                player.trigger("ads-pod-started");
            });

            function nextAd() {
                player.off("adended", endOfGroup);
                waterfallIndex++;
                if (waterfallIndex < pod[podIndex].length) playAd();else endOfGroup();
            }

            function endOfGroup() {
                player.off("adended", endOfGroup);
                player.off("aderror", nextAd);
                player.trigger("ads-ad-ended");
                //The pod has successfully played an ad. Let's move to the next one and reset the position
                podIndex++;
                waterfallIndex = 0;

                skipButton.style.display = "none";

                if (podIndex == pod.length) {
                    if (type == "midroll") {
                        playedMidrolls[closestMidroll] = true;
                    }
                    player.trigger("ads-pod-ended");
                    player.ads.endLinearAdMode();
                } else playAd();
                document.getElementsByClassName('play-settings')[0].style.display = 'block';
                document.getElementsByClassName('play-volume-control')[0].style.display = 'block';
                document.getElementsByClassName('scrubber-head')[0].style.display = 'block';
                var progress = document.getElementsByClassName('play-progress-holder').length;
                if (progress > 0) {
                    document.getElementsByClassName('play-progress-holder')[0].classList.remove('play-ads-label');
                }
            }
        }

        function debugLog() {
            var _console;

            if (options.debug) (_console = console).log.apply(_console, arguments);
        }
    };

    videojs.registerPlugin("vastWaterfall", vastWaterfall);

    return vastWaterfall;
})(videojs$1);

// three.js starts
// threejs.org/license
(function (l, ka) {
    "object" === (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" !== typeof module ? ka(exports) : "function" === typeof define && define.amd ? define(["exports"], ka) : (l = l || self, ka(l.THREE = {}));
})(undefined, function (l) {
    function ka() {}function B(a, b) {
        this.x = a || 0;this.y = b || 0;
    }function J() {
        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
    }function aa(a, b, c, d) {
        this._x = a || 0;this._y = b || 0;this._z = c || 0;this._w = void 0 !== d ? d : 1;
    }function n(a, b, c) {
        this.x = a || 0;this.y = b || 0;this.z = c || 0;
    }function pa() {
        this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
    }function S(a, b, c, d, e, f, g, h, k, m) {
        Object.defineProperty(this, "id", { value: Uf++ });this.uuid = H.generateUUID();this.name = "";this.image = void 0 !== a ? a : S.DEFAULT_IMAGE;this.mipmaps = [];this.mapping = void 0 !== b ? b : S.DEFAULT_MAPPING;this.wrapS = void 0 !== c ? c : 1001;this.wrapT = void 0 !== d ? d : 1001;this.magFilter = void 0 !== e ? e : 1006;this.minFilter = void 0 !== f ? f : 1008;this.anisotropy = void 0 !== k ? k : 1;this.format = void 0 !== g ? g : 1023;this.type = void 0 !== h ? h : 1009;this.offset = new B(0, 0);this.repeat = new B(1, 1);this.center = new B(0, 0);this.rotation = 0;this.matrixAutoUpdate = !0;this.matrix = new pa();this.generateMipmaps = !0;this.premultiplyAlpha = !1;this.flipY = !0;this.unpackAlignment = 4;this.encoding = void 0 !== m ? m : 3E3;this.version = 0;this.onUpdate = null;
    }function ba(a, b, c, d) {
        this.x = a || 0;this.y = b || 0;this.z = c || 0;this.w = void 0 !== d ? d : 1;
    }function Sa(a, b, c) {
        this.width = a;this.height = b;this.scissor = new ba(0, 0, a, b);this.scissorTest = !1;this.viewport = new ba(0, 0, a, b);c = c || {};this.texture = new S(void 0, void 0, c.wrapS, c.wrapT, c.magFilter, c.minFilter, c.format, c.type, c.anisotropy, c.encoding);this.texture.generateMipmaps = void 0 !== c.generateMipmaps ? c.generateMipmaps : !1;this.texture.minFilter = void 0 !== c.minFilter ? c.minFilter : 1006;this.depthBuffer = void 0 !== c.depthBuffer ? c.depthBuffer : !0;this.stencilBuffer = void 0 !== c.stencilBuffer ? c.stencilBuffer : !0;this.depthTexture = void 0 !== c.depthTexture ? c.depthTexture : null;
    }function $d(a, b, c) {
        Sa.call(this, a, b, c);this.samples = 4;
    }function mb(a, b, c) {
        Sa.call(this, a, b, c);
    }function nb(a, b, c, d, e, f, g, h, k, m, p, q) {
        S.call(this, null, f, g, h, k, m, d, e, p, q);this.image = { data: a, width: b, height: c };this.magFilter = void 0 !== k ? k : 1003;this.minFilter = void 0 !== m ? m : 1003;this.flipY = this.generateMipmaps = !1;this.unpackAlignment = 1;
    }function Ha(a, b) {
        this.min = void 0 !== a ? a : new n(Infinity, Infinity, Infinity);this.max = void 0 !== b ? b : new n(-Infinity, -Infinity, -Infinity);
    }
    function Ia(a, b) {
        this.center = void 0 !== a ? a : new n();this.radius = void 0 !== b ? b : 0;
    }function Ta(a, b) {
        this.normal = void 0 !== a ? a : new n(1, 0, 0);this.constant = void 0 !== b ? b : 0;
    }function vd(a, b, c, d, e, f) {
        this.planes = [void 0 !== a ? a : new Ta(), void 0 !== b ? b : new Ta(), void 0 !== c ? c : new Ta(), void 0 !== d ? d : new Ta(), void 0 !== e ? e : new Ta(), void 0 !== f ? f : new Ta()];
    }function Mb(a) {
        var b = {},
            c;for (c in a) {
            b[c] = {};for (var d in a[c]) {
                var e = a[c][d];e && (e.isColor || e.isMatrix3 || e.isMatrix4 || e.isVector2 || e.isVector3 || e.isVector4 || e.isTexture) ? b[c][d] = e.clone() : Array.isArray(e) ? b[c][d] = e.slice() : b[c][d] = e;
            }
        }return b;
    }function xa(a) {
        for (var b = {}, c = 0; c < a.length; c++) {
            var d = Mb(a[c]),
                e;for (e in d) {
                b[e] = d[e];
            }
        }return b;
    }function K(a, b, c) {
        return void 0 === b && void 0 === c ? this.set(a) : this.setRGB(a, b, c);
    }function ae() {
        function a(e, f) {
            !1 !== c && (d(e, f), b.requestAnimationFrame(a));
        }var b = null,
            c = !1,
            d = null;return { start: function start() {
                !0 !== c && null !== d && (b.requestAnimationFrame(a), c = !0);
            }, stop: function stop() {
                c = !1;
            }, setAnimationLoop: function setAnimationLoop(a) {
                d = a;
            }, setContext: function setContext(a) {
                b = a;
            } };
    }function Vf(a) {
        function b(b, c) {
            var d = b.array,
                e = b.dynamic ? 35048 : 35044,
                h = a.createBuffer();a.bindBuffer(c, h);a.bufferData(c, d, e);b.onUploadCallback();c = 5126;d instanceof Float32Array ? c = 5126 : d instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : d instanceof Uint16Array ? c = 5123 : d instanceof Int16Array ? c = 5122 : d instanceof Uint32Array ? c = 5125 : d instanceof Int32Array ? c = 5124 : d instanceof Int8Array ? c = 5120 : d instanceof Uint8Array && (c = 5121);return { buffer: h, type: c, bytesPerElement: d.BYTES_PER_ELEMENT,
                version: b.version };
        }var c = new WeakMap();return { get: function get$$1(a) {
                a.isInterleavedBufferAttribute && (a = a.data);return c.get(a);
            }, remove: function remove(b) {
                b.isInterleavedBufferAttribute && (b = b.data);var d = c.get(b);d && (a.deleteBuffer(d.buffer), c.delete(b));
            }, update: function update(d, e) {
                d.isInterleavedBufferAttribute && (d = d.data);var f = c.get(d);if (void 0 === f) c.set(d, b(d, e));else if (f.version < d.version) {
                    var g = d,
                        h = g.array,
                        k = g.updateRange;a.bindBuffer(e, f.buffer);!1 === g.dynamic ? a.bufferData(e, h, 35044) : -1 === k.count ? a.bufferSubData(e, 0, h) : 0 === k.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (a.bufferSubData(e, k.offset * h.BYTES_PER_ELEMENT, h.subarray(k.offset, k.offset + k.count)), k.count = -1);f.version = d.version;
                }
            } };
    }function Nb(a, b, c, d, e, f) {
        this.a = a;this.b = b;this.c = c;this.normal = d && d.isVector3 ? d : new n();this.vertexNormals = Array.isArray(d) ? d : [];this.color = e && e.isColor ? e : new K();this.vertexColors = Array.isArray(e) ? e : [];this.materialIndex = void 0 !== f ? f : 0;
    }function ob(a, b, c, d) {
        this._x = a || 0;this._y = b || 0;this._z = c || 0;this._order = d || ob.DefaultOrder;
    }function be() {
        this.mask = 1;
    }function E() {
        Object.defineProperty(this, "id", { value: Wf++ });this.uuid = H.generateUUID();this.name = "";this.type = "Object3D";this.parent = null;this.children = [];this.up = E.DefaultUp.clone();var a = new n(),
            b = new ob(),
            c = new aa(),
            d = new n(1, 1, 1);b.onChange(function () {
            c.setFromEuler(b, !1);
        });c.onChange(function () {
            b.setFromQuaternion(c, void 0, !1);
        });
        Object.defineProperties(this, { position: { configurable: !0, enumerable: !0, value: a }, rotation: { configurable: !0, enumerable: !0, value: b }, quaternion: { configurable: !0, enumerable: !0, value: c }, scale: { configurable: !0, enumerable: !0, value: d }, modelViewMatrix: { value: new J() }, normalMatrix: { value: new pa() } });this.matrix = new J();this.matrixWorld = new J();this.matrixAutoUpdate = E.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate = !1;this.layers = new be();this.visible = !0;this.receiveShadow = this.castShadow = !1;this.frustumCulled = !0;this.renderOrder = 0;this.userData = {};
    }function G() {
        Object.defineProperty(this, "id", { value: Xf += 2 });this.uuid = H.generateUUID();this.name = "";this.type = "Geometry";this.vertices = [];this.colors = [];this.faces = [];this.faceVertexUvs = [[]];this.morphTargets = [];this.morphNormals = [];this.skinWeights = [];this.skinIndices = [];this.lineDistances = [];this.boundingSphere = this.boundingBox = null;this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.verticesNeedUpdate = this.elementsNeedUpdate = !1;
    }function P(a, b, c) {
        if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name = "";this.array = a;this.itemSize = b;this.count = void 0 !== a ? a.length / b : 0;this.normalized = !0 === c;this.dynamic = !1;this.updateRange = { offset: 0, count: -1 };this.version = 0;
    }function vc(a, b, c) {
        P.call(this, new Int8Array(a), b, c);
    }function wc(a, b, c) {
        P.call(this, new Uint8Array(a), b, c);
    }function xc(a, b, c) {
        P.call(this, new Uint8ClampedArray(a), b, c);
    }function yc(a, b, c) {
        P.call(this, new Int16Array(a), b, c);
    }function pb(a, b, c) {
        P.call(this, new Uint16Array(a), b, c);
    }function zc(a, b, c) {
        P.call(this, new Int32Array(a), b, c);
    }function qb(a, b, c) {
        P.call(this, new Uint32Array(a), b, c);
    }function F(a, b, c) {
        P.call(this, new Float32Array(a), b, c);
    }function Ac(a, b, c) {
        P.call(this, new Float64Array(a), b, c);
    }function Se() {
        this.vertices = [];this.normals = [];this.colors = [];this.uvs = [];this.uvs2 = [];this.groups = [];this.morphTargets = {};this.skinWeights = [];this.skinIndices = [];this.boundingSphere = this.boundingBox = null;this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
    }function Te(a) {
        if (0 === a.length) return -Infinity;for (var b = a[0], c = 1, d = a.length; c < d; ++c) {
            a[c] > b && (b = a[c]);
        }return b;
    }function D() {
        Object.defineProperty(this, "id", { value: Yf += 2 });this.uuid = H.generateUUID();this.name = "";this.type = "BufferGeometry";this.index = null;this.attributes = {};this.morphAttributes = {};this.groups = [];this.boundingSphere = this.boundingBox = null;this.drawRange = { start: 0, count: Infinity };this.userData = {};
    }
    function Ob(a, b, c, d, e, f) {
        G.call(this);this.type = "BoxGeometry";this.parameters = { width: a, height: b, depth: c, widthSegments: d, heightSegments: e, depthSegments: f };this.fromBufferGeometry(new rb(a, b, c, d, e, f));this.mergeVertices();
    }function rb(a, b, c, d, e, f) {
        function g(a, b, c, d, e, f, g, l, fa, A, B) {
            var r = f / fa,
                u = g / A,
                w = f / 2,
                x = g / 2,
                z = l / 2;g = fa + 1;var C = A + 1,
                y = f = 0,
                Q,
                Fa,
                ta = new n();for (Fa = 0; Fa < C; Fa++) {
                var F = Fa * u - x;for (Q = 0; Q < g; Q++) {
                    ta[a] = (Q * r - w) * d, ta[b] = F * e, ta[c] = z, m.push(ta.x, ta.y, ta.z), ta[a] = 0, ta[b] = 0, ta[c] = 0 < l ? 1 : -1, p.push(ta.x, ta.y, ta.z), q.push(Q / fa), q.push(1 - Fa / A), f += 1;
                }
            }for (Fa = 0; Fa < A; Fa++) {
                for (Q = 0; Q < fa; Q++) {
                    a = v + Q + g * (Fa + 1), b = v + (Q + 1) + g * (Fa + 1), c = v + (Q + 1) + g * Fa, k.push(v + Q + g * Fa, a, c), k.push(a, b, c), y += 6;
                }
            }h.addGroup(t, y, B);t += y;v += f;
        }D.call(this);this.type = "BoxBufferGeometry";this.parameters = { width: a, height: b, depth: c, widthSegments: d, heightSegments: e, depthSegments: f };var h = this;a = a || 1;b = b || 1;c = c || 1;d = Math.floor(d) || 1;e = Math.floor(e) || 1;f = Math.floor(f) || 1;var k = [],
            m = [],
            p = [],
            q = [],
            v = 0,
            t = 0;g("z", "y", "x", -1, -1, c, b, a, f, e, 0);g("z", "y", "x", 1, -1, c, b, -a, f, e, 1);g("x", "z", "y", 1, 1, a, c, b, d, f, 2);g("x", "z", "y", 1, -1, a, c, -b, d, f, 3);g("x", "y", "z", 1, -1, a, b, c, d, e, 4);g("x", "y", "z", -1, -1, a, b, -c, d, e, 5);this.setIndex(k);this.addAttribute("position", new F(m, 3));this.addAttribute("normal", new F(p, 3));this.addAttribute("uv", new F(q, 2));
    }function Cc(a, b, c, d) {
        G.call(this);this.type = "PlaneGeometry";this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };this.fromBufferGeometry(new sb(a, b, c, d));this.mergeVertices();
    }function sb(a, b, c, d) {
        D.call(this);
        this.type = "PlaneBufferGeometry";this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };a = a || 1;b = b || 1;var e = a / 2,
            f = b / 2;c = Math.floor(c) || 1;d = Math.floor(d) || 1;var g = c + 1,
            h = d + 1,
            k = a / c,
            m = b / d,
            p = [],
            q = [],
            v = [],
            t = [];for (a = 0; a < h; a++) {
            var l = a * m - f;for (b = 0; b < g; b++) {
                q.push(b * k - e, -l, 0), v.push(0, 0, 1), t.push(b / c), t.push(1 - a / d);
            }
        }for (a = 0; a < d; a++) {
            for (b = 0; b < c; b++) {
                e = b + g * (a + 1), f = b + 1 + g * (a + 1), h = b + 1 + g * a, p.push(b + g * a, e, h), p.push(e, f, h);
            }
        }this.setIndex(p);this.addAttribute("position", new F(q, 3));this.addAttribute("normal", new F(v, 3));this.addAttribute("uv", new F(t, 2));
    }function M() {
        Object.defineProperty(this, "id", { value: Zf++ });this.uuid = H.generateUUID();this.name = "";this.type = "Material";this.lights = this.fog = !0;this.blending = 1;this.side = 0;this.vertexTangents = this.flatShading = !1;this.vertexColors = 0;this.opacity = 1;this.transparent = !1;this.blendSrc = 204;this.blendDst = 205;this.blendEquation = 100;this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;this.depthFunc = 3;this.depthWrite = this.depthTest = !0;this.clippingPlanes = null;this.clipShadows = this.clipIntersection = !1;this.shadowSide = null;this.colorWrite = !0;this.precision = null;this.polygonOffset = !1;this.polygonOffsetUnits = this.polygonOffsetFactor = 0;this.dithering = !1;this.alphaTest = 0;this.premultipliedAlpha = !1;this.visible = !0;this.userData = {};this.needsUpdate = !0;
    }function Ca(a) {
        M.call(this);this.type = "ShaderMaterial";this.defines = {};this.uniforms = {};this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.linewidth = 1;this.wireframe = !1;this.wireframeLinewidth = 1;this.morphNormals = this.morphTargets = this.skinning = this.clipping = this.lights = this.fog = !1;this.extensions = { derivatives: !1, fragDepth: !1, drawBuffers: !1, shaderTextureLOD: !1 };this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] };this.index0AttributeName = void 0;this.uniformsNeedUpdate = !1;void 0 !== a && (void 0 !== a.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(a));
    }function tb(a, b) {
        this.origin = void 0 !== a ? a : new n();this.direction = void 0 !== b ? b : new n();
    }function ua(a, b, c) {
        this.a = void 0 !== a ? a : new n();this.b = void 0 !== b ? b : new n();this.c = void 0 !== c ? c : new n();
    }function ya(a) {
        M.call(this);this.type = "MeshBasicMaterial";this.color = new K(16777215);this.lightMap = this.map = null;this.lightMapIntensity = 1;this.aoMap = null;this.aoMapIntensity = 1;this.envMap = this.alphaMap = this.specularMap = null;this.combine = 0;this.reflectivity = 1;this.refractionRatio = .98;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.lights = this.morphTargets = this.skinning = !1;this.setValues(a);
    }function va(a, b) {
        E.call(this);this.type = "Mesh";this.geometry = void 0 !== a ? a : new D();this.material = void 0 !== b ? b : new ya({ color: 16777215 * Math.random() });this.drawMode = 0;this.updateMorphTargets();
    }function $f(a, b, c, d) {
        function e(a, c) {
            b.buffers.color.setClear(a.r, a.g, a.b, c, d);
        }var f = new K(0),
            g = 0,
            h,
            k,
            m = null,
            p = 0;return { getClearColor: function getClearColor() {
                return f;
            }, setClearColor: function setClearColor(a, b) {
                f.set(a);g = void 0 !== b ? b : 1;e(f, g);
            }, getClearAlpha: function getClearAlpha() {
                return g;
            }, setClearAlpha: function setClearAlpha(a) {
                g = a;e(f, g);
            }, render: function render(b, d, t, l) {
                d = d.background;t = a.vr;(t = t.getSession && t.getSession()) && "additive" === t.environmentBlendMode && (d = null);null === d ? (e(f, g), m = null, p = 0) : d && d.isColor && (e(d, 1), l = !0, m = null, p = 0);(a.autoClear || l) && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil);if (d && (d.isCubeTexture || d.isWebGLRenderTargetCube)) {
                    void 0 === k && (k = new va(new rb(1, 1, 1), new Ca({ type: "BackgroundCubeMaterial", uniforms: Mb(Ua.cube.uniforms),
                        vertexShader: Ua.cube.vertexShader, fragmentShader: Ua.cube.fragmentShader, side: 1, depthTest: !1, depthWrite: !1, fog: !1 })), k.geometry.removeAttribute("normal"), k.geometry.removeAttribute("uv"), k.onBeforeRender = function (a, b, c) {
                        this.matrixWorld.copyPosition(c.matrixWorld);
                    }, Object.defineProperty(k.material, "map", { get: function get$$1() {
                            return this.uniforms.tCube.value;
                        } }), c.update(k));l = d.isWebGLRenderTargetCube ? d.texture : d;k.material.uniforms.tCube.value = l;k.material.uniforms.tFlip.value = d.isWebGLRenderTargetCube ? 1 : -1;if (m !== d || p !== l.version) k.material.needsUpdate = !0, m = d, p = l.version;b.unshift(k, k.geometry, k.material, 0, 0, null);
                } else if (d && d.isTexture) {
                    void 0 === h && (h = new va(new sb(2, 2), new Ca({ type: "BackgroundMaterial", uniforms: Mb(Ua.background.uniforms), vertexShader: Ua.background.vertexShader, fragmentShader: Ua.background.fragmentShader, side: 0, depthTest: !1, depthWrite: !1, fog: !1 })), h.geometry.removeAttribute("normal"), Object.defineProperty(h.material, "map", { get: function get$$1() {
                            return this.uniforms.t2D.value;
                        } }), c.update(h));
                    h.material.uniforms.t2D.value = d;!0 === d.matrixAutoUpdate && d.updateMatrix();h.material.uniforms.uvTransform.value.copy(d.matrix);if (m !== d || p !== d.version) h.material.needsUpdate = !0, m = d, p = d.version;b.unshift(h, h.geometry, h.material, 0, 0, null);
                }
            } };
    }function ag(a, b, c, d) {
        var e;this.setMode = function (a) {
            e = a;
        };this.render = function (b, d) {
            a.drawArrays(e, b, d);c.update(d, e);
        };this.renderInstances = function (f, g, h) {
            if (d.isWebGL2) var k = a;else if (k = b.get("ANGLE_instanced_arrays"), null === k) {
                console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                return;
            }k[d.isWebGL2 ? "drawArraysInstanced" : "drawArraysInstancedANGLE"](e, g, h, f.maxInstancedCount);c.update(h, e, f.maxInstancedCount);
        };
    }function bg(a, b, c) {
        function d(b) {
            if ("highp" === b) {
                if (0 < a.getShaderPrecisionFormat(35633, 36338).precision && 0 < a.getShaderPrecisionFormat(35632, 36338).precision) return "highp";b = "mediump";
            }return "mediump" === b && 0 < a.getShaderPrecisionFormat(35633, 36337).precision && 0 < a.getShaderPrecisionFormat(35632, 36337).precision ? "mediump" : "lowp";
        }var e,
            f = "undefined" !== typeof WebGL2RenderingContext && a instanceof WebGL2RenderingContext,
            g = void 0 !== c.precision ? c.precision : "highp",
            h = d(g);h !== g && (console.warn("THREE.WebGLRenderer:", g, "not supported, using", h, "instead."), g = h);c = !0 === c.logarithmicDepthBuffer;h = a.getParameter(34930);var k = a.getParameter(35660),
            m = a.getParameter(3379),
            p = a.getParameter(34076),
            q = a.getParameter(34921),
            v = a.getParameter(36347),
            t = a.getParameter(36348),
            l = a.getParameter(36349),
            u = 0 < k,
            w = f || !!b.get("OES_texture_float"),
            n = u && w,
            x = f ? a.getParameter(36183) : 0;return { isWebGL2: f, getMaxAnisotropy: function getMaxAnisotropy() {
                if (void 0 !== e) return e;var c = b.get("EXT_texture_filter_anisotropic");return e = null !== c ? a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
            }, getMaxPrecision: d, precision: g, logarithmicDepthBuffer: c, maxTextures: h, maxVertexTextures: k, maxTextureSize: m, maxCubemapSize: p, maxAttributes: q, maxVertexUniforms: v, maxVaryings: t, maxFragmentUniforms: l, vertexTextures: u, floatFragmentTextures: w, floatVertexTextures: n, maxSamples: x };
    }function cg() {
        function a() {
            m.value !== d && (m.value = d, m.needsUpdate = 0 < e);c.numPlanes = e;c.numIntersection = 0;
        }function b(a, b, d, e) {
            var f = null !== a ? a.length : 0,
                g = null;if (0 !== f) {
                g = m.value;if (!0 !== e || null === g) {
                    e = d + 4 * f;b = b.matrixWorldInverse;k.getNormalMatrix(b);if (null === g || g.length < e) g = new Float32Array(e);for (e = 0; e !== f; ++e, d += 4) {
                        h.copy(a[e]).applyMatrix4(b, k), h.normal.toArray(g, d), g[d + 3] = h.constant;
                    }
                }m.value = g;m.needsUpdate = !0;
            }c.numPlanes = f;return g;
        }var c = this,
            d = null,
            e = 0,
            f = !1,
            g = !1,
            h = new Ta(),
            k = new pa(),
            m = { value: null, needsUpdate: !1 };this.uniform = m;this.numIntersection = this.numPlanes = 0;this.init = function (a, c, g) {
            var h = 0 !== a.length || c || 0 !== e || f;f = c;d = b(a, g, 0);e = a.length;return h;
        };this.beginShadows = function () {
            g = !0;b(null);
        };this.endShadows = function () {
            g = !1;a();
        };this.setState = function (c, h, k, t, l, u) {
            if (!f || null === c || 0 === c.length || g && !k) g ? b(null) : a();else {
                k = g ? 0 : e;var p = 4 * k,
                    q = l.clippingState || null;m.value = q;q = b(c, t, p, u);for (c = 0; c !== p; ++c) {
                    q[c] = d[c];
                }l.clippingState = q;this.numIntersection = h ? this.numPlanes : 0;this.numPlanes += k;
            }
        };
    }function dg(a) {
        var b = {};return { get: function get$$1(c) {
                if (void 0 !== b[c]) return b[c];switch (c) {case "WEBGL_depth_texture":
                        var d = a.getExtension("WEBGL_depth_texture") || a.getExtension("MOZ_WEBGL_depth_texture") || a.getExtension("WEBKIT_WEBGL_depth_texture");break;case "EXT_texture_filter_anisotropic":
                        d = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":
                        d = a.getExtension("WEBGL_compressed_texture_s3tc") || a.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                        break;case "WEBGL_compressed_texture_pvrtc":
                        d = a.getExtension("WEBGL_compressed_texture_pvrtc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:
                        d = a.getExtension(c);}null === d && console.warn("THREE.WebGLRenderer: " + c + " extension not supported.");return b[c] = d;
            } };
    }function eg(a, b, c) {
        function d(a) {
            var g = a.target;a = e[g.id];null !== a.index && b.remove(a.index);for (var k in a.attributes) {
                b.remove(a.attributes[k]);
            }g.removeEventListener("dispose", d);delete e[g.id];if (k = f[a.id]) b.remove(k), delete f[a.id];
            c.memory.geometries--;
        }var e = {},
            f = {};return { get: function get$$1(a, b) {
                var f = e[b.id];if (f) return f;b.addEventListener("dispose", d);b.isBufferGeometry ? f = b : b.isGeometry && (void 0 === b._bufferGeometry && (b._bufferGeometry = new D().setFromObject(a)), f = b._bufferGeometry);e[b.id] = f;c.memory.geometries++;return f;
            }, update: function update(a) {
                var c = a.index,
                    d = a.attributes;null !== c && b.update(c, 34963);for (var e in d) {
                    b.update(d[e], 34962);
                }a = a.morphAttributes;for (e in a) {
                    c = a[e];d = 0;for (var f = c.length; d < f; d++) {
                        b.update(c[d], 34962);
                    }
                }
            }, getWireframeAttribute: function getWireframeAttribute(a) {
                var c = f[a.id];if (c) return c;c = [];var d = a.index,
                    e = a.attributes;if (null !== d) {
                    d = d.array;e = 0;for (var g = d.length; e < g; e += 3) {
                        var q = d[e + 0],
                            v = d[e + 1],
                            l = d[e + 2];c.push(q, v, v, l, l, q);
                    }
                } else for (d = e.position.array, e = 0, g = d.length / 3 - 1; e < g; e += 3) {
                    q = e + 0, v = e + 1, l = e + 2, c.push(q, v, v, l, l, q);
                }c = new (65535 < Te(c) ? qb : pb)(c, 1);b.update(c, 34963);return f[a.id] = c;
            } };
    }function fg(a, b, c, d) {
        var e, f, g;this.setMode = function (a) {
            e = a;
        };this.setIndex = function (a) {
            f = a.type;g = a.bytesPerElement;
        };this.render = function (b, d) {
            a.drawElements(e, d, f, b * g);c.update(d, e);
        };this.renderInstances = function (h, k, m) {
            if (d.isWebGL2) var p = a;else if (p = b.get("ANGLE_instanced_arrays"), null === p) {
                console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return;
            }p[d.isWebGL2 ? "drawElementsInstanced" : "drawElementsInstancedANGLE"](e, m, f, k * g, h.maxInstancedCount);c.update(m, e, h.maxInstancedCount);
        };
    }function gg(a) {
        var b = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };return { memory: { geometries: 0,
                textures: 0 }, render: b, programs: null, autoReset: !0, reset: function reset() {
                b.frame++;b.calls = 0;b.triangles = 0;b.points = 0;b.lines = 0;
            }, update: function update(a, d, e) {
                e = e || 1;b.calls++;switch (d) {case 4:
                        b.triangles += a / 3 * e;break;case 5:case 6:
                        b.triangles += e * (a - 2);break;case 1:
                        b.lines += a / 2 * e;break;case 3:
                        b.lines += e * (a - 1);break;case 2:
                        b.lines += e * a;break;case 0:
                        b.points += e * a;break;default:
                        console.error("THREE.WebGLInfo: Unknown draw mode:", d);}
            } };
    }function hg(a, b) {
        return Math.abs(b[1]) - Math.abs(a[1]);
    }function ig(a) {
        var b = {},
            c = new Float32Array(8);return { update: function update(d, e, f, g) {
                var h = d.morphTargetInfluences,
                    k = h.length;d = b[e.id];if (void 0 === d) {
                    d = [];for (var m = 0; m < k; m++) {
                        d[m] = [m, 0];
                    }b[e.id] = d;
                }var p = f.morphTargets && e.morphAttributes.position;f = f.morphNormals && e.morphAttributes.normal;for (m = 0; m < k; m++) {
                    var q = d[m];0 !== q[1] && (p && e.removeAttribute("morphTarget" + m), f && e.removeAttribute("morphNormal" + m));
                }for (m = 0; m < k; m++) {
                    q = d[m], q[0] = m, q[1] = h[m];
                }d.sort(hg);for (m = 0; 8 > m; m++) {
                    if (q = d[m]) if (h = q[0], k = q[1]) {
                        p && e.addAttribute("morphTarget" + m, p[h]);f && e.addAttribute("morphNormal" + m, f[h]);c[m] = k;continue;
                    }c[m] = 0;
                }g.getUniforms().setValue(a, "morphTargetInfluences", c);
            } };
    }function jg(a, b) {
        var c = {};return { update: function update(d) {
                var e = b.render.frame,
                    f = d.geometry,
                    g = a.get(d, f);c[g.id] !== e && (f.isGeometry && g.updateFromObject(d), a.update(g), c[g.id] = e);return g;
            }, dispose: function dispose() {
                c = {};
            } };
    }function $a(a, b, c, d, e, f, g, h, k, m) {
        a = void 0 !== a ? a : [];S.call(this, a, void 0 !== b ? b : 301, c, d, e, f, void 0 !== g ? g : 1022, h, k, m);this.flipY = !1;
    }function Qb(a, b, c, d) {
        S.call(this, null);
        this.image = { data: a, width: b, height: c, depth: d };this.minFilter = this.magFilter = 1003;this.wrapR = 1001;this.flipY = this.generateMipmaps = !1;
    }function Rb(a, b, c, d) {
        S.call(this, null);this.image = { data: a, width: b, height: c, depth: d };this.minFilter = this.magFilter = 1003;this.wrapR = 1001;this.flipY = this.generateMipmaps = !1;
    }function Sb(a, b, c) {
        var d = a[0];if (0 >= d || 0 < d) return a;var e = b * c,
            f = Ue[e];void 0 === f && (f = new Float32Array(e), Ue[e] = f);if (0 !== b) for (d.toArray(f, 0), d = 1, e = 0; d !== b; ++d) {
            e += c, a[d].toArray(f, e);
        }return f;
    }function ca(a, b) {
        if (a.length !== b.length) return !1;for (var c = 0, d = a.length; c < d; c++) {
            if (a[c] !== b[c]) return !1;
        }return !0;
    }function ha(a, b) {
        for (var c = 0, d = b.length; c < d; c++) {
            a[c] = b[c];
        }
    }function Ve(a, b) {
        var c = We[b];void 0 === c && (c = new Int32Array(b), We[b] = c);for (var d = 0; d !== b; ++d) {
            c[d] = a.allocTextureUnit();
        }return c;
    }function kg(a, b) {
        var c = this.cache;c[0] !== b && (a.uniform1f(this.addr, b), c[0] = b);
    }function lg(a, b) {
        var c = this.cache;c[0] !== b && (a.uniform1i(this.addr, b), c[0] = b);
    }function mg(a, b) {
        var c = this.cache;if (void 0 !== b.x) {
            if (c[0] !== b.x || c[1] !== b.y) a.uniform2f(this.addr, b.x, b.y), c[0] = b.x, c[1] = b.y;
        } else ca(c, b) || (a.uniform2fv(this.addr, b), ha(c, b));
    }function ng(a, b) {
        var c = this.cache;if (void 0 !== b.x) {
            if (c[0] !== b.x || c[1] !== b.y || c[2] !== b.z) a.uniform3f(this.addr, b.x, b.y, b.z), c[0] = b.x, c[1] = b.y, c[2] = b.z;
        } else if (void 0 !== b.r) {
            if (c[0] !== b.r || c[1] !== b.g || c[2] !== b.b) a.uniform3f(this.addr, b.r, b.g, b.b), c[0] = b.r, c[1] = b.g, c[2] = b.b;
        } else ca(c, b) || (a.uniform3fv(this.addr, b), ha(c, b));
    }function og(a, b) {
        var c = this.cache;if (void 0 !== b.x) {
            if (c[0] !== b.x || c[1] !== b.y || c[2] !== b.z || c[3] !== b.w) a.uniform4f(this.addr, b.x, b.y, b.z, b.w), c[0] = b.x, c[1] = b.y, c[2] = b.z, c[3] = b.w;
        } else ca(c, b) || (a.uniform4fv(this.addr, b), ha(c, b));
    }function pg(a, b) {
        var c = this.cache,
            d = b.elements;void 0 === d ? ca(c, b) || (a.uniformMatrix2fv(this.addr, !1, b), ha(c, b)) : ca(c, d) || (Xe.set(d), a.uniformMatrix2fv(this.addr, !1, Xe), ha(c, d));
    }function qg(a, b) {
        var c = this.cache,
            d = b.elements;void 0 === d ? ca(c, b) || (a.uniformMatrix3fv(this.addr, !1, b), ha(c, b)) : ca(c, d) || (Ye.set(d), a.uniformMatrix3fv(this.addr, !1, Ye), ha(c, d));
    }function rg(a, b) {
        var c = this.cache,
            d = b.elements;void 0 === d ? ca(c, b) || (a.uniformMatrix4fv(this.addr, !1, b), ha(c, b)) : ca(c, d) || (Ze.set(d), a.uniformMatrix4fv(this.addr, !1, Ze), ha(c, d));
    }function sg(a, b, c) {
        var d = this.cache,
            e = c.allocTextureUnit();d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);c.setTexture2D(b || $e, e);
    }function tg(a, b, c) {
        var d = this.cache,
            e = c.allocTextureUnit();d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);c.setTexture2DArray(b || ug, e);
    }function vg(a, b, c) {
        var d = this.cache,
            e = c.allocTextureUnit();
        d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);c.setTexture3D(b || wg, e);
    }function xg(a, b, c) {
        var d = this.cache,
            e = c.allocTextureUnit();d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);c.setTextureCube(b || af, e);
    }function bf(a, b) {
        var c = this.cache;ca(c, b) || (a.uniform2iv(this.addr, b), ha(c, b));
    }function cf(a, b) {
        var c = this.cache;ca(c, b) || (a.uniform3iv(this.addr, b), ha(c, b));
    }function df(a, b) {
        var c = this.cache;ca(c, b) || (a.uniform4iv(this.addr, b), ha(c, b));
    }function yg(a) {
        switch (a) {case 5126:
                return kg;case 35664:
                return mg;case 35665:
                return ng;
            case 35666:
                return og;case 35674:
                return pg;case 35675:
                return qg;case 35676:
                return rg;case 35678:case 36198:
                return sg;case 35679:
                return vg;case 35680:
                return xg;case 36289:
                return tg;case 5124:case 35670:
                return lg;case 35667:case 35671:
                return bf;case 35668:case 35672:
                return cf;case 35669:case 35673:
                return df;}
    }function zg(a, b) {
        var c = this.cache;ca(c, b) || (a.uniform1fv(this.addr, b), ha(c, b));
    }function Ag(a, b) {
        var c = this.cache;ca(c, b) || (a.uniform1iv(this.addr, b), ha(c, b));
    }function Bg(a, b) {
        var c = this.cache;b = Sb(b, this.size, 2);ca(c, b) || (a.uniform2fv(this.addr, b), this.updateCache(b));
    }function Cg(a, b) {
        var c = this.cache;b = Sb(b, this.size, 3);ca(c, b) || (a.uniform3fv(this.addr, b), this.updateCache(b));
    }function Dg(a, b) {
        var c = this.cache;b = Sb(b, this.size, 4);ca(c, b) || (a.uniform4fv(this.addr, b), this.updateCache(b));
    }function Eg(a, b) {
        var c = this.cache;b = Sb(b, this.size, 4);ca(c, b) || (a.uniformMatrix2fv(this.addr, !1, b), this.updateCache(b));
    }function Fg(a, b) {
        var c = this.cache;b = Sb(b, this.size, 9);ca(c, b) || (a.uniformMatrix3fv(this.addr, !1, b), this.updateCache(b));
    }function Gg(a, b) {
        var c = this.cache;b = Sb(b, this.size, 16);ca(c, b) || (a.uniformMatrix4fv(this.addr, !1, b), this.updateCache(b));
    }function Hg(a, b, c) {
        var d = this.cache,
            e = b.length,
            f = Ve(c, e);!1 === ca(d, f) && (a.uniform1iv(this.addr, f), ha(d, f));for (a = 0; a !== e; ++a) {
            c.setTexture2D(b[a] || $e, f[a]);
        }
    }function Ig(a, b, c) {
        var d = this.cache,
            e = b.length,
            f = Ve(c, e);!1 === ca(d, f) && (a.uniform1iv(this.addr, f), ha(d, f));for (a = 0; a !== e; ++a) {
            c.setTextureCube(b[a] || af, f[a]);
        }
    }function Jg(a) {
        switch (a) {case 5126:
                return zg;
            case 35664:
                return Bg;case 35665:
                return Cg;case 35666:
                return Dg;case 35674:
                return Eg;case 35675:
                return Fg;case 35676:
                return Gg;case 35678:
                return Hg;case 35680:
                return Ig;case 5124:case 35670:
                return Ag;case 35667:case 35671:
                return bf;case 35668:case 35672:
                return cf;case 35669:case 35673:
                return df;}
    }function Kg(a, b, c) {
        this.id = a;this.addr = c;this.cache = [];this.setValue = yg(b.type);
    }function ef(a, b, c) {
        this.id = a;this.addr = c;this.cache = [];this.size = b.size;this.setValue = Jg(b.type);
    }function ff(a) {
        this.id = a;this.seq = [];this.map = {};
    }function fb(a, b, c) {
        this.seq = [];this.map = {};this.renderer = c;c = a.getProgramParameter(b, 35718);for (var d = 0; d < c; ++d) {
            var e = a.getActiveUniform(b, d),
                f = a.getUniformLocation(b, e.name),
                g = this,
                h = e.name,
                k = h.length;for (fe.lastIndex = 0;;) {
                var m = fe.exec(h),
                    p = fe.lastIndex,
                    q = m[1],
                    v = m[3];"]" === m[2] && (q |= 0);if (void 0 === v || "[" === v && p + 2 === k) {
                    h = g;e = void 0 === v ? new Kg(q, e, f) : new ef(q, e, f);h.seq.push(e);h.map[e.id] = e;break;
                } else v = g.map[q], void 0 === v && (v = new ff(q), q = g, g = v, q.seq.push(g), q.map[g.id] = g), g = v;
            }
        }
    }
    function Lg(a) {
        a = a.split("\n");for (var b = 0; b < a.length; b++) {
            a[b] = b + 1 + ": " + a[b];
        }return a.join("\n");
    }function gf(a, b, c) {
        var d = a.createShader(b);a.shaderSource(d, c);a.compileShader(d);!1 === a.getShaderParameter(d, 35713) && console.error("THREE.WebGLShader: Shader couldn't compile.");"" !== a.getShaderInfoLog(d) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", 35633 === b ? "vertex" : "fragment", a.getShaderInfoLog(d), Lg(c));return d;
    }function hf(a) {
        switch (a) {case 3E3:
                return ["Linear", "( value )"];case 3001:
                return ["sRGB", "( value )"];case 3002:
                return ["RGBE", "( value )"];case 3004:
                return ["RGBM", "( value, 7.0 )"];case 3005:
                return ["RGBM", "( value, 16.0 )"];case 3006:
                return ["RGBD", "( value, 256.0 )"];case 3007:
                return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];default:
                throw Error("unsupported encoding: " + a);}
    }function xd(a, b) {
        b = hf(b);return "vec4 " + a + "( vec4 value ) { return " + b[0] + "ToLinear" + b[1] + "; }";
    }function Mg(a, b) {
        b = hf(b);return "vec4 " + a + "( vec4 value ) { return LinearTo" + b[0] + b[1] + "; }";
    }function Ng(a, b) {
        switch (b) {case 1:
                b = "Linear";break;case 2:
                b = "Reinhard";break;case 3:
                b = "Uncharted2";break;case 4:
                b = "OptimizedCineon";break;case 5:
                b = "ACESFilmic";break;default:
                throw Error("unsupported toneMapping: " + b);}return "vec3 " + a + "( vec3 color ) { return " + b + "ToneMapping( color ); }";
    }function Og(a, b, c) {
        a = a || {};return [a.derivatives || b.envMapCubeUV || b.bumpMap || b.normalMap && !b.objectSpaceNormalMap || b.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (a.fragDepth || b.logarithmicDepthBuffer) && c.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", a.drawBuffers && c.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (a.shaderTextureLOD || b.envMap) && c.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(Dc).join("\n");
    }function Pg(a) {
        var b = [],
            c;for (c in a) {
            var d = a[c];!1 !== d && b.push("#define " + c + " " + d);
        }return b.join("\n");
    }function Dc(a) {
        return "" !== a;
    }function jf(a, b) {
        return a.replace(/NUM_DIR_LIGHTS/g, b.numDirLights).replace(/NUM_SPOT_LIGHTS/g, b.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, b.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, b.numPointLights).replace(/NUM_HEMI_LIGHTS/g, b.numHemiLights);
    }function kf(a, b) {
        return a.replace(/NUM_CLIPPING_PLANES/g, b.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, b.numClippingPlanes - b.numClipIntersection);
    }function ge(a) {
        return a.replace(/^[ \t]*#include +<([\w\d./]+)>/gm, function (a, c) {
            a = V[c];if (void 0 === a) throw Error("Can not resolve #include <" + c + ">");return ge(a);
        });
    }function lf(a) {
        return a.replace(/#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g, function (a, c, d, e) {
            a = "";for (c = parseInt(c); c < parseInt(d); c++) {
                a += e.replace(/\[ i \]/g, "[ " + c + " ]");
            }return a;
        });
    }function Qg(a, b, c, d, e, f, g) {
        var h = a.context,
            k = d.defines,
            m = e.vertexShader,
            p = e.fragmentShader,
            q = "SHADOWMAP_TYPE_BASIC";1 === f.shadowMapType ? q = "SHADOWMAP_TYPE_PCF" : 2 === f.shadowMapType && (q = "SHADOWMAP_TYPE_PCF_SOFT");var v = "ENVMAP_TYPE_CUBE",
            l = "ENVMAP_MODE_REFLECTION",
            r = "ENVMAP_BLENDING_MULTIPLY";if (f.envMap) {
            switch (d.envMap.mapping) {case 301:case 302:
                    v = "ENVMAP_TYPE_CUBE";break;case 306:case 307:
                    v = "ENVMAP_TYPE_CUBE_UV";break;case 303:case 304:
                    v = "ENVMAP_TYPE_EQUIREC";break;case 305:
                    v = "ENVMAP_TYPE_SPHERE";}switch (d.envMap.mapping) {case 302:case 304:
                    l = "ENVMAP_MODE_REFRACTION";}switch (d.combine) {case 0:
                    r = "ENVMAP_BLENDING_MULTIPLY";break;case 1:
                    r = "ENVMAP_BLENDING_MIX";break;case 2:
                    r = "ENVMAP_BLENDING_ADD";}
        }var u = 0 < a.gammaFactor ? a.gammaFactor : 1,
            w = g.isWebGL2 ? "" : Og(d.extensions, f, b),
            n = Pg(k),
            x = h.createProgram();d.isRawShaderMaterial ? (k = [n].filter(Dc).join("\n"), 0 < k.length && (k += "\n"), b = [w, n].filter(Dc).join("\n"), 0 < b.length && (b += "\n")) : (k = ["precision " + f.precision + " float;", "precision " + f.precision + " int;", "#define SHADER_NAME " + e.name, n, f.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + u, "#define MAX_BONES " + f.maxBones, f.useFog && f.fog ? "#define USE_FOG" : "", f.useFog && f.fogExp ? "#define FOG_EXP2" : "", f.map ? "#define USE_MAP" : "", f.envMap ? "#define USE_ENVMAP" : "", f.envMap ? "#define " + l : "", f.lightMap ? "#define USE_LIGHTMAP" : "", f.aoMap ? "#define USE_AOMAP" : "", f.emissiveMap ? "#define USE_EMISSIVEMAP" : "", f.bumpMap ? "#define USE_BUMPMAP" : "", f.normalMap ? "#define USE_NORMALMAP" : "", f.normalMap && f.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", f.displacementMap && f.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", f.specularMap ? "#define USE_SPECULARMAP" : "", f.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", f.metalnessMap ? "#define USE_METALNESSMAP" : "", f.alphaMap ? "#define USE_ALPHAMAP" : "", f.vertexTangents ? "#define USE_TANGENT" : "", f.vertexColors ? "#define USE_COLOR" : "", f.flatShading ? "#define FLAT_SHADED" : "", f.skinning ? "#define USE_SKINNING" : "", f.useVertexTexture ? "#define BONE_TEXTURE" : "", f.morphTargets ? "#define USE_MORPHTARGETS" : "", f.morphNormals && !1 === f.flatShading ? "#define USE_MORPHNORMALS" : "", f.doubleSided ? "#define DOUBLE_SIDED" : "", f.flipSided ? "#define FLIP_SIDED" : "", f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", f.shadowMapEnabled ? "#define " + q : "", f.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", f.logarithmicDepthBuffer && (g.isWebGL2 || b.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(Dc).join("\n"), b = [w, "precision " + f.precision + " float;", "precision " + f.precision + " int;", "#define SHADER_NAME " + e.name, n, f.alphaTest ? "#define ALPHATEST " + f.alphaTest + (f.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + u, f.useFog && f.fog ? "#define USE_FOG" : "", f.useFog && f.fogExp ? "#define FOG_EXP2" : "", f.map ? "#define USE_MAP" : "", f.matcap ? "#define USE_MATCAP" : "", f.envMap ? "#define USE_ENVMAP" : "", f.envMap ? "#define " + v : "", f.envMap ? "#define " + l : "", f.envMap ? "#define " + r : "", f.lightMap ? "#define USE_LIGHTMAP" : "", f.aoMap ? "#define USE_AOMAP" : "", f.emissiveMap ? "#define USE_EMISSIVEMAP" : "", f.bumpMap ? "#define USE_BUMPMAP" : "", f.normalMap ? "#define USE_NORMALMAP" : "", f.normalMap && f.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", f.specularMap ? "#define USE_SPECULARMAP" : "", f.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", f.metalnessMap ? "#define USE_METALNESSMAP" : "", f.alphaMap ? "#define USE_ALPHAMAP" : "", f.vertexTangents ? "#define USE_TANGENT" : "", f.vertexColors ? "#define USE_COLOR" : "", f.gradientMap ? "#define USE_GRADIENTMAP" : "", f.flatShading ? "#define FLAT_SHADED" : "", f.doubleSided ? "#define DOUBLE_SIDED" : "", f.flipSided ? "#define FLIP_SIDED" : "", f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", f.shadowMapEnabled ? "#define " + q : "", f.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", f.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", f.logarithmicDepthBuffer && (g.isWebGL2 || b.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", f.envMap && (g.isWebGL2 || b.get("EXT_shader_texture_lod")) ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", 0 !== f.toneMapping ? "#define TONE_MAPPING" : "", 0 !== f.toneMapping ? V.tonemapping_pars_fragment : "", 0 !== f.toneMapping ? Ng("toneMapping", f.toneMapping) : "", f.dithering ? "#define DITHERING" : "", f.outputEncoding || f.mapEncoding || f.matcapEncoding || f.envMapEncoding || f.emissiveMapEncoding ? V.encodings_pars_fragment : "", f.mapEncoding ? xd("mapTexelToLinear", f.mapEncoding) : "", f.matcapEncoding ? xd("matcapTexelToLinear", f.matcapEncoding) : "", f.envMapEncoding ? xd("envMapTexelToLinear", f.envMapEncoding) : "", f.emissiveMapEncoding ? xd("emissiveMapTexelToLinear", f.emissiveMapEncoding) : "", f.outputEncoding ? Mg("linearToOutputTexel", f.outputEncoding) : "", f.depthPacking ? "#define DEPTH_PACKING " + d.depthPacking : "", "\n"].filter(Dc).join("\n"));m = ge(m);m = jf(m, f);m = kf(m, f);p = ge(p);p = jf(p, f);p = kf(p, f);m = lf(m);p = lf(p);g.isWebGL2 && !d.isRawShaderMaterial && (g = !1, q = /^\s*#version\s+300\s+es\s*\n/, d.isShaderMaterial && null !== m.match(q) && null !== p.match(q) && (g = !0, m = m.replace(q, ""), p = p.replace(q, "")), k = "#version 300 es\n\n#define attribute in\n#define varying out\n#define texture2D texture\n" + k, b = ["#version 300 es\n\n#define varying in", g ? "" : "out highp vec4 pc_fragColor;", g ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + b);p = b + p;m = gf(h, 35633, k + m);p = gf(h, 35632, p);h.attachShader(x, m);h.attachShader(x, p);void 0 !== d.index0AttributeName ? h.bindAttribLocation(x, 0, d.index0AttributeName) : !0 === f.morphTargets && h.bindAttribLocation(x, 0, "position");h.linkProgram(x);f = h.getProgramInfoLog(x).trim();g = h.getShaderInfoLog(m).trim();q = h.getShaderInfoLog(p).trim();l = v = !0;if (!1 === h.getProgramParameter(x, 35714)) v = !1, console.error("THREE.WebGLProgram: shader error: ", h.getError(), "35715", h.getProgramParameter(x, 35715), "gl.getProgramInfoLog", f, g, q);else if ("" !== f) console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", f);else if ("" === g || "" === q) l = !1;l && (this.diagnostics = { runnable: v, material: d, programLog: f, vertexShader: { log: g, prefix: k }, fragmentShader: { log: q, prefix: b } });h.deleteShader(m);h.deleteShader(p);var C;this.getUniforms = function () {
            void 0 === C && (C = new fb(h, x, a));return C;
        };var y;this.getAttributes = function () {
            if (void 0 === y) {
                for (var a = {}, b = h.getProgramParameter(x, 35721), c = 0; c < b; c++) {
                    var d = h.getActiveAttrib(x, c).name;a[d] = h.getAttribLocation(x, d);
                }y = a;
            }return y;
        };this.destroy = function () {
            h.deleteProgram(x);this.program = void 0;
        };Object.defineProperties(this, { uniforms: { get: function get$$1() {
                    console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");return this.getUniforms();
                } }, attributes: { get: function get$$1() {
                    console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");return this.getAttributes();
                } } });this.name = e.name;this.id = Rg++;this.code = c;this.usedTimes = 1;this.program = x;this.vertexShader = m;this.fragmentShader = p;return this;
    }function Sg(a, b, c) {
        function d(a, b) {
            if (a) a.isTexture ? c = a.encoding : a.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), c = a.texture.encoding);else var c = 3E3;3E3 === c && b && (c = 3007);return c;
        }var e = [],
            f = { MeshDepthMaterial: "depth", MeshDistanceMaterial: "distanceRGBA", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", MeshToonMaterial: "phong", MeshStandardMaterial: "physical",
            MeshPhysicalMaterial: "physical", MeshMatcapMaterial: "matcap", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points", ShadowMaterial: "shadow", SpriteMaterial: "sprite" },
            g = "precision supportsVertexTextures map mapEncoding matcap matcapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap objectSpaceNormalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors vertexTangents fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering".split(" ");
        this.getParameters = function (b, e, g, p, q, v, l) {
            var h = f[b.type];if (l.isSkinnedMesh) {
                var k = l.skeleton.bones;if (c.floatVertexTextures) k = 1024;else {
                    var m = Math.min(Math.floor((c.maxVertexUniforms - 20) / 4), k.length);m < k.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + k.length + " bones. This GPU supports " + m + "."), k = 0) : k = m;
                }
            } else k = 0;m = c.precision;null !== b.precision && (m = c.getMaxPrecision(b.precision), m !== b.precision && console.warn("THREE.WebGLProgram.getParameters:", b.precision, "not supported, using", m, "instead."));
            var t = a.getRenderTarget();return { shaderID: h, precision: m, supportsVertexTextures: c.vertexTextures, outputEncoding: d(t ? t.texture : null, a.gammaOutput), map: !!b.map, mapEncoding: d(b.map, a.gammaInput), matcap: !!b.matcap, matcapEncoding: d(b.matcap, a.gammaInput), envMap: !!b.envMap, envMapMode: b.envMap && b.envMap.mapping, envMapEncoding: d(b.envMap, a.gammaInput), envMapCubeUV: !!b.envMap && (306 === b.envMap.mapping || 307 === b.envMap.mapping), lightMap: !!b.lightMap, aoMap: !!b.aoMap, emissiveMap: !!b.emissiveMap, emissiveMapEncoding: d(b.emissiveMap, a.gammaInput), bumpMap: !!b.bumpMap, normalMap: !!b.normalMap, objectSpaceNormalMap: 1 === b.normalMapType, displacementMap: !!b.displacementMap, roughnessMap: !!b.roughnessMap, metalnessMap: !!b.metalnessMap, specularMap: !!b.specularMap, alphaMap: !!b.alphaMap, gradientMap: !!b.gradientMap, combine: b.combine, vertexTangents: b.normalMap && b.vertexTangents, vertexColors: b.vertexColors, fog: !!p, useFog: b.fog, fogExp: p && p.isFogExp2, flatShading: b.flatShading, sizeAttenuation: b.sizeAttenuation, logarithmicDepthBuffer: c.logarithmicDepthBuffer,
                skinning: b.skinning && 0 < k, maxBones: k, useVertexTexture: c.floatVertexTextures, morphTargets: b.morphTargets, morphNormals: b.morphNormals, maxMorphTargets: a.maxMorphTargets, maxMorphNormals: a.maxMorphNormals, numDirLights: e.directional.length, numPointLights: e.point.length, numSpotLights: e.spot.length, numRectAreaLights: e.rectArea.length, numHemiLights: e.hemi.length, numClippingPlanes: q, numClipIntersection: v, dithering: b.dithering, shadowMapEnabled: a.shadowMap.enabled && l.receiveShadow && 0 < g.length, shadowMapType: a.shadowMap.type,
                toneMapping: a.toneMapping, physicallyCorrectLights: a.physicallyCorrectLights, premultipliedAlpha: b.premultipliedAlpha, alphaTest: b.alphaTest, doubleSided: 2 === b.side, flipSided: 1 === b.side, depthPacking: void 0 !== b.depthPacking ? b.depthPacking : !1 };
        };this.getProgramCode = function (b, c) {
            var d = [];c.shaderID ? d.push(c.shaderID) : (d.push(b.fragmentShader), d.push(b.vertexShader));if (void 0 !== b.defines) for (var e in b.defines) {
                d.push(e), d.push(b.defines[e]);
            }for (e = 0; e < g.length; e++) {
                d.push(c[g[e]]);
            }d.push(b.onBeforeCompile.toString());
            d.push(a.gammaOutput);d.push(a.gammaFactor);return d.join();
        };this.acquireProgram = function (d, f, g, p) {
            for (var h, k = 0, m = e.length; k < m; k++) {
                var l = e[k];if (l.code === p) {
                    h = l;++h.usedTimes;break;
                }
            }void 0 === h && (h = new Qg(a, b, p, d, f, g, c), e.push(h));return h;
        };this.releaseProgram = function (a) {
            if (0 === --a.usedTimes) {
                var b = e.indexOf(a);e[b] = e[e.length - 1];e.pop();a.destroy();
            }
        };this.programs = e;
    }function Tg() {
        var a = new WeakMap();return { get: function get$$1(b) {
                var c = a.get(b);void 0 === c && (c = {}, a.set(b, c));return c;
            }, remove: function remove(b) {
                a.delete(b);
            },
            update: function update(b, c, d) {
                a.get(b)[c] = d;
            }, dispose: function dispose() {
                a = new WeakMap();
            } };
    }function Ug(a, b) {
        return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.program && b.program && a.program !== b.program ? a.program.id - b.program.id : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id;
    }function Vg(a, b) {
        return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id;
    }function mf() {
        function a(a, d, e, k, m, p) {
            var f = b[c];void 0 === f ? (f = { id: a.id, object: a, geometry: d, material: e, program: e.program, groupOrder: k, renderOrder: a.renderOrder, z: m, group: p }, b[c] = f) : (f.id = a.id, f.object = a, f.geometry = d, f.material = e, f.program = e.program, f.groupOrder = k, f.renderOrder = a.renderOrder, f.z = m, f.group = p);c++;return f;
        }var b = [],
            c = 0,
            d = [],
            e = [];return { opaque: d, transparent: e, init: function init() {
                c = 0;d.length = 0;e.length = 0;
            }, push: function push(b, c, h, k, m, p) {
                b = a(b, c, h, k, m, p);(!0 === h.transparent ? e : d).push(b);
            }, unshift: function unshift(b, c, h, k, m, p) {
                b = a(b, c, h, k, m, p);(!0 === h.transparent ? e : d).unshift(b);
            }, sort: function sort() {
                1 < d.length && d.sort(Ug);1 < e.length && e.sort(Vg);
            } };
    }function Wg() {
        function a(c) {
            c = c.target;c.removeEventListener("dispose", a);delete b[c.id];
        }var b = {};return { get: function get$$1(c, d) {
                var e = b[c.id];if (void 0 === e) {
                    var f = new mf();b[c.id] = {};b[c.id][d.id] = f;c.addEventListener("dispose", a);
                } else f = e[d.id], void 0 === f && (f = new mf(), e[d.id] = f);return f;
            }, dispose: function dispose() {
                b = {};
            } };
    }function Xg() {
        var a = {};return { get: function get$$1(b) {
                if (void 0 !== a[b.id]) return a[b.id];switch (b.type) {case "DirectionalLight":
                        var c = { direction: new n(), color: new K(), shadow: !1, shadowBias: 0, shadowRadius: 1, shadowMapSize: new B() };break;case "SpotLight":
                        c = { position: new n(), direction: new n(), color: new K(), distance: 0, coneCos: 0, penumbraCos: 0, decay: 0, shadow: !1, shadowBias: 0, shadowRadius: 1, shadowMapSize: new B() };break;case "PointLight":
                        c = { position: new n(), color: new K(), distance: 0, decay: 0, shadow: !1, shadowBias: 0, shadowRadius: 1, shadowMapSize: new B(), shadowCameraNear: 1, shadowCameraFar: 1E3 };break;
                    case "HemisphereLight":
                        c = { direction: new n(), skyColor: new K(), groundColor: new K() };break;case "RectAreaLight":
                        c = { color: new K(), position: new n(), halfWidth: new n(), halfHeight: new n() };}return a[b.id] = c;
            } };
    }function Yg() {
        var a = new Xg(),
            b = { id: Zg++, hash: { stateID: -1, directionalLength: -1, pointLength: -1, spotLength: -1, rectAreaLength: -1, hemiLength: -1, shadowsLength: -1 }, ambient: [0, 0, 0], directional: [], directionalShadowMap: [], directionalShadowMatrix: [], spot: [], spotShadowMap: [], spotShadowMatrix: [], rectArea: [], point: [], pointShadowMap: [],
            pointShadowMatrix: [], hemi: [] },
            c = new n(),
            d = new J(),
            e = new J();return { setup: function setup(f, g, h) {
                var k = 0,
                    m = 0,
                    p = 0,
                    q = 0,
                    v = 0,
                    l = 0,
                    r = 0,
                    u = 0;h = h.matrixWorldInverse;for (var w = 0, n = f.length; w < n; w++) {
                    var x = f[w],
                        C = x.color,
                        y = x.intensity,
                        Q = x.distance,
                        fa = x.shadow && x.shadow.map ? x.shadow.map.texture : null;if (x.isAmbientLight) k += C.r * y, m += C.g * y, p += C.b * y;else if (x.isDirectionalLight) {
                        var A = a.get(x);A.color.copy(x.color).multiplyScalar(x.intensity);A.direction.setFromMatrixPosition(x.matrixWorld);c.setFromMatrixPosition(x.target.matrixWorld);
                        A.direction.sub(c);A.direction.transformDirection(h);if (A.shadow = x.castShadow) C = x.shadow, A.shadowBias = C.bias, A.shadowRadius = C.radius, A.shadowMapSize = C.mapSize;b.directionalShadowMap[q] = fa;b.directionalShadowMatrix[q] = x.shadow.matrix;b.directional[q] = A;q++;
                    } else if (x.isSpotLight) {
                        A = a.get(x);A.position.setFromMatrixPosition(x.matrixWorld);A.position.applyMatrix4(h);A.color.copy(C).multiplyScalar(y);A.distance = Q;A.direction.setFromMatrixPosition(x.matrixWorld);c.setFromMatrixPosition(x.target.matrixWorld);
                        A.direction.sub(c);A.direction.transformDirection(h);A.coneCos = Math.cos(x.angle);A.penumbraCos = Math.cos(x.angle * (1 - x.penumbra));A.decay = x.decay;if (A.shadow = x.castShadow) C = x.shadow, A.shadowBias = C.bias, A.shadowRadius = C.radius, A.shadowMapSize = C.mapSize;b.spotShadowMap[l] = fa;b.spotShadowMatrix[l] = x.shadow.matrix;b.spot[l] = A;l++;
                    } else if (x.isRectAreaLight) A = a.get(x), A.color.copy(C).multiplyScalar(y), A.position.setFromMatrixPosition(x.matrixWorld), A.position.applyMatrix4(h), e.identity(), d.copy(x.matrixWorld), d.premultiply(h), e.extractRotation(d), A.halfWidth.set(.5 * x.width, 0, 0), A.halfHeight.set(0, .5 * x.height, 0), A.halfWidth.applyMatrix4(e), A.halfHeight.applyMatrix4(e), b.rectArea[r] = A, r++;else if (x.isPointLight) {
                        A = a.get(x);A.position.setFromMatrixPosition(x.matrixWorld);A.position.applyMatrix4(h);A.color.copy(x.color).multiplyScalar(x.intensity);A.distance = x.distance;A.decay = x.decay;if (A.shadow = x.castShadow) C = x.shadow, A.shadowBias = C.bias, A.shadowRadius = C.radius, A.shadowMapSize = C.mapSize, A.shadowCameraNear = C.camera.near, A.shadowCameraFar = C.camera.far;b.pointShadowMap[v] = fa;b.pointShadowMatrix[v] = x.shadow.matrix;b.point[v] = A;v++;
                    } else x.isHemisphereLight && (A = a.get(x), A.direction.setFromMatrixPosition(x.matrixWorld), A.direction.transformDirection(h), A.direction.normalize(), A.skyColor.copy(x.color).multiplyScalar(y), A.groundColor.copy(x.groundColor).multiplyScalar(y), b.hemi[u] = A, u++);
                }b.ambient[0] = k;b.ambient[1] = m;b.ambient[2] = p;b.directional.length = q;b.spot.length = l;b.rectArea.length = r;b.point.length = v;
                b.hemi.length = u;b.hash.stateID = b.id;b.hash.directionalLength = q;b.hash.pointLength = v;b.hash.spotLength = l;b.hash.rectAreaLength = r;b.hash.hemiLength = u;b.hash.shadowsLength = g.length;
            }, state: b };
    }function nf() {
        var a = new Yg(),
            b = [],
            c = [];return { init: function init() {
                b.length = 0;c.length = 0;
            }, state: { lightsArray: b, shadowsArray: c, lights: a }, setupLights: function setupLights(d) {
                a.setup(b, c, d);
            }, pushLight: function pushLight(a) {
                b.push(a);
            }, pushShadow: function pushShadow(a) {
                c.push(a);
            } };
    }function $g() {
        function a(c) {
            c = c.target;c.removeEventListener("dispose", a);delete b[c.id];
        }
        var b = {};return { get: function get$$1(c, d) {
                if (void 0 === b[c.id]) {
                    var e = new nf();b[c.id] = {};b[c.id][d.id] = e;c.addEventListener("dispose", a);
                } else void 0 === b[c.id][d.id] ? (e = new nf(), b[c.id][d.id] = e) : e = b[c.id][d.id];return e;
            }, dispose: function dispose() {
                b = {};
            } };
    }function gb(a) {
        M.call(this);this.type = "MeshDepthMaterial";this.depthPacking = 3200;this.morphTargets = this.skinning = !1;this.displacementMap = this.alphaMap = this.map = null;this.displacementScale = 1;this.displacementBias = 0;this.wireframe = !1;this.wireframeLinewidth = 1;this.lights = this.fog = !1;this.setValues(a);
    }function hb(a) {
        M.call(this);this.type = "MeshDistanceMaterial";this.referencePosition = new n();this.nearDistance = 1;this.farDistance = 1E3;this.morphTargets = this.skinning = !1;this.displacementMap = this.alphaMap = this.map = null;this.displacementScale = 1;this.displacementBias = 0;this.lights = this.fog = !1;this.setValues(a);
    }function of(a, b, c) {
        function d(b, c, d, e, f, g) {
            var h = b.geometry;var k = q;var m = b.customDepthMaterial;d && (k = v, m = b.customDistanceMaterial);m ? k = m : (m = !1, c.morphTargets && (h && h.isBufferGeometry ? m = h.morphAttributes && h.morphAttributes.position && 0 < h.morphAttributes.position.length : h && h.isGeometry && (m = h.morphTargets && 0 < h.morphTargets.length)), b.isSkinnedMesh && !1 === c.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", b), b = b.isSkinnedMesh && c.skinning, h = 0, m && (h |= 1), b && (h |= 2), k = k[h]);a.localClippingEnabled && !0 === c.clipShadows && 0 !== c.clippingPlanes.length && (h = k.uuid, m = c.uuid, b = l[h], void 0 === b && (b = {}, l[h] = b), h = b[m], void 0 === h && (h = k.clone(), b[m] = h), k = h);k.visible = c.visible;k.wireframe = c.wireframe;k.side = null != c.shadowSide ? c.shadowSide : r[c.side];k.clipShadows = c.clipShadows;k.clippingPlanes = c.clippingPlanes;k.clipIntersection = c.clipIntersection;k.wireframeLinewidth = c.wireframeLinewidth;k.linewidth = c.linewidth;d && k.isMeshDistanceMaterial && (k.referencePosition.copy(e), k.nearDistance = f, k.farDistance = g);return k;
        }function e(c, g, h, k) {
            if (!1 !== c.visible) {
                if (c.layers.test(g.layers) && (c.isMesh || c.isLine || c.isPoints) && c.castShadow && (!c.frustumCulled || f.intersectsObject(c))) {
                    c.modelViewMatrix.multiplyMatrices(h.matrixWorldInverse, c.matrixWorld);var m = b.update(c),
                        q = c.material;if (Array.isArray(q)) for (var v = m.groups, l = 0, t = v.length; l < t; l++) {
                        var r = v[l],
                            u = q[r.materialIndex];u && u.visible && (u = d(c, u, k, p, h.near, h.far), a.renderBufferDirect(h, null, m, u, c, r));
                    } else q.visible && (u = d(c, q, k, p, h.near, h.far), a.renderBufferDirect(h, null, m, u, c, null));
                }c = c.children;m = 0;for (q = c.length; m < q; m++) {
                    e(c[m], g, h, k);
                }
            }
        }var f = new vd(),
            g = new J(),
            h = new B(),
            k = new B(c, c),
            m = new n(),
            p = new n(),
            q = Array(4),
            v = Array(4),
            l = {},
            r = { 0: 1, 1: 0, 2: 2 },
            u = [new n(1, 0, 0), new n(-1, 0, 0), new n(0, 0, 1), new n(0, 0, -1), new n(0, 1, 0), new n(0, -1, 0)],
            w = [new n(0, 1, 0), new n(0, 1, 0), new n(0, 1, 0), new n(0, 1, 0), new n(0, 0, 1), new n(0, 0, -1)],
            z = [new ba(), new ba(), new ba(), new ba(), new ba(), new ba()];for (c = 0; 4 !== c; ++c) {
            var x = 0 !== (c & 1),
                C = 0 !== (c & 2),
                y = new gb({ depthPacking: 3201, morphTargets: x, skinning: C });q[c] = y;x = new hb({ morphTargets: x, skinning: C });v[c] = x;
        }var Q = this;this.enabled = !1;this.autoUpdate = !0;this.needsUpdate = !1;this.type = 1;this.render = function (b, c, d) {
            if (!1 !== Q.enabled && (!1 !== Q.autoUpdate || !1 !== Q.needsUpdate) && 0 !== b.length) {
                var q = a.getRenderTarget(),
                    v = a.state;v.setBlending(0);v.buffers.color.setClear(1, 1, 1, 1);v.buffers.depth.setTest(!0);v.setScissorTest(!1);for (var l, t = 0, r = b.length; t < r; t++) {
                    var n = b[t];l = n.shadow;var x = n && n.isPointLight;if (void 0 === l) console.warn("THREE.WebGLShadowMap:", n, "has no shadow.");else {
                        var y = l.camera;h.copy(l.mapSize);h.min(k);if (x) {
                            var C = h.x,
                                A = h.y;z[0].set(2 * C, A, C, A);z[1].set(0, A, C, A);z[2].set(3 * C, A, C, A);z[3].set(C, A, C, A);z[4].set(3 * C, 0, C, A);z[5].set(C, 0, C, A);h.x *= 4;h.y *= 2;
                        }null === l.map && (l.map = new Sa(h.x, h.y, { minFilter: 1003, magFilter: 1003, format: 1023 }), l.map.texture.name = n.name + ".shadowMap", y.updateProjectionMatrix());l.isSpotLightShadow && l.update(n);C = l.map;A = l.matrix;p.setFromMatrixPosition(n.matrixWorld);y.position.copy(p);x ? (l = 6, A.makeTranslation(-p.x, -p.y, -p.z)) : (l = 1, m.setFromMatrixPosition(n.target.matrixWorld), y.lookAt(m), y.updateMatrixWorld(), A.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), A.multiply(y.projectionMatrix), A.multiply(y.matrixWorldInverse));a.setRenderTarget(C);a.clear();for (n = 0; n < l; n++) {
                            x && (m.copy(y.position), m.add(u[n]), y.up.copy(w[n]), y.lookAt(m), y.updateMatrixWorld(), v.viewport(z[n])), g.multiplyMatrices(y.projectionMatrix, y.matrixWorldInverse), f.setFromMatrix(g), e(c, d, y, x);
                        }
                    }
                }Q.needsUpdate = !1;a.setRenderTarget(q);
            }
        };
    }function ah(a, b, c, d) {
        function e(b, c, d) {
            var e = new Uint8Array(4),
                f = a.createTexture();a.bindTexture(b, f);a.texParameteri(b, 10241, 9728);a.texParameteri(b, 10240, 9728);for (b = 0; b < d; b++) {
                a.texImage2D(c + b, 0, 6408, 1, 1, 0, 6408, 5121, e);
            }return f;
        }function f(c, e) {
            z[c] = 1;0 === x[c] && (a.enableVertexAttribArray(c), x[c] = 1);C[c] !== e && ((d.isWebGL2 ? a : b.get("ANGLE_instanced_arrays"))[d.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](c, e), C[c] = e);
        }function g(b) {
            !0 !== y[b] && (a.enable(b), y[b] = !0);
        }function h(b) {
            !1 !== y[b] && (a.disable(b), y[b] = !1);
        }function k(b, d, e, f, k, m, p, q) {
            if (0 === b) A && (h(3042), A = !1);else if (A || (g(3042), A = !0), 5 !== b) {
                if (b !== B || q !== ee) {
                    if (100 !== F || 100 !== wd) a.blendEquation(32774), wd = F = 100;if (q) switch (b) {case 1:
                            a.blendFuncSeparate(1, 771, 1, 771);break;case 2:
                            a.blendFunc(1, 1);break;case 3:
                            a.blendFuncSeparate(0, 0, 769, 771);break;case 4:
                            a.blendFuncSeparate(0, 768, 0, 770);break;default:
                            console.error("THREE.WebGLState: Invalid blending: ", b);} else switch (b) {case 1:
                            a.blendFuncSeparate(770, 771, 1, 771);break;case 2:
                            a.blendFunc(770, 1);break;case 3:
                            a.blendFunc(0, 769);break;case 4:
                            a.blendFunc(0, 768);break;default:
                            console.error("THREE.WebGLState: Invalid blending: ", b);}de = ce = X = Bc = null;B = b;ee = q;
                }
            } else {
                k = k || d;m = m || e;p = p || f;if (d !== F || k !== wd) a.blendEquationSeparate(c.convert(d), c.convert(k)), F = d, wd = k;if (e !== Bc || f !== X || m !== ce || p !== de) a.blendFuncSeparate(c.convert(e), c.convert(f), c.convert(m), c.convert(p)), Bc = e, X = f, ce = m, de = p;B = b;ee = null;
            }
        }function m(b) {
            E !== b && (b ? a.frontFace(2304) : a.frontFace(2305), E = b);
        }function p(b) {
            0 !== b ? (g(2884), b !== D && (1 === b ? a.cullFace(1029) : 2 === b ? a.cullFace(1028) : a.cullFace(1032))) : h(2884);D = b;
        }function q(b, c, d) {
            if (b) {
                if (g(32823), I !== c || K !== d) a.polygonOffset(c, d), I = c, K = d;
            } else h(32823);
        }function v(b) {
            void 0 === b && (b = 33984 + L - 1);G !== b && (a.activeTexture(b), G = b);
        }var l = new function () {
            var b = !1,
                c = new ba(),
                d = null,
                e = new ba(0, 0, 0, 0);return { setMask: function setMask(c) {
                    d === c || b || (a.colorMask(c, c, c, c), d = c);
                }, setLocked: function setLocked(a) {
                    b = a;
                }, setClear: function setClear(b, d, f, g, h) {
                    !0 === h && (b *= g, d *= g, f *= g);c.set(b, d, f, g);!1 === e.equals(c) && (a.clearColor(b, d, f, g), e.copy(c));
                }, reset: function reset() {
                    b = !1;d = null;e.set(-1, 0, 0, 0);
                } };
        }(),
            r = new function () {
            var b = !1,
                c = null,
                d = null,
                e = null;return { setTest: function setTest(a) {
                    a ? g(2929) : h(2929);
                }, setMask: function setMask(d) {
                    c === d || b || (a.depthMask(d), c = d);
                }, setFunc: function setFunc(b) {
                    if (d !== b) {
                        if (b) switch (b) {case 0:
                                a.depthFunc(512);
                                break;case 1:
                                a.depthFunc(519);break;case 2:
                                a.depthFunc(513);break;case 3:
                                a.depthFunc(515);break;case 4:
                                a.depthFunc(514);break;case 5:
                                a.depthFunc(518);break;case 6:
                                a.depthFunc(516);break;case 7:
                                a.depthFunc(517);break;default:
                                a.depthFunc(515);} else a.depthFunc(515);d = b;
                    }
                }, setLocked: function setLocked(a) {
                    b = a;
                }, setClear: function setClear(b) {
                    e !== b && (a.clearDepth(b), e = b);
                }, reset: function reset() {
                    b = !1;e = d = c = null;
                } };
        }(),
            u = new function () {
            var b = !1,
                c = null,
                d = null,
                e = null,
                f = null,
                k = null,
                m = null,
                p = null,
                q = null;return { setTest: function setTest(a) {
                    a ? g(2960) : h(2960);
                }, setMask: function setMask(d) {
                    c === d || b || (a.stencilMask(d), c = d);
                }, setFunc: function setFunc(b, c, g) {
                    if (d !== b || e !== c || f !== g) a.stencilFunc(b, c, g), d = b, e = c, f = g;
                }, setOp: function setOp(b, c, d) {
                    if (k !== b || m !== c || p !== d) a.stencilOp(b, c, d), k = b, m = c, p = d;
                }, setLocked: function setLocked(a) {
                    b = a;
                }, setClear: function setClear(b) {
                    q !== b && (a.clearStencil(b), q = b);
                }, reset: function reset() {
                    b = !1;q = p = m = k = f = e = d = c = null;
                } };
        }(),
            n = a.getParameter(34921),
            z = new Uint8Array(n),
            x = new Uint8Array(n),
            C = new Uint8Array(n),
            y = {},
            Q = null,
            fa = null,
            A = null,
            B = null,
            F = null,
            Bc = null,
            X = null,
            wd = null,
            ce = null,
            de = null,
            ee = !1,
            E = null,
            D = null,
            ta = null,
            I = null,
            K = null,
            L = a.getParameter(35661),
            J = !1;n = 0;n = a.getParameter(7938);-1 !== n.indexOf("WebGL") ? (n = parseFloat(/^WebGL ([0-9])/.exec(n)[1]), J = 1 <= n) : -1 !== n.indexOf("OpenGL ES") && (n = parseFloat(/^OpenGL ES ([0-9])/.exec(n)[1]), J = 2 <= n);var G = null,
            H = {},
            M = new ba(),
            N = new ba(),
            T = {};T[3553] = e(3553, 3553, 1);T[34067] = e(34067, 34069, 6);l.setClear(0, 0, 0, 1);r.setClear(1);u.setClear(0);g(2929);r.setFunc(3);m(!1);p(1);g(2884);k(0);return { buffers: { color: l, depth: r, stencil: u }, initAttributes: function initAttributes() {
                for (var a = 0, b = z.length; a < b; a++) {
                    z[a] = 0;
                }
            }, enableAttribute: function enableAttribute(a) {
                f(a, 0);
            }, enableAttributeAndDivisor: f, disableUnusedAttributes: function disableUnusedAttributes() {
                for (var b = 0, c = x.length; b !== c; ++b) {
                    x[b] !== z[b] && (a.disableVertexAttribArray(b), x[b] = 0);
                }
            }, enable: g, disable: h, getCompressedTextureFormats: function getCompressedTextureFormats() {
                if (null === Q && (Q = [], b.get("WEBGL_compressed_texture_pvrtc") || b.get("WEBGL_compressed_texture_s3tc") || b.get("WEBGL_compressed_texture_etc1") || b.get("WEBGL_compressed_texture_astc"))) for (var c = a.getParameter(34467), d = 0; d < c.length; d++) {
                    Q.push(c[d]);
                }return Q;
            }, useProgram: function useProgram(b) {
                return fa !== b ? (a.useProgram(b), fa = b, !0) : !1;
            }, setBlending: k, setMaterial: function setMaterial(a, b) {
                2 === a.side ? h(2884) : g(2884);var c = 1 === a.side;b && (c = !c);m(c);1 === a.blending && !1 === a.transparent ? k(0) : k(a.blending, a.blendEquation, a.blendSrc, a.blendDst, a.blendEquationAlpha, a.blendSrcAlpha, a.blendDstAlpha, a.premultipliedAlpha);r.setFunc(a.depthFunc);r.setTest(a.depthTest);r.setMask(a.depthWrite);l.setMask(a.colorWrite);q(a.polygonOffset, a.polygonOffsetFactor, a.polygonOffsetUnits);
            }, setFlipSided: m,
            setCullFace: p, setLineWidth: function setLineWidth(b) {
                b !== ta && (J && a.lineWidth(b), ta = b);
            }, setPolygonOffset: q, setScissorTest: function setScissorTest(a) {
                a ? g(3089) : h(3089);
            }, activeTexture: v, bindTexture: function bindTexture(b, c) {
                null === G && v();var d = H[G];void 0 === d && (d = { type: void 0, texture: void 0 }, H[G] = d);if (d.type !== b || d.texture !== c) a.bindTexture(b, c || T[b]), d.type = b, d.texture = c;
            }, compressedTexImage2D: function compressedTexImage2D() {
                try {
                    a.compressedTexImage2D.apply(a, arguments);
                } catch (ea) {
                    console.error("THREE.WebGLState:", ea);
                }
            }, texImage2D: function texImage2D() {
                try {
                    a.texImage2D.apply(a, arguments);
                } catch (ea) {
                    console.error("THREE.WebGLState:", ea);
                }
            }, texImage3D: function texImage3D() {
                try {
                    a.texImage3D.apply(a, arguments);
                } catch (ea) {
                    console.error("THREE.WebGLState:", ea);
                }
            }, scissor: function scissor(b) {
                !1 === M.equals(b) && (a.scissor(b.x, b.y, b.z, b.w), M.copy(b));
            }, viewport: function viewport(b) {
                !1 === N.equals(b) && (a.viewport(b.x, b.y, b.z, b.w), N.copy(b));
            }, reset: function reset() {
                for (var b = 0; b < x.length; b++) {
                    1 === x[b] && (a.disableVertexAttribArray(b), x[b] = 0);
                }y = {};G = Q = null;H = {};D = E = B = fa = null;l.reset();r.reset();u.reset();
            } };
    }function bh(a, b, c, d, e, f, g) {
        function h(a, b) {
            return F ? new OffscreenCanvas(a, b) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
        }function k(a, b, c, d) {
            var e = 1;if (a.width > d || a.height > d) e = d / Math.max(a.width, a.height);if (1 > e || !0 === b) {
                if ("undefined" !== typeof HTMLImageElement && a instanceof HTMLImageElement || "undefined" !== typeof HTMLCanvasElement && a instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && a instanceof ImageBitmap) return d = b ? H.floorPowerOfTwo : Math.floor, b = d(e * a.width), e = d(e * a.height), void 0 === B && (B = h(b, e)), c = c ? h(b, e) : B, c.width = b, c.height = e, c.getContext("2d").drawImage(a, 0, 0, b, e), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + a.width + "x" + a.height + ") to (" + b + "x" + e + ")."), c;"data" in a && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + a.width + "x" + a.height + ").");
            }return a;
        }function m(a) {
            return H.isPowerOfTwo(a.width) && H.isPowerOfTwo(a.height);
        }function p(a, b) {
            return a.generateMipmaps && b && 1003 !== a.minFilter && 1006 !== a.minFilter;
        }function q(b, c, e, f) {
            a.generateMipmap(b);d.get(c).__maxMipLevel = Math.log(Math.max(e, f)) * Math.LOG2E;
        }function v(a, c) {
            if (!e.isWebGL2) return a;var d = a;6403 === a && (5126 === c && (d = 33326), 5131 === c && (d = 33325), 5121 === c && (d = 33321));6407 === a && (5126 === c && (d = 34837), 5131 === c && (d = 34843), 5121 === c && (d = 32849));6408 === a && (5126 === c && (d = 34836), 5131 === c && (d = 34842), 5121 === c && (d = 32856));33325 === d || 33326 === d || 34842 === d || 34836 === d ? b.get("EXT_color_buffer_float") : (34843 === d || 34837 === d) && console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.");
            return d;
        }function l(a) {
            return 1003 === a || 1004 === a || 1005 === a ? 9728 : 9729;
        }function r(b) {
            b = b.target;b.removeEventListener("dispose", r);var c = d.get(b);void 0 !== c.__webglInit && (a.deleteTexture(c.__webglTexture), d.remove(b));b.isVideoTexture && delete A[b.id];g.memory.textures--;
        }function u(b) {
            b = b.target;b.removeEventListener("dispose", u);var c = d.get(b),
                e = d.get(b.texture);if (b) {
                void 0 !== e.__webglTexture && a.deleteTexture(e.__webglTexture);b.depthTexture && b.depthTexture.dispose();if (b.isWebGLRenderTargetCube) for (e = 0; 6 > e; e++) {
                    a.deleteFramebuffer(c.__webglFramebuffer[e]), c.__webglDepthbuffer && a.deleteRenderbuffer(c.__webglDepthbuffer[e]);
                } else a.deleteFramebuffer(c.__webglFramebuffer), c.__webglDepthbuffer && a.deleteRenderbuffer(c.__webglDepthbuffer);d.remove(b.texture);d.remove(b);
            }g.memory.textures--;
        }function n(a, b) {
            var e = d.get(a);if (a.isVideoTexture) {
                var f = a.id,
                    h = g.render.frame;A[f] !== h && (A[f] = h, a.update());
            }if (0 < a.version && e.__version !== a.version) if (f = a.image, void 0 === f) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if (!1 === f.complete) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else {
                C(e, a, b);return;
            }c.activeTexture(33984 + b);c.bindTexture(3553, e.__webglTexture);
        }function z(c, g, h) {
            h ? (a.texParameteri(c, 10242, f.convert(g.wrapS)), a.texParameteri(c, 10243, f.convert(g.wrapT)), 32879 !== c && 35866 !== c || a.texParameteri(c, 32882, f.convert(g.wrapR)), a.texParameteri(c, 10240, f.convert(g.magFilter)), a.texParameteri(c, 10241, f.convert(g.minFilter))) : (a.texParameteri(c, 10242, 33071), a.texParameteri(c, 10243, 33071), 32879 !== c && 35866 !== c || a.texParameteri(c, 32882, 33071), 1001 === g.wrapS && 1001 === g.wrapT || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), a.texParameteri(c, 10240, l(g.magFilter)), a.texParameteri(c, 10241, l(g.minFilter)), 1003 !== g.minFilter && 1006 !== g.minFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
            !(h = b.get("EXT_texture_filter_anisotropic")) || 1015 === g.type && null === b.get("OES_texture_float_linear") || 1016 === g.type && null === (e.isWebGL2 || b.get("OES_texture_half_float_linear")) || !(1 < g.anisotropy || d.get(g).__currentAnisotropy) || (a.texParameterf(c, h.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(g.anisotropy, e.getMaxAnisotropy())), d.get(g).__currentAnisotropy = g.anisotropy);
        }function x(b, c) {
            void 0 === b.__webglInit && (b.__webglInit = !0, c.addEventListener("dispose", r), b.__webglTexture = a.createTexture(), g.memory.textures++);
        }
        function C(b, d, g) {
            var h = 3553;d.isDataTexture2DArray && (h = 35866);d.isDataTexture3D && (h = 32879);x(b, d);c.activeTexture(33984 + g);c.bindTexture(h, b.__webglTexture);a.pixelStorei(37440, d.flipY);a.pixelStorei(37441, d.premultiplyAlpha);a.pixelStorei(3317, d.unpackAlignment);g = e.isWebGL2 ? !1 : 1001 !== d.wrapS || 1001 !== d.wrapT || 1003 !== d.minFilter && 1006 !== d.minFilter;g = g && !1 === m(d.image);g = k(d.image, g, !1, e.maxTextureSize);var l = m(g) || e.isWebGL2,
                t = f.convert(d.format),
                r = f.convert(d.type),
                u = v(t, r);z(h, d, l);var n = d.mipmaps;
            if (d.isDepthTexture) {
                u = 6402;if (1015 === d.type) {
                    if (!e.isWebGL2) throw Error("Float Depth Texture only supported in WebGL2.0");u = 36012;
                } else e.isWebGL2 && (u = 33189);1026 === d.format && 6402 === u && 1012 !== d.type && 1014 !== d.type && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), d.type = 1012, r = f.convert(d.type));1027 === d.format && (u = 34041, 1020 !== d.type && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), d.type = 1020, r = f.convert(d.type)));c.texImage2D(3553, 0, u, g.width, g.height, 0, t, r, null);
            } else if (d.isDataTexture) {
                if (0 < n.length && l) {
                    for (var w = 0, y = n.length; w < y; w++) {
                        h = n[w], c.texImage2D(3553, w, u, h.width, h.height, 0, t, r, h.data);
                    }d.generateMipmaps = !1;b.__maxMipLevel = n.length - 1;
                } else c.texImage2D(3553, 0, u, g.width, g.height, 0, t, r, g.data), b.__maxMipLevel = 0;
            } else if (d.isCompressedTexture) {
                w = 0;for (y = n.length; w < y; w++) {
                    h = n[w], 1023 !== d.format && 1022 !== d.format ? -1 < c.getCompressedTextureFormats().indexOf(t) ? c.compressedTexImage2D(3553, w, u, h.width, h.height, 0, h.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : c.texImage2D(3553, w, u, h.width, h.height, 0, t, r, h.data);
                }b.__maxMipLevel = n.length - 1;
            } else if (d.isDataTexture2DArray) c.texImage3D(35866, 0, u, g.width, g.height, g.depth, 0, t, r, g.data), b.__maxMipLevel = 0;else if (d.isDataTexture3D) c.texImage3D(32879, 0, u, g.width, g.height, g.depth, 0, t, r, g.data), b.__maxMipLevel = 0;else if (0 < n.length && l) {
                w = 0;for (y = n.length; w < y; w++) {
                    h = n[w], c.texImage2D(3553, w, u, t, r, h);
                }d.generateMipmaps = !1;b.__maxMipLevel = n.length - 1;
            } else c.texImage2D(3553, 0, u, t, r, g), b.__maxMipLevel = 0;p(d, l) && q(3553, d, g.width, g.height);b.__version = d.version;if (d.onUpdate) d.onUpdate(d);
        }function y(b, e, g, h) {
            var k = f.convert(e.texture.format),
                m = f.convert(e.texture.type),
                p = v(k, m);c.texImage2D(h, 0, p, e.width, e.height, 0, k, m, null);a.bindFramebuffer(36160, b);a.framebufferTexture2D(36160, g, h, d.get(e.texture).__webglTexture, 0);a.bindFramebuffer(36160, null);
        }function Q(b, c, d) {
            a.bindRenderbuffer(36161, b);if (c.depthBuffer && !c.stencilBuffer) d ? (d = fa(c), a.renderbufferStorageMultisample(36161, d, 33189, c.width, c.height)) : a.renderbufferStorage(36161, 33189, c.width, c.height), a.framebufferRenderbuffer(36160, 36096, 36161, b);else if (c.depthBuffer && c.stencilBuffer) d ? (d = fa(c), a.renderbufferStorageMultisample(36161, d, 34041, c.width, c.height)) : a.renderbufferStorage(36161, 34041, c.width, c.height), a.framebufferRenderbuffer(36160, 33306, 36161, b);else {
                b = f.convert(c.texture.format);var e = f.convert(c.texture.type);b = v(b, e);d ? (d = fa(c), a.renderbufferStorageMultisample(36161, d, b, c.width, c.height)) : a.renderbufferStorage(36161, b, c.width, c.height);
            }a.bindRenderbuffer(36161, null);
        }function fa(a) {
            return e.isWebGL2 && a.isWebGLMultisampleRenderTarget ? Math.min(e.maxSamples, a.samples) : 0;
        }var A = {},
            B,
            F = "undefined" !== typeof OffscreenCanvas;this.setTexture2D = n;this.setTexture2DArray = function (a, b) {
            var e = d.get(a);0 < a.version && e.__version !== a.version ? C(e, a, b) : (c.activeTexture(33984 + b), c.bindTexture(35866, e.__webglTexture));
        };this.setTexture3D = function (a, b) {
            var e = d.get(a);0 < a.version && e.__version !== a.version ? C(e, a, b) : (c.activeTexture(33984 + b), c.bindTexture(32879, e.__webglTexture));
        };this.setTextureCube = function (b, g) {
            var h = d.get(b);if (6 === b.image.length) if (0 < b.version && h.__version !== b.version) {
                x(h, b);c.activeTexture(33984 + g);c.bindTexture(34067, h.__webglTexture);a.pixelStorei(37440, b.flipY);g = b && b.isCompressedTexture;for (var l = b.image[0] && b.image[0].isDataTexture, t = [], r = 0; 6 > r; r++) {
                    t[r] = g || l ? l ? b.image[r].image : b.image[r] : k(b.image[r], !1, !0, e.maxCubemapSize);
                }var u = t[0],
                    n = m(u) || e.isWebGL2,
                    w = f.convert(b.format),
                    y = f.convert(b.type),
                    C = v(w, y);z(34067, b, n);for (r = 0; 6 > r; r++) {
                    if (g) for (var A, fa = t[r].mipmaps, Q = 0, Bc = fa.length; Q < Bc; Q++) {
                        A = fa[Q], 1023 !== b.format && 1022 !== b.format ? -1 < c.getCompressedTextureFormats().indexOf(w) ? c.compressedTexImage2D(34069 + r, Q, C, A.width, A.height, 0, A.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : c.texImage2D(34069 + r, Q, C, A.width, A.height, 0, w, y, A.data);
                    } else l ? c.texImage2D(34069 + r, 0, C, t[r].width, t[r].height, 0, w, y, t[r].data) : c.texImage2D(34069 + r, 0, C, w, y, t[r]);
                }h.__maxMipLevel = g ? fa.length - 1 : 0;p(b, n) && q(34067, b, u.width, u.height);h.__version = b.version;if (b.onUpdate) b.onUpdate(b);
            } else c.activeTexture(33984 + g), c.bindTexture(34067, h.__webglTexture);
        };this.setTextureCubeDynamic = function (a, b) {
            c.activeTexture(33984 + b);c.bindTexture(34067, d.get(a).__webglTexture);
        };this.setupRenderTarget = function (b) {
            var h = d.get(b),
                k = d.get(b.texture);b.addEventListener("dispose", u);k.__webglTexture = a.createTexture();g.memory.textures++;var l = !0 === b.isWebGLRenderTargetCube,
                t = !0 === b.isWebGLMultisampleRenderTarget,
                r = m(b) || e.isWebGL2;if (l) for (h.__webglFramebuffer = [], t = 0; 6 > t; t++) {
                h.__webglFramebuffer[t] = a.createFramebuffer();
            } else if (h.__webglFramebuffer = a.createFramebuffer(), t) if (e.isWebGL2) {
                h.__webglMultisampledFramebuffer = a.createFramebuffer();h.__webglColorRenderbuffer = a.createRenderbuffer();a.bindRenderbuffer(36161, h.__webglColorRenderbuffer);t = f.convert(b.texture.format);
                var w = f.convert(b.texture.type);t = v(t, w);w = fa(b);a.renderbufferStorageMultisample(36161, w, t, b.width, b.height);a.bindFramebuffer(36160, h.__webglMultisampledFramebuffer);a.framebufferRenderbuffer(36160, 36064, 36161, h.__webglColorRenderbuffer);a.bindRenderbuffer(36161, null);b.depthBuffer && (h.__webglDepthRenderbuffer = a.createRenderbuffer(), Q(h.__webglDepthRenderbuffer, b, !0));a.bindFramebuffer(36160, null);
            } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
            if (l) {
                c.bindTexture(34067, k.__webglTexture);z(34067, b.texture, r);for (t = 0; 6 > t; t++) {
                    y(h.__webglFramebuffer[t], b, 36064, 34069 + t);
                }p(b.texture, r) && q(34067, b.texture, b.width, b.height);c.bindTexture(34067, null);
            } else c.bindTexture(3553, k.__webglTexture), z(3553, b.texture, r), y(h.__webglFramebuffer, b, 36064, 3553), p(b.texture, r) && q(3553, b.texture, b.width, b.height), c.bindTexture(3553, null);if (b.depthBuffer) {
                h = d.get(b);k = !0 === b.isWebGLRenderTargetCube;if (b.depthTexture) {
                    if (k) throw Error("target.depthTexture not supported in Cube render targets");
                    if (b && b.isWebGLRenderTargetCube) throw Error("Depth Texture with cube render targets is not supported");a.bindFramebuffer(36160, h.__webglFramebuffer);if (!b.depthTexture || !b.depthTexture.isDepthTexture) throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");d.get(b.depthTexture).__webglTexture && b.depthTexture.image.width === b.width && b.depthTexture.image.height === b.height || (b.depthTexture.image.width = b.width, b.depthTexture.image.height = b.height, b.depthTexture.needsUpdate = !0);
                    n(b.depthTexture, 0);h = d.get(b.depthTexture).__webglTexture;if (1026 === b.depthTexture.format) a.framebufferTexture2D(36160, 36096, 3553, h, 0);else if (1027 === b.depthTexture.format) a.framebufferTexture2D(36160, 33306, 3553, h, 0);else throw Error("Unknown depthTexture format");
                } else if (k) for (h.__webglDepthbuffer = [], k = 0; 6 > k; k++) {
                    a.bindFramebuffer(36160, h.__webglFramebuffer[k]), h.__webglDepthbuffer[k] = a.createRenderbuffer(), Q(h.__webglDepthbuffer[k], b);
                } else a.bindFramebuffer(36160, h.__webglFramebuffer), h.__webglDepthbuffer = a.createRenderbuffer(), Q(h.__webglDepthbuffer, b);a.bindFramebuffer(36160, null);
            }
        };this.updateRenderTargetMipmap = function (a) {
            var b = a.texture,
                f = m(a) || e.isWebGL2;if (p(b, f)) {
                f = a.isWebGLRenderTargetCube ? 34067 : 3553;var g = d.get(b).__webglTexture;c.bindTexture(f, g);q(f, b, a.width, a.height);c.bindTexture(f, null);
            }
        };this.updateMultisampleRenderTarget = function (b) {
            if (b.isWebGLMultisampleRenderTarget) if (e.isWebGL2) {
                var c = d.get(b);a.bindFramebuffer(36008, c.__webglMultisampledFramebuffer);a.bindFramebuffer(36009, c.__webglFramebuffer);
                c = b.width;var f = b.height,
                    g = 16384;b.depthBuffer && (g |= 256);b.stencilBuffer && (g |= 1024);a.blitFramebuffer(0, 0, c, f, 0, 0, c, f, g, 9728);
            } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        };
    }function pf(a, b, c) {
        return { convert: function convert(a) {
                if (1E3 === a) return 10497;if (1001 === a) return 33071;if (1002 === a) return 33648;if (1003 === a) return 9728;if (1004 === a) return 9984;if (1005 === a) return 9986;if (1006 === a) return 9729;if (1007 === a) return 9985;if (1008 === a) return 9987;if (1009 === a) return 5121;if (1017 === a) return 32819;if (1018 === a) return 32820;if (1019 === a) return 33635;if (1010 === a) return 5120;if (1011 === a) return 5122;if (1012 === a) return 5123;if (1013 === a) return 5124;if (1014 === a) return 5125;if (1015 === a) return 5126;if (1016 === a) {
                    if (c.isWebGL2) return 5131;var d = b.get("OES_texture_half_float");if (null !== d) return d.HALF_FLOAT_OES;
                }if (1021 === a) return 6406;if (1022 === a) return 6407;if (1023 === a) return 6408;if (1024 === a) return 6409;if (1025 === a) return 6410;if (1026 === a) return 6402;if (1027 === a) return 34041;
                if (1028 === a) return 6403;if (100 === a) return 32774;if (101 === a) return 32778;if (102 === a) return 32779;if (200 === a) return 0;if (201 === a) return 1;if (202 === a) return 768;if (203 === a) return 769;if (204 === a) return 770;if (205 === a) return 771;if (206 === a) return 772;if (207 === a) return 773;if (208 === a) return 774;if (209 === a) return 775;if (210 === a) return 776;if (33776 === a || 33777 === a || 33778 === a || 33779 === a) if (d = b.get("WEBGL_compressed_texture_s3tc"), null !== d) {
                    if (33776 === a) return d.COMPRESSED_RGB_S3TC_DXT1_EXT;if (33777 === a) return d.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    if (33778 === a) return d.COMPRESSED_RGBA_S3TC_DXT3_EXT;if (33779 === a) return d.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                }if (35840 === a || 35841 === a || 35842 === a || 35843 === a) if (d = b.get("WEBGL_compressed_texture_pvrtc"), null !== d) {
                    if (35840 === a) return d.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if (35841 === a) return d.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if (35842 === a) return d.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if (35843 === a) return d.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                }if (36196 === a && (d = b.get("WEBGL_compressed_texture_etc1"), null !== d)) return d.COMPRESSED_RGB_ETC1_WEBGL;
                if (37808 === a || 37809 === a || 37810 === a || 37811 === a || 37812 === a || 37813 === a || 37814 === a || 37815 === a || 37816 === a || 37817 === a || 37818 === a || 37819 === a || 37820 === a || 37821 === a) if (d = b.get("WEBGL_compressed_texture_astc"), null !== d) return a;if (103 === a || 104 === a) {
                    if (c.isWebGL2) {
                        if (103 === a) return 32775;if (104 === a) return 32776;
                    }d = b.get("EXT_blend_minmax");if (null !== d) {
                        if (103 === a) return d.MIN_EXT;if (104 === a) return d.MAX_EXT;
                    }
                }if (1020 === a) {
                    if (c.isWebGL2) return 34042;d = b.get("WEBGL_depth_texture");if (null !== d) return d.UNSIGNED_INT_24_8_WEBGL;
                }return 0;
            } };
    }
    function Tb() {
        E.call(this);this.type = "Group";
    }function Va() {
        E.call(this);this.type = "Camera";this.matrixWorldInverse = new J();this.projectionMatrix = new J();this.projectionMatrixInverse = new J();
    }function U(a, b, c, d) {
        Va.call(this);this.type = "PerspectiveCamera";this.fov = void 0 !== a ? a : 50;this.zoom = 1;this.near = void 0 !== c ? c : .1;this.far = void 0 !== d ? d : 2E3;this.focus = 10;this.aspect = void 0 !== b ? b : 1;this.view = null;this.filmGauge = 35;this.filmOffset = 0;this.updateProjectionMatrix();
    }function Fc(a) {
        U.call(this);this.cameras = a || [];
    }function qf(a, b, c) {
        rf.setFromMatrixPosition(b.matrixWorld);sf.setFromMatrixPosition(c.matrixWorld);var d = rf.distanceTo(sf),
            e = b.projectionMatrix.elements,
            f = c.projectionMatrix.elements,
            g = e[14] / (e[10] - 1);c = e[14] / (e[10] + 1);var h = (e[9] + 1) / e[5],
            k = (e[9] - 1) / e[5],
            m = (e[8] - 1) / e[0],
            p = (f[8] + 1) / f[0];e = g * m;f = g * p;p = d / (-m + p);m = p * -m;b.matrixWorld.decompose(a.position, a.quaternion, a.scale);a.translateX(m);a.translateZ(p);a.matrixWorld.compose(a.position, a.quaternion, a.scale);a.matrixWorldInverse.getInverse(a.matrixWorld);
        b = g + p;g = c + p;a.projectionMatrix.makePerspective(e - m, f + (d - m), h * c / g * b, k * c / g * b, b, g);
    }function tf(a) {
        function b() {
            return null !== e && !0 === e.isPresenting;
        }function c() {
            if (b()) {
                var c = e.getEyeParameters("left"),
                    f = c.renderWidth * p;c = c.renderHeight * p;C = a.getPixelRatio();a.getSize(x);a.setDrawingBufferSize(2 * f, c, 1);Q.start();
            } else d.enabled && a.setDrawingBufferSize(x.width, x.height, C), Q.stop();
        }var d = this,
            e = null,
            f = null,
            g = null,
            h = [],
            k = new J(),
            m = new J(),
            p = 1,
            q = "stage";"undefined" !== typeof window && "VRFrameData" in window && (f = new window.VRFrameData(), window.addEventListener("vrdisplaypresentchange", c, !1));var l = new J(),
            t = new aa(),
            r = new n(),
            u = new U();u.bounds = new ba(0, 0, .5, 1);u.layers.enable(1);var w = new U();w.bounds = new ba(.5, 0, .5, 1);w.layers.enable(2);var z = new Fc([u, w]);z.layers.enable(1);z.layers.enable(2);var x = new B(),
            C,
            y = [];this.enabled = !1;this.getController = function (a) {
            var b = h[a];void 0 === b && (b = new Tb(), b.matrixAutoUpdate = !1, b.visible = !1, h[a] = b);return b;
        };this.getDevice = function () {
            return e;
        };this.setDevice = function (a) {
            void 0 !== a && (e = a);Q.setContext(a);
        };this.setFramebufferScaleFactor = function (a) {
            p = a;
        };this.setFrameOfReferenceType = function (a) {
            q = a;
        };this.setPoseTarget = function (a) {
            void 0 !== a && (g = a);
        };this.getCamera = function (a) {
            var c = "stage" === q ? 1.6 : 0;if (!1 === b()) return a.position.set(0, c, 0), a.rotation.set(0, 0, 0), a;e.depthNear = a.near;e.depthFar = a.far;e.getFrameData(f);if ("stage" === q) {
                var d = e.stageParameters;d ? k.fromArray(d.sittingToStandingTransform) : k.makeTranslation(0, c, 0);
            }c = f.pose;d = null !== g ? g : a;d.matrix.copy(k);d.matrix.decompose(d.position, d.quaternion, d.scale);null !== c.orientation && (t.fromArray(c.orientation), d.quaternion.multiply(t));null !== c.position && (t.setFromRotationMatrix(k), r.fromArray(c.position), r.applyQuaternion(t), d.position.add(r));d.updateMatrixWorld();u.near = a.near;w.near = a.near;u.far = a.far;w.far = a.far;u.matrixWorldInverse.fromArray(f.leftViewMatrix);w.matrixWorldInverse.fromArray(f.rightViewMatrix);m.getInverse(k);"stage" === q && (u.matrixWorldInverse.multiply(m), w.matrixWorldInverse.multiply(m));a = d.parent;null !== a && (l.getInverse(a.matrixWorld), u.matrixWorldInverse.multiply(l), w.matrixWorldInverse.multiply(l));u.matrixWorld.getInverse(u.matrixWorldInverse);w.matrixWorld.getInverse(w.matrixWorldInverse);u.projectionMatrix.fromArray(f.leftProjectionMatrix);w.projectionMatrix.fromArray(f.rightProjectionMatrix);qf(z, u, w);a = e.getLayers();a.length && (a = a[0], null !== a.leftBounds && 4 === a.leftBounds.length && u.bounds.fromArray(a.leftBounds), null !== a.rightBounds && 4 === a.rightBounds.length && w.bounds.fromArray(a.rightBounds));a: for (a = 0; a < h.length; a++) {
                c = h[a];b: {
                    d = a;for (var p = navigator.getGamepads && navigator.getGamepads(), v = 0, n = 0, x = p.length; v < x; v++) {
                        var C = p[v];if (C && ("Daydream Controller" === C.id || "Gear VR Controller" === C.id || "Oculus Go Controller" === C.id || "OpenVR Gamepad" === C.id || C.id.startsWith("Oculus Touch") || C.id.startsWith("Spatial Controller"))) {
                            if (n === d) {
                                d = C;break b;
                            }n++;
                        }
                    }d = void 0;
                }if (void 0 !== d && void 0 !== d.pose) {
                    if (null === d.pose) break a;p = d.pose;!1 === p.hasPosition && c.position.set(.2, -.6, -.05);null !== p.position && c.position.fromArray(p.position);
                    null !== p.orientation && c.quaternion.fromArray(p.orientation);c.matrix.compose(c.position, c.quaternion, c.scale);c.matrix.premultiply(k);c.matrix.decompose(c.position, c.quaternion, c.scale);c.matrixWorldNeedsUpdate = !0;c.visible = !0;p = "Daydream Controller" === d.id ? 0 : 1;y[a] !== d.buttons[p].pressed && (y[a] = d.buttons[p].pressed, !0 === y[a] ? c.dispatchEvent({ type: "selectstart" }) : (c.dispatchEvent({ type: "selectend" }), c.dispatchEvent({ type: "select" })));
                } else c.visible = !1;
            }return z;
        };this.getStandingMatrix = function () {
            return k;
        };
        this.isPresenting = b;var Q = new ae();this.setAnimationLoop = function (a) {
            Q.setAnimationLoop(a);
        };this.submitFrame = function () {
            b() && e.submitFrame();
        };this.dispose = function () {
            "undefined" !== typeof window && window.removeEventListener("vrdisplaypresentchange", c);
        };
    }function ch(a) {
        function b() {
            return null !== h && null !== m;
        }function c(a) {
            var b = l[t.indexOf(a.inputSource)];b && b.dispatchEvent({ type: a.type });
        }function d() {
            a.setFramebuffer(null);a.setRenderTarget(a.getRenderTarget());x.stop();
        }function e(a, b) {
            null === b ? a.matrixWorld.copy(a.matrix) : a.matrixWorld.multiplyMatrices(b.matrixWorld, a.matrix);a.matrixWorldInverse.getInverse(a.matrixWorld);
        }var f = a.context,
            g = null,
            h = null,
            k = 1,
            m = null,
            p = "stage",
            q = null,
            l = [],
            t = [],
            r = new U();r.layers.enable(1);r.viewport = new ba();var u = new U();u.layers.enable(2);u.viewport = new ba();var n = new Fc([r, u]);n.layers.enable(1);n.layers.enable(2);this.enabled = !1;this.getController = function (a) {
            var b = l[a];void 0 === b && (b = new Tb(), b.matrixAutoUpdate = !1, b.visible = !1, l[a] = b);return b;
        };this.getDevice = function () {
            return g;
        };this.setDevice = function (a) {
            void 0 !== a && (g = a);a instanceof XRDevice && f.setCompatibleXRDevice(a);
        };this.setFramebufferScaleFactor = function (a) {
            k = a;
        };this.setFrameOfReferenceType = function (a) {
            p = a;
        };this.setSession = function (b) {
            h = b;null !== h && (h.addEventListener("select", c), h.addEventListener("selectstart", c), h.addEventListener("selectend", c), h.addEventListener("end", d), h.baseLayer = new XRWebGLLayer(h, f, { framebufferScaleFactor: k }), h.requestFrameOfReference(p).then(function (b) {
                m = b;a.setFramebuffer(h.baseLayer.framebuffer);x.setContext(h);
                x.start();
            }), t = h.getInputSources(), h.addEventListener("inputsourceschange", function () {
                t = h.getInputSources();console.log(t);for (var a = 0; a < l.length; a++) {
                    l[a].userData.inputSource = t[a];
                }
            }));
        };this.getCamera = function (a) {
            if (b()) {
                var c = a.parent,
                    d = n.cameras;e(n, c);for (var f = 0; f < d.length; f++) {
                    e(d[f], c);
                }a.matrixWorld.copy(n.matrixWorld);a = a.children;f = 0;for (c = a.length; f < c; f++) {
                    a[f].updateMatrixWorld(!0);
                }qf(n, r, u);return n;
            }return a;
        };this.isPresenting = b;var z = null,
            x = new ae();x.setAnimationLoop(function (a, b) {
            q = b.getDevicePose(m);
            if (null !== q) for (var c = h.baseLayer, d = b.views, e = 0; e < d.length; e++) {
                var f = d[e],
                    g = c.getViewport(f),
                    k = q.getViewMatrix(f),
                    p = n.cameras[e];p.matrix.fromArray(k).getInverse(p.matrix);p.projectionMatrix.fromArray(f.projectionMatrix);p.viewport.set(g.x, g.y, g.width, g.height);0 === e && n.matrix.copy(p.matrix);
            }for (e = 0; e < l.length; e++) {
                c = l[e];if (d = t[e]) if (d = b.getInputPose(d, m), null !== d) {
                    "targetRay" in d ? c.matrix.elements = d.targetRay.transformMatrix : "pointerMatrix" in d && (c.matrix.elements = d.pointerMatrix);c.matrix.decompose(c.position, c.rotation, c.scale);c.visible = !0;continue;
                }c.visible = !1;
            }z && z(a);
        });this.setAnimationLoop = function (a) {
            z = a;
        };this.dispose = function () {};this.getStandingMatrix = function () {
            console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed.");return new J();
        };this.submitFrame = function () {};
    }function ie(a) {
        var b;function c() {
            la = new dg(O);za = new bg(O, la, a);za.isWebGL2 || (la.get("WEBGL_depth_texture"), la.get("OES_texture_float"), la.get("OES_texture_half_float"), la.get("OES_texture_half_float_linear"), la.get("OES_standard_derivatives"), la.get("OES_element_index_uint"), la.get("ANGLE_instanced_arrays"));la.get("OES_texture_float_linear");ja = new pf(O, la, za);Z = new ah(O, la, ja, za);Z.scissor(W.copy(aa).multiplyScalar(T));Z.viewport(S.copy(ea).multiplyScalar(T));ha = new gg(O);Da = new Tg();da = new bh(O, la, Z, Da, za, ja, ha);ra = new Vf(O);ua = new eg(O, ra, ha);oa = new jg(ua, ha);xa = new ig(O);ma = new Sg(X, la, za);va = new Wg();qa = new $g();na = new $f(X, Z, oa, fa);Aa = new ag(O, la, ha, za);Ba = new fg(O, la, ha, za);ha.programs = ma.programs;X.context = O;X.capabilities = za;X.extensions = la;X.properties = Da;X.renderLists = va;X.state = Z;X.info = ha;
        }function d(a) {
            a.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");K = !0;
        }function e() {
            console.log("THREE.WebGLRenderer: Context Restored.");K = !1;c();
        }function f(a) {
            a = a.target;a.removeEventListener("dispose", f);g(a);Da.remove(a);
        }function g(a) {
            var b = Da.get(a).program;a.program = void 0;void 0 !== b && ma.releaseProgram(b);
        }function h(a, b) {
            a.render(function (a) {
                X.renderBufferImmediate(a, b);
            });
        }function k(a, b, c, d) {
            if (!1 !== a.visible) {
                if (a.layers.test(b.layers)) if (a.isGroup) c = a.renderOrder;else if (a.isLight) D.pushLight(a), a.castShadow && D.pushShadow(a);else if (a.isSprite) {
                    if (!a.frustumCulled || sa.intersectsSprite(a)) {
                        d && ib.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ec);var e = oa.update(a),
                            f = a.material;f.visible && E.push(a, e, f, c, ib.z, null);
                    }
                } else if (a.isImmediateRenderObject) d && ib.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ec), E.push(a, null, a.material, c, ib.z, null);else if (a.isMesh || a.isLine || a.isPoints) if (a.isSkinnedMesh && a.skeleton.update(), !a.frustumCulled || sa.intersectsObject(a)) if (d && ib.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ec), e = oa.update(a), f = a.material, Array.isArray(f)) for (var g = e.groups, h = 0, m = g.length; h < m; h++) {
                    var p = g[h],
                        q = f[p.materialIndex];q && q.visible && E.push(a, e, q, c, ib.z, p);
                } else f.visible && E.push(a, e, f, c, ib.z, null);a = a.children;h = 0;for (m = a.length; h < m; h++) {
                    k(a[h], b, c, d);
                }
            }
        }function m(a, b, c, d) {
            for (var e = 0, f = a.length; e < f; e++) {
                var g = a[e],
                    h = g.object,
                    k = g.geometry,
                    m = void 0 === d ? g.material : d;g = g.group;if (c.isArrayCamera) {
                    R = c;for (var q = c.cameras, l = 0, v = q.length; l < v; l++) {
                        var t = q[l];if (h.layers.test(t.layers)) {
                            if ("viewport" in t) Z.viewport(S.copy(t.viewport));else {
                                var r = t.bounds;Z.viewport(S.set(r.x * U, r.y * N, r.z * U, r.w * N).multiplyScalar(T));
                            }D.setupLights(t);p(h, b, t, k, m, g);
                        }
                    }
                } else R = null, p(h, b, c, k, m, g);
            }
        }function p(a, c, d, e, f, g) {
            a.onBeforeRender(X, c, d, e, f, g);D = qa.get(c, R || d);a.modelViewMatrix.multiplyMatrices(d.matrixWorldInverse, a.matrixWorld);a.normalMatrix.getNormalMatrix(a.modelViewMatrix);if (a.isImmediateRenderObject) {
                Z.setMaterial(f);var k = l(d, c.fog, f, a);V = b = null;ta = !1;h(a, k);
            } else X.renderBufferDirect(d, c.fog, e, f, a, g);a.onAfterRender(X, c, d, e, f, g);D = qa.get(c, R || d);
        }function q(a, b, c) {
            var d = Da.get(a),
                e = D.state.lights,
                h = d.lightsHash,
                k = e.state.hash;c = ma.getParameters(a, e.state, D.state.shadowsArray, b, Y.numPlanes, Y.numIntersection, c);var m = ma.getProgramCode(a, c),
                p = d.program,
                q = !0;if (void 0 === p) a.addEventListener("dispose", f);else if (p.code !== m) g(a);else {
                if (h.stateID !== k.stateID || h.directionalLength !== k.directionalLength || h.pointLength !== k.pointLength || h.spotLength !== k.spotLength || h.rectAreaLength !== k.rectAreaLength || h.hemiLength !== k.hemiLength || h.shadowsLength !== k.shadowsLength) h.stateID = k.stateID, h.directionalLength = k.directionalLength, h.pointLength = k.pointLength, h.spotLength = k.spotLength, h.rectAreaLength = k.rectAreaLength, h.hemiLength = k.hemiLength, h.shadowsLength = k.shadowsLength;else if (void 0 !== c.shaderID) return;q = !1;
            }q && (c.shaderID ? (m = Ua[c.shaderID], d.shader = { name: a.type, uniforms: Mb(m.uniforms), vertexShader: m.vertexShader, fragmentShader: m.fragmentShader }) : d.shader = { name: a.type, uniforms: a.uniforms, vertexShader: a.vertexShader, fragmentShader: a.fragmentShader }, a.onBeforeCompile(d.shader, X), m = ma.getProgramCode(a, c), p = ma.acquireProgram(a, d.shader, c, m), d.program = p, a.program = p);c = p.getAttributes();if (a.morphTargets) for (m = a.numSupportedMorphTargets = 0; m < X.maxMorphTargets; m++) {
                0 <= c["morphTarget" + m] && a.numSupportedMorphTargets++;
            }if (a.morphNormals) for (m = a.numSupportedMorphNormals = 0; m < X.maxMorphNormals; m++) {
                0 <= c["morphNormal" + m] && a.numSupportedMorphNormals++;
            }c = d.shader.uniforms;
            if (!a.isShaderMaterial && !a.isRawShaderMaterial || !0 === a.clipping) d.numClippingPlanes = Y.numPlanes, d.numIntersection = Y.numIntersection, c.clippingPlanes = Y.uniform;d.fog = b;void 0 === h && (d.lightsHash = h = {});h.stateID = k.stateID;h.directionalLength = k.directionalLength;h.pointLength = k.pointLength;h.spotLength = k.spotLength;h.rectAreaLength = k.rectAreaLength;h.hemiLength = k.hemiLength;h.shadowsLength = k.shadowsLength;a.lights && (c.ambientLightColor.value = e.state.ambient, c.directionalLights.value = e.state.directional, c.spotLights.value = e.state.spot, c.rectAreaLights.value = e.state.rectArea, c.pointLights.value = e.state.point, c.hemisphereLights.value = e.state.hemi, c.directionalShadowMap.value = e.state.directionalShadowMap, c.directionalShadowMatrix.value = e.state.directionalShadowMatrix, c.spotShadowMap.value = e.state.spotShadowMap, c.spotShadowMatrix.value = e.state.spotShadowMatrix, c.pointShadowMap.value = e.state.pointShadowMap, c.pointShadowMatrix.value = e.state.pointShadowMatrix);a = d.program.getUniforms();a = fb.seqWithValue(a.seq, c);d.uniformsList = a;
        }function l(a, b, c, d) {
            ia = 0;var e = Da.get(c),
                f = e.lightsHash,
                g = D.state.lights.state.hash;yd && (he || a !== Pb) && Y.setState(c.clippingPlanes, c.clipIntersection, c.clipShadows, a, e, a === Pb && c.id === P);!1 === c.needsUpdate && (void 0 === e.program ? c.needsUpdate = !0 : c.fog && e.fog !== b ? c.needsUpdate = !0 : !c.lights || f.stateID === g.stateID && f.directionalLength === g.directionalLength && f.pointLength === g.pointLength && f.spotLength === g.spotLength && f.rectAreaLength === g.rectAreaLength && f.hemiLength === g.hemiLength && f.shadowsLength === g.shadowsLength ? void 0 === e.numClippingPlanes || e.numClippingPlanes === Y.numPlanes && e.numIntersection === Y.numIntersection || (c.needsUpdate = !0) : c.needsUpdate = !0);c.needsUpdate && (q(c, b, d), c.needsUpdate = !1);var h = !1,
                k = !1,
                m = !1;f = e.program;g = f.getUniforms();var p = e.shader.uniforms;Z.useProgram(f.program) && (m = k = h = !0);c.id !== P && (P = c.id, k = !0);if (h || Pb !== a) {
                g.setValue(O, "projectionMatrix", a.projectionMatrix);za.logarithmicDepthBuffer && g.setValue(O, "logDepthBufFC", 2 / (Math.log(a.far + 1) / Math.LN2));Pb !== a && (Pb = a, m = k = !0);if (c.isShaderMaterial || c.isMeshPhongMaterial || c.isMeshStandardMaterial || c.envMap) h = g.map.cameraPosition, void 0 !== h && h.setValue(O, ib.setFromMatrixPosition(a.matrixWorld));(c.isMeshPhongMaterial || c.isMeshLambertMaterial || c.isMeshBasicMaterial || c.isMeshStandardMaterial || c.isShaderMaterial || c.skinning) && g.setValue(O, "viewMatrix", a.matrixWorldInverse);
            }if (c.skinning && (g.setOptional(O, d, "bindMatrix"), g.setOptional(O, d, "bindMatrixInverse"), a = d.skeleton)) if (h = a.bones, za.floatVertexTextures) {
                if (void 0 === a.boneTexture) {
                    h = Math.sqrt(4 * h.length);h = H.ceilPowerOfTwo(h);h = Math.max(h, 4);var l = new Float32Array(h * h * 4);l.set(a.boneMatrices);var v = new nb(l, h, h, 1023, 1015);v.needsUpdate = !0;a.boneMatrices = l;a.boneTexture = v;a.boneTextureSize = h;
                }g.setValue(O, "boneTexture", a.boneTexture);g.setValue(O, "boneTextureSize", a.boneTextureSize);
            } else g.setOptional(O, a, "boneMatrices");k && (g.setValue(O, "toneMappingExposure", X.toneMappingExposure), g.setValue(O, "toneMappingWhitePoint", X.toneMappingWhitePoint), c.lights && (k = m, p.ambientLightColor.needsUpdate = k, p.directionalLights.needsUpdate = k, p.pointLights.needsUpdate = k, p.spotLights.needsUpdate = k, p.rectAreaLights.needsUpdate = k, p.hemisphereLights.needsUpdate = k), b && c.fog && (p.fogColor.value = b.color, b.isFog ? (p.fogNear.value = b.near, p.fogFar.value = b.far) : b.isFogExp2 && (p.fogDensity.value = b.density)), c.isMeshBasicMaterial ? t(p, c) : c.isMeshLambertMaterial ? (t(p, c), c.emissiveMap && (p.emissiveMap.value = c.emissiveMap)) : c.isMeshPhongMaterial ? (t(p, c), c.isMeshToonMaterial ? (r(p, c), c.gradientMap && (p.gradientMap.value = c.gradientMap)) : r(p, c)) : c.isMeshStandardMaterial ? (t(p, c), c.isMeshPhysicalMaterial ? (u(p, c), p.reflectivity.value = c.reflectivity, p.clearCoat.value = c.clearCoat, p.clearCoatRoughness.value = c.clearCoatRoughness) : u(p, c)) : c.isMeshMatcapMaterial ? (t(p, c), c.matcap && (p.matcap.value = c.matcap), c.bumpMap && (p.bumpMap.value = c.bumpMap, p.bumpScale.value = c.bumpScale, 1 === c.side && (p.bumpScale.value *= -1)), c.normalMap && (p.normalMap.value = c.normalMap, p.normalScale.value.copy(c.normalScale), 1 === c.side && p.normalScale.value.negate()), c.displacementMap && (p.displacementMap.value = c.displacementMap, p.displacementScale.value = c.displacementScale, p.displacementBias.value = c.displacementBias)) : c.isMeshDepthMaterial ? (t(p, c), c.displacementMap && (p.displacementMap.value = c.displacementMap, p.displacementScale.value = c.displacementScale, p.displacementBias.value = c.displacementBias)) : c.isMeshDistanceMaterial ? (t(p, c), c.displacementMap && (p.displacementMap.value = c.displacementMap, p.displacementScale.value = c.displacementScale, p.displacementBias.value = c.displacementBias), p.referencePosition.value.copy(c.referencePosition), p.nearDistance.value = c.nearDistance, p.farDistance.value = c.farDistance) : c.isMeshNormalMaterial ? (t(p, c), c.bumpMap && (p.bumpMap.value = c.bumpMap, p.bumpScale.value = c.bumpScale, 1 === c.side && (p.bumpScale.value *= -1)), c.normalMap && (p.normalMap.value = c.normalMap, p.normalScale.value.copy(c.normalScale), 1 === c.side && p.normalScale.value.negate()), c.displacementMap && (p.displacementMap.value = c.displacementMap, p.displacementScale.value = c.displacementScale, p.displacementBias.value = c.displacementBias)) : c.isLineBasicMaterial ? (p.diffuse.value = c.color, p.opacity.value = c.opacity, c.isLineDashedMaterial && (p.dashSize.value = c.dashSize, p.totalSize.value = c.dashSize + c.gapSize, p.scale.value = c.scale)) : c.isPointsMaterial ? (p.diffuse.value = c.color, p.opacity.value = c.opacity, p.size.value = c.size * T, p.scale.value = .5 * N, p.map.value = c.map, null !== c.map && (!0 === c.map.matrixAutoUpdate && c.map.updateMatrix(), p.uvTransform.value.copy(c.map.matrix))) : c.isSpriteMaterial ? (p.diffuse.value = c.color, p.opacity.value = c.opacity, p.rotation.value = c.rotation, p.map.value = c.map, null !== c.map && (!0 === c.map.matrixAutoUpdate && c.map.updateMatrix(), p.uvTransform.value.copy(c.map.matrix))) : c.isShadowMaterial && (p.color.value = c.color, p.opacity.value = c.opacity), void 0 !== p.ltc_1 && (p.ltc_1.value = I.LTC_1), void 0 !== p.ltc_2 && (p.ltc_2.value = I.LTC_2), fb.upload(O, e.uniformsList, p, X));c.isShaderMaterial && !0 === c.uniformsNeedUpdate && (fb.upload(O, e.uniformsList, p, X), c.uniformsNeedUpdate = !1);c.isSpriteMaterial && g.setValue(O, "center", d.center);
            g.setValue(O, "modelViewMatrix", d.modelViewMatrix);g.setValue(O, "normalMatrix", d.normalMatrix);g.setValue(O, "modelMatrix", d.matrixWorld);return f;
        }function t(a, b) {
            a.opacity.value = b.opacity;b.color && (a.diffuse.value = b.color);b.emissive && a.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity);b.map && (a.map.value = b.map);b.alphaMap && (a.alphaMap.value = b.alphaMap);b.specularMap && (a.specularMap.value = b.specularMap);b.envMap && (a.envMap.value = b.envMap, a.flipEnvMap.value = b.envMap.isCubeTexture ? -1 : 1, a.reflectivity.value = b.reflectivity, a.refractionRatio.value = b.refractionRatio, a.maxMipLevel.value = Da.get(b.envMap).__maxMipLevel);b.lightMap && (a.lightMap.value = b.lightMap, a.lightMapIntensity.value = b.lightMapIntensity);b.aoMap && (a.aoMap.value = b.aoMap, a.aoMapIntensity.value = b.aoMapIntensity);if (b.map) var c = b.map;else b.specularMap ? c = b.specularMap : b.displacementMap ? c = b.displacementMap : b.normalMap ? c = b.normalMap : b.bumpMap ? c = b.bumpMap : b.roughnessMap ? c = b.roughnessMap : b.metalnessMap ? c = b.metalnessMap : b.alphaMap ? c = b.alphaMap : b.emissiveMap && (c = b.emissiveMap);void 0 !== c && (c.isWebGLRenderTarget && (c = c.texture), !0 === c.matrixAutoUpdate && c.updateMatrix(), a.uvTransform.value.copy(c.matrix));
        }function r(a, b) {
            a.specular.value = b.specular;a.shininess.value = Math.max(b.shininess, 1E-4);b.emissiveMap && (a.emissiveMap.value = b.emissiveMap);b.bumpMap && (a.bumpMap.value = b.bumpMap, a.bumpScale.value = b.bumpScale, 1 === b.side && (a.bumpScale.value *= -1));b.normalMap && (a.normalMap.value = b.normalMap, a.normalScale.value.copy(b.normalScale), 1 === b.side && a.normalScale.value.negate());b.displacementMap && (a.displacementMap.value = b.displacementMap, a.displacementScale.value = b.displacementScale, a.displacementBias.value = b.displacementBias);
        }function u(a, b) {
            a.roughness.value = b.roughness;a.metalness.value = b.metalness;b.roughnessMap && (a.roughnessMap.value = b.roughnessMap);b.metalnessMap && (a.metalnessMap.value = b.metalnessMap);b.emissiveMap && (a.emissiveMap.value = b.emissiveMap);b.bumpMap && (a.bumpMap.value = b.bumpMap, a.bumpScale.value = b.bumpScale, 1 === b.side && (a.bumpScale.value *= -1));b.normalMap && (a.normalMap.value = b.normalMap, a.normalScale.value.copy(b.normalScale), 1 === b.side && a.normalScale.value.negate());b.displacementMap && (a.displacementMap.value = b.displacementMap, a.displacementScale.value = b.displacementScale, a.displacementBias.value = b.displacementBias);b.envMap && (a.envMapIntensity.value = b.envMapIntensity);
        }console.log("THREE.WebGLRenderer", "103dev");a = a || {};var w = void 0 !== a.canvas ? a.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
            z = void 0 !== a.context ? a.context : null,
            x = void 0 !== a.alpha ? a.alpha : !1,
            C = void 0 !== a.depth ? a.depth : !0,
            y = void 0 !== a.stencil ? a.stencil : !0,
            Q = void 0 !== a.antialias ? a.antialias : !1,
            fa = void 0 !== a.premultipliedAlpha ? a.premultipliedAlpha : !0,
            A = void 0 !== a.preserveDrawingBuffer ? a.preserveDrawingBuffer : !1,
            F = void 0 !== a.powerPreference ? a.powerPreference : "default",
            E = null,
            D = null;this.domElement = w;this.context = null;this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;
        this.clippingPlanes = [];this.localClippingEnabled = !1;this.gammaFactor = 2;this.physicallyCorrectLights = this.gammaOutput = this.gammaInput = !1;this.toneMappingWhitePoint = this.toneMappingExposure = this.toneMapping = 1;this.maxMorphTargets = 8;this.maxMorphNormals = 4;var X = this,
            K = !1,
            L = null,
            G = null,
            M = null,
            P = -1;var V = b = null;var ta = !1;var Pb = null,
            R = null,
            S = new ba(),
            W = new ba(),
            ca = null,
            ia = 0,
            U = w.width,
            N = w.height,
            T = 1,
            ea = new ba(0, 0, U, N),
            aa = new ba(0, 0, U, N),
            pa = !1,
            sa = new vd(),
            Y = new cg(),
            yd = !1,
            he = !1,
            Ec = new J(),
            ib = new n();try {
            x = { alpha: x,
                depth: C, stencil: y, antialias: Q, premultipliedAlpha: fa, preserveDrawingBuffer: A, powerPreference: F };w.addEventListener("webglcontextlost", d, !1);w.addEventListener("webglcontextrestored", e, !1);var O = z || w.getContext("webgl", x) || w.getContext("experimental-webgl", x);if (null === O) {
                if (null !== w.getContext("webgl")) throw Error("Error creating WebGL context with your selected attributes.");throw Error("Error creating WebGL context.");
            }void 0 === O.getShaderPrecisionFormat && (O.getShaderPrecisionFormat = function () {
                return { rangeMin: 1,
                    rangeMax: 1, precision: 1 };
            });
        } catch (uf) {
            throw console.error("THREE.WebGLRenderer: " + uf.message), uf;
        }var la, za, Z, ha, Da, da, ra, ua, oa, ma, va, qa, na, xa, Aa, Ba, ja;c();var ka = null;"undefined" !== typeof navigator && (ka = "xr" in navigator ? new ch(X) : new tf(X));this.vr = ka;var Ca = new of(X, oa, za.maxTextureSize);this.shadowMap = Ca;this.getContext = function () {
            return O;
        };this.getContextAttributes = function () {
            return O.getContextAttributes();
        };this.forceContextLoss = function () {
            var a = la.get("WEBGL_lose_context");a && a.loseContext();
        };
        this.forceContextRestore = function () {
            var a = la.get("WEBGL_lose_context");a && a.restoreContext();
        };this.getPixelRatio = function () {
            return T;
        };this.setPixelRatio = function (a) {
            void 0 !== a && (T = a, this.setSize(U, N, !1));
        };this.getSize = function (a) {
            void 0 === a && (console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"), a = new B());return a.set(U, N);
        };this.setSize = function (a, b, c) {
            ka.isPresenting() ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (U = a, N = b, w.width = a * T, w.height = b * T, !1 !== c && (w.style.width = a + "px", w.style.height = b + "px"), this.setViewport(0, 0, a, b));
        };this.getDrawingBufferSize = function (a) {
            void 0 === a && (console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"), a = new B());return a.set(U * T, N * T);
        };this.setDrawingBufferSize = function (a, b, c) {
            U = a;N = b;T = c;w.width = a * c;w.height = b * c;this.setViewport(0, 0, a, b);
        };this.getCurrentViewport = function (a) {
            void 0 === a && (console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"), a = new ba());return a.copy(S);
        };this.getViewport = function (a) {
            return a.copy(ea);
        };this.setViewport = function (a, b, c, d) {
            a.isVector4 ? ea.set(a.x, a.y, a.z, a.w) : ea.set(a, b, c, d);Z.viewport(S.copy(ea).multiplyScalar(T));
        };this.getScissor = function (a) {
            return a.copy(aa);
        };this.setScissor = function (a, b, c, d) {
            a.isVector4 ? aa.set(a.x, a.y, a.z, a.w) : aa.set(a, b, c, d);Z.scissor(W.copy(aa).multiplyScalar(T));
        };this.getScissorTest = function () {
            return pa;
        };this.setScissorTest = function (a) {
            Z.setScissorTest(pa = a);
        };this.getClearColor = function () {
            return na.getClearColor();
        };
        this.setClearColor = function () {
            na.setClearColor.apply(na, arguments);
        };this.getClearAlpha = function () {
            return na.getClearAlpha();
        };this.setClearAlpha = function () {
            na.setClearAlpha.apply(na, arguments);
        };this.clear = function (a, b, c) {
            var d = 0;if (void 0 === a || a) d |= 16384;if (void 0 === b || b) d |= 256;if (void 0 === c || c) d |= 1024;O.clear(d);
        };this.clearColor = function () {
            this.clear(!0, !1, !1);
        };this.clearDepth = function () {
            this.clear(!1, !0, !1);
        };this.clearStencil = function () {
            this.clear(!1, !1, !0);
        };this.dispose = function () {
            w.removeEventListener("webglcontextlost", d, !1);w.removeEventListener("webglcontextrestored", e, !1);va.dispose();qa.dispose();Da.dispose();oa.dispose();ka.dispose();wa.stop();
        };this.renderBufferImmediate = function (a, b) {
            Z.initAttributes();var c = Da.get(a);a.hasPositions && !c.position && (c.position = O.createBuffer());a.hasNormals && !c.normal && (c.normal = O.createBuffer());a.hasUvs && !c.uv && (c.uv = O.createBuffer());a.hasColors && !c.color && (c.color = O.createBuffer());b = b.getAttributes();a.hasPositions && (O.bindBuffer(34962, c.position), O.bufferData(34962, a.positionArray, 35048), Z.enableAttribute(b.position), O.vertexAttribPointer(b.position, 3, 5126, !1, 0, 0));a.hasNormals && (O.bindBuffer(34962, c.normal), O.bufferData(34962, a.normalArray, 35048), Z.enableAttribute(b.normal), O.vertexAttribPointer(b.normal, 3, 5126, !1, 0, 0));a.hasUvs && (O.bindBuffer(34962, c.uv), O.bufferData(34962, a.uvArray, 35048), Z.enableAttribute(b.uv), O.vertexAttribPointer(b.uv, 2, 5126, !1, 0, 0));a.hasColors && (O.bindBuffer(34962, c.color), O.bufferData(34962, a.colorArray, 35048), Z.enableAttribute(b.color), O.vertexAttribPointer(b.color, 3, 5126, !1, 0, 0));Z.disableUnusedAttributes();O.drawArrays(4, 0, a.count);a.count = 0;
        };this.renderBufferDirect = function (a, c, d, e, f, g) {
            var h = f.isMesh && 0 > f.matrixWorld.determinant();Z.setMaterial(e, h);var k = l(a, c, e, f),
                m = !1;if (b !== d.id || V !== k.id || ta !== (!0 === e.wireframe)) b = d.id, V = k.id, ta = !0 === e.wireframe, m = !0;f.morphTargetInfluences && (xa.update(f, d, e, k), m = !0);h = d.index;var p = d.attributes.position;c = 1;!0 === e.wireframe && (h = ua.getWireframeAttribute(d), c = 2);a = Aa;if (null !== h) {
                var q = ra.get(h);a = Ba;a.setIndex(q);
            }if (m) {
                if (d && d.isInstancedBufferGeometry && !za.isWebGL2 && null === la.get("ANGLE_instanced_arrays")) console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");else {
                    Z.initAttributes();m = d.attributes;k = k.getAttributes();var v = e.defaultAttributeValues;for (A in k) {
                        var t = k[A];if (0 <= t) {
                            var r = m[A];if (void 0 !== r) {
                                var u = r.normalized,
                                    n = r.itemSize,
                                    w = ra.get(r);if (void 0 !== w) {
                                    var x = w.buffer,
                                        z = w.type;w = w.bytesPerElement;if (r.isInterleavedBufferAttribute) {
                                        var y = r.data,
                                            C = y.stride;r = r.offset;y && y.isInstancedInterleavedBuffer ? (Z.enableAttributeAndDivisor(t, y.meshPerAttribute), void 0 === d.maxInstancedCount && (d.maxInstancedCount = y.meshPerAttribute * y.count)) : Z.enableAttribute(t);O.bindBuffer(34962, x);O.vertexAttribPointer(t, n, z, u, C * w, r * w);
                                    } else r.isInstancedBufferAttribute ? (Z.enableAttributeAndDivisor(t, r.meshPerAttribute), void 0 === d.maxInstancedCount && (d.maxInstancedCount = r.meshPerAttribute * r.count)) : Z.enableAttribute(t), O.bindBuffer(34962, x), O.vertexAttribPointer(t, n, z, u, 0, 0);
                                }
                            } else if (void 0 !== v && (u = v[A], void 0 !== u)) switch (u.length) {case 2:
                                    O.vertexAttrib2fv(t, u);break;case 3:
                                    O.vertexAttrib3fv(t, u);break;case 4:
                                    O.vertexAttrib4fv(t, u);break;default:
                                    O.vertexAttrib1fv(t, u);}
                        }
                    }Z.disableUnusedAttributes();
                }null !== h && O.bindBuffer(34963, q.buffer);
            }q = Infinity;null !== h ? q = h.count : void 0 !== p && (q = p.count);h = d.drawRange.start * c;p = null !== g ? g.start * c : 0;var A = Math.max(h, p);g = Math.max(0, Math.min(q, h + d.drawRange.count * c, p + (null !== g ? g.count * c : Infinity)) - 1 - A + 1);if (0 !== g) {
                if (f.isMesh) {
                    if (!0 === e.wireframe) Z.setLineWidth(e.wireframeLinewidth * (null === G ? T : 1)), a.setMode(1);else switch (f.drawMode) {case 0:
                            a.setMode(4);break;case 1:
                            a.setMode(5);break;case 2:
                            a.setMode(6);}
                } else f.isLine ? (e = e.linewidth, void 0 === e && (e = 1), Z.setLineWidth(e * (null === G ? T : 1)), f.isLineSegments ? a.setMode(1) : f.isLineLoop ? a.setMode(2) : a.setMode(3)) : f.isPoints ? a.setMode(0) : f.isSprite && a.setMode(4);d && d.isInstancedBufferGeometry ? 0 < d.maxInstancedCount && a.renderInstances(d, A, g) : a.render(A, g);
            }
        };this.compile = function (a, b) {
            D = qa.get(a, b);D.init();a.traverse(function (a) {
                a.isLight && (D.pushLight(a), a.castShadow && D.pushShadow(a));
            });D.setupLights(b);a.traverse(function (b) {
                if (b.material) if (Array.isArray(b.material)) for (var c = 0; c < b.material.length; c++) {
                    q(b.material[c], a.fog, b);
                } else q(b.material, a.fog, b);
            });
        };var ya = null,
            wa = new ae();wa.setAnimationLoop(function (a) {
            ka.isPresenting() || ya && ya(a);
        });"undefined" !== typeof window && wa.setContext(window);this.setAnimationLoop = function (a) {
            ya = a;ka.setAnimationLoop(a);wa.start();
        };this.render = function (a, c, d, e) {
            if (void 0 !== d) {
                console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");var f = d;
            }if (void 0 !== e) {
                console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");var g = e;
            }c && c.isCamera ? K || (V = b = null, ta = !1, P = -1, Pb = null, !0 === a.autoUpdate && a.updateMatrixWorld(), null === c.parent && c.updateMatrixWorld(), ka.enabled && (c = ka.getCamera(c)), D = qa.get(a, c), D.init(), a.onBeforeRender(X, a, c, f || G), Ec.multiplyMatrices(c.projectionMatrix, c.matrixWorldInverse), sa.setFromMatrix(Ec), he = this.localClippingEnabled, yd = Y.init(this.clippingPlanes, he, c), E = va.get(a, c), E.init(), k(a, c, 0, X.sortObjects), !0 === X.sortObjects && E.sort(), yd && Y.beginShadows(), Ca.render(D.state.shadowsArray, a, c), D.setupLights(c), yd && Y.endShadows(), this.info.autoReset && this.info.reset(), void 0 !== f && this.setRenderTarget(f), na.render(E, a, c, g), d = E.opaque, e = E.transparent, a.overrideMaterial ? (f = a.overrideMaterial, d.length && m(d, a, c, f), e.length && m(e, a, c, f)) : (d.length && m(d, a, c), e.length && m(e, a, c)), null !== G && (da.updateRenderTargetMipmap(G), da.updateMultisampleRenderTarget(G)), Z.buffers.depth.setTest(!0), Z.buffers.depth.setMask(!0), Z.buffers.color.setMask(!0), Z.setPolygonOffset(!1), a.onAfterRender(X, a, c), ka.enabled && ka.submitFrame(), D = E = null) : console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        };this.allocTextureUnit = function () {
            var a = ia;a >= za.maxTextures && console.warn("THREE.WebGLRenderer: Trying to use " + a + " texture units while this GPU supports only " + za.maxTextures);ia += 1;return a;
        };this.setTexture2D = function () {
            var a = !1;return function (b, c) {
                b && b.isWebGLRenderTarget && (a || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."), a = !0), b = b.texture);da.setTexture2D(b, c);
            };
        }();this.setTexture2DArray = function (a, b) {
            da.setTexture2DArray(a, b);
        };this.setTexture3D = function (a, b) {
            da.setTexture3D(a, b);
        };this.setTexture = function () {
            var a = !1;return function (b, c) {
                a || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."), a = !0);da.setTexture2D(b, c);
            };
        }();this.setTextureCube = function () {
            var a = !1;return function (b, c) {
                b && b.isWebGLRenderTargetCube && (a || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."), a = !0), b = b.texture);b && b.isCubeTexture || Array.isArray(b.image) && 6 === b.image.length ? da.setTextureCube(b, c) : da.setTextureCubeDynamic(b, c);
            };
        }();this.setFramebuffer = function (a) {
            L = a;
        };this.getRenderTarget = function () {
            return G;
        };this.setRenderTarget = function (a, b, c) {
            (G = a) && void 0 === Da.get(a).__webglFramebuffer && da.setupRenderTarget(a);var d = L,
                e = !1;a ? (d = Da.get(a).__webglFramebuffer, a.isWebGLRenderTargetCube ? (d = d[b || 0], e = !0) : d = a.isWebGLMultisampleRenderTarget ? Da.get(a).__webglMultisampledFramebuffer : d, S.copy(a.viewport), W.copy(a.scissor), ca = a.scissorTest) : (S.copy(ea).multiplyScalar(T), W.copy(aa).multiplyScalar(T), ca = pa);M !== d && (O.bindFramebuffer(36160, d), M = d);Z.viewport(S);Z.scissor(W);Z.setScissorTest(ca);e && (a = Da.get(a.texture), O.framebufferTexture2D(36160, 36064, 34069 + (b || 0), a.__webglTexture, c || 0));
        };this.readRenderTargetPixels = function (a, b, c, d, e, f) {
            if (a && a.isWebGLRenderTarget) {
                var g = Da.get(a).__webglFramebuffer;if (g) {
                    var h = !1;g !== M && (O.bindFramebuffer(36160, g), h = !0);try {
                        var k = a.texture,
                            m = k.format,
                            p = k.type;1023 !== m && ja.convert(m) !== O.getParameter(35739) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : 1009 === p || ja.convert(p) === O.getParameter(35738) || 1015 === p && (za.isWebGL2 || la.get("OES_texture_float") || la.get("WEBGL_color_buffer_float")) || 1016 === p && (za.isWebGL2 ? la.get("EXT_color_buffer_float") : la.get("EXT_color_buffer_half_float")) ? 36053 === O.checkFramebufferStatus(36160) ? 0 <= b && b <= a.width - d && 0 <= c && c <= a.height - e && O.readPixels(b, c, d, e, ja.convert(m), ja.convert(p), f) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                    } finally {
                        h && O.bindFramebuffer(36160, M);
                    }
                }
            } else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        };this.copyFramebufferToTexture = function (a, b, c) {
            var d = b.image.width,
                e = b.image.height,
                f = ja.convert(b.format);this.setTexture2D(b, 0);O.copyTexImage2D(3553, c || 0, f, a.x, a.y, d, e, 0);
        };this.copyTextureToTexture = function (a, b, c, d) {
            var e = b.image.width,
                f = b.image.height,
                g = ja.convert(c.format),
                h = ja.convert(c.type);this.setTexture2D(c, 0);b.isDataTexture ? O.texSubImage2D(3553, d || 0, a.x, a.y, e, f, g, h, b.image.data) : O.texSubImage2D(3553, d || 0, a.x, a.y, g, h, b.image);
        };
    }function zd(a, b) {
        this.name = "";this.color = new K(a);this.density = void 0 !== b ? b : 2.5E-4;
    }function Ad(a, b, c) {
        this.name = "";this.color = new K(a);this.near = void 0 !== b ? b : 1;this.far = void 0 !== c ? c : 1E3;
    }function Bd() {
        E.call(this);this.type = "Scene";this.overrideMaterial = this.fog = this.background = null;this.autoUpdate = !0;
    }function ub(a, b) {
        this.array = a;this.stride = b;this.count = void 0 !== a ? a.length / b : 0;this.dynamic = !1;this.updateRange = { offset: 0,
            count: -1 };this.version = 0;
    }function Gc(a, b, c, d) {
        this.data = a;this.itemSize = b;this.offset = c;this.normalized = !0 === d;
    }function jb(a) {
        M.call(this);this.type = "SpriteMaterial";this.color = new K(16777215);this.map = null;this.rotation = 0;this.sizeAttenuation = !0;this.lights = !1;this.transparent = !0;this.setValues(a);
    }function Hc(a) {
        E.call(this);this.type = "Sprite";if (void 0 === Ub) {
            Ub = new D();var b = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]);b = new ub(b, 5);Ub.setIndex([0, 1, 2, 0, 2, 3]);Ub.addAttribute("position", new Gc(b, 3, 0, !1));Ub.addAttribute("uv", new Gc(b, 2, 3, !1));
        }this.geometry = Ub;this.material = void 0 !== a ? a : new jb();this.center = new B(.5, .5);
    }function Ic() {
        E.call(this);this.type = "LOD";Object.defineProperties(this, { levels: { enumerable: !0, value: [] } });
    }function Jc(a, b) {
        a && a.isGeometry && console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");va.call(this, a, b);this.type = "SkinnedMesh";this.bindMode = "attached";this.bindMatrix = new J();this.bindMatrixInverse = new J();
    }function Cd(a, b) {
        a = a || [];this.bones = a.slice(0);this.boneMatrices = new Float32Array(16 * this.bones.length);if (void 0 === b) this.calculateInverses();else if (this.bones.length === b.length) this.boneInverses = b.slice(0);else for (console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [], a = 0, b = this.bones.length; a < b; a++) {
            this.boneInverses.push(new J());
        }
    }function je() {
        E.call(this);this.type = "Bone";
    }function R(a) {
        M.call(this);this.type = "LineBasicMaterial";this.color = new K(16777215);this.linewidth = 1;this.linejoin = this.linecap = "round";this.lights = !1;this.setValues(a);
    }function da(a, b, c) {
        1 === c && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");E.call(this);this.type = "Line";this.geometry = void 0 !== a ? a : new D();this.material = void 0 !== b ? b : new R({ color: 16777215 * Math.random() });
    }function W(a, b) {
        da.call(this, a, b);this.type = "LineSegments";
    }function Dd(a, b) {
        da.call(this, a, b);this.type = "LineLoop";
    }function Ja(a) {
        M.call(this);this.type = "PointsMaterial";this.color = new K(16777215);
        this.map = null;this.size = 1;this.sizeAttenuation = !0;this.lights = this.morphTargets = !1;this.setValues(a);
    }function Vb(a, b) {
        E.call(this);this.type = "Points";this.geometry = void 0 !== a ? a : new D();this.material = void 0 !== b ? b : new Ja({ color: 16777215 * Math.random() });
    }function ke(a, b, c, d, e, f, g, h, k) {
        S.call(this, a, b, c, d, e, f, g, h, k);this.format = void 0 !== g ? g : 1022;this.minFilter = void 0 !== f ? f : 1006;this.magFilter = void 0 !== e ? e : 1006;this.generateMipmaps = !1;
    }function Wb(a, b, c, d, e, f, g, h, k, m, p, q) {
        S.call(this, null, f, g, h, k, m, d, e, p, q);this.image = { width: b, height: c };this.mipmaps = a;this.generateMipmaps = this.flipY = !1;
    }function Kc(a, b, c, d, e, f, g, h, k) {
        S.call(this, a, b, c, d, e, f, g, h, k);this.needsUpdate = !0;
    }function Lc(a, b, c, d, e, f, g, h, k, m) {
        m = void 0 !== m ? m : 1026;if (1026 !== m && 1027 !== m) throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0 === c && 1026 === m && (c = 1012);void 0 === c && 1027 === m && (c = 1020);S.call(this, null, d, e, f, g, h, m, c, k);this.image = { width: a, height: b };this.magFilter = void 0 !== g ? g : 1003;this.minFilter = void 0 !== h ? h : 1003;this.generateMipmaps = this.flipY = !1;
    }function Xb(a) {
        D.call(this);this.type = "WireframeGeometry";var b = [],
            c,
            d,
            e,
            f = [0, 0],
            g = {},
            h = ["a", "b", "c"];if (a && a.isGeometry) {
            var k = a.faces;var m = 0;for (d = k.length; m < d; m++) {
                var p = k[m];for (c = 0; 3 > c; c++) {
                    var q = p[h[c]];var l = p[h[(c + 1) % 3]];f[0] = Math.min(q, l);f[1] = Math.max(q, l);q = f[0] + "," + f[1];void 0 === g[q] && (g[q] = { index1: f[0], index2: f[1] });
                }
            }for (q in g) {
                m = g[q], h = a.vertices[m.index1], b.push(h.x, h.y, h.z), h = a.vertices[m.index2], b.push(h.x, h.y, h.z);
            }
        } else if (a && a.isBufferGeometry) if (h = new n(), null !== a.index) {
            k = a.attributes.position;p = a.index;var t = a.groups;0 === t.length && (t = [{ start: 0, count: p.count, materialIndex: 0 }]);a = 0;for (e = t.length; a < e; ++a) {
                for (m = t[a], c = m.start, d = m.count, m = c, d = c + d; m < d; m += 3) {
                    for (c = 0; 3 > c; c++) {
                        q = p.getX(m + c), l = p.getX(m + (c + 1) % 3), f[0] = Math.min(q, l), f[1] = Math.max(q, l), q = f[0] + "," + f[1], void 0 === g[q] && (g[q] = { index1: f[0], index2: f[1] });
                    }
                }
            }for (q in g) {
                m = g[q], h.fromBufferAttribute(k, m.index1), b.push(h.x, h.y, h.z), h.fromBufferAttribute(k, m.index2), b.push(h.x, h.y, h.z);
            }
        } else for (k = a.attributes.position, m = 0, d = k.count / 3; m < d; m++) {
            for (c = 0; 3 > c; c++) {
                g = 3 * m + c, h.fromBufferAttribute(k, g), b.push(h.x, h.y, h.z), g = 3 * m + (c + 1) % 3, h.fromBufferAttribute(k, g), b.push(h.x, h.y, h.z);
            }
        }this.addAttribute("position", new F(b, 3));
    }function Mc(a, b, c) {
        G.call(this);this.type = "ParametricGeometry";this.parameters = { func: a, slices: b, stacks: c };this.fromBufferGeometry(new Yb(a, b, c));this.mergeVertices();
    }function Yb(a, b, c) {
        D.call(this);this.type = "ParametricBufferGeometry";this.parameters = { func: a, slices: b,
            stacks: c };var d = [],
            e = [],
            f = [],
            g = [],
            h = new n(),
            k = new n(),
            m = new n(),
            p = new n(),
            q = new n(),
            l,
            t;3 > a.length && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var r = b + 1;for (l = 0; l <= c; l++) {
            var u = l / c;for (t = 0; t <= b; t++) {
                var w = t / b;a(w, u, k);e.push(k.x, k.y, k.z);0 <= w - 1E-5 ? (a(w - 1E-5, u, m), p.subVectors(k, m)) : (a(w + 1E-5, u, m), p.subVectors(m, k));0 <= u - 1E-5 ? (a(w, u - 1E-5, m), q.subVectors(k, m)) : (a(w, u + 1E-5, m), q.subVectors(m, k));h.crossVectors(p, q).normalize();f.push(h.x, h.y, h.z);g.push(w, u);
            }
        }for (l = 0; l < c; l++) {
            for (t = 0; t < b; t++) {
                a = l * r + t + 1, h = (l + 1) * r + t + 1, k = (l + 1) * r + t, d.push(l * r + t, a, k), d.push(a, h, k);
            }
        }this.setIndex(d);this.addAttribute("position", new F(e, 3));this.addAttribute("normal", new F(f, 3));this.addAttribute("uv", new F(g, 2));
    }function Nc(a, b, c, d) {
        G.call(this);this.type = "PolyhedronGeometry";this.parameters = { vertices: a, indices: b, radius: c, detail: d };this.fromBufferGeometry(new Aa(a, b, c, d));this.mergeVertices();
    }function Aa(a, b, c, d) {
        function e(a) {
            h.push(a.x, a.y, a.z);
        }function f(b, c) {
            b *= 3;c.x = a[b + 0];c.y = a[b + 1];c.z = a[b + 2];
        }function g(a, b, c, d) {
            0 > d && 1 === a.x && (k[b] = a.x - 1);0 === c.x && 0 === c.z && (k[b] = d / 2 / Math.PI + .5);
        }D.call(this);this.type = "PolyhedronBufferGeometry";this.parameters = { vertices: a, indices: b, radius: c, detail: d };c = c || 1;d = d || 0;var h = [],
            k = [];(function (a) {
            for (var c = new n(), d = new n(), g = new n(), h = 0; h < b.length; h += 3) {
                f(b[h + 0], c);f(b[h + 1], d);f(b[h + 2], g);var k,
                    m,
                    l = c,
                    z = d,
                    x = g,
                    C = Math.pow(2, a),
                    y = [];for (m = 0; m <= C; m++) {
                    y[m] = [];var Q = l.clone().lerp(x, m / C),
                        B = z.clone().lerp(x, m / C),
                        A = C - m;for (k = 0; k <= A; k++) {
                        y[m][k] = 0 === k && m === C ? Q : Q.clone().lerp(B, k / A);
                    }
                }for (m = 0; m < C; m++) {
                    for (k = 0; k < 2 * (C - m) - 1; k++) {
                        l = Math.floor(k / 2), 0 === k % 2 ? (e(y[m][l + 1]), e(y[m + 1][l]), e(y[m][l])) : (e(y[m][l + 1]), e(y[m + 1][l + 1]), e(y[m + 1][l]));
                    }
                }
            }
        })(d);(function (a) {
            for (var b = new n(), c = 0; c < h.length; c += 3) {
                b.x = h[c + 0], b.y = h[c + 1], b.z = h[c + 2], b.normalize().multiplyScalar(a), h[c + 0] = b.x, h[c + 1] = b.y, h[c + 2] = b.z;
            }
        })(c);(function () {
            for (var a = new n(), b = 0; b < h.length; b += 3) {
                a.x = h[b + 0], a.y = h[b + 1], a.z = h[b + 2], k.push(Math.atan2(a.z, -a.x) / 2 / Math.PI + .5, 1 - (Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + .5));
            }a = new n();b = new n();for (var c = new n(), d = new n(), e = new B(), f = new B(), l = new B(), w = 0, z = 0; w < h.length; w += 9, z += 6) {
                a.set(h[w + 0], h[w + 1], h[w + 2]);b.set(h[w + 3], h[w + 4], h[w + 5]);c.set(h[w + 6], h[w + 7], h[w + 8]);e.set(k[z + 0], k[z + 1]);f.set(k[z + 2], k[z + 3]);l.set(k[z + 4], k[z + 5]);d.copy(a).add(b).add(c).divideScalar(3);var x = Math.atan2(d.z, -d.x);g(e, z + 0, a, x);g(f, z + 2, b, x);g(l, z + 4, c, x);
            }for (a = 0; a < k.length; a += 6) {
                b = k[a + 0], c = k[a + 2], d = k[a + 4], e = Math.min(b, c, d), .9 < Math.max(b, c, d) && .1 > e && (.2 > b && (k[a + 0] += 1), .2 > c && (k[a + 2] += 1), .2 > d && (k[a + 4] += 1));
            }
        })();this.addAttribute("position", new F(h, 3));this.addAttribute("normal", new F(h.slice(), 3));this.addAttribute("uv", new F(k, 2));0 === d ? this.computeVertexNormals() : this.normalizeNormals();
    }function Oc(a, b) {
        G.call(this);this.type = "TetrahedronGeometry";this.parameters = { radius: a, detail: b };this.fromBufferGeometry(new Zb(a, b));this.mergeVertices();
    }function Zb(a, b) {
        Aa.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], a, b);this.type = "TetrahedronBufferGeometry";this.parameters = { radius: a,
            detail: b };
    }function Pc(a, b) {
        G.call(this);this.type = "OctahedronGeometry";this.parameters = { radius: a, detail: b };this.fromBufferGeometry(new vb(a, b));this.mergeVertices();
    }function vb(a, b) {
        Aa.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], a, b);this.type = "OctahedronBufferGeometry";this.parameters = { radius: a, detail: b };
    }function Qc(a, b) {
        G.call(this);this.type = "IcosahedronGeometry";this.parameters = { radius: a, detail: b };this.fromBufferGeometry(new $b(a, b));this.mergeVertices();
    }
    function $b(a, b) {
        var c = (1 + Math.sqrt(5)) / 2;Aa.call(this, [-1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, 0, 0, -1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, c, 0, -1, c, 0, 1, -c, 0, -1, -c, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], a, b);this.type = "IcosahedronBufferGeometry";this.parameters = { radius: a, detail: b };
    }function Rc(a, b) {
        G.call(this);this.type = "DodecahedronGeometry";this.parameters = { radius: a, detail: b };this.fromBufferGeometry(new ac(a, b));this.mergeVertices();
    }
    function ac(a, b) {
        var c = (1 + Math.sqrt(5)) / 2,
            d = 1 / c;Aa.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, 0, -c, 0, -d, c, 0, -d, -c, 0, d, c, 0, d], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], a, b);this.type = "DodecahedronBufferGeometry";
        this.parameters = { radius: a, detail: b };
    }function Sc(a, b, c, d, e, f) {
        G.call(this);this.type = "TubeGeometry";this.parameters = { path: a, tubularSegments: b, radius: c, radialSegments: d, closed: e };void 0 !== f && console.warn("THREE.TubeGeometry: taper has been removed.");a = new wb(a, b, c, d, e);this.tangents = a.tangents;this.normals = a.normals;this.binormals = a.binormals;this.fromBufferGeometry(a);this.mergeVertices();
    }function wb(a, b, c, d, e) {
        function f(e) {
            p = a.getPointAt(e / b, p);var f = g.normals[e];e = g.binormals[e];for (l = 0; l <= d; l++) {
                var m = l / d * Math.PI * 2,
                    q = Math.sin(m);m = -Math.cos(m);k.x = m * f.x + q * e.x;k.y = m * f.y + q * e.y;k.z = m * f.z + q * e.z;k.normalize();r.push(k.x, k.y, k.z);h.x = p.x + c * k.x;h.y = p.y + c * k.y;h.z = p.z + c * k.z;t.push(h.x, h.y, h.z);
            }
        }D.call(this);this.type = "TubeBufferGeometry";this.parameters = { path: a, tubularSegments: b, radius: c, radialSegments: d, closed: e };b = b || 64;c = c || 1;d = d || 8;e = e || !1;var g = a.computeFrenetFrames(b, e);this.tangents = g.tangents;this.normals = g.normals;this.binormals = g.binormals;var h = new n(),
            k = new n(),
            m = new B(),
            p = new n(),
            q,
            l,
            t = [],
            r = [],
            u = [],
            w = [];for (q = 0; q < b; q++) {
            f(q);
        }f(!1 === e ? b : 0);for (q = 0; q <= b; q++) {
            for (l = 0; l <= d; l++) {
                m.x = q / b, m.y = l / d, u.push(m.x, m.y);
            }
        }(function () {
            for (l = 1; l <= b; l++) {
                for (q = 1; q <= d; q++) {
                    var a = (d + 1) * l + (q - 1),
                        c = (d + 1) * l + q,
                        e = (d + 1) * (l - 1) + q;w.push((d + 1) * (l - 1) + (q - 1), a, e);w.push(a, c, e);
                }
            }
        })();this.setIndex(w);this.addAttribute("position", new F(t, 3));this.addAttribute("normal", new F(r, 3));this.addAttribute("uv", new F(u, 2));
    }function Tc(a, b, c, d, e, f, g) {
        G.call(this);this.type = "TorusKnotGeometry";this.parameters = { radius: a, tube: b, tubularSegments: c,
            radialSegments: d, p: e, q: f };void 0 !== g && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");this.fromBufferGeometry(new bc(a, b, c, d, e, f));this.mergeVertices();
    }function bc(a, b, c, d, e, f) {
        function g(a, b, c, d, e) {
            var f = Math.sin(a);b = c / b * a;c = Math.cos(b);e.x = d * (2 + c) * .5 * Math.cos(a);e.y = d * (2 + c) * f * .5;e.z = d * Math.sin(b) * .5;
        }D.call(this);this.type = "TorusKnotBufferGeometry";this.parameters = { radius: a, tube: b, tubularSegments: c, radialSegments: d, p: e, q: f };a = a || 1;b = b || .4;
        c = Math.floor(c) || 64;d = Math.floor(d) || 8;e = e || 2;f = f || 3;var h = [],
            k = [],
            m = [],
            p = [],
            q,
            l = new n(),
            t = new n(),
            r = new n(),
            u = new n(),
            w = new n(),
            z = new n(),
            x = new n();for (q = 0; q <= c; ++q) {
            var C = q / c * e * Math.PI * 2;g(C, e, f, a, r);g(C + .01, e, f, a, u);z.subVectors(u, r);x.addVectors(u, r);w.crossVectors(z, x);x.crossVectors(w, z);w.normalize();x.normalize();for (C = 0; C <= d; ++C) {
                var y = C / d * Math.PI * 2,
                    Q = -b * Math.cos(y);y = b * Math.sin(y);l.x = r.x + (Q * x.x + y * w.x);l.y = r.y + (Q * x.y + y * w.y);l.z = r.z + (Q * x.z + y * w.z);k.push(l.x, l.y, l.z);t.subVectors(l, r).normalize();m.push(t.x, t.y, t.z);p.push(q / c);p.push(C / d);
            }
        }for (C = 1; C <= c; C++) {
            for (q = 1; q <= d; q++) {
                a = (d + 1) * C + (q - 1), b = (d + 1) * C + q, e = (d + 1) * (C - 1) + q, h.push((d + 1) * (C - 1) + (q - 1), a, e), h.push(a, b, e);
            }
        }this.setIndex(h);this.addAttribute("position", new F(k, 3));this.addAttribute("normal", new F(m, 3));this.addAttribute("uv", new F(p, 2));
    }function Uc(a, b, c, d, e) {
        G.call(this);this.type = "TorusGeometry";this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, arc: e };this.fromBufferGeometry(new cc(a, b, c, d, e));this.mergeVertices();
    }function cc(a, b, c, d, e) {
        D.call(this);this.type = "TorusBufferGeometry";this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, arc: e };a = a || 1;b = b || .4;c = Math.floor(c) || 8;d = Math.floor(d) || 6;e = e || 2 * Math.PI;var f = [],
            g = [],
            h = [],
            k = [],
            m = new n(),
            p = new n(),
            q = new n(),
            l,
            t;for (l = 0; l <= c; l++) {
            for (t = 0; t <= d; t++) {
                var r = t / d * e,
                    u = l / c * Math.PI * 2;p.x = (a + b * Math.cos(u)) * Math.cos(r);p.y = (a + b * Math.cos(u)) * Math.sin(r);p.z = b * Math.sin(u);g.push(p.x, p.y, p.z);m.x = a * Math.cos(r);m.y = a * Math.sin(r);q.subVectors(p, m).normalize();h.push(q.x, q.y, q.z);
                k.push(t / d);k.push(l / c);
            }
        }for (l = 1; l <= c; l++) {
            for (t = 1; t <= d; t++) {
                a = (d + 1) * (l - 1) + t - 1, b = (d + 1) * (l - 1) + t, e = (d + 1) * l + t, f.push((d + 1) * l + t - 1, a, e), f.push(a, b, e);
            }
        }this.setIndex(f);this.addAttribute("position", new F(g, 3));this.addAttribute("normal", new F(h, 3));this.addAttribute("uv", new F(k, 2));
    }function vf(a, b, c, d, e) {
        for (var f, g = 0, h = b, k = c - d; h < c; h += d) {
            g += (a[k] - a[h]) * (a[h + 1] + a[k + 1]), k = h;
        }if (e === 0 < g) for (e = b; e < c; e += d) {
            f = wf(e, a[e], a[e + 1], f);
        } else for (e = c - d; e >= b; e -= d) {
            f = wf(e, a[e], a[e + 1], f);
        }f && xb(f, f.next) && (Vc(f), f = f.next);return f;
    }
    function Wc(a, b) {
        if (!a) return a;b || (b = a);do {
            var c = !1;if (a.steiner || !xb(a, a.next) && 0 !== qa(a.prev, a, a.next)) a = a.next;else {
                Vc(a);a = b = a.prev;if (a === a.next) break;c = !0;
            }
        } while (c || a !== b);return b;
    }function Xc(a, b, c, d, e, f, g) {
        if (a) {
            if (!g && f) {
                var h = a,
                    k = h;do {
                    null === k.z && (k.z = le(k.x, k.y, d, e, f)), k.prevZ = k.prev, k = k.nextZ = k.next;
                } while (k !== h);k.prevZ.nextZ = null;k.prevZ = null;h = k;var m,
                    p,
                    q,
                    l,
                    t = 1;do {
                    k = h;var r = h = null;for (p = 0; k;) {
                        p++;var n = k;for (m = q = 0; m < t && (q++, n = n.nextZ, n); m++) {}for (l = t; 0 < q || 0 < l && n;) {
                            0 !== q && (0 === l || !n || k.z <= n.z) ? (m = k, k = k.nextZ, q--) : (m = n, n = n.nextZ, l--), r ? r.nextZ = m : h = m, m.prevZ = r, r = m;
                        }k = n;
                    }r.nextZ = null;t *= 2;
                } while (1 < p);
            }for (h = a; a.prev !== a.next;) {
                k = a.prev;n = a.next;if (f) a: {
                    r = a;l = d;var w = e,
                        z = f;p = r.prev;q = r;t = r.next;if (0 <= qa(p, q, t)) r = !1;else {
                        var x = p.x > q.x ? p.x > t.x ? p.x : t.x : q.x > t.x ? q.x : t.x,
                            C = p.y > q.y ? p.y > t.y ? p.y : t.y : q.y > t.y ? q.y : t.y;m = le(p.x < q.x ? p.x < t.x ? p.x : t.x : q.x < t.x ? q.x : t.x, p.y < q.y ? p.y < t.y ? p.y : t.y : q.y < t.y ? q.y : t.y, l, w, z);l = le(x, C, l, w, z);for (w = r.nextZ; w && w.z <= l;) {
                            if (w !== r.prev && w !== r.next && Ed(p.x, p.y, q.x, q.y, t.x, t.y, w.x, w.y) && 0 <= qa(w.prev, w, w.next)) {
                                r = !1;break a;
                            }w = w.nextZ;
                        }for (w = r.prevZ; w && w.z >= m;) {
                            if (w !== r.prev && w !== r.next && Ed(p.x, p.y, q.x, q.y, t.x, t.y, w.x, w.y) && 0 <= qa(w.prev, w, w.next)) {
                                r = !1;break a;
                            }w = w.prevZ;
                        }r = !0;
                    }
                } else a: if (r = a, p = r.prev, q = r, t = r.next, 0 <= qa(p, q, t)) r = !1;else {
                    for (m = r.next.next; m !== r.prev;) {
                        if (Ed(p.x, p.y, q.x, q.y, t.x, t.y, m.x, m.y) && 0 <= qa(m.prev, m, m.next)) {
                            r = !1;break a;
                        }m = m.next;
                    }r = !0;
                }if (r) b.push(k.i / c), b.push(a.i / c), b.push(n.i / c), Vc(a), h = a = n.next;else if (a = n, a === h) {
                    if (!g) Xc(Wc(a), b, c, d, e, f, 1);else if (1 === g) {
                        g = b;h = c;k = a;do {
                            n = k.prev, r = k.next.next, !xb(n, r) && xf(n, k, k.next, r) && Yc(n, r) && Yc(r, n) && (g.push(n.i / h), g.push(k.i / h), g.push(r.i / h), Vc(k), Vc(k.next), k = a = r), k = k.next;
                        } while (k !== a);a = k;Xc(a, b, c, d, e, f, 2);
                    } else if (2 === g) a: {
                        g = a;do {
                            for (h = g.next.next; h !== g.prev;) {
                                if (k = g.i !== h.i) {
                                    k = g;n = h;if (r = k.next.i !== n.i && k.prev.i !== n.i) {
                                        b: {
                                            r = k;do {
                                                if (r.i !== k.i && r.next.i !== k.i && r.i !== n.i && r.next.i !== n.i && xf(r, r.next, k, n)) {
                                                    r = !0;break b;
                                                }r = r.next;
                                            } while (r !== k);r = !1;
                                        }r = !r;
                                    }if (r = r && Yc(k, n) && Yc(n, k)) {
                                        r = k;p = !1;q = (k.x + n.x) / 2;n = (k.y + n.y) / 2;do {
                                            r.y > n !== r.next.y > n && r.next.y !== r.y && q < (r.next.x - r.x) * (n - r.y) / (r.next.y - r.y) + r.x && (p = !p), r = r.next;
                                        } while (r !== k);r = p;
                                    }k = r;
                                }if (k) {
                                    a = yf(g, h);g = Wc(g, g.next);a = Wc(a, a.next);Xc(g, b, c, d, e, f);Xc(a, b, c, d, e, f);break a;
                                }h = h.next;
                            }g = g.next;
                        } while (g !== a);
                    }break;
                }
            }
        }
    }function dh(a, b) {
        return a.x - b.x;
    }function eh(a, b) {
        var c = b,
            d = a.x,
            e = a.y,
            f = -Infinity;do {
            if (e <= c.y && e >= c.next.y && c.next.y !== c.y) {
                var g = c.x + (e - c.y) * (c.next.x - c.x) / (c.next.y - c.y);if (g <= d && g > f) {
                    f = g;if (g === d) {
                        if (e === c.y) return c;if (e === c.next.y) return c.next;
                    }var h = c.x < c.next.x ? c : c.next;
                }
            }c = c.next;
        } while (c !== b);if (!h) return null;if (d === f) return h.prev;b = h;g = h.x;var k = h.y,
            m = Infinity;for (c = h.next; c !== b;) {
            if (d >= c.x && c.x >= g && d !== c.x && Ed(e < k ? d : f, e, g, k, e < k ? f : d, e, c.x, c.y)) {
                var p = Math.abs(e - c.y) / (d - c.x);(p < m || p === m && c.x > h.x) && Yc(c, a) && (h = c, m = p);
            }c = c.next;
        }return h;
    }function le(a, b, c, d, e) {
        a = 32767 * (a - c) * e;b = 32767 * (b - d) * e;a = (a | a << 8) & 16711935;a = (a | a << 4) & 252645135;a = (a | a << 2) & 858993459;b = (b | b << 8) & 16711935;b = (b | b << 4) & 252645135;b = (b | b << 2) & 858993459;return (a | a << 1) & 1431655765 | ((b | b << 1) & 1431655765) << 1;
    }function fh(a) {
        var b = a,
            c = a;do {
            b.x < c.x && (c = b), b = b.next;
        } while (b !== a);return c;
    }function Ed(a, b, c, d, e, f, g, h) {
        return 0 <= (e - g) * (b - h) - (a - g) * (f - h) && 0 <= (a - g) * (d - h) - (c - g) * (b - h) && 0 <= (c - g) * (f - h) - (e - g) * (d - h);
    }function qa(a, b, c) {
        return (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);
    }function xb(a, b) {
        return a.x === b.x && a.y === b.y;
    }function xf(a, b, c, d) {
        return xb(a, b) && xb(c, d) || xb(a, d) && xb(c, b) ? !0 : 0 < qa(a, b, c) !== 0 < qa(a, b, d) && 0 < qa(c, d, a) !== 0 < qa(c, d, b);
    }function Yc(a, b) {
        return 0 > qa(a.prev, a, a.next) ? 0 <= qa(a, b, a.next) && 0 <= qa(a, a.prev, b) : 0 > qa(a, b, a.prev) || 0 > qa(a, a.next, b);
    }function yf(a, b) {
        var c = new me(a.i, a.x, a.y),
            d = new me(b.i, b.x, b.y),
            e = a.next,
            f = b.prev;a.next = b;b.prev = a;c.next = e;e.prev = c;d.next = c;c.prev = d;f.next = d;d.prev = f;return d;
    }function wf(a, b, c, d) {
        a = new me(a, b, c);d ? (a.next = d.next, a.prev = d, d.next.prev = a, d.next = a) : (a.prev = a, a.next = a);return a;
    }function Vc(a) {
        a.next.prev = a.prev;a.prev.next = a.next;a.prevZ && (a.prevZ.nextZ = a.nextZ);a.nextZ && (a.nextZ.prevZ = a.prevZ);
    }function me(a, b, c) {
        this.i = a;this.x = b;this.y = c;this.nextZ = this.prevZ = this.z = this.next = this.prev = null;this.steiner = !1;
    }function zf(a) {
        var b = a.length;2 < b && a[b - 1].equals(a[0]) && a.pop();
    }function Af(a, b) {
        for (var c = 0; c < b.length; c++) {
            a.push(b[c].x), a.push(b[c].y);
        }
    }function yb(a, b) {
        G.call(this);this.type = "ExtrudeGeometry";this.parameters = { shapes: a, options: b };this.fromBufferGeometry(new Wa(a, b));this.mergeVertices();
    }function Wa(a, b) {
        function c(a) {
            function c(a, b, c) {
                b || console.error("THREE.ExtrudeGeometry: vec does not exist");return b.clone().multiplyScalar(c).add(a);
            }
            function g(a, b, c) {
                var d = a.x - b.x;var e = a.y - b.y;var f = c.x - a.x;var g = c.y - a.y,
                    h = d * d + e * e;if (Math.abs(d * g - e * f) > Number.EPSILON) {
                    var k = Math.sqrt(h),
                        m = Math.sqrt(f * f + g * g);h = b.x - e / k;b = b.y + d / k;g = ((c.x - g / m - h) * g - (c.y + f / m - b) * f) / (d * g - e * f);f = h + d * g - a.x;d = b + e * g - a.y;e = f * f + d * d;if (2 >= e) return new B(f, d);e = Math.sqrt(e / 2);
                } else a = !1, d > Number.EPSILON ? f > Number.EPSILON && (a = !0) : d < -Number.EPSILON ? f < -Number.EPSILON && (a = !0) : Math.sign(e) === Math.sign(g) && (a = !0), a ? (f = -e, e = Math.sqrt(h)) : (f = d, d = e, e = Math.sqrt(h / 2));return new B(f / e, d / e);
            }function h(a, b) {
                for (N = a.length; 0 <= --N;) {
                    var c = N;var f = N - 1;0 > f && (f = a.length - 1);var g,
                        h = x + 2 * A;for (g = 0; g < h; g++) {
                        var k = W * g,
                            m = W * (g + 1),
                            p = b + f + k,
                            q = b + f + m;m = b + c + m;r(b + c + k);r(p);r(m);r(p);r(q);r(m);k = e.length / 3;k = F.generateSideWallUV(d, e, k - 6, k - 3, k - 2, k - 1);u(k[0]);u(k[1]);u(k[3]);u(k[1]);u(k[2]);u(k[3]);
                    }
                }
            }function k(a, b, c) {
                w.push(a);w.push(b);w.push(c);
            }function l(a, b, c) {
                r(a);r(b);r(c);a = e.length / 3;a = F.generateTopUV(d, e, a - 3, a - 2, a - 1);u(a[0]);u(a[1]);u(a[2]);
            }function r(a) {
                e.push(w[3 * a]);e.push(w[3 * a + 1]);e.push(w[3 * a + 2]);
            }function u(a) {
                f.push(a.x);f.push(a.y);
            }var w = [],
                z = void 0 !== b.curveSegments ? b.curveSegments : 12,
                x = void 0 !== b.steps ? b.steps : 1,
                C = void 0 !== b.depth ? b.depth : 100,
                y = void 0 !== b.bevelEnabled ? b.bevelEnabled : !0,
                Q = void 0 !== b.bevelThickness ? b.bevelThickness : 6,
                fa = void 0 !== b.bevelSize ? b.bevelSize : Q - 2,
                A = void 0 !== b.bevelSegments ? b.bevelSegments : 3,
                D = b.extrudePath,
                F = void 0 !== b.UVGenerator ? b.UVGenerator : gh;void 0 !== b.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), C = b.amount);
            var E = !1;if (D) {
                var X = D.getSpacedPoints(x);E = !0;y = !1;var G = D.computeFrenetFrames(x, !1);var I = new n();var K = new n();var L = new n();
            }y || (fa = Q = A = 0);var J;z = a.extractPoints(z);a = z.shape;var M = z.holes;if (!ab.isClockWise(a)) {
                a = a.reverse();var H = 0;for (J = M.length; H < J; H++) {
                    var P = M[H];ab.isClockWise(P) && (M[H] = P.reverse());
                }
            }var V = ab.triangulateShape(a, M),
                S = a;H = 0;for (J = M.length; H < J; H++) {
                P = M[H], a = a.concat(P);
            }var R,
                W = a.length,
                U,
                ba = V.length;z = [];var N = 0;var T = S.length;var ea = T - 1;for (R = N + 1; N < T; N++, ea++, R++) {
                ea === T && (ea = 0), R === T && (R = 0), z[N] = g(S[N], S[ea], S[R]);
            }D = [];var da = z.concat();H = 0;for (J = M.length; H < J; H++) {
                P = M[H];var aa = [];N = 0;T = P.length;ea = T - 1;for (R = N + 1; N < T; N++, ea++, R++) {
                    ea === T && (ea = 0), R === T && (R = 0), aa[N] = g(P[N], P[ea], P[R]);
                }D.push(aa);da = da.concat(aa);
            }for (ea = 0; ea < A; ea++) {
                T = ea / A;var ca = Q * Math.cos(T * Math.PI / 2);R = fa * Math.sin(T * Math.PI / 2);N = 0;for (T = S.length; N < T; N++) {
                    var Y = c(S[N], z[N], R);k(Y.x, Y.y, -ca);
                }H = 0;for (J = M.length; H < J; H++) {
                    for (P = M[H], aa = D[H], N = 0, T = P.length; N < T; N++) {
                        Y = c(P[N], aa[N], R), k(Y.x, Y.y, -ca);
                    }
                }
            }R = fa;for (N = 0; N < W; N++) {
                Y = y ? c(a[N], da[N], R) : a[N], E ? (K.copy(G.normals[0]).multiplyScalar(Y.x), I.copy(G.binormals[0]).multiplyScalar(Y.y), L.copy(X[0]).add(K).add(I), k(L.x, L.y, L.z)) : k(Y.x, Y.y, 0);
            }for (T = 1; T <= x; T++) {
                for (N = 0; N < W; N++) {
                    Y = y ? c(a[N], da[N], R) : a[N], E ? (K.copy(G.normals[T]).multiplyScalar(Y.x), I.copy(G.binormals[T]).multiplyScalar(Y.y), L.copy(X[T]).add(K).add(I), k(L.x, L.y, L.z)) : k(Y.x, Y.y, C / x * T);
                }
            }for (ea = A - 1; 0 <= ea; ea--) {
                T = ea / A;ca = Q * Math.cos(T * Math.PI / 2);R = fa * Math.sin(T * Math.PI / 2);N = 0;for (T = S.length; N < T; N++) {
                    Y = c(S[N], z[N], R), k(Y.x, Y.y, C + ca);
                }H = 0;for (J = M.length; H < J; H++) {
                    for (P = M[H], aa = D[H], N = 0, T = P.length; N < T; N++) {
                        Y = c(P[N], aa[N], R), E ? k(Y.x, Y.y + X[x - 1].y, X[x - 1].x + ca) : k(Y.x, Y.y, C + ca);
                    }
                }
            }(function () {
                var a = e.length / 3;if (y) {
                    var b = 0 * W;for (N = 0; N < ba; N++) {
                        U = V[N], l(U[2] + b, U[1] + b, U[0] + b);
                    }b = W * (x + 2 * A);for (N = 0; N < ba; N++) {
                        U = V[N], l(U[0] + b, U[1] + b, U[2] + b);
                    }
                } else {
                    for (N = 0; N < ba; N++) {
                        U = V[N], l(U[2], U[1], U[0]);
                    }for (N = 0; N < ba; N++) {
                        U = V[N], l(U[0] + W * x, U[1] + W * x, U[2] + W * x);
                    }
                }d.addGroup(a, e.length / 3 - a, 0);
            })();(function () {
                var a = e.length / 3,
                    b = 0;h(S, b);b += S.length;H = 0;for (J = M.length; H < J; H++) {
                    P = M[H], h(P, b), b += P.length;
                }d.addGroup(a, e.length / 3 - a, 1);
            })();
        }D.call(this);this.type = "ExtrudeBufferGeometry";this.parameters = { shapes: a, options: b };a = Array.isArray(a) ? a : [a];for (var d = this, e = [], f = [], g = 0, h = a.length; g < h; g++) {
            c(a[g]);
        }this.addAttribute("position", new F(e, 3));this.addAttribute("uv", new F(f, 2));this.computeVertexNormals();
    }function Bf(a, b, c) {
        c.shapes = [];if (Array.isArray(a)) for (var d = 0, e = a.length; d < e; d++) {
            c.shapes.push(a[d].uuid);
        } else c.shapes.push(a.uuid);void 0 !== b.extrudePath && (c.options.extrudePath = b.extrudePath.toJSON());return c;
    }function Zc(a, b) {
        G.call(this);this.type = "TextGeometry";this.parameters = { text: a, parameters: b };this.fromBufferGeometry(new dc(a, b));this.mergeVertices();
    }function dc(a, b) {
        b = b || {};var c = b.font;if (!c || !c.isFont) return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new G();a = c.generateShapes(a, b.size);b.depth = void 0 !== b.height ? b.height : 50;void 0 === b.bevelThickness && (b.bevelThickness = 10);void 0 === b.bevelSize && (b.bevelSize = 8);void 0 === b.bevelEnabled && (b.bevelEnabled = !1);Wa.call(this, a, b);this.type = "TextBufferGeometry";
    }function $c(a, b, c, d, e, f, g) {
        G.call(this);this.type = "SphereGeometry";this.parameters = { radius: a, widthSegments: b, heightSegments: c, phiStart: d, phiLength: e, thetaStart: f, thetaLength: g };this.fromBufferGeometry(new zb(a, b, c, d, e, f, g));this.mergeVertices();
    }function zb(a, b, c, d, e, f, g) {
        D.call(this);this.type = "SphereBufferGeometry";this.parameters = { radius: a, widthSegments: b, heightSegments: c, phiStart: d, phiLength: e, thetaStart: f,
            thetaLength: g };a = a || 1;b = Math.max(3, Math.floor(b) || 8);c = Math.max(2, Math.floor(c) || 6);d = void 0 !== d ? d : 0;e = void 0 !== e ? e : 2 * Math.PI;f = void 0 !== f ? f : 0;g = void 0 !== g ? g : Math.PI;var h = f + g,
            k,
            m,
            p = 0,
            q = [],
            l = new n(),
            t = new n(),
            r = [],
            u = [],
            w = [],
            z = [];for (m = 0; m <= c; m++) {
            var x = [],
                C = m / c;for (k = 0; k <= b; k++) {
                var y = k / b;l.x = -a * Math.cos(d + y * e) * Math.sin(f + C * g);l.y = a * Math.cos(f + C * g);l.z = a * Math.sin(d + y * e) * Math.sin(f + C * g);u.push(l.x, l.y, l.z);t.set(l.x, l.y, l.z).normalize();w.push(t.x, t.y, t.z);z.push(y, 1 - C);x.push(p++);
            }q.push(x);
        }for (m = 0; m < c; m++) {
            for (k = 0; k < b; k++) {
                a = q[m][k + 1], d = q[m][k], e = q[m + 1][k], g = q[m + 1][k + 1], (0 !== m || 0 < f) && r.push(a, d, g), (m !== c - 1 || h < Math.PI) && r.push(d, e, g);
            }
        }this.setIndex(r);this.addAttribute("position", new F(u, 3));this.addAttribute("normal", new F(w, 3));this.addAttribute("uv", new F(z, 2));
    }function ad(a, b, c, d, e, f) {
        G.call(this);this.type = "RingGeometry";this.parameters = { innerRadius: a, outerRadius: b, thetaSegments: c, phiSegments: d, thetaStart: e, thetaLength: f };this.fromBufferGeometry(new ec(a, b, c, d, e, f));this.mergeVertices();
    }function ec(a, b, c, d, e, f) {
        D.call(this);this.type = "RingBufferGeometry";this.parameters = { innerRadius: a, outerRadius: b, thetaSegments: c, phiSegments: d, thetaStart: e, thetaLength: f };a = a || .5;b = b || 1;e = void 0 !== e ? e : 0;f = void 0 !== f ? f : 2 * Math.PI;c = void 0 !== c ? Math.max(3, c) : 8;d = void 0 !== d ? Math.max(1, d) : 1;var g = [],
            h = [],
            k = [],
            m = [],
            p = a,
            l = (b - a) / d,
            v = new n(),
            t = new B(),
            r,
            u;for (r = 0; r <= d; r++) {
            for (u = 0; u <= c; u++) {
                a = e + u / c * f, v.x = p * Math.cos(a), v.y = p * Math.sin(a), h.push(v.x, v.y, v.z), k.push(0, 0, 1), t.x = (v.x / b + 1) / 2, t.y = (v.y / b + 1) / 2, m.push(t.x, t.y);
            }p += l;
        }for (r = 0; r < d; r++) {
            for (b = r * (c + 1), u = 0; u < c; u++) {
                a = u + b, e = a + c + 1, f = a + c + 2, p = a + 1, g.push(a, e, p), g.push(e, f, p);
            }
        }this.setIndex(g);this.addAttribute("position", new F(h, 3));this.addAttribute("normal", new F(k, 3));this.addAttribute("uv", new F(m, 2));
    }function bd(a, b, c, d) {
        G.call(this);this.type = "LatheGeometry";this.parameters = { points: a, segments: b, phiStart: c, phiLength: d };this.fromBufferGeometry(new fc(a, b, c, d));this.mergeVertices();
    }function fc(a, b, c, d) {
        D.call(this);this.type = "LatheBufferGeometry";this.parameters = { points: a, segments: b,
            phiStart: c, phiLength: d };b = Math.floor(b) || 12;c = c || 0;d = d || 2 * Math.PI;d = H.clamp(d, 0, 2 * Math.PI);var e = [],
            f = [],
            g = [],
            h = 1 / b,
            k = new n(),
            m = new B(),
            p;for (p = 0; p <= b; p++) {
            var l = c + p * h * d;var v = Math.sin(l),
                t = Math.cos(l);for (l = 0; l <= a.length - 1; l++) {
                k.x = a[l].x * v, k.y = a[l].y, k.z = a[l].x * t, f.push(k.x, k.y, k.z), m.x = p / b, m.y = l / (a.length - 1), g.push(m.x, m.y);
            }
        }for (p = 0; p < b; p++) {
            for (l = 0; l < a.length - 1; l++) {
                c = l + p * a.length, h = c + a.length, k = c + a.length + 1, m = c + 1, e.push(c, h, m), e.push(h, k, m);
            }
        }this.setIndex(e);this.addAttribute("position", new F(f, 3));this.addAttribute("uv", new F(g, 2));this.computeVertexNormals();if (d === 2 * Math.PI) for (d = this.attributes.normal.array, e = new n(), f = new n(), g = new n(), c = b * a.length * 3, l = p = 0; p < a.length; p++, l += 3) {
            e.x = d[l + 0], e.y = d[l + 1], e.z = d[l + 2], f.x = d[c + l + 0], f.y = d[c + l + 1], f.z = d[c + l + 2], g.addVectors(e, f).normalize(), d[l + 0] = d[c + l + 0] = g.x, d[l + 1] = d[c + l + 1] = g.y, d[l + 2] = d[c + l + 2] = g.z;
        }
    }function Ab(a, b) {
        G.call(this);this.type = "ShapeGeometry";"object" === (typeof b === "undefined" ? "undefined" : _typeof(b)) && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), b = b.curveSegments);this.parameters = { shapes: a, curveSegments: b };this.fromBufferGeometry(new Bb(a, b));this.mergeVertices();
    }function Bb(a, b) {
        function c(a) {
            var c,
                h = e.length / 3;a = a.extractPoints(b);var m = a.shape,
                p = a.holes;!1 === ab.isClockWise(m) && (m = m.reverse());a = 0;for (c = p.length; a < c; a++) {
                var l = p[a];!0 === ab.isClockWise(l) && (p[a] = l.reverse());
            }var n = ab.triangulateShape(m, p);a = 0;for (c = p.length; a < c; a++) {
                l = p[a], m = m.concat(l);
            }a = 0;for (c = m.length; a < c; a++) {
                l = m[a], e.push(l.x, l.y, 0), f.push(0, 0, 1), g.push(l.x, l.y);
            }a = 0;for (c = n.length; a < c; a++) {
                m = n[a], d.push(m[0] + h, m[1] + h, m[2] + h), k += 3;
            }
        }D.call(this);this.type = "ShapeBufferGeometry";this.parameters = { shapes: a, curveSegments: b };b = b || 12;var d = [],
            e = [],
            f = [],
            g = [],
            h = 0,
            k = 0;if (!1 === Array.isArray(a)) c(a);else for (var m = 0; m < a.length; m++) {
            c(a[m]), this.addGroup(h, k, m), h += k, k = 0;
        }this.setIndex(d);this.addAttribute("position", new F(e, 3));this.addAttribute("normal", new F(f, 3));this.addAttribute("uv", new F(g, 2));
    }function Cf(a, b) {
        b.shapes = [];if (Array.isArray(a)) for (var c = 0, d = a.length; c < d; c++) {
            b.shapes.push(a[c].uuid);
        } else b.shapes.push(a.uuid);
        return b;
    }function gc(a, b) {
        D.call(this);this.type = "EdgesGeometry";this.parameters = { thresholdAngle: b };var c = [];b = Math.cos(H.DEG2RAD * (void 0 !== b ? b : 1));var d = [0, 0],
            e = {},
            f = ["a", "b", "c"];if (a.isBufferGeometry) {
            var g = new G();g.fromBufferGeometry(a);
        } else g = a.clone();g.mergeVertices();g.computeFaceNormals();a = g.vertices;g = g.faces;for (var h = 0, k = g.length; h < k; h++) {
            for (var m = g[h], p = 0; 3 > p; p++) {
                var l = m[f[p]];var n = m[f[(p + 1) % 3]];d[0] = Math.min(l, n);d[1] = Math.max(l, n);l = d[0] + "," + d[1];void 0 === e[l] ? e[l] = { index1: d[0], index2: d[1],
                    face1: h, face2: void 0 } : e[l].face2 = h;
            }
        }for (l in e) {
            if (d = e[l], void 0 === d.face2 || g[d.face1].normal.dot(g[d.face2].normal) <= b) f = a[d.index1], c.push(f.x, f.y, f.z), f = a[d.index2], c.push(f.x, f.y, f.z);
        }this.addAttribute("position", new F(c, 3));
    }function Cb(a, b, c, d, e, f, g, h) {
        G.call(this);this.type = "CylinderGeometry";this.parameters = { radiusTop: a, radiusBottom: b, height: c, radialSegments: d, heightSegments: e, openEnded: f, thetaStart: g, thetaLength: h };this.fromBufferGeometry(new bb(a, b, c, d, e, f, g, h));this.mergeVertices();
    }function bb(a, b, c, d, e, f, g, h) {
        function k(c) {
            var e,
                f = new B(),
                k = new n(),
                q = 0,
                u = !0 === c ? a : b,
                x = !0 === c ? 1 : -1;var D = r;for (e = 1; e <= d; e++) {
                l.push(0, w * x, 0), v.push(0, x, 0), t.push(.5, .5), r++;
            }var E = r;for (e = 0; e <= d; e++) {
                var F = e / d * h + g,
                    H = Math.cos(F);F = Math.sin(F);k.x = u * F;k.y = w * x;k.z = u * H;l.push(k.x, k.y, k.z);v.push(0, x, 0);f.x = .5 * H + .5;f.y = .5 * F * x + .5;t.push(f.x, f.y);r++;
            }for (e = 0; e < d; e++) {
                f = D + e, k = E + e, !0 === c ? p.push(k, k + 1, f) : p.push(k + 1, k, f), q += 3;
            }m.addGroup(z, q, !0 === c ? 1 : 2);z += q;
        }D.call(this);this.type = "CylinderBufferGeometry";this.parameters = { radiusTop: a,
            radiusBottom: b, height: c, radialSegments: d, heightSegments: e, openEnded: f, thetaStart: g, thetaLength: h };var m = this;a = void 0 !== a ? a : 1;b = void 0 !== b ? b : 1;c = c || 1;d = Math.floor(d) || 8;e = Math.floor(e) || 1;f = void 0 !== f ? f : !1;g = void 0 !== g ? g : 0;h = void 0 !== h ? h : 2 * Math.PI;var p = [],
            l = [],
            v = [],
            t = [],
            r = 0,
            u = [],
            w = c / 2,
            z = 0;(function () {
            var f,
                k,
                q = new n(),
                Q = new n(),
                B = 0,
                A = (b - a) / c;for (k = 0; k <= e; k++) {
                var D = [],
                    F = k / e,
                    E = F * (b - a) + a;for (f = 0; f <= d; f++) {
                    var H = f / d,
                        G = H * h + g,
                        I = Math.sin(G);G = Math.cos(G);Q.x = E * I;Q.y = -F * c + w;Q.z = E * G;l.push(Q.x, Q.y, Q.z);q.set(I, A, G).normalize();v.push(q.x, q.y, q.z);t.push(H, 1 - F);D.push(r++);
                }u.push(D);
            }for (f = 0; f < d; f++) {
                for (k = 0; k < e; k++) {
                    q = u[k + 1][f], Q = u[k + 1][f + 1], A = u[k][f + 1], p.push(u[k][f], q, A), p.push(q, Q, A), B += 6;
                }
            }m.addGroup(z, B, 0);z += B;
        })();!1 === f && (0 < a && k(!0), 0 < b && k(!1));this.setIndex(p);this.addAttribute("position", new F(l, 3));this.addAttribute("normal", new F(v, 3));this.addAttribute("uv", new F(t, 2));
    }function cd(a, b, c, d, e, f, g) {
        Cb.call(this, 0, a, b, c, d, e, f, g);this.type = "ConeGeometry";this.parameters = { radius: a, height: b, radialSegments: c,
            heightSegments: d, openEnded: e, thetaStart: f, thetaLength: g };
    }function dd(a, b, c, d, e, f, g) {
        bb.call(this, 0, a, b, c, d, e, f, g);this.type = "ConeBufferGeometry";this.parameters = { radius: a, height: b, radialSegments: c, heightSegments: d, openEnded: e, thetaStart: f, thetaLength: g };
    }function ed(a, b, c, d) {
        G.call(this);this.type = "CircleGeometry";this.parameters = { radius: a, segments: b, thetaStart: c, thetaLength: d };this.fromBufferGeometry(new hc(a, b, c, d));this.mergeVertices();
    }function hc(a, b, c, d) {
        D.call(this);this.type = "CircleBufferGeometry";
        this.parameters = { radius: a, segments: b, thetaStart: c, thetaLength: d };a = a || 1;b = void 0 !== b ? Math.max(3, b) : 8;c = void 0 !== c ? c : 0;d = void 0 !== d ? d : 2 * Math.PI;var e = [],
            f = [],
            g = [],
            h = [],
            k,
            m = new n(),
            p = new B();f.push(0, 0, 0);g.push(0, 0, 1);h.push(.5, .5);var l = 0;for (k = 3; l <= b; l++, k += 3) {
            var v = c + l / b * d;m.x = a * Math.cos(v);m.y = a * Math.sin(v);f.push(m.x, m.y, m.z);g.push(0, 0, 1);p.x = (f[k] / a + 1) / 2;p.y = (f[k + 1] / a + 1) / 2;h.push(p.x, p.y);
        }for (k = 1; k <= b; k++) {
            e.push(k, k + 1, 0);
        }this.setIndex(e);this.addAttribute("position", new F(f, 3));this.addAttribute("normal", new F(g, 3));this.addAttribute("uv", new F(h, 2));
    }function Db(a) {
        M.call(this);this.type = "ShadowMaterial";this.color = new K(0);this.transparent = !0;this.setValues(a);
    }function ic(a) {
        Ca.call(this, a);this.type = "RawShaderMaterial";
    }function Xa(a) {
        M.call(this);this.defines = { STANDARD: "" };this.type = "MeshStandardMaterial";this.color = new K(16777215);this.metalness = this.roughness = .5;this.lightMap = this.map = null;this.lightMapIntensity = 1;this.aoMap = null;this.aoMapIntensity = 1;this.emissive = new K(0);this.emissiveIntensity = 1;this.bumpMap = this.emissiveMap = null;this.bumpScale = 1;this.normalMap = null;this.normalMapType = 0;this.normalScale = new B(1, 1);this.displacementMap = null;this.displacementScale = 1;this.displacementBias = 0;this.envMap = this.alphaMap = this.metalnessMap = this.roughnessMap = null;this.envMapIntensity = 1;this.refractionRatio = .98;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
    }function Eb(a) {
        Xa.call(this);
        this.defines = { PHYSICAL: "" };this.type = "MeshPhysicalMaterial";this.reflectivity = .5;this.clearCoatRoughness = this.clearCoat = 0;this.setValues(a);
    }function Ka(a) {
        M.call(this);this.type = "MeshPhongMaterial";this.color = new K(16777215);this.specular = new K(1118481);this.shininess = 30;this.lightMap = this.map = null;this.lightMapIntensity = 1;this.aoMap = null;this.aoMapIntensity = 1;this.emissive = new K(0);this.emissiveIntensity = 1;this.bumpMap = this.emissiveMap = null;this.bumpScale = 1;this.normalMap = null;this.normalMapType = 0;this.normalScale = new B(1, 1);this.displacementMap = null;this.displacementScale = 1;this.displacementBias = 0;this.envMap = this.alphaMap = this.specularMap = null;this.combine = 0;this.reflectivity = 1;this.refractionRatio = .98;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
    }function Fb(a) {
        Ka.call(this);this.defines = { TOON: "" };this.type = "MeshToonMaterial";this.gradientMap = null;this.setValues(a);
    }
    function Gb(a) {
        M.call(this);this.type = "MeshNormalMaterial";this.bumpMap = null;this.bumpScale = 1;this.normalMap = null;this.normalMapType = 0;this.normalScale = new B(1, 1);this.displacementMap = null;this.displacementScale = 1;this.displacementBias = 0;this.wireframe = !1;this.wireframeLinewidth = 1;this.morphNormals = this.morphTargets = this.skinning = this.lights = this.fog = !1;this.setValues(a);
    }function Hb(a) {
        M.call(this);this.type = "MeshLambertMaterial";this.color = new K(16777215);this.lightMap = this.map = null;this.lightMapIntensity = 1;this.aoMap = null;this.aoMapIntensity = 1;this.emissive = new K(0);this.emissiveIntensity = 1;this.envMap = this.alphaMap = this.specularMap = this.emissiveMap = null;this.combine = 0;this.reflectivity = 1;this.refractionRatio = .98;this.wireframe = !1;this.wireframeLinewidth = 1;this.wireframeLinejoin = this.wireframeLinecap = "round";this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
    }function Ib(a) {
        M.call(this);this.defines = { MATCAP: "" };this.type = "MeshMatcapMaterial";this.color = new K(16777215);this.bumpMap = this.map = this.matcap = null;this.bumpScale = 1;this.normalMap = null;this.normalMapType = 0;this.normalScale = new B(1, 1);this.displacementMap = null;this.displacementScale = 1;this.displacementBias = 0;this.alphaMap = null;this.lights = this.morphNormals = this.morphTargets = this.skinning = !1;this.setValues(a);
    }function Jb(a) {
        R.call(this);this.type = "LineDashedMaterial";this.scale = 1;this.dashSize = 3;this.gapSize = 1;this.setValues(a);
    }function wa(a, b, c, d) {
        this.parameterPositions = a;this._cachedIndex = 0;this.resultBuffer = void 0 !== d ? d : new b.constructor(c);this.sampleValues = b;this.valueSize = c;
    }function Fd(a, b, c, d) {
        wa.call(this, a, b, c, d);this._offsetNext = this._weightNext = this._offsetPrev = this._weightPrev = -0;
    }function fd(a, b, c, d) {
        wa.call(this, a, b, c, d);
    }function Gd(a, b, c, d) {
        wa.call(this, a, b, c, d);
    }function ra(a, b, c, d) {
        if (void 0 === a) throw Error("THREE.KeyframeTrack: track name is undefined");if (void 0 === b || 0 === b.length) throw Error("THREE.KeyframeTrack: no keyframes in track named " + a);this.name = a;this.times = sa.convertArray(b, this.TimeBufferType);
        this.values = sa.convertArray(c, this.ValueBufferType);this.setInterpolation(d || this.DefaultInterpolation);
    }function Hd(a, b, c) {
        ra.call(this, a, b, c);
    }function Id(a, b, c, d) {
        ra.call(this, a, b, c, d);
    }function jc(a, b, c, d) {
        ra.call(this, a, b, c, d);
    }function Jd(a, b, c, d) {
        wa.call(this, a, b, c, d);
    }function gd(a, b, c, d) {
        ra.call(this, a, b, c, d);
    }function Kd(a, b, c, d) {
        ra.call(this, a, b, c, d);
    }function kc(a, b, c, d) {
        ra.call(this, a, b, c, d);
    }function Ga(a, b, c) {
        this.name = a;this.tracks = c;this.duration = void 0 !== b ? b : -1;this.uuid = H.generateUUID();
        0 > this.duration && this.resetDuration();
    }function hh(a) {
        switch (a.toLowerCase()) {case "scalar":case "double":case "float":case "number":case "integer":
                return jc;case "vector":case "vector2":case "vector3":case "vector4":
                return kc;case "color":
                return Id;case "quaternion":
                return gd;case "bool":case "boolean":
                return Hd;case "string":
                return Kd;}throw Error("THREE.KeyframeTrack: Unsupported typeName: " + a);
    }function ih(a) {
        if (void 0 === a.type) throw Error("THREE.KeyframeTrack: track type undefined, can not parse");
        var b = hh(a.type);if (void 0 === a.times) {
            var c = [],
                d = [];sa.flattenJSON(a.keys, c, d, "value");a.times = c;a.values = d;
        }return void 0 !== b.parse ? b.parse(a) : new b(a.name, a.times, a.values, a.interpolation);
    }function ne(a, b, c) {
        var d = this,
            e = !1,
            f = 0,
            g = 0,
            h = void 0;this.onStart = void 0;this.onLoad = a;this.onProgress = b;this.onError = c;this.itemStart = function (a) {
            g++;if (!1 === e && void 0 !== d.onStart) d.onStart(a, f, g);e = !0;
        };this.itemEnd = function (a) {
            f++;if (void 0 !== d.onProgress) d.onProgress(a, f, g);if (f === g && (e = !1, void 0 !== d.onLoad)) d.onLoad();
        };
        this.itemError = function (a) {
            if (void 0 !== d.onError) d.onError(a);
        };this.resolveURL = function (a) {
            return h ? h(a) : a;
        };this.setURLModifier = function (a) {
            h = a;return this;
        };
    }function La(a) {
        this.manager = void 0 !== a ? a : Ba;
    }function Df(a) {
        this.manager = void 0 !== a ? a : Ba;
    }function Ef(a) {
        this.manager = void 0 !== a ? a : Ba;this._parser = null;
    }function oe(a) {
        this.manager = void 0 !== a ? a : Ba;this._parser = null;
    }function hd(a) {
        this.manager = void 0 !== a ? a : Ba;
    }function pe(a) {
        this.manager = void 0 !== a ? a : Ba;
    }function Ld(a) {
        this.manager = void 0 !== a ? a : Ba;
    }
    function L() {
        this.type = "Curve";this.arcLengthDivisions = 200;
    }function Ea(a, b, c, d, e, f, g, h) {
        L.call(this);this.type = "EllipseCurve";this.aX = a || 0;this.aY = b || 0;this.xRadius = c || 1;this.yRadius = d || 1;this.aStartAngle = e || 0;this.aEndAngle = f || 2 * Math.PI;this.aClockwise = g || !1;this.aRotation = h || 0;
    }function lc(a, b, c, d, e, f) {
        Ea.call(this, a, b, c, c, d, e, f);this.type = "ArcCurve";
    }function qe() {
        var a = 0,
            b = 0,
            c = 0,
            d = 0;return { initCatmullRom: function initCatmullRom(e, f, g, h, k) {
                e = k * (g - e);h = k * (h - f);a = f;b = e;c = -3 * f + 3 * g - 2 * e - h;d = 2 * f - 2 * g + e + h;
            }, initNonuniformCatmullRom: function initNonuniformCatmullRom(e, f, g, h, k, m, p) {
                e = ((f - e) / k - (g - e) / (k + m) + (g - f) / m) * m;h = ((g - f) / m - (h - f) / (m + p) + (h - g) / p) * m;a = f;b = e;c = -3 * f + 3 * g - 2 * e - h;d = 2 * f - 2 * g + e + h;
            }, calc: function calc(e) {
                var f = e * e;return a + b * e + c * f + d * f * e;
            } };
    }function oa(a, b, c, d) {
        L.call(this);this.type = "CatmullRomCurve3";this.points = a || [];this.closed = b || !1;this.curveType = c || "centripetal";this.tension = d || .5;
    }function Ff(a, b, c, d, e) {
        b = .5 * (d - b);e = .5 * (e - c);var f = a * a;return (2 * c - 2 * d + b + e) * a * f + (-3 * c + 3 * d - 2 * b - e) * f + b * a + c;
    }function id(a, b, c, d) {
        var e = 1 - a;return e * e * b + 2 * (1 - a) * a * c + a * a * d;
    }function jd(a, b, c, d, e) {
        var f = 1 - a,
            g = 1 - a;return f * f * f * b + 3 * g * g * a * c + 3 * (1 - a) * a * a * d + a * a * a * e;
    }function Ma(a, b, c, d) {
        L.call(this);this.type = "CubicBezierCurve";this.v0 = a || new B();this.v1 = b || new B();this.v2 = c || new B();this.v3 = d || new B();
    }function Ya(a, b, c, d) {
        L.call(this);this.type = "CubicBezierCurve3";this.v0 = a || new n();this.v1 = b || new n();this.v2 = c || new n();this.v3 = d || new n();
    }function ja(a, b) {
        L.call(this);this.type = "LineCurve";this.v1 = a || new B();this.v2 = b || new B();
    }function Na(a, b) {
        L.call(this);this.type = "LineCurve3";this.v1 = a || new n();this.v2 = b || new n();
    }function Oa(a, b, c) {
        L.call(this);this.type = "QuadraticBezierCurve";this.v0 = a || new B();this.v1 = b || new B();this.v2 = c || new B();
    }function Za(a, b, c) {
        L.call(this);this.type = "QuadraticBezierCurve3";this.v0 = a || new n();this.v1 = b || new n();this.v2 = c || new n();
    }function Pa(a) {
        L.call(this);this.type = "SplineCurve";this.points = a || [];
    }function cb() {
        L.call(this);this.type = "CurvePath";this.curves = [];this.autoClose = !1;
    }function Qa(a) {
        cb.call(this);this.type = "Path";this.currentPoint = new B();a && this.setFromPoints(a);
    }function kb(a) {
        Qa.call(this, a);this.uuid = H.generateUUID();this.type = "Shape";this.holes = [];
    }function ia(a, b) {
        E.call(this);this.type = "Light";this.color = new K(a);this.intensity = void 0 !== b ? b : 1;this.receiveShadow = void 0;
    }function Md(a, b, c) {
        ia.call(this, a, c);this.type = "HemisphereLight";this.castShadow = void 0;this.position.copy(E.DefaultUp);this.updateMatrix();this.groundColor = new K(b);
    }function Kb(a) {
        this.camera = a;this.bias = 0;this.radius = 1;this.mapSize = new B(512, 512);this.map = null;this.matrix = new J();
    }function Nd() {
        Kb.call(this, new U(50, 1, .5, 500));
    }function Od(a, b, c, d, e, f) {
        ia.call(this, a, b);this.type = "SpotLight";this.position.copy(E.DefaultUp);this.updateMatrix();this.target = new E();Object.defineProperty(this, "power", { get: function get$$1() {
                return this.intensity * Math.PI;
            }, set: function set$$1(a) {
                this.intensity = a / Math.PI;
            } });this.distance = void 0 !== c ? c : 0;this.angle = void 0 !== d ? d : Math.PI / 3;this.penumbra = void 0 !== e ? e : 0;this.decay = void 0 !== f ? f : 1;this.shadow = new Nd();
    }function Pd(a, b, c, d) {
        ia.call(this, a, b);this.type = "PointLight";Object.defineProperty(this, "power", { get: function get$$1() {
                return 4 * this.intensity * Math.PI;
            }, set: function set$$1(a) {
                this.intensity = a / (4 * Math.PI);
            } });this.distance = void 0 !== c ? c : 0;this.decay = void 0 !== d ? d : 1;this.shadow = new Kb(new U(90, 1, .5, 500));
    }function kd(a, b, c, d, e, f) {
        Va.call(this);this.type = "OrthographicCamera";this.zoom = 1;this.view = null;this.left = void 0 !== a ? a : -1;this.right = void 0 !== b ? b : 1;this.top = void 0 !== c ? c : 1;this.bottom = void 0 !== d ? d : -1;this.near = void 0 !== e ? e : .1;this.far = void 0 !== f ? f : 2E3;this.updateProjectionMatrix();
    }function Qd() {
        Kb.call(this, new kd(-5, 5, 5, -5, .5, 500));
    }function Rd(a, b) {
        ia.call(this, a, b);this.type = "DirectionalLight";this.position.copy(E.DefaultUp);this.updateMatrix();this.target = new E();this.shadow = new Qd();
    }function Sd(a, b) {
        ia.call(this, a, b);this.type = "AmbientLight";this.castShadow = void 0;
    }function Td(a, b, c, d) {
        ia.call(this, a, b);this.type = "RectAreaLight";this.width = void 0 !== c ? c : 10;this.height = void 0 !== d ? d : 10;
    }function Ud(a) {
        this.manager = void 0 !== a ? a : Ba;this.textures = {};
    }function re(a) {
        this.manager = void 0 !== a ? a : Ba;
    }function se(a) {
        this.manager = void 0 !== a ? a : Ba;this.resourcePath = "";
    }function te(a) {
        "undefined" === typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");"undefined" === typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported.");this.manager = void 0 !== a ? a : Ba;this.options = void 0;
    }function ue() {
        this.type = "ShapePath";this.color = new K();this.subPaths = [];this.currentPath = null;
    }function ve(a) {
        this.type = "Font";this.data = a;
    }function Gf(a) {
        this.manager = void 0 !== a ? a : Ba;
    }function ld() {}
    function we(a) {
        this.manager = void 0 !== a ? a : Ba;
    }function Hf() {
        this.type = "StereoCamera";this.aspect = 1;this.eyeSep = .064;this.cameraL = new U();this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate = !1;this.cameraR = new U();this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate = !1;
    }function md(a, b, c, d) {
        E.call(this);this.type = "CubeCamera";var e = new U(90, 1, a, b);e.up.set(0, -1, 0);e.lookAt(new n(1, 0, 0));this.add(e);var f = new U(90, 1, a, b);f.up.set(0, -1, 0);f.lookAt(new n(-1, 0, 0));this.add(f);var g = new U(90, 1, a, b);g.up.set(0, 0, 1);g.lookAt(new n(0, 1, 0));this.add(g);var h = new U(90, 1, a, b);h.up.set(0, 0, -1);h.lookAt(new n(0, -1, 0));this.add(h);var k = new U(90, 1, a, b);k.up.set(0, -1, 0);k.lookAt(new n(0, 0, 1));this.add(k);var m = new U(90, 1, a, b);m.up.set(0, -1, 0);m.lookAt(new n(0, 0, -1));this.add(m);d = d || { format: 1022, magFilter: 1006, minFilter: 1006 };this.renderTarget = new mb(c, c, d);this.renderTarget.texture.name = "CubeCamera";this.update = function (a, b) {
            null === this.parent && this.updateMatrixWorld();var c = a.getRenderTarget(),
                d = this.renderTarget,
                p = d.texture.generateMipmaps;d.texture.generateMipmaps = !1;a.setRenderTarget(d, 0);a.render(b, e);a.setRenderTarget(d, 1);a.render(b, f);a.setRenderTarget(d, 2);a.render(b, g);a.setRenderTarget(d, 3);a.render(b, h);a.setRenderTarget(d, 4);a.render(b, k);d.texture.generateMipmaps = p;a.setRenderTarget(d, 5);a.render(b, m);a.setRenderTarget(c);
        };this.clear = function (a, b, c, d) {
            for (var e = a.getRenderTarget(), f = this.renderTarget, g = 0; 6 > g; g++) {
                a.setRenderTarget(f, g), a.clear(b, c, d);
            }a.setRenderTarget(e);
        };
    }function xe(a) {
        this.autoStart = void 0 !== a ? a : !0;this.elapsedTime = this.oldTime = this.startTime = 0;this.running = !1;
    }function ye() {
        E.call(this);this.type = "AudioListener";this.context = ze.getContext();this.gain = this.context.createGain();this.gain.connect(this.context.destination);this.filter = null;this.timeDelta = 0;
    }function mc(a) {
        E.call(this);this.type = "Audio";this.listener = a;this.context = a.context;this.gain = this.context.createGain();this.gain.connect(a.getInput());this.autoplay = !1;this.buffer = null;this.detune = 0;this.loop = !1;this.offset = this.startTime = 0;this.playbackRate = 1;this.isPlaying = !1;this.hasPlaybackControl = !0;this.sourceType = "empty";this.filters = [];
    }function Ae(a) {
        mc.call(this, a);this.panner = this.context.createPanner();this.panner.connect(this.gain);
    }function Be(a, b) {
        this.analyser = a.context.createAnalyser();this.analyser.fftSize = void 0 !== b ? b : 2048;this.data = new Uint8Array(this.analyser.frequencyBinCount);a.getOutput().connect(this.analyser);
    }function Ce(a, b, c) {
        this.binding = a;this.valueSize = c;a = Float64Array;switch (b) {case "quaternion":
                b = this._slerp;break;case "string":case "bool":
                a = Array;b = this._select;break;default:
                b = this._lerp;}this.buffer = new a(4 * c);this._mixBufferRegion = b;this.referenceCount = this.useCount = this.cumulativeWeight = 0;
    }function If(a, b, c) {
        c = c || ma.parseTrackName(b);this._targetGroup = a;this._bindings = a.subscribe_(b, c);
    }function ma(a, b, c) {
        this.path = b;this.parsedPath = c || ma.parseTrackName(b);this.node = ma.findNode(a, this.parsedPath.nodeName) || a;this.rootNode = a;
    }function Jf() {
        this.uuid = H.generateUUID();this._objects = Array.prototype.slice.call(arguments);
        this.nCachedObjects_ = 0;var a = {};this._indicesByUUID = a;for (var b = 0, c = arguments.length; b !== c; ++b) {
            a[arguments[b].uuid] = b;
        }this._paths = [];this._parsedPaths = [];this._bindings = [];this._bindingsIndicesByPath = {};var d = this;this.stats = { objects: { get total() {
                    return d._objects.length;
                }, get inUse() {
                    return this.total - d.nCachedObjects_;
                } }, get bindingsPerObject() {
                return d._bindings.length;
            } };
    }function Kf(a, b, c) {
        this._mixer = a;this._clip = b;this._localRoot = c || null;a = b.tracks;b = a.length;c = Array(b);for (var d = { endingStart: 2400,
            endingEnd: 2400 }, e = 0; e !== b; ++e) {
            var f = a[e].createInterpolant(null);c[e] = f;f.settings = d;
        }this._interpolantSettings = d;this._interpolants = c;this._propertyBindings = Array(b);this._weightInterpolant = this._timeScaleInterpolant = this._byClipCacheIndex = this._cacheIndex = null;this.loop = 2201;this._loopCount = -1;this._startTime = null;this.time = 0;this._effectiveWeight = this.weight = this._effectiveTimeScale = this.timeScale = 1;this.repetitions = Infinity;this.paused = !1;this.enabled = !0;this.clampWhenFinished = !1;this.zeroSlopeAtEnd = this.zeroSlopeAtStart = !0;
    }function De(a) {
        this._root = a;this._initMemoryManager();this.time = this._accuIndex = 0;this.timeScale = 1;
    }function Vd(a, b) {
        "string" === typeof a && (console.warn("THREE.Uniform: Type parameter is no longer needed."), a = b);this.value = a;
    }function Ee() {
        D.call(this);this.type = "InstancedBufferGeometry";this.maxInstancedCount = void 0;
    }function Fe(a, b, c) {
        ub.call(this, a, b);this.meshPerAttribute = c || 1;
    }function Ge(a, b, c, d) {
        "number" === typeof c && (d = c, c = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));
        P.call(this, a, b, c);this.meshPerAttribute = d || 1;
    }function Lf(a, b, c, d) {
        this.ray = new tb(a, b);this.near = c || 0;this.far = d || Infinity;this.params = { Mesh: {}, Line: {}, LOD: {}, Points: { threshold: 1 }, Sprite: {} };Object.defineProperties(this.params, { PointCloud: { get: function get$$1() {
                    console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");return this.Points;
                } } });
    }function Mf(a, b) {
        return a.distance - b.distance;
    }function He(a, b, c, d) {
        if (!1 !== a.visible && (a.raycast(b, c), !0 === d)) {
            a = a.children;d = 0;for (var e = a.length; d < e; d++) {
                He(a[d], b, c, !0);
            }
        }
    }function Nf(a, b, c) {
        this.radius = void 0 !== a ? a : 1;this.phi = void 0 !== b ? b : 0;this.theta = void 0 !== c ? c : 0;return this;
    }function Of(a, b, c) {
        this.radius = void 0 !== a ? a : 1;this.theta = void 0 !== b ? b : 0;this.y = void 0 !== c ? c : 0;return this;
    }function Ie(a, b) {
        this.min = void 0 !== a ? a : new B(Infinity, Infinity);this.max = void 0 !== b ? b : new B(-Infinity, -Infinity);
    }function Je(a, b) {
        this.start = void 0 !== a ? a : new n();this.end = void 0 !== b ? b : new n();
    }function nd(a) {
        E.call(this);this.material = a;this.render = function () {};
    }
    function od(a, b, c, d) {
        this.object = a;this.size = void 0 !== b ? b : 1;a = void 0 !== c ? c : 16711680;d = void 0 !== d ? d : 1;b = 0;(c = this.object.geometry) && c.isGeometry ? b = 3 * c.faces.length : c && c.isBufferGeometry && (b = c.attributes.normal.count);c = new D();b = new F(6 * b, 3);c.addAttribute("position", b);W.call(this, c, new R({ color: a, linewidth: d }));this.matrixAutoUpdate = !1;this.update();
    }function nc(a, b) {
        E.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.color = b;a = new D();b = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];for (var c = 0, d = 1; 32 > c; c++, d++) {
            var e = c / 32 * Math.PI * 2,
                f = d / 32 * Math.PI * 2;b.push(Math.cos(e), Math.sin(e), 1, Math.cos(f), Math.sin(f), 1);
        }a.addAttribute("position", new F(b, 3));b = new R({ fog: !1 });this.cone = new W(a, b);this.add(this.cone);this.update();
    }function Pf(a) {
        var b = [];a && a.isBone && b.push(a);for (var c = 0; c < a.children.length; c++) {
            b.push.apply(b, Pf(a.children[c]));
        }return b;
    }function oc(a) {
        for (var b = Pf(a), c = new D(), d = [], e = [], f = new K(0, 0, 1), g = new K(0, 1, 0), h = 0; h < b.length; h++) {
            var k = b[h];k.parent && k.parent.isBone && (d.push(0, 0, 0), d.push(0, 0, 0), e.push(f.r, f.g, f.b), e.push(g.r, g.g, g.b));
        }c.addAttribute("position", new F(d, 3));c.addAttribute("color", new F(e, 3));d = new R({ vertexColors: 2, depthTest: !1, depthWrite: !1, transparent: !0 });W.call(this, c, d);this.root = a;this.bones = b;this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;
    }function pc(a, b, c) {
        this.light = a;this.light.updateMatrixWorld();this.color = c;a = new zb(b, 4, 2);b = new ya({ wireframe: !0, fog: !1 });va.call(this, a, b);this.matrix = this.light.matrixWorld;this.matrixAutoUpdate = !1;this.update();
    }function qc(a, b) {
        this.type = "RectAreaLightHelper";this.light = a;this.color = b;a = new D();a.addAttribute("position", new F([1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], 3));a.computeBoundingSphere();b = new R({ fog: !1 });da.call(this, a, b);a = new D();a.addAttribute("position", new F([1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], 3));a.computeBoundingSphere();this.add(new va(a, new ya({ side: 1, fog: !1 })));this.update();
    }function rc(a, b, c) {
        E.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.color = c;a = new vb(b);a.rotateY(.5 * Math.PI);this.material = new ya({ wireframe: !0, fog: !1 });void 0 === this.color && (this.material.vertexColors = 2);b = a.getAttribute("position");b = new Float32Array(3 * b.count);a.addAttribute("color", new P(b, 3));this.add(new va(a, this.material));this.update();
    }function pd(a, b, c, d) {
        a = a || 10;b = b || 10;c = new K(void 0 !== c ? c : 4473924);d = new K(void 0 !== d ? d : 8947848);var e = b / 2,
            f = a / b,
            g = a / 2;a = [];for (var h = [], k = 0, m = 0, p = -g; k <= b; k++, p += f) {
            a.push(-g, 0, p, g, 0, p);a.push(p, 0, -g, p, 0, g);var l = k === e ? c : d;l.toArray(h, m);m += 3;l.toArray(h, m);m += 3;l.toArray(h, m);m += 3;l.toArray(h, m);m += 3;
        }b = new D();b.addAttribute("position", new F(a, 3));b.addAttribute("color", new F(h, 3));c = new R({ vertexColors: 2 });W.call(this, b, c);
    }function Wd(a, b, c, d, e, f) {
        a = a || 10;b = b || 16;c = c || 8;d = d || 64;e = new K(void 0 !== e ? e : 4473924);f = new K(void 0 !== f ? f : 8947848);var g = [],
            h = [],
            k;for (k = 0; k <= b; k++) {
            var m = k / b * 2 * Math.PI;var p = Math.sin(m) * a;m = Math.cos(m) * a;g.push(0, 0, 0);g.push(p, 0, m);var l = k & 1 ? e : f;h.push(l.r, l.g, l.b);h.push(l.r, l.g, l.b);
        }for (k = 0; k <= c; k++) {
            l = k & 1 ? e : f;var n = a - a / c * k;for (b = 0; b < d; b++) {
                m = b / d * 2 * Math.PI, p = Math.sin(m) * n, m = Math.cos(m) * n, g.push(p, 0, m), h.push(l.r, l.g, l.b), m = (b + 1) / d * 2 * Math.PI, p = Math.sin(m) * n, m = Math.cos(m) * n, g.push(p, 0, m), h.push(l.r, l.g, l.b);
            }
        }a = new D();a.addAttribute("position", new F(g, 3));a.addAttribute("color", new F(h, 3));g = new R({ vertexColors: 2 });W.call(this, a, g);
    }function sc(a, b, c, d) {
        this.audio = a;this.range = b || 1;this.divisionsInnerAngle = c || 16;this.divisionsOuterAngle = d || 2;a = new D();b = new Float32Array(3 * (3 * (this.divisionsInnerAngle + 2 * this.divisionsOuterAngle) + 3));a.addAttribute("position", new P(b, 3));b = new R({ color: 65280 });c = new R({ color: 16776960 });da.call(this, a, [c, b]);this.update();
    }function qd(a, b, c, d) {
        this.object = a;this.size = void 0 !== b ? b : 1;a = void 0 !== c ? c : 16776960;d = void 0 !== d ? d : 1;b = 0;(c = this.object.geometry) && c.isGeometry ? b = c.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
        c = new D();b = new F(6 * b, 3);c.addAttribute("position", b);W.call(this, c, new R({ color: a, linewidth: d }));this.matrixAutoUpdate = !1;this.update();
    }function tc(a, b, c) {
        E.call(this);this.light = a;this.light.updateMatrixWorld();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.color = c;void 0 === b && (b = 1);a = new D();a.addAttribute("position", new F([-b, b, 0, b, b, 0, b, -b, 0, -b, -b, 0, -b, b, 0], 3));b = new R({ fog: !1 });this.lightPlane = new da(a, b);this.add(this.lightPlane);a = new D();a.addAttribute("position", new F([0, 0, 0, 0, 0, 1], 3));
        this.targetLine = new da(a, b);this.add(this.targetLine);this.update();
    }function rd(a) {
        function b(a, b, d) {
            c(a, d);c(b, d);
        }function c(a, b) {
            f.push(0, 0, 0);g.push(b.r, b.g, b.b);void 0 === h[a] && (h[a] = []);h[a].push(f.length / 3 - 1);
        }var d = new D(),
            e = new R({ color: 16777215, vertexColors: 1 }),
            f = [],
            g = [],
            h = {},
            k = new K(16755200),
            m = new K(16711680),
            p = new K(43775),
            l = new K(16777215),
            n = new K(3355443);b("n1", "n2", k);b("n2", "n4", k);b("n4", "n3", k);b("n3", "n1", k);b("f1", "f2", k);b("f2", "f4", k);b("f4", "f3", k);b("f3", "f1", k);b("n1", "f1", k);
        b("n2", "f2", k);b("n3", "f3", k);b("n4", "f4", k);b("p", "n1", m);b("p", "n2", m);b("p", "n3", m);b("p", "n4", m);b("u1", "u2", p);b("u2", "u3", p);b("u3", "u1", p);b("c", "t", l);b("p", "c", n);b("cn1", "cn2", n);b("cn3", "cn4", n);b("cf1", "cf2", n);b("cf3", "cf4", n);d.addAttribute("position", new F(f, 3));d.addAttribute("color", new F(g, 3));W.call(this, d, e);this.camera = a;this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix();this.matrix = a.matrixWorld;this.matrixAutoUpdate = !1;this.pointMap = h;this.update();
    }function db(a, b) {
        this.object = a;void 0 === b && (b = 16776960);a = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);var c = new Float32Array(24),
            d = new D();d.setIndex(new P(a, 1));d.addAttribute("position", new P(c, 3));W.call(this, d, new R({ color: b }));this.matrixAutoUpdate = !1;this.update();
    }function sd(a, b) {
        this.type = "Box3Helper";this.box = a;a = void 0 !== b ? b : 16776960;b = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);var c = new D();c.setIndex(new P(b, 1));c.addAttribute("position", new F([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], 3));W.call(this, c, new R({ color: a }));this.geometry.computeBoundingSphere();
    }function td(a, b, c) {
        this.type = "PlaneHelper";this.plane = a;this.size = void 0 === b ? 1 : b;a = void 0 !== c ? c : 16776960;b = new D();b.addAttribute("position", new F([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], 3));b.computeBoundingSphere();da.call(this, b, new R({ color: a }));b = new D();b.addAttribute("position", new F([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3));b.computeBoundingSphere();
        this.add(new va(b, new ya({ color: a, opacity: .2, transparent: !0, depthWrite: !1 })));
    }function eb(a, b, c, d, e, f) {
        E.call(this);void 0 === a && (a = new n(0, 0, 1));void 0 === b && (b = new n(0, 0, 0));void 0 === c && (c = 1);void 0 === d && (d = 16776960);void 0 === e && (e = .2 * c);void 0 === f && (f = .2 * e);void 0 === Xd && (Xd = new D(), Xd.addAttribute("position", new F([0, 0, 0, 0, 1, 0], 3)), Ke = new bb(0, .5, 1, 5, 1), Ke.translate(0, -.5, 0));this.position.copy(b);this.line = new da(Xd, new R({ color: d }));this.line.matrixAutoUpdate = !1;this.add(this.line);this.cone = new va(Ke, new ya({ color: d }));this.cone.matrixAutoUpdate = !1;this.add(this.cone);this.setDirection(a);this.setLength(c, e, f);
    }function ud(a) {
        a = a || 1;var b = [0, 0, 0, a, 0, 0, 0, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, a];a = new D();a.addAttribute("position", new F(b, 3));a.addAttribute("color", new F([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1], 3));b = new R({ vertexColors: 2 });W.call(this, a, b);
    }function Qf(a) {
        console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");oa.call(this, a);this.type = "catmullrom";this.closed = !0;
    }function Rf(a) {
        console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");oa.call(this, a);this.type = "catmullrom";
    }function Le(a) {
        console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");oa.call(this, a);this.type = "catmullrom";
    }void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));void 0 === Number.isInteger && (Number.isInteger = function (a) {
        return "number" === typeof a && isFinite(a) && Math.floor(a) === a;
    });void 0 === Math.sign && (Math.sign = function (a) {
        return 0 > a ? -1 : 0 < a ? 1 : +a;
    });!1 === "name" in Function.prototype && Object.defineProperty(Function.prototype, "name", { get: function get$$1() {
            return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
        } });void 0 === Object.assign && function () {
        Object.assign = function (a) {
            if (void 0 === a || null === a) throw new TypeError("Cannot convert undefined or null to object");for (var b = Object(a), c = 1; c < arguments.length; c++) {
                var d = arguments[c];if (void 0 !== d && null !== d) for (var e in d) {
                    Object.prototype.hasOwnProperty.call(d, e) && (b[e] = d[e]);
                }
            }return b;
        };
    }();
    Object.assign(ka.prototype, { addEventListener: function addEventListener(a, b) {
            void 0 === this._listeners && (this._listeners = {});var c = this._listeners;void 0 === c[a] && (c[a] = []);-1 === c[a].indexOf(b) && c[a].push(b);
        }, hasEventListener: function hasEventListener(a, b) {
            if (void 0 === this._listeners) return !1;var c = this._listeners;return void 0 !== c[a] && -1 !== c[a].indexOf(b);
        }, removeEventListener: function removeEventListener(a, b) {
            void 0 !== this._listeners && (a = this._listeners[a], void 0 !== a && (b = a.indexOf(b), -1 !== b && a.splice(b, 1)));
        }, dispatchEvent: function dispatchEvent(a) {
            if (void 0 !== this._listeners) {
                var b = this._listeners[a.type];if (void 0 !== b) {
                    a.target = this;b = b.slice(0);for (var c = 0, d = b.length; c < d; c++) {
                        b[c].call(this, a);
                    }
                }
            }
        } });var H = { DEG2RAD: Math.PI / 180, RAD2DEG: 180 / Math.PI, generateUUID: function () {
            for (var a = [], b = 0; 256 > b; b++) {
                a[b] = (16 > b ? "0" : "") + b.toString(16);
            }return function () {
                var b = 4294967295 * Math.random() | 0,
                    d = 4294967295 * Math.random() | 0,
                    e = 4294967295 * Math.random() | 0,
                    f = 4294967295 * Math.random() | 0;return (a[b & 255] + a[b >> 8 & 255] + a[b >> 16 & 255] + a[b >> 24 & 255] + "-" + a[d & 255] + a[d >> 8 & 255] + "-" + a[d >> 16 & 15 | 64] + a[d >> 24 & 255] + "-" + a[e & 63 | 128] + a[e >> 8 & 255] + "-" + a[e >> 16 & 255] + a[e >> 24 & 255] + a[f & 255] + a[f >> 8 & 255] + a[f >> 16 & 255] + a[f >> 24 & 255]).toUpperCase();
            };
        }(), clamp: function clamp(a, b, c) {
            return Math.max(b, Math.min(c, a));
        }, euclideanModulo: function euclideanModulo(a, b) {
            return (a % b + b) % b;
        }, mapLinear: function mapLinear(a, b, c, d, e) {
            return d + (a - b) * (e - d) / (c - b);
        }, lerp: function lerp(a, b, c) {
            return (1 - c) * a + c * b;
        }, smoothstep: function smoothstep(a, b, c) {
            if (a <= b) return 0;if (a >= c) return 1;a = (a - b) / (c - b);return a * a * (3 - 2 * a);
        }, smootherstep: function smootherstep(a, b, c) {
            if (a <= b) return 0;if (a >= c) return 1;a = (a - b) / (c - b);return a * a * a * (a * (6 * a - 15) + 10);
        }, randInt: function randInt(a, b) {
            return a + Math.floor(Math.random() * (b - a + 1));
        }, randFloat: function randFloat(a, b) {
            return a + Math.random() * (b - a);
        }, randFloatSpread: function randFloatSpread(a) {
            return a * (.5 - Math.random());
        }, degToRad: function degToRad(a) {
            return a * H.DEG2RAD;
        }, radToDeg: function radToDeg(a) {
            return a * H.RAD2DEG;
        }, isPowerOfTwo: function isPowerOfTwo(a) {
            return 0 === (a & a - 1) && 0 !== a;
        }, ceilPowerOfTwo: function ceilPowerOfTwo(a) {
            return Math.pow(2, Math.ceil(Math.log(a) / Math.LN2));
        }, floorPowerOfTwo: function floorPowerOfTwo(a) {
            return Math.pow(2, Math.floor(Math.log(a) / Math.LN2));
        } };Object.defineProperties(B.prototype, { width: { get: function get$$1() {
                return this.x;
            }, set: function set$$1(a) {
                this.x = a;
            } }, height: { get: function get$$1() {
                return this.y;
            }, set: function set$$1(a) {
                this.y = a;
            } } });Object.assign(B.prototype, { isVector2: !0, set: function set$$1(a, b) {
            this.x = a;this.y = b;return this;
        }, setScalar: function setScalar(a) {
            this.y = this.x = a;return this;
        }, setX: function setX(a) {
            this.x = a;return this;
        }, setY: function setY(a) {
            this.y = a;return this;
        }, setComponent: function setComponent(a, b) {
            switch (a) {case 0:
                    this.x = b;break;case 1:
                    this.y = b;break;default:
                    throw Error("index is out of range: " + a);}return this;
        }, getComponent: function getComponent(a) {
            switch (a) {case 0:
                    return this.x;
                case 1:
                    return this.y;default:
                    throw Error("index is out of range: " + a);}
        }, clone: function clone() {
            return new this.constructor(this.x, this.y);
        }, copy: function copy(a) {
            this.x = a.x;this.y = a.y;return this;
        }, add: function add(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;return this;
        }, addScalar: function addScalar(a) {
            this.x += a;this.y += a;return this;
        }, addVectors: function addVectors(a, b) {
            this.x = a.x + b.x;this.y = a.y + b.y;return this;
        },
        addScaledVector: function addScaledVector(a, b) {
            this.x += a.x * b;this.y += a.y * b;return this;
        }, sub: function sub(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;return this;
        }, subScalar: function subScalar(a) {
            this.x -= a;this.y -= a;return this;
        }, subVectors: function subVectors(a, b) {
            this.x = a.x - b.x;this.y = a.y - b.y;return this;
        }, multiply: function multiply(a) {
            this.x *= a.x;this.y *= a.y;return this;
        }, multiplyScalar: function multiplyScalar(a) {
            this.x *= a;this.y *= a;return this;
        },
        divide: function divide(a) {
            this.x /= a.x;this.y /= a.y;return this;
        }, divideScalar: function divideScalar(a) {
            return this.multiplyScalar(1 / a);
        }, applyMatrix3: function applyMatrix3(a) {
            var b = this.x,
                c = this.y;a = a.elements;this.x = a[0] * b + a[3] * c + a[6];this.y = a[1] * b + a[4] * c + a[7];return this;
        }, min: function min(a) {
            this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);return this;
        }, max: function max(a) {
            this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);return this;
        }, clamp: function clamp(a, b) {
            this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));return this;
        }, clampScalar: function () {
            var a = new B(),
                b = new B();return function (c, d) {
                a.set(c, c);b.set(d, d);return this.clamp(a, b);
            };
        }(), clampLength: function clampLength(a, b) {
            var c = this.length();return this.divideScalar(c || 1).multiplyScalar(Math.max(a, Math.min(b, c)));
        }, floor: function floor() {
            this.x = Math.floor(this.x);this.y = Math.floor(this.y);return this;
        }, ceil: function ceil() {
            this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);return this;
        }, round: function round() {
            this.x = Math.round(this.x);this.y = Math.round(this.y);return this;
        }, roundToZero: function roundToZero() {
            this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);return this;
        }, negate: function negate() {
            this.x = -this.x;this.y = -this.y;return this;
        }, dot: function dot(a) {
            return this.x * a.x + this.y * a.y;
        }, cross: function cross(a) {
            return this.x * a.y - this.y * a.x;
        }, lengthSq: function lengthSq() {
            return this.x * this.x + this.y * this.y;
        }, length: function length() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        }, manhattanLength: function manhattanLength() {
            return Math.abs(this.x) + Math.abs(this.y);
        }, normalize: function normalize() {
            return this.divideScalar(this.length() || 1);
        }, angle: function angle() {
            var a = Math.atan2(this.y, this.x);0 > a && (a += 2 * Math.PI);return a;
        }, distanceTo: function distanceTo(a) {
            return Math.sqrt(this.distanceToSquared(a));
        }, distanceToSquared: function distanceToSquared(a) {
            var b = this.x - a.x;a = this.y - a.y;return b * b + a * a;
        }, manhattanDistanceTo: function manhattanDistanceTo(a) {
            return Math.abs(this.x - a.x) + Math.abs(this.y - a.y);
        }, setLength: function setLength(a) {
            return this.normalize().multiplyScalar(a);
        }, lerp: function lerp(a, b) {
            this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;return this;
        }, lerpVectors: function lerpVectors(a, b, c) {
            return this.subVectors(b, a).multiplyScalar(c).add(a);
        }, equals: function equals(a) {
            return a.x === this.x && a.y === this.y;
        }, fromArray: function fromArray(a, b) {
            void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];return this;
        }, toArray: function toArray$$1(a, b) {
            void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;return a;
        }, fromBufferAttribute: function fromBufferAttribute(a, b, c) {
            void 0 !== c && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");this.x = a.getX(b);this.y = a.getY(b);return this;
        }, rotateAround: function rotateAround(a, b) {
            var c = Math.cos(b);b = Math.sin(b);var d = this.x - a.x,
                e = this.y - a.y;this.x = d * c - e * b + a.x;this.y = d * b + e * c + a.y;return this;
        } });Object.assign(J.prototype, { isMatrix4: !0, set: function set$$1(a, b, c, d, e, f, g, h, k, m, l, q, n, t, r, u) {
            var p = this.elements;p[0] = a;p[4] = b;p[8] = c;p[12] = d;p[1] = e;p[5] = f;p[9] = g;p[13] = h;p[2] = k;p[6] = m;p[10] = l;p[14] = q;p[3] = n;p[7] = t;p[11] = r;p[15] = u;return this;
        }, identity: function identity() {
            this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);return this;
        }, clone: function clone() {
            return new J().fromArray(this.elements);
        }, copy: function copy(a) {
            var b = this.elements;a = a.elements;b[0] = a[0];b[1] = a[1];b[2] = a[2];b[3] = a[3];b[4] = a[4];b[5] = a[5];b[6] = a[6];b[7] = a[7];b[8] = a[8];b[9] = a[9];b[10] = a[10];b[11] = a[11];b[12] = a[12];b[13] = a[13];b[14] = a[14];b[15] = a[15];return this;
        }, copyPosition: function copyPosition(a) {
            var b = this.elements;a = a.elements;b[12] = a[12];b[13] = a[13];b[14] = a[14];return this;
        }, extractBasis: function extractBasis(a, b, c) {
            a.setFromMatrixColumn(this, 0);b.setFromMatrixColumn(this, 1);c.setFromMatrixColumn(this, 2);return this;
        }, makeBasis: function makeBasis(a, b, c) {
            this.set(a.x, b.x, c.x, 0, a.y, b.y, c.y, 0, a.z, b.z, c.z, 0, 0, 0, 0, 1);return this;
        }, extractRotation: function () {
            var a = new n();return function (b) {
                var c = this.elements,
                    d = b.elements,
                    e = 1 / a.setFromMatrixColumn(b, 0).length(),
                    f = 1 / a.setFromMatrixColumn(b, 1).length();b = 1 / a.setFromMatrixColumn(b, 2).length();c[0] = d[0] * e;c[1] = d[1] * e;c[2] = d[2] * e;c[3] = 0;c[4] = d[4] * f;c[5] = d[5] * f;c[6] = d[6] * f;c[7] = 0;c[8] = d[8] * b;c[9] = d[9] * b;c[10] = d[10] * b;c[11] = 0;c[12] = 0;c[13] = 0;c[14] = 0;c[15] = 1;return this;
            };
        }(), makeRotationFromEuler: function makeRotationFromEuler(a) {
            a && a.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
            var b = this.elements,
                c = a.x,
                d = a.y,
                e = a.z,
                f = Math.cos(c);c = Math.sin(c);var g = Math.cos(d);d = Math.sin(d);var h = Math.cos(e);e = Math.sin(e);if ("XYZ" === a.order) {
                a = f * h;var k = f * e,
                    m = c * h,
                    p = c * e;b[0] = g * h;b[4] = -g * e;b[8] = d;b[1] = k + m * d;b[5] = a - p * d;b[9] = -c * g;b[2] = p - a * d;b[6] = m + k * d;b[10] = f * g;
            } else "YXZ" === a.order ? (a = g * h, k = g * e, m = d * h, p = d * e, b[0] = a + p * c, b[4] = m * c - k, b[8] = f * d, b[1] = f * e, b[5] = f * h, b[9] = -c, b[2] = k * c - m, b[6] = p + a * c, b[10] = f * g) : "ZXY" === a.order ? (a = g * h, k = g * e, m = d * h, p = d * e, b[0] = a - p * c, b[4] = -f * e, b[8] = m + k * c, b[1] = k + m * c, b[5] = f * h, b[9] = p - a * c, b[2] = -f * d, b[6] = c, b[10] = f * g) : "ZYX" === a.order ? (a = f * h, k = f * e, m = c * h, p = c * e, b[0] = g * h, b[4] = m * d - k, b[8] = a * d + p, b[1] = g * e, b[5] = p * d + a, b[9] = k * d - m, b[2] = -d, b[6] = c * g, b[10] = f * g) : "YZX" === a.order ? (a = f * g, k = f * d, m = c * g, p = c * d, b[0] = g * h, b[4] = p - a * e, b[8] = m * e + k, b[1] = e, b[5] = f * h, b[9] = -c * h, b[2] = -d * h, b[6] = k * e + m, b[10] = a - p * e) : "XZY" === a.order && (a = f * g, k = f * d, m = c * g, p = c * d, b[0] = g * h, b[4] = -e, b[8] = d * h, b[1] = a * e + p, b[5] = f * h, b[9] = k * e - m, b[2] = m * e - k, b[6] = c * h, b[10] = p * e + a);b[3] = 0;b[7] = 0;b[11] = 0;b[12] = 0;b[13] = 0;b[14] = 0;b[15] = 1;return this;
        }, makeRotationFromQuaternion: function () {
            var a = new n(0, 0, 0),
                b = new n(1, 1, 1);return function (c) {
                return this.compose(a, c, b);
            };
        }(), lookAt: function () {
            var a = new n(),
                b = new n(),
                c = new n();return function (d, e, f) {
                var g = this.elements;c.subVectors(d, e);0 === c.lengthSq() && (c.z = 1);c.normalize();a.crossVectors(f, c);0 === a.lengthSq() && (1 === Math.abs(f.z) ? c.x += 1E-4 : c.z += 1E-4, c.normalize(), a.crossVectors(f, c));a.normalize();b.crossVectors(c, a);g[0] = a.x;g[4] = b.x;g[8] = c.x;g[1] = a.y;g[5] = b.y;g[9] = c.y;g[2] = a.z;g[6] = b.z;g[10] = c.z;return this;
            };
        }(), multiply: function multiply(a, b) {
            return void 0 !== b ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, b)) : this.multiplyMatrices(this, a);
        }, premultiply: function premultiply(a) {
            return this.multiplyMatrices(a, this);
        }, multiplyMatrices: function multiplyMatrices(a, b) {
            var c = a.elements,
                d = b.elements;b = this.elements;a = c[0];var e = c[4],
                f = c[8],
                g = c[12],
                h = c[1],
                k = c[5],
                m = c[9],
                p = c[13],
                l = c[2],
                n = c[6],
                t = c[10],
                r = c[14],
                u = c[3],
                w = c[7],
                z = c[11];c = c[15];var x = d[0],
                C = d[4],
                y = d[8],
                Q = d[12],
                B = d[1],
                A = d[5],
                D = d[9],
                F = d[13],
                E = d[2],
                H = d[6],
                G = d[10],
                I = d[14],
                L = d[3],
                J = d[7],
                K = d[11];d = d[15];b[0] = a * x + e * B + f * E + g * L;b[4] = a * C + e * A + f * H + g * J;b[8] = a * y + e * D + f * G + g * K;b[12] = a * Q + e * F + f * I + g * d;b[1] = h * x + k * B + m * E + p * L;b[5] = h * C + k * A + m * H + p * J;b[9] = h * y + k * D + m * G + p * K;b[13] = h * Q + k * F + m * I + p * d;b[2] = l * x + n * B + t * E + r * L;b[6] = l * C + n * A + t * H + r * J;b[10] = l * y + n * D + t * G + r * K;b[14] = l * Q + n * F + t * I + r * d;b[3] = u * x + w * B + z * E + c * L;b[7] = u * C + w * A + z * H + c * J;b[11] = u * y + w * D + z * G + c * K;b[15] = u * Q + w * F + z * I + c * d;return this;
        }, multiplyScalar: function multiplyScalar(a) {
            var b = this.elements;b[0] *= a;b[4] *= a;b[8] *= a;b[12] *= a;b[1] *= a;b[5] *= a;b[9] *= a;b[13] *= a;b[2] *= a;b[6] *= a;b[10] *= a;b[14] *= a;b[3] *= a;b[7] *= a;b[11] *= a;b[15] *= a;return this;
        }, applyToBufferAttribute: function () {
            var a = new n();return function (b) {
                for (var c = 0, d = b.count; c < d; c++) {
                    a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix4(this), b.setXYZ(c, a.x, a.y, a.z);
                }return b;
            };
        }(), determinant: function determinant() {
            var a = this.elements,
                b = a[0],
                c = a[4],
                d = a[8],
                e = a[12],
                f = a[1],
                g = a[5],
                h = a[9],
                k = a[13],
                m = a[2],
                p = a[6],
                l = a[10],
                n = a[14];return a[3] * (+e * h * p - d * k * p - e * g * l + c * k * l + d * g * n - c * h * n) + a[7] * (+b * h * n - b * k * l + e * f * l - d * f * n + d * k * m - e * h * m) + a[11] * (+b * k * p - b * g * n - e * f * p + c * f * n + e * g * m - c * k * m) + a[15] * (-d * g * m - b * h * p + b * g * l + d * f * p - c * f * l + c * h * m);
        }, transpose: function transpose() {
            var a = this.elements;var b = a[1];a[1] = a[4];a[4] = b;b = a[2];a[2] = a[8];a[8] = b;b = a[6];a[6] = a[9];a[9] = b;b = a[3];a[3] = a[12];a[12] = b;b = a[7];a[7] = a[13];a[13] = b;b = a[11];a[11] = a[14];a[14] = b;return this;
        }, setPosition: function setPosition(a) {
            var b = this.elements;b[12] = a.x;b[13] = a.y;b[14] = a.z;return this;
        }, getInverse: function getInverse(a, b) {
            var c = this.elements,
                d = a.elements;a = d[0];var e = d[1],
                f = d[2],
                g = d[3],
                h = d[4],
                k = d[5],
                m = d[6],
                p = d[7],
                l = d[8],
                n = d[9],
                t = d[10],
                r = d[11],
                u = d[12],
                w = d[13],
                z = d[14];d = d[15];var x = n * z * p - w * t * p + w * m * r - k * z * r - n * m * d + k * t * d,
                C = u * t * p - l * z * p - u * m * r + h * z * r + l * m * d - h * t * d,
                y = l * w * p - u * n * p + u * k * r - h * w * r - l * k * d + h * n * d,
                Q = u * n * m - l * w * m - u * k * t + h * w * t + l * k * z - h * n * z,
                B = a * x + e * C + f * y + g * Q;if (0 === B) {
                if (!0 === b) throw Error("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");console.warn("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");return this.identity();
            }b = 1 / B;c[0] = x * b;c[1] = (w * t * g - n * z * g - w * f * r + e * z * r + n * f * d - e * t * d) * b;c[2] = (k * z * g - w * m * g + w * f * p - e * z * p - k * f * d + e * m * d) * b;c[3] = (n * m * g - k * t * g - n * f * p + e * t * p + k * f * r - e * m * r) * b;c[4] = C * b;c[5] = (l * z * g - u * t * g + u * f * r - a * z * r - l * f * d + a * t * d) * b;c[6] = (u * m * g - h * z * g - u * f * p + a * z * p + h * f * d - a * m * d) * b;c[7] = (h * t * g - l * m * g + l * f * p - a * t * p - h * f * r + a * m * r) * b;c[8] = y * b;c[9] = (u * n * g - l * w * g - u * e * r + a * w * r + l * e * d - a * n * d) * b;c[10] = (h * w * g - u * k * g + u * e * p - a * w * p - h * e * d + a * k * d) * b;c[11] = (l * k * g - h * n * g - l * e * p + a * n * p + h * e * r - a * k * r) * b;c[12] = Q * b;c[13] = (l * w * f - u * n * f + u * e * t - a * w * t - l * e * z + a * n * z) * b;c[14] = (u * k * f - h * w * f - u * e * m + a * w * m + h * e * z - a * k * z) * b;c[15] = (h * n * f - l * k * f + l * e * m - a * n * m - h * e * t + a * k * t) * b;return this;
        }, scale: function scale(a) {
            var b = this.elements,
                c = a.x,
                d = a.y;a = a.z;b[0] *= c;b[4] *= d;b[8] *= a;b[1] *= c;b[5] *= d;b[9] *= a;b[2] *= c;b[6] *= d;b[10] *= a;b[3] *= c;b[7] *= d;b[11] *= a;return this;
        }, getMaxScaleOnAxis: function getMaxScaleOnAxis() {
            var a = this.elements;return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
        }, makeTranslation: function makeTranslation(a, b, c) {
            this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, c, 0, 0, 0, 1);return this;
        }, makeRotationX: function makeRotationX(a) {
            var b = Math.cos(a);a = Math.sin(a);this.set(1, 0, 0, 0, 0, b, -a, 0, 0, a, b, 0, 0, 0, 0, 1);return this;
        }, makeRotationY: function makeRotationY(a) {
            var b = Math.cos(a);a = Math.sin(a);this.set(b, 0, a, 0, 0, 1, 0, 0, -a, 0, b, 0, 0, 0, 0, 1);return this;
        }, makeRotationZ: function makeRotationZ(a) {
            var b = Math.cos(a);a = Math.sin(a);this.set(b, -a, 0, 0, a, b, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);return this;
        }, makeRotationAxis: function makeRotationAxis(a, b) {
            var c = Math.cos(b);b = Math.sin(b);var d = 1 - c,
                e = a.x,
                f = a.y;a = a.z;var g = d * e,
                h = d * f;this.set(g * e + c, g * f - b * a, g * a + b * f, 0, g * f + b * a, h * f + c, h * a - b * e, 0, g * a - b * f, h * a + b * e, d * a * a + c, 0, 0, 0, 0, 1);return this;
        }, makeScale: function makeScale(a, b, c) {
            this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, 0, 1);return this;
        }, makeShear: function makeShear(a, b, c) {
            this.set(1, b, c, 0, a, 1, c, 0, a, b, 1, 0, 0, 0, 0, 1);return this;
        }, compose: function compose(a, b, c) {
            var d = this.elements,
                e = b._x,
                f = b._y,
                g = b._z,
                h = b._w,
                k = e + e,
                m = f + f,
                l = g + g;b = e * k;var q = e * m;e *= l;var n = f * m;f *= l;g *= l;k *= h;m *= h;h *= l;l = c.x;var t = c.y;c = c.z;d[0] = (1 - (n + g)) * l;d[1] = (q + h) * l;d[2] = (e - m) * l;d[3] = 0;d[4] = (q - h) * t;d[5] = (1 - (b + g)) * t;d[6] = (f + k) * t;d[7] = 0;d[8] = (e + m) * c;d[9] = (f - k) * c;d[10] = (1 - (b + n)) * c;d[11] = 0;
            d[12] = a.x;d[13] = a.y;d[14] = a.z;d[15] = 1;return this;
        }, decompose: function () {
            var a = new n(),
                b = new J();return function (c, d, e) {
                var f = this.elements,
                    g = a.set(f[0], f[1], f[2]).length(),
                    h = a.set(f[4], f[5], f[6]).length(),
                    k = a.set(f[8], f[9], f[10]).length();0 > this.determinant() && (g = -g);c.x = f[12];c.y = f[13];c.z = f[14];b.copy(this);c = 1 / g;f = 1 / h;var m = 1 / k;b.elements[0] *= c;b.elements[1] *= c;b.elements[2] *= c;b.elements[4] *= f;b.elements[5] *= f;b.elements[6] *= f;b.elements[8] *= m;b.elements[9] *= m;b.elements[10] *= m;d.setFromRotationMatrix(b);
                e.x = g;e.y = h;e.z = k;return this;
            };
        }(), makePerspective: function makePerspective(a, b, c, d, e, f) {
            void 0 === f && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var g = this.elements;g[0] = 2 * e / (b - a);g[4] = 0;g[8] = (b + a) / (b - a);g[12] = 0;g[1] = 0;g[5] = 2 * e / (c - d);g[9] = (c + d) / (c - d);g[13] = 0;g[2] = 0;g[6] = 0;g[10] = -(f + e) / (f - e);g[14] = -2 * f * e / (f - e);g[3] = 0;g[7] = 0;g[11] = -1;g[15] = 0;return this;
        }, makeOrthographic: function makeOrthographic(a, b, c, d, e, f) {
            var g = this.elements,
                h = 1 / (b - a),
                k = 1 / (c - d),
                m = 1 / (f - e);g[0] = 2 * h;g[4] = 0;g[8] = 0;g[12] = -((b + a) * h);g[1] = 0;g[5] = 2 * k;g[9] = 0;g[13] = -((c + d) * k);g[2] = 0;g[6] = 0;g[10] = -2 * m;g[14] = -((f + e) * m);g[3] = 0;g[7] = 0;g[11] = 0;g[15] = 1;return this;
        }, equals: function equals(a) {
            var b = this.elements;a = a.elements;for (var c = 0; 16 > c; c++) {
                if (b[c] !== a[c]) return !1;
            }return !0;
        }, fromArray: function fromArray(a, b) {
            void 0 === b && (b = 0);for (var c = 0; 16 > c; c++) {
                this.elements[c] = a[c + b];
            }return this;
        }, toArray: function toArray$$1(a, b) {
            void 0 === a && (a = []);void 0 === b && (b = 0);var c = this.elements;a[b] = c[0];a[b + 1] = c[1];a[b + 2] = c[2];a[b + 3] = c[3];a[b + 4] = c[4];
            a[b + 5] = c[5];a[b + 6] = c[6];a[b + 7] = c[7];a[b + 8] = c[8];a[b + 9] = c[9];a[b + 10] = c[10];a[b + 11] = c[11];a[b + 12] = c[12];a[b + 13] = c[13];a[b + 14] = c[14];a[b + 15] = c[15];return a;
        } });Object.assign(aa, { slerp: function slerp(a, b, c, d) {
            return c.copy(a).slerp(b, d);
        }, slerpFlat: function slerpFlat(a, b, c, d, e, f, g) {
            var h = c[d + 0],
                k = c[d + 1],
                m = c[d + 2];c = c[d + 3];d = e[f + 0];var l = e[f + 1],
                q = e[f + 2];e = e[f + 3];if (c !== e || h !== d || k !== l || m !== q) {
                f = 1 - g;var n = h * d + k * l + m * q + c * e,
                    t = 0 <= n ? 1 : -1,
                    r = 1 - n * n;r > Number.EPSILON && (r = Math.sqrt(r), n = Math.atan2(r, n * t), f = Math.sin(f * n) / r, g = Math.sin(g * n) / r);t *= g;h = h * f + d * t;k = k * f + l * t;m = m * f + q * t;c = c * f + e * t;f === 1 - g && (g = 1 / Math.sqrt(h * h + k * k + m * m + c * c), h *= g, k *= g, m *= g, c *= g);
            }a[b] = h;a[b + 1] = k;a[b + 2] = m;a[b + 3] = c;
        } });Object.defineProperties(aa.prototype, { x: { get: function get$$1() {
                return this._x;
            }, set: function set$$1(a) {
                this._x = a;this.onChangeCallback();
            } }, y: { get: function get$$1() {
                return this._y;
            }, set: function set$$1(a) {
                this._y = a;this.onChangeCallback();
            } }, z: { get: function get$$1() {
                return this._z;
            }, set: function set$$1(a) {
                this._z = a;this.onChangeCallback();
            } }, w: { get: function get$$1() {
                return this._w;
            }, set: function set$$1(a) {
                this._w = a;this.onChangeCallback();
            } } });Object.assign(aa.prototype, { isQuaternion: !0, set: function set$$1(a, b, c, d) {
            this._x = a;this._y = b;this._z = c;this._w = d;this.onChangeCallback();return this;
        }, clone: function clone() {
            return new this.constructor(this._x, this._y, this._z, this._w);
        }, copy: function copy(a) {
            this._x = a.x;this._y = a.y;this._z = a.z;this._w = a.w;this.onChangeCallback();return this;
        }, setFromEuler: function setFromEuler(a, b) {
            if (!a || !a.isEuler) throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
            var c = a._x,
                d = a._y,
                e = a._z;a = a.order;var f = Math.cos,
                g = Math.sin,
                h = f(c / 2),
                k = f(d / 2);f = f(e / 2);c = g(c / 2);d = g(d / 2);e = g(e / 2);"XYZ" === a ? (this._x = c * k * f + h * d * e, this._y = h * d * f - c * k * e, this._z = h * k * e + c * d * f, this._w = h * k * f - c * d * e) : "YXZ" === a ? (this._x = c * k * f + h * d * e, this._y = h * d * f - c * k * e, this._z = h * k * e - c * d * f, this._w = h * k * f + c * d * e) : "ZXY" === a ? (this._x = c * k * f - h * d * e, this._y = h * d * f + c * k * e, this._z = h * k * e + c * d * f, this._w = h * k * f - c * d * e) : "ZYX" === a ? (this._x = c * k * f - h * d * e, this._y = h * d * f + c * k * e, this._z = h * k * e - c * d * f, this._w = h * k * f + c * d * e) : "YZX" === a ? (this._x = c * k * f + h * d * e, this._y = h * d * f + c * k * e, this._z = h * k * e - c * d * f, this._w = h * k * f - c * d * e) : "XZY" === a && (this._x = c * k * f - h * d * e, this._y = h * d * f - c * k * e, this._z = h * k * e + c * d * f, this._w = h * k * f + c * d * e);if (!1 !== b) this.onChangeCallback();return this;
        }, setFromAxisAngle: function setFromAxisAngle(a, b) {
            b /= 2;var c = Math.sin(b);this._x = a.x * c;this._y = a.y * c;this._z = a.z * c;this._w = Math.cos(b);this.onChangeCallback();return this;
        }, setFromRotationMatrix: function setFromRotationMatrix(a) {
            var b = a.elements,
                c = b[0];a = b[4];var d = b[8],
                e = b[1],
                f = b[5],
                g = b[9],
                h = b[2],
                k = b[6];b = b[10];var m = c + f + b;0 < m ? (c = .5 / Math.sqrt(m + 1), this._w = .25 / c, this._x = (k - g) * c, this._y = (d - h) * c, this._z = (e - a) * c) : c > f && c > b ? (c = 2 * Math.sqrt(1 + c - f - b), this._w = (k - g) / c, this._x = .25 * c, this._y = (a + e) / c, this._z = (d + h) / c) : f > b ? (c = 2 * Math.sqrt(1 + f - c - b), this._w = (d - h) / c, this._x = (a + e) / c, this._y = .25 * c, this._z = (g + k) / c) : (c = 2 * Math.sqrt(1 + b - c - f), this._w = (e - a) / c, this._x = (d + h) / c, this._y = (g + k) / c, this._z = .25 * c);this.onChangeCallback();return this;
        }, setFromUnitVectors: function () {
            var a = new n(),
                b;return function (c, d) {
                void 0 === a && (a = new n());b = c.dot(d) + 1;1E-6 > b ? (b = 0, Math.abs(c.x) > Math.abs(c.z) ? a.set(-c.y, c.x, 0) : a.set(0, -c.z, c.y)) : a.crossVectors(c, d);this._x = a.x;this._y = a.y;this._z = a.z;this._w = b;return this.normalize();
            };
        }(), angleTo: function angleTo(a) {
            return 2 * Math.acos(Math.abs(H.clamp(this.dot(a), -1, 1)));
        }, rotateTowards: function rotateTowards(a, b) {
            var c = this.angleTo(a);if (0 === c) return this;this.slerp(a, Math.min(1, b / c));return this;
        }, inverse: function inverse() {
            return this.conjugate();
        }, conjugate: function conjugate() {
            this._x *= -1;this._y *= -1;this._z *= -1;this.onChangeCallback();return this;
        }, dot: function dot(a) {
            return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
        }, lengthSq: function lengthSq() {
            return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
        }, length: function length() {
            return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
        }, normalize: function normalize() {
            var a = this.length();0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);this.onChangeCallback();return this;
        }, multiply: function multiply(a, b) {
            return void 0 !== b ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, b)) : this.multiplyQuaternions(this, a);
        }, premultiply: function premultiply(a) {
            return this.multiplyQuaternions(a, this);
        }, multiplyQuaternions: function multiplyQuaternions(a, b) {
            var c = a._x,
                d = a._y,
                e = a._z;a = a._w;var f = b._x,
                g = b._y,
                h = b._z;b = b._w;this._x = c * b + a * f + d * h - e * g;this._y = d * b + a * g + e * f - c * h;this._z = e * b + a * h + c * g - d * f;this._w = a * b - c * f - d * g - e * h;this.onChangeCallback();return this;
        }, slerp: function slerp(a, b) {
            if (0 === b) return this;if (1 === b) return this.copy(a);var c = this._x,
                d = this._y,
                e = this._z,
                f = this._w,
                g = f * a._w + c * a._x + d * a._y + e * a._z;
            0 > g ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, g = -g) : this.copy(a);if (1 <= g) return this._w = f, this._x = c, this._y = d, this._z = e, this;a = 1 - g * g;if (a <= Number.EPSILON) return g = 1 - b, this._w = g * f + b * this._w, this._x = g * c + b * this._x, this._y = g * d + b * this._y, this._z = g * e + b * this._z, this.normalize();a = Math.sqrt(a);var h = Math.atan2(a, g);g = Math.sin((1 - b) * h) / a;b = Math.sin(b * h) / a;this._w = f * g + this._w * b;this._x = c * g + this._x * b;this._y = d * g + this._y * b;this._z = e * g + this._z * b;this.onChangeCallback();return this;
        }, equals: function equals(a) {
            return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
        }, fromArray: function fromArray(a, b) {
            void 0 === b && (b = 0);this._x = a[b];this._y = a[b + 1];this._z = a[b + 2];this._w = a[b + 3];this.onChangeCallback();return this;
        }, toArray: function toArray$$1(a, b) {
            void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this._x;a[b + 1] = this._y;a[b + 2] = this._z;a[b + 3] = this._w;return a;
        }, onChange: function onChange(a) {
            this.onChangeCallback = a;return this;
        }, onChangeCallback: function onChangeCallback() {} });Object.assign(n.prototype, { isVector3: !0, set: function set$$1(a, b, c) {
            this.x = a;this.y = b;this.z = c;return this;
        },
        setScalar: function setScalar(a) {
            this.z = this.y = this.x = a;return this;
        }, setX: function setX(a) {
            this.x = a;return this;
        }, setY: function setY(a) {
            this.y = a;return this;
        }, setZ: function setZ(a) {
            this.z = a;return this;
        }, setComponent: function setComponent(a, b) {
            switch (a) {case 0:
                    this.x = b;break;case 1:
                    this.y = b;break;case 2:
                    this.z = b;break;default:
                    throw Error("index is out of range: " + a);}return this;
        }, getComponent: function getComponent(a) {
            switch (a) {case 0:
                    return this.x;case 1:
                    return this.y;case 2:
                    return this.z;default:
                    throw Error("index is out of range: " + a);}
        }, clone: function clone() {
            return new this.constructor(this.x, this.y, this.z);
        }, copy: function copy(a) {
            this.x = a.x;this.y = a.y;this.z = a.z;return this;
        }, add: function add(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;this.z += a.z;return this;
        }, addScalar: function addScalar(a) {
            this.x += a;this.y += a;this.z += a;return this;
        }, addVectors: function addVectors(a, b) {
            this.x = a.x + b.x;this.y = a.y + b.y;this.z = a.z + b.z;return this;
        }, addScaledVector: function addScaledVector(a, b) {
            this.x += a.x * b;this.y += a.y * b;this.z += a.z * b;return this;
        }, sub: function sub(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;this.z -= a.z;return this;
        }, subScalar: function subScalar(a) {
            this.x -= a;this.y -= a;this.z -= a;return this;
        }, subVectors: function subVectors(a, b) {
            this.x = a.x - b.x;this.y = a.y - b.y;this.z = a.z - b.z;return this;
        }, multiply: function multiply(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, b);this.x *= a.x;this.y *= a.y;this.z *= a.z;return this;
        }, multiplyScalar: function multiplyScalar(a) {
            this.x *= a;this.y *= a;this.z *= a;return this;
        }, multiplyVectors: function multiplyVectors(a, b) {
            this.x = a.x * b.x;this.y = a.y * b.y;this.z = a.z * b.z;return this;
        }, applyEuler: function () {
            var a = new aa();return function (b) {
                b && b.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");return this.applyQuaternion(a.setFromEuler(b));
            };
        }(), applyAxisAngle: function () {
            var a = new aa();return function (b, c) {
                return this.applyQuaternion(a.setFromAxisAngle(b, c));
            };
        }(), applyMatrix3: function applyMatrix3(a) {
            var b = this.x,
                c = this.y,
                d = this.z;a = a.elements;this.x = a[0] * b + a[3] * c + a[6] * d;this.y = a[1] * b + a[4] * c + a[7] * d;this.z = a[2] * b + a[5] * c + a[8] * d;return this;
        }, applyMatrix4: function applyMatrix4(a) {
            var b = this.x,
                c = this.y,
                d = this.z;a = a.elements;var e = 1 / (a[3] * b + a[7] * c + a[11] * d + a[15]);this.x = (a[0] * b + a[4] * c + a[8] * d + a[12]) * e;this.y = (a[1] * b + a[5] * c + a[9] * d + a[13]) * e;this.z = (a[2] * b + a[6] * c + a[10] * d + a[14]) * e;return this;
        }, applyQuaternion: function applyQuaternion(a) {
            var b = this.x,
                c = this.y,
                d = this.z,
                e = a.x,
                f = a.y,
                g = a.z;a = a.w;var h = a * b + f * d - g * c,
                k = a * c + g * b - e * d,
                m = a * d + e * c - f * b;b = -e * b - f * c - g * d;this.x = h * a + b * -e + k * -g - m * -f;this.y = k * a + b * -f + m * -e - h * -g;this.z = m * a + b * -g + h * -f - k * -e;return this;
        }, project: function project(a) {
            return this.applyMatrix4(a.matrixWorldInverse).applyMatrix4(a.projectionMatrix);
        }, unproject: function () {
            var a = new J();return function (b) {
                return this.applyMatrix4(a.getInverse(b.projectionMatrix)).applyMatrix4(b.matrixWorld);
            };
        }(), transformDirection: function transformDirection(a) {
            var b = this.x,
                c = this.y,
                d = this.z;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d;this.y = a[1] * b + a[5] * c + a[9] * d;this.z = a[2] * b + a[6] * c + a[10] * d;return this.normalize();
        }, divide: function divide(a) {
            this.x /= a.x;this.y /= a.y;this.z /= a.z;return this;
        }, divideScalar: function divideScalar(a) {
            return this.multiplyScalar(1 / a);
        }, min: function min(a) {
            this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);this.z = Math.min(this.z, a.z);return this;
        }, max: function max(a) {
            this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);this.z = Math.max(this.z, a.z);return this;
        }, clamp: function clamp(a, b) {
            this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));this.z = Math.max(a.z, Math.min(b.z, this.z));return this;
        }, clampScalar: function () {
            var a = new n(),
                b = new n();return function (c, d) {
                a.set(c, c, c);b.set(d, d, d);return this.clamp(a, b);
            };
        }(), clampLength: function clampLength(a, b) {
            var c = this.length();return this.divideScalar(c || 1).multiplyScalar(Math.max(a, Math.min(b, c)));
        }, floor: function floor() {
            this.x = Math.floor(this.x);this.y = Math.floor(this.y);this.z = Math.floor(this.z);return this;
        }, ceil: function ceil() {
            this.x = Math.ceil(this.x);
            this.y = Math.ceil(this.y);this.z = Math.ceil(this.z);return this;
        }, round: function round() {
            this.x = Math.round(this.x);this.y = Math.round(this.y);this.z = Math.round(this.z);return this;
        }, roundToZero: function roundToZero() {
            this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);return this;
        }, negate: function negate() {
            this.x = -this.x;this.y = -this.y;this.z = -this.z;return this;
        }, dot: function dot(a) {
            return this.x * a.x + this.y * a.y + this.z * a.z;
        }, lengthSq: function lengthSq() {
            return this.x * this.x + this.y * this.y + this.z * this.z;
        }, length: function length() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }, manhattanLength: function manhattanLength() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }, normalize: function normalize() {
            return this.divideScalar(this.length() || 1);
        }, setLength: function setLength(a) {
            return this.normalize().multiplyScalar(a);
        }, lerp: function lerp(a, b) {
            this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;this.z += (a.z - this.z) * b;return this;
        }, lerpVectors: function lerpVectors(a, b, c) {
            return this.subVectors(b, a).multiplyScalar(c).add(a);
        },
        cross: function cross(a, b) {
            return void 0 !== b ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, b)) : this.crossVectors(this, a);
        }, crossVectors: function crossVectors(a, b) {
            var c = a.x,
                d = a.y;a = a.z;var e = b.x,
                f = b.y;b = b.z;this.x = d * b - a * f;this.y = a * e - c * b;this.z = c * f - d * e;return this;
        }, projectOnVector: function projectOnVector(a) {
            var b = a.dot(this) / a.lengthSq();return this.copy(a).multiplyScalar(b);
        }, projectOnPlane: function () {
            var a = new n();return function (b) {
                a.copy(this).projectOnVector(b);
                return this.sub(a);
            };
        }(), reflect: function () {
            var a = new n();return function (b) {
                return this.sub(a.copy(b).multiplyScalar(2 * this.dot(b)));
            };
        }(), angleTo: function angleTo(a) {
            a = this.dot(a) / Math.sqrt(this.lengthSq() * a.lengthSq());return Math.acos(H.clamp(a, -1, 1));
        }, distanceTo: function distanceTo(a) {
            return Math.sqrt(this.distanceToSquared(a));
        }, distanceToSquared: function distanceToSquared(a) {
            var b = this.x - a.x,
                c = this.y - a.y;a = this.z - a.z;return b * b + c * c + a * a;
        }, manhattanDistanceTo: function manhattanDistanceTo(a) {
            return Math.abs(this.x - a.x) + Math.abs(this.y - a.y) + Math.abs(this.z - a.z);
        }, setFromSpherical: function setFromSpherical(a) {
            return this.setFromSphericalCoords(a.radius, a.phi, a.theta);
        }, setFromSphericalCoords: function setFromSphericalCoords(a, b, c) {
            var d = Math.sin(b) * a;this.x = d * Math.sin(c);this.y = Math.cos(b) * a;this.z = d * Math.cos(c);return this;
        }, setFromCylindrical: function setFromCylindrical(a) {
            return this.setFromCylindricalCoords(a.radius, a.theta, a.y);
        }, setFromCylindricalCoords: function setFromCylindricalCoords(a, b, c) {
            this.x = a * Math.sin(b);this.y = c;this.z = a * Math.cos(b);return this;
        }, setFromMatrixPosition: function setFromMatrixPosition(a) {
            a = a.elements;this.x = a[12];this.y = a[13];this.z = a[14];return this;
        }, setFromMatrixScale: function setFromMatrixScale(a) {
            var b = this.setFromMatrixColumn(a, 0).length(),
                c = this.setFromMatrixColumn(a, 1).length();a = this.setFromMatrixColumn(a, 2).length();this.x = b;this.y = c;this.z = a;return this;
        }, setFromMatrixColumn: function setFromMatrixColumn(a, b) {
            return this.fromArray(a.elements, 4 * b);
        }, equals: function equals(a) {
            return a.x === this.x && a.y === this.y && a.z === this.z;
        }, fromArray: function fromArray(a, b) {
            void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];this.z = a[b + 2];return this;
        }, toArray: function toArray$$1(a, b) {
            void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;a[b + 2] = this.z;return a;
        }, fromBufferAttribute: function fromBufferAttribute(a, b, c) {
            void 0 !== c && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");this.x = a.getX(b);this.y = a.getY(b);this.z = a.getZ(b);return this;
        } });Object.assign(pa.prototype, { isMatrix3: !0, set: function set$$1(a, b, c, d, e, f, g, h, k) {
            var m = this.elements;m[0] = a;m[1] = d;m[2] = g;m[3] = b;m[4] = e;m[5] = h;m[6] = c;m[7] = f;m[8] = k;return this;
        }, identity: function identity() {
            this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);return this;
        }, clone: function clone() {
            return new this.constructor().fromArray(this.elements);
        },
        copy: function copy(a) {
            var b = this.elements;a = a.elements;b[0] = a[0];b[1] = a[1];b[2] = a[2];b[3] = a[3];b[4] = a[4];b[5] = a[5];b[6] = a[6];b[7] = a[7];b[8] = a[8];return this;
        }, setFromMatrix4: function setFromMatrix4(a) {
            a = a.elements;this.set(a[0], a[4], a[8], a[1], a[5], a[9], a[2], a[6], a[10]);return this;
        }, applyToBufferAttribute: function () {
            var a = new n();return function (b) {
                for (var c = 0, d = b.count; c < d; c++) {
                    a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix3(this), b.setXYZ(c, a.x, a.y, a.z);
                }return b;
            };
        }(), multiply: function multiply(a) {
            return this.multiplyMatrices(this, a);
        }, premultiply: function premultiply(a) {
            return this.multiplyMatrices(a, this);
        }, multiplyMatrices: function multiplyMatrices(a, b) {
            var c = a.elements,
                d = b.elements;b = this.elements;a = c[0];var e = c[3],
                f = c[6],
                g = c[1],
                h = c[4],
                k = c[7],
                m = c[2],
                l = c[5];c = c[8];var q = d[0],
                n = d[3],
                t = d[6],
                r = d[1],
                u = d[4],
                w = d[7],
                z = d[2],
                x = d[5];d = d[8];b[0] = a * q + e * r + f * z;b[3] = a * n + e * u + f * x;b[6] = a * t + e * w + f * d;b[1] = g * q + h * r + k * z;b[4] = g * n + h * u + k * x;b[7] = g * t + h * w + k * d;b[2] = m * q + l * r + c * z;b[5] = m * n + l * u + c * x;b[8] = m * t + l * w + c * d;return this;
        }, multiplyScalar: function multiplyScalar(a) {
            var b = this.elements;b[0] *= a;b[3] *= a;b[6] *= a;b[1] *= a;b[4] *= a;b[7] *= a;b[2] *= a;b[5] *= a;b[8] *= a;return this;
        }, determinant: function determinant() {
            var a = this.elements,
                b = a[0],
                c = a[1],
                d = a[2],
                e = a[3],
                f = a[4],
                g = a[5],
                h = a[6],
                k = a[7];a = a[8];return b * f * a - b * g * k - c * e * a + c * g * h + d * e * k - d * f * h;
        }, getInverse: function getInverse(a, b) {
            a && a.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var c = a.elements;a = this.elements;var d = c[0],
                e = c[1],
                f = c[2],
                g = c[3],
                h = c[4],
                k = c[5],
                m = c[6],
                l = c[7];c = c[8];var q = c * h - k * l,
                n = k * m - c * g,
                t = l * g - h * m,
                r = d * q + e * n + f * t;if (0 === r) {
                if (!0 === b) throw Error("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");console.warn("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");return this.identity();
            }b = 1 / r;a[0] = q * b;a[1] = (f * l - c * e) * b;a[2] = (k * e - f * h) * b;a[3] = n * b;a[4] = (c * d - f * m) * b;a[5] = (f * g - k * d) * b;a[6] = t * b;a[7] = (e * m - l * d) * b;a[8] = (h * d - e * g) * b;return this;
        }, transpose: function transpose() {
            var a = this.elements;var b = a[1];a[1] = a[3];a[3] = b;b = a[2];a[2] = a[6];a[6] = b;b = a[5];a[5] = a[7];a[7] = b;return this;
        }, getNormalMatrix: function getNormalMatrix(a) {
            return this.setFromMatrix4(a).getInverse(this).transpose();
        },
        transposeIntoArray: function transposeIntoArray(a) {
            var b = this.elements;a[0] = b[0];a[1] = b[3];a[2] = b[6];a[3] = b[1];a[4] = b[4];a[5] = b[7];a[6] = b[2];a[7] = b[5];a[8] = b[8];return this;
        }, setUvTransform: function setUvTransform(a, b, c, d, e, f, g) {
            var h = Math.cos(e);e = Math.sin(e);this.set(c * h, c * e, -c * (h * f + e * g) + f + a, -d * e, d * h, -d * (-e * f + h * g) + g + b, 0, 0, 1);
        }, scale: function scale(a, b) {
            var c = this.elements;c[0] *= a;c[3] *= a;c[6] *= a;c[1] *= b;c[4] *= b;c[7] *= b;return this;
        }, rotate: function rotate(a) {
            var b = Math.cos(a);a = Math.sin(a);var c = this.elements,
                d = c[0],
                e = c[3],
                f = c[6],
                g = c[1],
                h = c[4],
                k = c[7];c[0] = b * d + a * g;c[3] = b * e + a * h;c[6] = b * f + a * k;c[1] = -a * d + b * g;c[4] = -a * e + b * h;c[7] = -a * f + b * k;return this;
        }, translate: function translate(a, b) {
            var c = this.elements;c[0] += a * c[2];c[3] += a * c[5];c[6] += a * c[8];c[1] += b * c[2];c[4] += b * c[5];c[7] += b * c[8];return this;
        }, equals: function equals(a) {
            var b = this.elements;a = a.elements;for (var c = 0; 9 > c; c++) {
                if (b[c] !== a[c]) return !1;
            }return !0;
        }, fromArray: function fromArray(a, b) {
            void 0 === b && (b = 0);for (var c = 0; 9 > c; c++) {
                this.elements[c] = a[c + b];
            }return this;
        }, toArray: function toArray$$1(a, b) {
            void 0 === a && (a = []);void 0 === b && (b = 0);var c = this.elements;a[b] = c[0];a[b + 1] = c[1];a[b + 2] = c[2];a[b + 3] = c[3];a[b + 4] = c[4];a[b + 5] = c[5];a[b + 6] = c[6];a[b + 7] = c[7];a[b + 8] = c[8];return a;
        } });var uc,
        lb = { getDataURL: function getDataURL(a) {
            if ("undefined" == typeof HTMLCanvasElement) return a.src;if (!(a instanceof HTMLCanvasElement)) {
                void 0 === uc && (uc = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"));uc.width = a.width;uc.height = a.height;var b = uc.getContext("2d");a instanceof ImageData ? b.putImageData(a, 0, 0) : b.drawImage(a, 0, 0, a.width, a.height);a = uc;
            }return 2048 < a.width || 2048 < a.height ? a.toDataURL("image/jpeg", .6) : a.toDataURL("image/png");
        } },
        Uf = 0;S.DEFAULT_IMAGE = void 0;S.DEFAULT_MAPPING = 300;S.prototype = Object.assign(Object.create(ka.prototype), { constructor: S, isTexture: !0, updateMatrix: function updateMatrix() {
            this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.name = a.name;this.image = a.image;this.mipmaps = a.mipmaps.slice(0);
            this.mapping = a.mapping;this.wrapS = a.wrapS;this.wrapT = a.wrapT;this.magFilter = a.magFilter;this.minFilter = a.minFilter;this.anisotropy = a.anisotropy;this.format = a.format;this.type = a.type;this.offset.copy(a.offset);this.repeat.copy(a.repeat);this.center.copy(a.center);this.rotation = a.rotation;this.matrixAutoUpdate = a.matrixAutoUpdate;this.matrix.copy(a.matrix);this.generateMipmaps = a.generateMipmaps;this.premultiplyAlpha = a.premultiplyAlpha;this.flipY = a.flipY;this.unpackAlignment = a.unpackAlignment;this.encoding = a.encoding;return this;
        }, toJSON: function toJSON(a) {
            var b = void 0 === a || "string" === typeof a;if (!b && void 0 !== a.textures[this.uuid]) return a.textures[this.uuid];var c = { metadata: { version: 4.5, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, mapping: this.mapping, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], center: [this.center.x, this.center.y], rotation: this.rotation, wrap: [this.wrapS, this.wrapT], format: this.format, type: this.type, encoding: this.encoding, minFilter: this.minFilter,
                magFilter: this.magFilter, anisotropy: this.anisotropy, flipY: this.flipY, premultiplyAlpha: this.premultiplyAlpha, unpackAlignment: this.unpackAlignment };if (void 0 !== this.image) {
                var d = this.image;void 0 === d.uuid && (d.uuid = H.generateUUID());if (!b && void 0 === a.images[d.uuid]) {
                    if (Array.isArray(d)) {
                        var e = [];for (var f = 0, g = d.length; f < g; f++) {
                            e.push(lb.getDataURL(d[f]));
                        }
                    } else e = lb.getDataURL(d);a.images[d.uuid] = { uuid: d.uuid, url: e };
                }c.image = d.uuid;
            }b || (a.textures[this.uuid] = c);return c;
        }, dispose: function dispose() {
            this.dispatchEvent({ type: "dispose" });
        },
        transformUv: function transformUv(a) {
            if (300 !== this.mapping) return a;a.applyMatrix3(this.matrix);if (0 > a.x || 1 < a.x) switch (this.wrapS) {case 1E3:
                    a.x -= Math.floor(a.x);break;case 1001:
                    a.x = 0 > a.x ? 0 : 1;break;case 1002:
                    a.x = 1 === Math.abs(Math.floor(a.x) % 2) ? Math.ceil(a.x) - a.x : a.x - Math.floor(a.x);}if (0 > a.y || 1 < a.y) switch (this.wrapT) {case 1E3:
                    a.y -= Math.floor(a.y);break;case 1001:
                    a.y = 0 > a.y ? 0 : 1;break;case 1002:
                    a.y = 1 === Math.abs(Math.floor(a.y) % 2) ? Math.ceil(a.y) - a.y : a.y - Math.floor(a.y);}this.flipY && (a.y = 1 - a.y);return a;
        } });Object.defineProperty(S.prototype, "needsUpdate", { set: function set$$1(a) {
            !0 === a && this.version++;
        } });Object.assign(ba.prototype, { isVector4: !0, set: function set$$1(a, b, c, d) {
            this.x = a;this.y = b;this.z = c;this.w = d;return this;
        }, setScalar: function setScalar(a) {
            this.w = this.z = this.y = this.x = a;return this;
        }, setX: function setX(a) {
            this.x = a;return this;
        }, setY: function setY(a) {
            this.y = a;return this;
        }, setZ: function setZ(a) {
            this.z = a;return this;
        }, setW: function setW(a) {
            this.w = a;return this;
        }, setComponent: function setComponent(a, b) {
            switch (a) {case 0:
                    this.x = b;break;case 1:
                    this.y = b;break;case 2:
                    this.z = b;break;case 3:
                    this.w = b;break;default:
                    throw Error("index is out of range: " + a);}return this;
        }, getComponent: function getComponent(a) {
            switch (a) {case 0:
                    return this.x;case 1:
                    return this.y;case 2:
                    return this.z;case 3:
                    return this.w;default:
                    throw Error("index is out of range: " + a);}
        }, clone: function clone() {
            return new this.constructor(this.x, this.y, this.z, this.w);
        }, copy: function copy(a) {
            this.x = a.x;this.y = a.y;this.z = a.z;this.w = void 0 !== a.w ? a.w : 1;return this;
        }, add: function add(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);this.x += a.x;this.y += a.y;this.z += a.z;this.w += a.w;return this;
        }, addScalar: function addScalar(a) {
            this.x += a;this.y += a;this.z += a;this.w += a;return this;
        }, addVectors: function addVectors(a, b) {
            this.x = a.x + b.x;this.y = a.y + b.y;this.z = a.z + b.z;this.w = a.w + b.w;return this;
        }, addScaledVector: function addScaledVector(a, b) {
            this.x += a.x * b;this.y += a.y * b;this.z += a.z * b;this.w += a.w * b;return this;
        }, sub: function sub(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);this.x -= a.x;this.y -= a.y;this.z -= a.z;this.w -= a.w;return this;
        }, subScalar: function subScalar(a) {
            this.x -= a;this.y -= a;this.z -= a;this.w -= a;return this;
        }, subVectors: function subVectors(a, b) {
            this.x = a.x - b.x;this.y = a.y - b.y;this.z = a.z - b.z;this.w = a.w - b.w;return this;
        }, multiplyScalar: function multiplyScalar(a) {
            this.x *= a;this.y *= a;this.z *= a;this.w *= a;return this;
        }, applyMatrix4: function applyMatrix4(a) {
            var b = this.x,
                c = this.y,
                d = this.z,
                e = this.w;a = a.elements;this.x = a[0] * b + a[4] * c + a[8] * d + a[12] * e;this.y = a[1] * b + a[5] * c + a[9] * d + a[13] * e;this.z = a[2] * b + a[6] * c + a[10] * d + a[14] * e;this.w = a[3] * b + a[7] * c + a[11] * d + a[15] * e;return this;
        }, divideScalar: function divideScalar(a) {
            return this.multiplyScalar(1 / a);
        }, setAxisAngleFromQuaternion: function setAxisAngleFromQuaternion(a) {
            this.w = 2 * Math.acos(a.w);var b = Math.sqrt(1 - a.w * a.w);1E-4 > b ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / b, this.y = a.y / b, this.z = a.z / b);return this;
        }, setAxisAngleFromRotationMatrix: function setAxisAngleFromRotationMatrix(a) {
            a = a.elements;var b = a[0];var c = a[4];var d = a[8],
                e = a[1],
                f = a[5],
                g = a[9];var h = a[2];var k = a[6];var m = a[10];if (.01 > Math.abs(c - e) && .01 > Math.abs(d - h) && .01 > Math.abs(g - k)) {
                if (.1 > Math.abs(c + e) && .1 > Math.abs(d + h) && .1 > Math.abs(g + k) && .1 > Math.abs(b + f + m - 3)) return this.set(1, 0, 0, 0), this;a = Math.PI;b = (b + 1) / 2;f = (f + 1) / 2;m = (m + 1) / 2;c = (c + e) / 4;d = (d + h) / 4;g = (g + k) / 4;b > f && b > m ? .01 > b ? (k = 0, c = h = .707106781) : (k = Math.sqrt(b), h = c / k, c = d / k) : f > m ? .01 > f ? (k = .707106781, h = 0, c = .707106781) : (h = Math.sqrt(f), k = c / h, c = g / h) : .01 > m ? (h = k = .707106781, c = 0) : (c = Math.sqrt(m), k = d / c, h = g / c);this.set(k, h, c, a);return this;
            }a = Math.sqrt((k - g) * (k - g) + (d - h) * (d - h) + (e - c) * (e - c));.001 > Math.abs(a) && (a = 1);this.x = (k - g) / a;this.y = (d - h) / a;this.z = (e - c) / a;
            this.w = Math.acos((b + f + m - 1) / 2);return this;
        }, min: function min(a) {
            this.x = Math.min(this.x, a.x);this.y = Math.min(this.y, a.y);this.z = Math.min(this.z, a.z);this.w = Math.min(this.w, a.w);return this;
        }, max: function max(a) {
            this.x = Math.max(this.x, a.x);this.y = Math.max(this.y, a.y);this.z = Math.max(this.z, a.z);this.w = Math.max(this.w, a.w);return this;
        }, clamp: function clamp(a, b) {
            this.x = Math.max(a.x, Math.min(b.x, this.x));this.y = Math.max(a.y, Math.min(b.y, this.y));this.z = Math.max(a.z, Math.min(b.z, this.z));this.w = Math.max(a.w, Math.min(b.w, this.w));return this;
        }, clampScalar: function () {
            var a, b;return function (c, d) {
                void 0 === a && (a = new ba(), b = new ba());a.set(c, c, c, c);b.set(d, d, d, d);return this.clamp(a, b);
            };
        }(), clampLength: function clampLength(a, b) {
            var c = this.length();return this.divideScalar(c || 1).multiplyScalar(Math.max(a, Math.min(b, c)));
        }, floor: function floor() {
            this.x = Math.floor(this.x);this.y = Math.floor(this.y);this.z = Math.floor(this.z);this.w = Math.floor(this.w);return this;
        }, ceil: function ceil() {
            this.x = Math.ceil(this.x);this.y = Math.ceil(this.y);this.z = Math.ceil(this.z);
            this.w = Math.ceil(this.w);return this;
        }, round: function round() {
            this.x = Math.round(this.x);this.y = Math.round(this.y);this.z = Math.round(this.z);this.w = Math.round(this.w);return this;
        }, roundToZero: function roundToZero() {
            this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);return this;
        }, negate: function negate() {
            this.x = -this.x;this.y = -this.y;this.z = -this.z;this.w = -this.w;return this;
        },
        dot: function dot(a) {
            return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
        }, lengthSq: function lengthSq() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }, length: function length() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }, manhattanLength: function manhattanLength() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
        }, normalize: function normalize() {
            return this.divideScalar(this.length() || 1);
        }, setLength: function setLength(a) {
            return this.normalize().multiplyScalar(a);
        }, lerp: function lerp(a, b) {
            this.x += (a.x - this.x) * b;this.y += (a.y - this.y) * b;this.z += (a.z - this.z) * b;this.w += (a.w - this.w) * b;return this;
        }, lerpVectors: function lerpVectors(a, b, c) {
            return this.subVectors(b, a).multiplyScalar(c).add(a);
        }, equals: function equals(a) {
            return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
        }, fromArray: function fromArray(a, b) {
            void 0 === b && (b = 0);this.x = a[b];this.y = a[b + 1];this.z = a[b + 2];this.w = a[b + 3];return this;
        }, toArray: function toArray$$1(a, b) {
            void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.x;a[b + 1] = this.y;a[b + 2] = this.z;a[b + 3] = this.w;return a;
        }, fromBufferAttribute: function fromBufferAttribute(a, b, c) {
            void 0 !== c && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");this.x = a.getX(b);this.y = a.getY(b);this.z = a.getZ(b);this.w = a.getW(b);return this;
        } });Sa.prototype = Object.assign(Object.create(ka.prototype), { constructor: Sa, isWebGLRenderTarget: !0, setSize: function setSize(a, b) {
            if (this.width !== a || this.height !== b) this.width = a, this.height = b, this.dispose();this.viewport.set(0, 0, a, b);this.scissor.set(0, 0, a, b);
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.width = a.width;this.height = a.height;this.viewport.copy(a.viewport);this.texture = a.texture.clone();this.depthBuffer = a.depthBuffer;this.stencilBuffer = a.stencilBuffer;this.depthTexture = a.depthTexture;return this;
        }, dispose: function dispose() {
            this.dispatchEvent({ type: "dispose" });
        } });$d.prototype = Object.assign(Object.create(Sa.prototype), { constructor: $d, isWebGLMultisampleRenderTarget: !0, copy: function copy(a) {
            Sa.prototype.copy.call(this, a);this.samples = a.samples;return this;
        } });mb.prototype = Object.create(Sa.prototype);mb.prototype.constructor = mb;mb.prototype.isWebGLRenderTargetCube = !0;nb.prototype = Object.create(S.prototype);nb.prototype.constructor = nb;nb.prototype.isDataTexture = !0;Object.assign(Ha.prototype, { isBox3: !0, set: function set$$1(a, b) {
            this.min.copy(a);this.max.copy(b);return this;
        }, setFromArray: function setFromArray(a) {
            for (var b = Infinity, c = Infinity, d = Infinity, e = -Infinity, f = -Infinity, g = -Infinity, h = 0, k = a.length; h < k; h += 3) {
                var m = a[h],
                    l = a[h + 1],
                    q = a[h + 2];m < b && (b = m);l < c && (c = l);q < d && (d = q);m > e && (e = m);l > f && (f = l);q > g && (g = q);
            }this.min.set(b, c, d);this.max.set(e, f, g);return this;
        }, setFromBufferAttribute: function setFromBufferAttribute(a) {
            for (var b = Infinity, c = Infinity, d = Infinity, e = -Infinity, f = -Infinity, g = -Infinity, h = 0, k = a.count; h < k; h++) {
                var m = a.getX(h),
                    l = a.getY(h),
                    q = a.getZ(h);m < b && (b = m);l < c && (c = l);q < d && (d = q);m > e && (e = m);l > f && (f = l);q > g && (g = q);
            }this.min.set(b, c, d);this.max.set(e, f, g);return this;
        }, setFromPoints: function setFromPoints(a) {
            this.makeEmpty();for (var b = 0, c = a.length; b < c; b++) {
                this.expandByPoint(a[b]);
            }return this;
        }, setFromCenterAndSize: function () {
            var a = new n();return function (b, c) {
                c = a.copy(c).multiplyScalar(.5);
                this.min.copy(b).sub(c);this.max.copy(b).add(c);return this;
            };
        }(), setFromObject: function setFromObject(a) {
            this.makeEmpty();return this.expandByObject(a);
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.min.copy(a.min);this.max.copy(a.max);return this;
        }, makeEmpty: function makeEmpty() {
            this.min.x = this.min.y = this.min.z = Infinity;this.max.x = this.max.y = this.max.z = -Infinity;return this;
        }, isEmpty: function isEmpty() {
            return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
        }, getCenter: function getCenter(a) {
            void 0 === a && (console.warn("THREE.Box3: .getCenter() target is now required"), a = new n());return this.isEmpty() ? a.set(0, 0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
        }, getSize: function getSize(a) {
            void 0 === a && (console.warn("THREE.Box3: .getSize() target is now required"), a = new n());return this.isEmpty() ? a.set(0, 0, 0) : a.subVectors(this.max, this.min);
        }, expandByPoint: function expandByPoint(a) {
            this.min.min(a);this.max.max(a);return this;
        }, expandByVector: function expandByVector(a) {
            this.min.sub(a);this.max.add(a);return this;
        }, expandByScalar: function expandByScalar(a) {
            this.min.addScalar(-a);
            this.max.addScalar(a);return this;
        }, expandByObject: function () {
            function a(a) {
                var f = a.geometry;if (void 0 !== f) if (f.isGeometry) for (f = f.vertices, c = 0, d = f.length; c < d; c++) {
                    e.copy(f[c]), e.applyMatrix4(a.matrixWorld), b.expandByPoint(e);
                } else if (f.isBufferGeometry && (f = f.attributes.position, void 0 !== f)) for (c = 0, d = f.count; c < d; c++) {
                    e.fromBufferAttribute(f, c).applyMatrix4(a.matrixWorld), b.expandByPoint(e);
                }
            }var b,
                c,
                d,
                e = new n();return function (c) {
                b = this;c.updateMatrixWorld(!0);c.traverse(a);return this;
            };
        }(), containsPoint: function containsPoint(a) {
            return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
        }, containsBox: function containsBox(a) {
            return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z;
        }, getParameter: function getParameter(a, b) {
            void 0 === b && (console.warn("THREE.Box3: .getParameter() target is now required"), b = new n());return b.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
        },
        intersectsBox: function intersectsBox(a) {
            return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
        }, intersectsSphere: function () {
            var a = new n();return function (b) {
                this.clampPoint(b.center, a);return a.distanceToSquared(b.center) <= b.radius * b.radius;
            };
        }(), intersectsPlane: function intersectsPlane(a) {
            if (0 < a.normal.x) {
                var b = a.normal.x * this.min.x;var c = a.normal.x * this.max.x;
            } else b = a.normal.x * this.max.x, c = a.normal.x * this.min.x;0 < a.normal.y ? (b += a.normal.y * this.min.y, c += a.normal.y * this.max.y) : (b += a.normal.y * this.max.y, c += a.normal.y * this.min.y);0 < a.normal.z ? (b += a.normal.z * this.min.z, c += a.normal.z * this.max.z) : (b += a.normal.z * this.max.z, c += a.normal.z * this.min.z);return b <= -a.constant && c >= -a.constant;
        }, intersectsTriangle: function () {
            function a(a) {
                var e;var f = 0;for (e = a.length - 3; f <= e; f += 3) {
                    h.fromArray(a, f);var g = m.x * Math.abs(h.x) + m.y * Math.abs(h.y) + m.z * Math.abs(h.z),
                        k = b.dot(h),
                        l = c.dot(h),
                        p = d.dot(h);if (Math.max(-Math.max(k, l, p), Math.min(k, l, p)) > g) return !1;
                }return !0;
            }var b = new n(),
                c = new n(),
                d = new n(),
                e = new n(),
                f = new n(),
                g = new n(),
                h = new n(),
                k = new n(),
                m = new n(),
                l = new n();return function (h) {
                if (this.isEmpty()) return !1;this.getCenter(k);m.subVectors(this.max, k);b.subVectors(h.a, k);c.subVectors(h.b, k);d.subVectors(h.c, k);e.subVectors(c, b);f.subVectors(d, c);g.subVectors(b, d);h = [0, -e.z, e.y, 0, -f.z, f.y, 0, -g.z, g.y, e.z, 0, -e.x, f.z, 0, -f.x, g.z, 0, -g.x, -e.y, e.x, 0, -f.y, f.x, 0, -g.y, g.x, 0];if (!a(h)) return !1;h = [1, 0, 0, 0, 1, 0, 0, 0, 1];if (!a(h)) return !1;l.crossVectors(e, f);h = [l.x, l.y, l.z];return a(h);
            };
        }(), clampPoint: function clampPoint(a, b) {
            void 0 === b && (console.warn("THREE.Box3: .clampPoint() target is now required"), b = new n());return b.copy(a).clamp(this.min, this.max);
        }, distanceToPoint: function () {
            var a = new n();return function (b) {
                return a.copy(b).clamp(this.min, this.max).sub(b).length();
            };
        }(), getBoundingSphere: function () {
            var a = new n();return function (b) {
                void 0 === b && (console.warn("THREE.Box3: .getBoundingSphere() target is now required"), b = new Ia());this.getCenter(b.center);b.radius = .5 * this.getSize(a).length();return b;
            };
        }(), intersect: function intersect(a) {
            this.min.max(a.min);
            this.max.min(a.max);this.isEmpty() && this.makeEmpty();return this;
        }, union: function union(a) {
            this.min.min(a.min);this.max.max(a.max);return this;
        }, applyMatrix4: function () {
            var a = [new n(), new n(), new n(), new n(), new n(), new n(), new n(), new n()];return function (b) {
                if (this.isEmpty()) return this;a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(b);a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(b);a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(b);a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(b);
                a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(b);a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(b);a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(b);a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(b);this.setFromPoints(a);return this;
            };
        }(), translate: function translate(a) {
            this.min.add(a);this.max.add(a);return this;
        }, equals: function equals(a) {
            return a.min.equals(this.min) && a.max.equals(this.max);
        } });Object.assign(Ia.prototype, { set: function set$$1(a, b) {
            this.center.copy(a);this.radius = b;return this;
        },
        setFromPoints: function () {
            var a = new Ha();return function (b, c) {
                var d = this.center;void 0 !== c ? d.copy(c) : a.setFromPoints(b).getCenter(d);for (var e = c = 0, f = b.length; e < f; e++) {
                    c = Math.max(c, d.distanceToSquared(b[e]));
                }this.radius = Math.sqrt(c);return this;
            };
        }(), clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.center.copy(a.center);this.radius = a.radius;return this;
        }, empty: function empty() {
            return 0 >= this.radius;
        }, containsPoint: function containsPoint(a) {
            return a.distanceToSquared(this.center) <= this.radius * this.radius;
        },
        distanceToPoint: function distanceToPoint(a) {
            return a.distanceTo(this.center) - this.radius;
        }, intersectsSphere: function intersectsSphere(a) {
            var b = this.radius + a.radius;return a.center.distanceToSquared(this.center) <= b * b;
        }, intersectsBox: function intersectsBox(a) {
            return a.intersectsSphere(this);
        }, intersectsPlane: function intersectsPlane(a) {
            return Math.abs(a.distanceToPoint(this.center)) <= this.radius;
        }, clampPoint: function clampPoint(a, b) {
            var c = this.center.distanceToSquared(a);void 0 === b && (console.warn("THREE.Sphere: .clampPoint() target is now required"), b = new n());b.copy(a);c > this.radius * this.radius && (b.sub(this.center).normalize(), b.multiplyScalar(this.radius).add(this.center));return b;
        }, getBoundingBox: function getBoundingBox(a) {
            void 0 === a && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), a = new Ha());a.set(this.center, this.center);a.expandByScalar(this.radius);return a;
        }, applyMatrix4: function applyMatrix4(a) {
            this.center.applyMatrix4(a);this.radius *= a.getMaxScaleOnAxis();return this;
        }, translate: function translate(a) {
            this.center.add(a);return this;
        }, equals: function equals(a) {
            return a.center.equals(this.center) && a.radius === this.radius;
        } });Object.assign(Ta.prototype, { set: function set$$1(a, b) {
            this.normal.copy(a);this.constant = b;return this;
        }, setComponents: function setComponents(a, b, c, d) {
            this.normal.set(a, b, c);this.constant = d;return this;
        }, setFromNormalAndCoplanarPoint: function setFromNormalAndCoplanarPoint(a, b) {
            this.normal.copy(a);this.constant = -b.dot(this.normal);return this;
        }, setFromCoplanarPoints: function () {
            var a = new n(),
                b = new n();return function (c, d, e) {
                d = a.subVectors(e, d).cross(b.subVectors(c, d)).normalize();this.setFromNormalAndCoplanarPoint(d, c);return this;
            };
        }(),
        clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.normal.copy(a.normal);this.constant = a.constant;return this;
        }, normalize: function normalize() {
            var a = 1 / this.normal.length();this.normal.multiplyScalar(a);this.constant *= a;return this;
        }, negate: function negate() {
            this.constant *= -1;this.normal.negate();return this;
        }, distanceToPoint: function distanceToPoint(a) {
            return this.normal.dot(a) + this.constant;
        }, distanceToSphere: function distanceToSphere(a) {
            return this.distanceToPoint(a.center) - a.radius;
        }, projectPoint: function projectPoint(a, b) {
            void 0 === b && (console.warn("THREE.Plane: .projectPoint() target is now required"), b = new n());return b.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a);
        }, intersectLine: function () {
            var a = new n();return function (b, c) {
                void 0 === c && (console.warn("THREE.Plane: .intersectLine() target is now required"), c = new n());var d = b.delta(a),
                    e = this.normal.dot(d);if (0 === e) {
                    if (0 === this.distanceToPoint(b.start)) return c.copy(b.start);
                } else if (e = -(b.start.dot(this.normal) + this.constant) / e, !(0 > e || 1 < e)) return c.copy(d).multiplyScalar(e).add(b.start);
            };
        }(),
        intersectsLine: function intersectsLine(a) {
            var b = this.distanceToPoint(a.start);a = this.distanceToPoint(a.end);return 0 > b && 0 < a || 0 > a && 0 < b;
        }, intersectsBox: function intersectsBox(a) {
            return a.intersectsPlane(this);
        }, intersectsSphere: function intersectsSphere(a) {
            return a.intersectsPlane(this);
        }, coplanarPoint: function coplanarPoint(a) {
            void 0 === a && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), a = new n());return a.copy(this.normal).multiplyScalar(-this.constant);
        }, applyMatrix4: function () {
            var a = new n(),
                b = new pa();return function (c, d) {
                d = d || b.getNormalMatrix(c);
                c = this.coplanarPoint(a).applyMatrix4(c);d = this.normal.applyMatrix3(d).normalize();this.constant = -c.dot(d);return this;
            };
        }(), translate: function translate(a) {
            this.constant -= a.dot(this.normal);return this;
        }, equals: function equals(a) {
            return a.normal.equals(this.normal) && a.constant === this.constant;
        } });Object.assign(vd.prototype, { set: function set$$1(a, b, c, d, e, f) {
            var g = this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this;
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            for (var b = this.planes, c = 0; 6 > c; c++) {
                b[c].copy(a.planes[c]);
            }return this;
        }, setFromMatrix: function setFromMatrix(a) {
            var b = this.planes,
                c = a.elements;a = c[0];var d = c[1],
                e = c[2],
                f = c[3],
                g = c[4],
                h = c[5],
                k = c[6],
                m = c[7],
                l = c[8],
                q = c[9],
                n = c[10],
                t = c[11],
                r = c[12],
                u = c[13],
                w = c[14];c = c[15];b[0].setComponents(f - a, m - g, t - l, c - r).normalize();b[1].setComponents(f + a, m + g, t + l, c + r).normalize();b[2].setComponents(f + d, m + h, t + q, c + u).normalize();b[3].setComponents(f - d, m - h, t - q, c - u).normalize();b[4].setComponents(f - e, m - k, t - n, c - w).normalize();b[5].setComponents(f + e, m + k, t + n, c + w).normalize();return this;
        }, intersectsObject: function () {
            var a = new Ia();return function (b) {
                var c = b.geometry;null === c.boundingSphere && c.computeBoundingSphere();a.copy(c.boundingSphere).applyMatrix4(b.matrixWorld);return this.intersectsSphere(a);
            };
        }(), intersectsSprite: function () {
            var a = new Ia();return function (b) {
                a.center.set(0, 0, 0);a.radius = .7071067811865476;a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a);
            };
        }(), intersectsSphere: function intersectsSphere(a) {
            var b = this.planes,
                c = a.center;a = -a.radius;for (var d = 0; 6 > d; d++) {
                if (b[d].distanceToPoint(c) < a) return !1;
            }return !0;
        }, intersectsBox: function () {
            var a = new n();return function (b) {
                for (var c = this.planes, d = 0; 6 > d; d++) {
                    var e = c[d];a.x = 0 < e.normal.x ? b.max.x : b.min.x;a.y = 0 < e.normal.y ? b.max.y : b.min.y;a.z = 0 < e.normal.z ? b.max.z : b.min.z;if (0 > e.distanceToPoint(a)) return !1;
                }return !0;
            };
        }(), containsPoint: function containsPoint(a) {
            for (var b = this.planes, c = 0; 6 > c; c++) {
                if (0 > b[c].distanceToPoint(a)) return !1;
            }return !0;
        } });var V = { alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",
        alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif", alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif", aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",
        aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif", begin_vertex: "vec3 transformed = vec3( position );", beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif", bsdfs: "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick( specularColor, dotNV );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}",
        bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
        clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
        clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif", clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif", clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",
        color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif", color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", color_pars_vertex: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif", color_vertex: "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif", common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}",
        cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",
        defaultnormal_vertex: "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif", displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif", displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif",
        emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif", emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif", encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );", encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",
        envmap_fragment: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
        envmap_pars_fragment: "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
        envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif", envmap_physical_pars_fragment: "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",
        envmap_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
        fog_vertex: "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif", fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif", fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif", fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
        gradientmap_pars_fragment: "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif", lightmap_fragment: "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",
        lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif", lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",
        lights_pars_begin: "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",
        lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;", lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
        lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif",
        lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#endif\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\t\tvec3 diffuse = material.diffuseColor;\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\t#else\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#endif\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
        lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif",
        lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif",
        lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif", logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif",
        logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif", logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif", map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",
        map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif", map_particle_fragment: "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif", map_particle_pars_fragment: "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif", metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
        metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif", morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif", morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
        morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",
        normal_fragment_begin: "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif",
        normal_fragment_maps: "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\t#ifdef USE_TANGENT\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy = normalScale * mapN.xy;\n\t\t\tnormal = normalize( vTBN * mapN );\n\t\t#else\n\t\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t\t#endif\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",
        normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif",
        packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
        premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif", project_vertex: "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;", dithering_fragment: "#if defined( DITHERING )\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif", dithering_pars_fragment: "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
        roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif", roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
        shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif",
        shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",
        shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",
        skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
        skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif", skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
        specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif", specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif", tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif", tonemapping_pars_fragment: "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",
        uv_pars_fragment: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif", uv_pars_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif",
        uv_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif", uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif", uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
        uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif", worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif", background_frag: "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
        cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
        depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",
        depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",
        distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
        distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
        equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}", linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
        meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
        meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
        meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshphysical_frag: "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshphysical_vert: "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
        normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
        points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
        shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}", shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}" },
        jh = { clone: Mb, merge: xa },
        kh = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643,
        darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055,
        grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184,
        lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130,
        palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780,
        teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 };Object.assign(K.prototype, { isColor: !0, r: 1, g: 1, b: 1, set: function set$$1(a) {
            a && a.isColor ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);return this;
        }, setScalar: function setScalar(a) {
            this.b = this.g = this.r = a;return this;
        }, setHex: function setHex(a) {
            a = Math.floor(a);this.r = (a >> 16 & 255) / 255;this.g = (a >> 8 & 255) / 255;this.b = (a & 255) / 255;
            return this;
        }, setRGB: function setRGB(a, b, c) {
            this.r = a;this.g = b;this.b = c;return this;
        }, setHSL: function () {
            function a(a, c, d) {
                0 > d && (d += 1);1 < d && --d;return d < 1 / 6 ? a + 6 * (c - a) * d : .5 > d ? c : d < 2 / 3 ? a + 6 * (c - a) * (2 / 3 - d) : a;
            }return function (b, c, d) {
                b = H.euclideanModulo(b, 1);c = H.clamp(c, 0, 1);d = H.clamp(d, 0, 1);0 === c ? this.r = this.g = this.b = d : (c = .5 >= d ? d * (1 + c) : d + c - d * c, d = 2 * d - c, this.r = a(d, c, b + 1 / 3), this.g = a(d, c, b), this.b = a(d, c, b - 1 / 3));return this;
            };
        }(), setStyle: function setStyle(a) {
            function b(b) {
                void 0 !== b && 1 > parseFloat(b) && console.warn("THREE.Color: Alpha component of " + a + " will be ignored.");
            }var c;if (c = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)) {
                var d = c[2];switch (c[1]) {case "rgb":case "rgba":
                        if (c = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(255, parseInt(c[1], 10)) / 255, this.g = Math.min(255, parseInt(c[2], 10)) / 255, this.b = Math.min(255, parseInt(c[3], 10)) / 255, b(c[5]), this;if (c = /^(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(100, parseInt(c[1], 10)) / 100, this.g = Math.min(100, parseInt(c[2], 10)) / 100, this.b = Math.min(100, parseInt(c[3], 10)) / 100, b(c[5]), this;break;case "hsl":case "hsla":
                        if (c = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) {
                            d = parseFloat(c[1]) / 360;var e = parseInt(c[2], 10) / 100,
                                f = parseInt(c[3], 10) / 100;b(c[5]);return this.setHSL(d, e, f);
                        }}
            } else if (c = /^#([A-Fa-f0-9]+)$/.exec(a)) {
                c = c[1];d = c.length;if (3 === d) return this.r = parseInt(c.charAt(0) + c.charAt(0), 16) / 255, this.g = parseInt(c.charAt(1) + c.charAt(1), 16) / 255, this.b = parseInt(c.charAt(2) + c.charAt(2), 16) / 255, this;if (6 === d) return this.r = parseInt(c.charAt(0) + c.charAt(1), 16) / 255, this.g = parseInt(c.charAt(2) + c.charAt(3), 16) / 255, this.b = parseInt(c.charAt(4) + c.charAt(5), 16) / 255, this;
            }a && 0 < a.length && (c = kh[a], void 0 !== c ? this.setHex(c) : console.warn("THREE.Color: Unknown color " + a));return this;
        }, clone: function clone() {
            return new this.constructor(this.r, this.g, this.b);
        }, copy: function copy(a) {
            this.r = a.r;this.g = a.g;this.b = a.b;return this;
        }, copyGammaToLinear: function copyGammaToLinear(a, b) {
            void 0 === b && (b = 2);this.r = Math.pow(a.r, b);this.g = Math.pow(a.g, b);this.b = Math.pow(a.b, b);return this;
        }, copyLinearToGamma: function copyLinearToGamma(a, b) {
            void 0 === b && (b = 2);b = 0 < b ? 1 / b : 1;this.r = Math.pow(a.r, b);this.g = Math.pow(a.g, b);this.b = Math.pow(a.b, b);return this;
        }, convertGammaToLinear: function convertGammaToLinear(a) {
            this.copyGammaToLinear(this, a);return this;
        }, convertLinearToGamma: function convertLinearToGamma(a) {
            this.copyLinearToGamma(this, a);return this;
        }, copySRGBToLinear: function () {
            function a(a) {
                return .04045 > a ? .0773993808 * a : Math.pow(.9478672986 * a + .0521327014, 2.4);
            }return function (b) {
                this.r = a(b.r);this.g = a(b.g);this.b = a(b.b);return this;
            };
        }(), copyLinearToSRGB: function () {
            function a(a) {
                return .0031308 > a ? 12.92 * a : 1.055 * Math.pow(a, .41666) - .055;
            }return function (b) {
                this.r = a(b.r);this.g = a(b.g);this.b = a(b.b);return this;
            };
        }(), convertSRGBToLinear: function convertSRGBToLinear() {
            this.copySRGBToLinear(this);return this;
        }, convertLinearToSRGB: function convertLinearToSRGB() {
            this.copyLinearToSRGB(this);return this;
        }, getHex: function getHex() {
            return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
        }, getHexString: function getHexString() {
            return ("000000" + this.getHex().toString(16)).slice(-6);
        }, getHSL: function getHSL(a) {
            void 0 === a && (console.warn("THREE.Color: .getHSL() target is now required"), a = { h: 0, s: 0, l: 0 });var b = this.r,
                c = this.g,
                d = this.b,
                e = Math.max(b, c, d),
                f = Math.min(b, c, d),
                g,
                h = (f + e) / 2;if (f === e) f = g = 0;else {
                var k = e - f;f = .5 >= h ? k / (e + f) : k / (2 - e - f);switch (e) {case b:
                        g = (c - d) / k + (c < d ? 6 : 0);break;case c:
                        g = (d - b) / k + 2;break;case d:
                        g = (b - c) / k + 4;}g /= 6;
            }a.h = g;a.s = f;a.l = h;return a;
        }, getStyle: function getStyle() {
            return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
        }, offsetHSL: function () {
            var a = {};return function (b, c, d) {
                this.getHSL(a);a.h += b;a.s += c;a.l += d;this.setHSL(a.h, a.s, a.l);return this;
            };
        }(), add: function add(a) {
            this.r += a.r;this.g += a.g;this.b += a.b;return this;
        }, addColors: function addColors(a, b) {
            this.r = a.r + b.r;this.g = a.g + b.g;this.b = a.b + b.b;return this;
        }, addScalar: function addScalar(a) {
            this.r += a;this.g += a;this.b += a;return this;
        }, sub: function sub(a) {
            this.r = Math.max(0, this.r - a.r);this.g = Math.max(0, this.g - a.g);this.b = Math.max(0, this.b - a.b);return this;
        }, multiply: function multiply(a) {
            this.r *= a.r;this.g *= a.g;this.b *= a.b;return this;
        }, multiplyScalar: function multiplyScalar(a) {
            this.r *= a;this.g *= a;this.b *= a;return this;
        }, lerp: function lerp(a, b) {
            this.r += (a.r - this.r) * b;this.g += (a.g - this.g) * b;this.b += (a.b - this.b) * b;return this;
        }, lerpHSL: function () {
            var a = { h: 0, s: 0, l: 0 },
                b = { h: 0, s: 0, l: 0 };return function (c, d) {
                this.getHSL(a);c.getHSL(b);c = H.lerp(a.h, b.h, d);var e = H.lerp(a.s, b.s, d);d = H.lerp(a.l, b.l, d);this.setHSL(c, e, d);return this;
            };
        }(), equals: function equals(a) {
            return a.r === this.r && a.g === this.g && a.b === this.b;
        }, fromArray: function fromArray(a, b) {
            void 0 === b && (b = 0);this.r = a[b];this.g = a[b + 1];this.b = a[b + 2];return this;
        }, toArray: function toArray$$1(a, b) {
            void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this.r;a[b + 1] = this.g;a[b + 2] = this.b;return a;
        }, toJSON: function toJSON() {
            return this.getHex();
        } });var I = { common: { diffuse: { value: new K(15658734) }, opacity: { value: 1 }, map: { value: null }, uvTransform: { value: new pa() }, alphaMap: { value: null } }, specularmap: { specularMap: { value: null } }, envmap: { envMap: { value: null }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, refractionRatio: { value: .98 }, maxMipLevel: { value: 0 } }, aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } }, lightmap: { lightMap: { value: null },
            lightMapIntensity: { value: 1 } }, emissivemap: { emissiveMap: { value: null } }, bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } }, normalmap: { normalMap: { value: null }, normalScale: { value: new B(1, 1) } }, displacementmap: { displacementMap: { value: null }, displacementScale: { value: 1 }, displacementBias: { value: 0 } }, roughnessmap: { roughnessMap: { value: null } }, metalnessmap: { metalnessMap: { value: null } }, gradientmap: { gradientMap: { value: null } }, fog: { fogDensity: { value: 2.5E-4 }, fogNear: { value: 1 }, fogFar: { value: 2E3 }, fogColor: { value: new K(16777215) } },
        lights: { ambientLightColor: { value: [] }, directionalLights: { value: [], properties: { direction: {}, color: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, directionalShadowMap: { value: [] }, directionalShadowMatrix: { value: [] }, spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, spotShadowMap: { value: [] }, spotShadowMatrix: { value: [] }, pointLights: { value: [], properties: { color: {}, position: {},
                    decay: {}, distance: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } }, pointShadowMap: { value: [] }, pointShadowMatrix: { value: [] }, hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } }, rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } } }, points: { diffuse: { value: new K(15658734) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, uvTransform: { value: new pa() } }, sprite: { diffuse: { value: new K(15658734) },
            opacity: { value: 1 }, center: { value: new B(.5, .5) }, rotation: { value: 0 }, map: { value: null }, uvTransform: { value: new pa() } } },
        Ua = { basic: { uniforms: xa([I.common, I.specularmap, I.envmap, I.aomap, I.lightmap, I.fog]), vertexShader: V.meshbasic_vert, fragmentShader: V.meshbasic_frag }, lambert: { uniforms: xa([I.common, I.specularmap, I.envmap, I.aomap, I.lightmap, I.emissivemap, I.fog, I.lights, { emissive: { value: new K(0) } }]), vertexShader: V.meshlambert_vert, fragmentShader: V.meshlambert_frag }, phong: { uniforms: xa([I.common, I.specularmap, I.envmap, I.aomap, I.lightmap, I.emissivemap, I.bumpmap, I.normalmap, I.displacementmap, I.gradientmap, I.fog, I.lights, { emissive: { value: new K(0) }, specular: { value: new K(1118481) }, shininess: { value: 30 } }]), vertexShader: V.meshphong_vert, fragmentShader: V.meshphong_frag }, standard: { uniforms: xa([I.common, I.envmap, I.aomap, I.lightmap, I.emissivemap, I.bumpmap, I.normalmap, I.displacementmap, I.roughnessmap, I.metalnessmap, I.fog, I.lights, { emissive: { value: new K(0) }, roughness: { value: .5 }, metalness: { value: .5 }, envMapIntensity: { value: 1 } }]),
            vertexShader: V.meshphysical_vert, fragmentShader: V.meshphysical_frag }, matcap: { uniforms: xa([I.common, I.bumpmap, I.normalmap, I.displacementmap, I.fog, { matcap: { value: null } }]), vertexShader: V.meshmatcap_vert, fragmentShader: V.meshmatcap_frag }, points: { uniforms: xa([I.points, I.fog]), vertexShader: V.points_vert, fragmentShader: V.points_frag }, dashed: { uniforms: xa([I.common, I.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: V.linedashed_vert, fragmentShader: V.linedashed_frag }, depth: { uniforms: xa([I.common, I.displacementmap]), vertexShader: V.depth_vert, fragmentShader: V.depth_frag }, normal: { uniforms: xa([I.common, I.bumpmap, I.normalmap, I.displacementmap, { opacity: { value: 1 } }]), vertexShader: V.normal_vert, fragmentShader: V.normal_frag }, sprite: { uniforms: xa([I.sprite, I.fog]), vertexShader: V.sprite_vert, fragmentShader: V.sprite_frag }, background: { uniforms: { uvTransform: { value: new pa() }, t2D: { value: null } }, vertexShader: V.background_vert, fragmentShader: V.background_frag }, cube: { uniforms: { tCube: { value: null }, tFlip: { value: -1 },
                opacity: { value: 1 } }, vertexShader: V.cube_vert, fragmentShader: V.cube_frag }, equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: V.equirect_vert, fragmentShader: V.equirect_frag }, distanceRGBA: { uniforms: xa([I.common, I.displacementmap, { referencePosition: { value: new n() }, nearDistance: { value: 1 }, farDistance: { value: 1E3 } }]), vertexShader: V.distanceRGBA_vert, fragmentShader: V.distanceRGBA_frag }, shadow: { uniforms: xa([I.lights, I.fog, { color: { value: new K(0) }, opacity: { value: 1 } }]), vertexShader: V.shadow_vert, fragmentShader: V.shadow_frag } };
    Ua.physical = { uniforms: xa([Ua.standard.uniforms, { clearCoat: { value: 0 }, clearCoatRoughness: { value: 0 } }]), vertexShader: V.meshphysical_vert, fragmentShader: V.meshphysical_frag };Object.assign(Nb.prototype, { clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.a = a.a;this.b = a.b;this.c = a.c;this.normal.copy(a.normal);this.color.copy(a.color);this.materialIndex = a.materialIndex;for (var b = 0, c = a.vertexNormals.length; b < c; b++) {
                this.vertexNormals[b] = a.vertexNormals[b].clone();
            }b = 0;for (c = a.vertexColors.length; b < c; b++) {
                this.vertexColors[b] = a.vertexColors[b].clone();
            }return this;
        } });ob.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");ob.DefaultOrder = "XYZ";Object.defineProperties(ob.prototype, { x: { get: function get$$1() {
                return this._x;
            }, set: function set$$1(a) {
                this._x = a;this.onChangeCallback();
            } }, y: { get: function get$$1() {
                return this._y;
            }, set: function set$$1(a) {
                this._y = a;this.onChangeCallback();
            } }, z: { get: function get$$1() {
                return this._z;
            }, set: function set$$1(a) {
                this._z = a;this.onChangeCallback();
            } }, order: { get: function get$$1() {
                return this._order;
            }, set: function set$$1(a) {
                this._order = a;this.onChangeCallback();
            } } });Object.assign(ob.prototype, { isEuler: !0, set: function set$$1(a, b, c, d) {
            this._x = a;this._y = b;this._z = c;this._order = d || this._order;this.onChangeCallback();return this;
        }, clone: function clone() {
            return new this.constructor(this._x, this._y, this._z, this._order);
        }, copy: function copy(a) {
            this._x = a._x;this._y = a._y;this._z = a._z;this._order = a._order;this.onChangeCallback();return this;
        }, setFromRotationMatrix: function setFromRotationMatrix(a, b, c) {
            var d = H.clamp,
                e = a.elements;a = e[0];var f = e[4],
                g = e[8],
                h = e[1],
                k = e[5],
                m = e[9],
                l = e[2],
                q = e[6];e = e[10];b = b || this._order;"XYZ" === b ? (this._y = Math.asin(d(g, -1, 1)), .99999 > Math.abs(g) ? (this._x = Math.atan2(-m, e), this._z = Math.atan2(-f, a)) : (this._x = Math.atan2(q, k), this._z = 0)) : "YXZ" === b ? (this._x = Math.asin(-d(m, -1, 1)), .99999 > Math.abs(m) ? (this._y = Math.atan2(g, e), this._z = Math.atan2(h, k)) : (this._y = Math.atan2(-l, a), this._z = 0)) : "ZXY" === b ? (this._x = Math.asin(d(q, -1, 1)), .99999 > Math.abs(q) ? (this._y = Math.atan2(-l, e), this._z = Math.atan2(-f, k)) : (this._y = 0, this._z = Math.atan2(h, a))) : "ZYX" === b ? (this._y = Math.asin(-d(l, -1, 1)), .99999 > Math.abs(l) ? (this._x = Math.atan2(q, e), this._z = Math.atan2(h, a)) : (this._x = 0, this._z = Math.atan2(-f, k))) : "YZX" === b ? (this._z = Math.asin(d(h, -1, 1)), .99999 > Math.abs(h) ? (this._x = Math.atan2(-m, k), this._y = Math.atan2(-l, a)) : (this._x = 0, this._y = Math.atan2(g, e))) : "XZY" === b ? (this._z = Math.asin(-d(f, -1, 1)), .99999 > Math.abs(f) ? (this._x = Math.atan2(q, k), this._y = Math.atan2(g, a)) : (this._x = Math.atan2(-m, e), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + b);this._order = b;if (!1 !== c) this.onChangeCallback();return this;
        }, setFromQuaternion: function () {
            var a = new J();return function (b, c, d) {
                a.makeRotationFromQuaternion(b);return this.setFromRotationMatrix(a, c, d);
            };
        }(), setFromVector3: function setFromVector3(a, b) {
            return this.set(a.x, a.y, a.z, b || this._order);
        }, reorder: function () {
            var a = new aa();return function (b) {
                a.setFromEuler(this);return this.setFromQuaternion(a, b);
            };
        }(), equals: function equals(a) {
            return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
        }, fromArray: function fromArray(a) {
            this._x = a[0];this._y = a[1];this._z = a[2];void 0 !== a[3] && (this._order = a[3]);this.onChangeCallback();return this;
        }, toArray: function toArray$$1(a, b) {
            void 0 === a && (a = []);void 0 === b && (b = 0);a[b] = this._x;a[b + 1] = this._y;a[b + 2] = this._z;a[b + 3] = this._order;return a;
        }, toVector3: function toVector3(a) {
            return a ? a.set(this._x, this._y, this._z) : new n(this._x, this._y, this._z);
        }, onChange: function onChange(a) {
            this.onChangeCallback = a;return this;
        }, onChangeCallback: function onChangeCallback() {} });Object.assign(be.prototype, { set: function set$$1(a) {
            this.mask = 1 << a | 0;
        }, enable: function enable(a) {
            this.mask = this.mask | 1 << a | 0;
        }, toggle: function toggle(a) {
            this.mask ^= 1 << a | 0;
        }, disable: function disable(a) {
            this.mask &= ~(1 << a | 0);
        }, test: function test(a) {
            return 0 !== (this.mask & a.mask);
        } });var Wf = 0;E.DefaultUp = new n(0, 1, 0);E.DefaultMatrixAutoUpdate = !0;E.prototype = Object.assign(Object.create(ka.prototype), { constructor: E, isObject3D: !0, onBeforeRender: function onBeforeRender() {}, onAfterRender: function onAfterRender() {}, applyMatrix: function applyMatrix(a) {
            this.matrix.multiplyMatrices(a, this.matrix);this.matrix.decompose(this.position, this.quaternion, this.scale);
        }, applyQuaternion: function applyQuaternion(a) {
            this.quaternion.premultiply(a);
            return this;
        }, setRotationFromAxisAngle: function setRotationFromAxisAngle(a, b) {
            this.quaternion.setFromAxisAngle(a, b);
        }, setRotationFromEuler: function setRotationFromEuler(a) {
            this.quaternion.setFromEuler(a, !0);
        }, setRotationFromMatrix: function setRotationFromMatrix(a) {
            this.quaternion.setFromRotationMatrix(a);
        }, setRotationFromQuaternion: function setRotationFromQuaternion(a) {
            this.quaternion.copy(a);
        }, rotateOnAxis: function () {
            var a = new aa();return function (b, c) {
                a.setFromAxisAngle(b, c);this.quaternion.multiply(a);return this;
            };
        }(), rotateOnWorldAxis: function () {
            var a = new aa();return function (b, c) {
                a.setFromAxisAngle(b, c);this.quaternion.premultiply(a);return this;
            };
        }(), rotateX: function () {
            var a = new n(1, 0, 0);return function (b) {
                return this.rotateOnAxis(a, b);
            };
        }(), rotateY: function () {
            var a = new n(0, 1, 0);return function (b) {
                return this.rotateOnAxis(a, b);
            };
        }(), rotateZ: function () {
            var a = new n(0, 0, 1);return function (b) {
                return this.rotateOnAxis(a, b);
            };
        }(), translateOnAxis: function () {
            var a = new n();return function (b, c) {
                a.copy(b).applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));return this;
            };
        }(), translateX: function () {
            var a = new n(1, 0, 0);return function (b) {
                return this.translateOnAxis(a, b);
            };
        }(), translateY: function () {
            var a = new n(0, 1, 0);return function (b) {
                return this.translateOnAxis(a, b);
            };
        }(), translateZ: function () {
            var a = new n(0, 0, 1);return function (b) {
                return this.translateOnAxis(a, b);
            };
        }(), localToWorld: function localToWorld(a) {
            return a.applyMatrix4(this.matrixWorld);
        }, worldToLocal: function () {
            var a = new J();return function (b) {
                return b.applyMatrix4(a.getInverse(this.matrixWorld));
            };
        }(), lookAt: function () {
            var a = new aa(),
                b = new J(),
                c = new n(),
                d = new n();return function (e, f, g) {
                e.isVector3 ? c.copy(e) : c.set(e, f, g);e = this.parent;this.updateWorldMatrix(!0, !1);d.setFromMatrixPosition(this.matrixWorld);this.isCamera || this.isLight ? b.lookAt(d, c, this.up) : b.lookAt(c, d, this.up);this.quaternion.setFromRotationMatrix(b);e && (b.extractRotation(e.matrixWorld), a.setFromRotationMatrix(b), this.quaternion.premultiply(a.inverse()));
            };
        }(), add: function add(a) {
            if (1 < arguments.length) {
                for (var b = 0; b < arguments.length; b++) {
                    this.add(arguments[b]);
                }return this;
            }if (a === this) return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({ type: "added" }), this.children.push(a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);return this;
        }, remove: function remove(a) {
            if (1 < arguments.length) {
                for (var b = 0; b < arguments.length; b++) {
                    this.remove(arguments[b]);
                }return this;
            }b = this.children.indexOf(a);-1 !== b && (a.parent = null, a.dispatchEvent({ type: "removed" }), this.children.splice(b, 1));return this;
        }, getObjectById: function getObjectById(a) {
            return this.getObjectByProperty("id", a);
        }, getObjectByName: function getObjectByName(a) {
            return this.getObjectByProperty("name", a);
        }, getObjectByProperty: function getObjectByProperty(a, b) {
            if (this[a] === b) return this;for (var c = 0, d = this.children.length; c < d; c++) {
                var e = this.children[c].getObjectByProperty(a, b);if (void 0 !== e) return e;
            }
        }, getWorldPosition: function getWorldPosition(a) {
            void 0 === a && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), a = new n());this.updateMatrixWorld(!0);return a.setFromMatrixPosition(this.matrixWorld);
        }, getWorldQuaternion: function () {
            var a = new n(),
                b = new n();
            return function (c) {
                void 0 === c && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), c = new aa());this.updateMatrixWorld(!0);this.matrixWorld.decompose(a, c, b);return c;
            };
        }(), getWorldScale: function () {
            var a = new n(),
                b = new aa();return function (c) {
                void 0 === c && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), c = new n());this.updateMatrixWorld(!0);this.matrixWorld.decompose(a, b, c);return c;
            };
        }(), getWorldDirection: function getWorldDirection(a) {
            void 0 === a && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), a = new n());this.updateMatrixWorld(!0);var b = this.matrixWorld.elements;return a.set(b[8], b[9], b[10]).normalize();
        }, raycast: function raycast() {}, traverse: function traverse(a) {
            a(this);for (var b = this.children, c = 0, d = b.length; c < d; c++) {
                b[c].traverse(a);
            }
        }, traverseVisible: function traverseVisible(a) {
            if (!1 !== this.visible) {
                a(this);for (var b = this.children, c = 0, d = b.length; c < d; c++) {
                    b[c].traverseVisible(a);
                }
            }
        }, traverseAncestors: function traverseAncestors(a) {
            var b = this.parent;null !== b && (a(b), b.traverseAncestors(a));
        }, updateMatrix: function updateMatrix() {
            this.matrix.compose(this.position, this.quaternion, this.scale);this.matrixWorldNeedsUpdate = !0;
        }, updateMatrixWorld: function updateMatrixWorld(a) {
            this.matrixAutoUpdate && this.updateMatrix();if (this.matrixWorldNeedsUpdate || a) null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;for (var b = this.children, c = 0, d = b.length; c < d; c++) {
                b[c].updateMatrixWorld(a);
            }
        }, updateWorldMatrix: function updateWorldMatrix(a, b) {
            var c = this.parent;!0 === a && null !== c && c.updateWorldMatrix(!0, !1);this.matrixAutoUpdate && this.updateMatrix();null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);if (!0 === b) for (a = this.children, b = 0, c = a.length; b < c; b++) {
                a[b].updateWorldMatrix(!1, !0);
            }
        }, toJSON: function toJSON(a) {
            function b(b, c) {
                void 0 === b[c.uuid] && (b[c.uuid] = c.toJSON(a));return c.uuid;
            }function c(a) {
                var b = [],
                    c;for (c in a) {
                    var d = a[c];delete d.metadata;b.push(d);
                }return b;
            }var d = void 0 === a || "string" === typeof a,
                e = {};d && (a = { geometries: {}, materials: {}, textures: {}, images: {},
                shapes: {} }, e.metadata = { version: 4.5, type: "Object", generator: "Object3D.toJSON" });var f = {};f.uuid = this.uuid;f.type = this.type;"" !== this.name && (f.name = this.name);!0 === this.castShadow && (f.castShadow = !0);!0 === this.receiveShadow && (f.receiveShadow = !0);!1 === this.visible && (f.visible = !1);!1 === this.frustumCulled && (f.frustumCulled = !1);0 !== this.renderOrder && (f.renderOrder = this.renderOrder);"{}" !== JSON.stringify(this.userData) && (f.userData = this.userData);f.layers = this.layers.mask;f.matrix = this.matrix.toArray();!1 === this.matrixAutoUpdate && (f.matrixAutoUpdate = !1);this.isMesh && 0 !== this.drawMode && (f.drawMode = this.drawMode);if (this.isMesh || this.isLine || this.isPoints) {
                f.geometry = b(a.geometries, this.geometry);var g = this.geometry.parameters;if (void 0 !== g && void 0 !== g.shapes) if (g = g.shapes, Array.isArray(g)) for (var h = 0, k = g.length; h < k; h++) {
                    b(a.shapes, g[h]);
                } else b(a.shapes, g);
            }if (void 0 !== this.material) if (Array.isArray(this.material)) {
                g = [];h = 0;for (k = this.material.length; h < k; h++) {
                    g.push(b(a.materials, this.material[h]));
                }f.material = g;
            } else f.material = b(a.materials, this.material);if (0 < this.children.length) for (f.children = [], h = 0; h < this.children.length; h++) {
                f.children.push(this.children[h].toJSON(a).object);
            }if (d) {
                d = c(a.geometries);h = c(a.materials);k = c(a.textures);var m = c(a.images);g = c(a.shapes);0 < d.length && (e.geometries = d);0 < h.length && (e.materials = h);0 < k.length && (e.textures = k);0 < m.length && (e.images = m);0 < g.length && (e.shapes = g);
            }e.object = f;return e;
        }, clone: function clone(a) {
            return new this.constructor().copy(this, a);
        }, copy: function copy(a, b) {
            void 0 === b && (b = !0);this.name = a.name;this.up.copy(a.up);this.position.copy(a.position);this.quaternion.copy(a.quaternion);this.scale.copy(a.scale);this.matrix.copy(a.matrix);this.matrixWorld.copy(a.matrixWorld);this.matrixAutoUpdate = a.matrixAutoUpdate;this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;this.layers.mask = a.layers.mask;this.visible = a.visible;this.castShadow = a.castShadow;this.receiveShadow = a.receiveShadow;this.frustumCulled = a.frustumCulled;this.renderOrder = a.renderOrder;this.userData = JSON.parse(JSON.stringify(a.userData));
            if (!0 === b) for (b = 0; b < a.children.length; b++) {
                this.add(a.children[b].clone());
            }return this;
        } });var Xf = 0;G.prototype = Object.assign(Object.create(ka.prototype), { constructor: G, isGeometry: !0, applyMatrix: function applyMatrix(a) {
            for (var b = new pa().getNormalMatrix(a), c = 0, d = this.vertices.length; c < d; c++) {
                this.vertices[c].applyMatrix4(a);
            }c = 0;for (d = this.faces.length; c < d; c++) {
                a = this.faces[c];a.normal.applyMatrix3(b).normalize();for (var e = 0, f = a.vertexNormals.length; e < f; e++) {
                    a.vertexNormals[e].applyMatrix3(b).normalize();
                }
            }null !== this.boundingBox && this.computeBoundingBox();null !== this.boundingSphere && this.computeBoundingSphere();this.normalsNeedUpdate = this.verticesNeedUpdate = !0;return this;
        }, rotateX: function () {
            var a = new J();return function (b) {
                a.makeRotationX(b);this.applyMatrix(a);return this;
            };
        }(), rotateY: function () {
            var a = new J();return function (b) {
                a.makeRotationY(b);this.applyMatrix(a);return this;
            };
        }(), rotateZ: function () {
            var a = new J();return function (b) {
                a.makeRotationZ(b);this.applyMatrix(a);return this;
            };
        }(), translate: function () {
            var a = new J();return function (b, c, d) {
                a.makeTranslation(b, c, d);this.applyMatrix(a);return this;
            };
        }(), scale: function () {
            var a = new J();return function (b, c, d) {
                a.makeScale(b, c, d);this.applyMatrix(a);return this;
            };
        }(), lookAt: function () {
            var a = new E();return function (b) {
                a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix);
            };
        }(), fromBufferGeometry: function fromBufferGeometry(a) {
            function b(a, b, d, e) {
                var f = void 0 === h ? [] : [c.colors[a].clone(), c.colors[b].clone(), c.colors[d].clone()],
                    l = void 0 === g ? [] : [new n().fromArray(g, 3 * a), new n().fromArray(g, 3 * b), new n().fromArray(g, 3 * d)];e = new Nb(a, b, d, l, f, e);c.faces.push(e);void 0 !== k && c.faceVertexUvs[0].push([new B().fromArray(k, 2 * a), new B().fromArray(k, 2 * b), new B().fromArray(k, 2 * d)]);void 0 !== m && c.faceVertexUvs[1].push([new B().fromArray(m, 2 * a), new B().fromArray(m, 2 * b), new B().fromArray(m, 2 * d)]);
            }var c = this,
                d = null !== a.index ? a.index.array : void 0,
                e = a.attributes,
                f = e.position.array,
                g = void 0 !== e.normal ? e.normal.array : void 0,
                h = void 0 !== e.color ? e.color.array : void 0,
                k = void 0 !== e.uv ? e.uv.array : void 0,
                m = void 0 !== e.uv2 ? e.uv2.array : void 0;
            void 0 !== m && (this.faceVertexUvs[1] = []);for (var l = e = 0; e < f.length; e += 3, l += 2) {
                c.vertices.push(new n().fromArray(f, e)), void 0 !== h && c.colors.push(new K().fromArray(h, e));
            }var q = a.groups;if (0 < q.length) for (e = 0; e < q.length; e++) {
                f = q[e];var v = f.start,
                    t = f.count;l = v;for (v += t; l < v; l += 3) {
                    void 0 !== d ? b(d[l], d[l + 1], d[l + 2], f.materialIndex) : b(l, l + 1, l + 2, f.materialIndex);
                }
            } else if (void 0 !== d) for (e = 0; e < d.length; e += 3) {
                b(d[e], d[e + 1], d[e + 2]);
            } else for (e = 0; e < f.length / 3; e += 3) {
                b(e, e + 1, e + 2);
            }this.computeFaceNormals();null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());return this;
        }, center: function () {
            var a = new n();return function () {
                this.computeBoundingBox();this.boundingBox.getCenter(a).negate();this.translate(a.x, a.y, a.z);return this;
            };
        }(), normalize: function normalize() {
            this.computeBoundingSphere();var a = this.boundingSphere.center,
                b = this.boundingSphere.radius;b = 0 === b ? 1 : 1 / b;var c = new J();c.set(b, 0, 0, -b * a.x, 0, b, 0, -b * a.y, 0, 0, b, -b * a.z, 0, 0, 0, 1);this.applyMatrix(c);return this;
        },
        computeFaceNormals: function computeFaceNormals() {
            for (var a = new n(), b = new n(), c = 0, d = this.faces.length; c < d; c++) {
                var e = this.faces[c],
                    f = this.vertices[e.a],
                    g = this.vertices[e.b];a.subVectors(this.vertices[e.c], g);b.subVectors(f, g);a.cross(b);a.normalize();e.normal.copy(a);
            }
        }, computeVertexNormals: function computeVertexNormals(a) {
            void 0 === a && (a = !0);var b;var c = Array(this.vertices.length);var d = 0;for (b = this.vertices.length; d < b; d++) {
                c[d] = new n();
            }if (a) {
                var e = new n(),
                    f = new n();a = 0;for (d = this.faces.length; a < d; a++) {
                    b = this.faces[a];var g = this.vertices[b.a];var h = this.vertices[b.b];var k = this.vertices[b.c];e.subVectors(k, h);f.subVectors(g, h);e.cross(f);c[b.a].add(e);c[b.b].add(e);c[b.c].add(e);
                }
            } else for (this.computeFaceNormals(), a = 0, d = this.faces.length; a < d; a++) {
                b = this.faces[a], c[b.a].add(b.normal), c[b.b].add(b.normal), c[b.c].add(b.normal);
            }d = 0;for (b = this.vertices.length; d < b; d++) {
                c[d].normalize();
            }a = 0;for (d = this.faces.length; a < d; a++) {
                b = this.faces[a], g = b.vertexNormals, 3 === g.length ? (g[0].copy(c[b.a]), g[1].copy(c[b.b]), g[2].copy(c[b.c])) : (g[0] = c[b.a].clone(), g[1] = c[b.b].clone(), g[2] = c[b.c].clone());
            }0 < this.faces.length && (this.normalsNeedUpdate = !0);
        }, computeFlatVertexNormals: function computeFlatVertexNormals() {
            var a;this.computeFaceNormals();var b = 0;for (a = this.faces.length; b < a; b++) {
                var c = this.faces[b];var d = c.vertexNormals;3 === d.length ? (d[0].copy(c.normal), d[1].copy(c.normal), d[2].copy(c.normal)) : (d[0] = c.normal.clone(), d[1] = c.normal.clone(), d[2] = c.normal.clone());
            }0 < this.faces.length && (this.normalsNeedUpdate = !0);
        }, computeMorphNormals: function computeMorphNormals() {
            var a, b;var c = 0;for (b = this.faces.length; c < b; c++) {
                var d = this.faces[c];d.__originalFaceNormal ? d.__originalFaceNormal.copy(d.normal) : d.__originalFaceNormal = d.normal.clone();d.__originalVertexNormals || (d.__originalVertexNormals = []);var e = 0;for (a = d.vertexNormals.length; e < a; e++) {
                    d.__originalVertexNormals[e] ? d.__originalVertexNormals[e].copy(d.vertexNormals[e]) : d.__originalVertexNormals[e] = d.vertexNormals[e].clone();
                }
            }var f = new G();f.faces = this.faces;e = 0;for (a = this.morphTargets.length; e < a; e++) {
                if (!this.morphNormals[e]) {
                    this.morphNormals[e] = {};this.morphNormals[e].faceNormals = [];this.morphNormals[e].vertexNormals = [];d = this.morphNormals[e].faceNormals;var g = this.morphNormals[e].vertexNormals;c = 0;for (b = this.faces.length; c < b; c++) {
                        var h = new n();var k = { a: new n(), b: new n(), c: new n() };d.push(h);g.push(k);
                    }
                }g = this.morphNormals[e];f.vertices = this.morphTargets[e].vertices;f.computeFaceNormals();f.computeVertexNormals();c = 0;for (b = this.faces.length; c < b; c++) {
                    d = this.faces[c], h = g.faceNormals[c], k = g.vertexNormals[c], h.copy(d.normal), k.a.copy(d.vertexNormals[0]), k.b.copy(d.vertexNormals[1]), k.c.copy(d.vertexNormals[2]);
                }
            }c = 0;for (b = this.faces.length; c < b; c++) {
                d = this.faces[c], d.normal = d.__originalFaceNormal, d.vertexNormals = d.__originalVertexNormals;
            }
        }, computeBoundingBox: function computeBoundingBox() {
            null === this.boundingBox && (this.boundingBox = new Ha());this.boundingBox.setFromPoints(this.vertices);
        }, computeBoundingSphere: function computeBoundingSphere() {
            null === this.boundingSphere && (this.boundingSphere = new Ia());this.boundingSphere.setFromPoints(this.vertices);
        }, merge: function merge(a, b, c) {
            if (a && a.isGeometry) {
                var d,
                    e = this.vertices.length,
                    f = this.vertices,
                    g = a.vertices,
                    h = this.faces,
                    k = a.faces,
                    m = this.faceVertexUvs[0],
                    l = a.faceVertexUvs[0],
                    q = this.colors,
                    n = a.colors;void 0 === c && (c = 0);void 0 !== b && (d = new pa().getNormalMatrix(b));a = 0;for (var t = g.length; a < t; a++) {
                    var r = g[a].clone();void 0 !== b && r.applyMatrix4(b);f.push(r);
                }a = 0;for (t = n.length; a < t; a++) {
                    q.push(n[a].clone());
                }a = 0;for (t = k.length; a < t; a++) {
                    g = k[a];var u = g.vertexNormals;n = g.vertexColors;q = new Nb(g.a + e, g.b + e, g.c + e);q.normal.copy(g.normal);void 0 !== d && q.normal.applyMatrix3(d).normalize();b = 0;for (f = u.length; b < f; b++) {
                        r = u[b].clone(), void 0 !== d && r.applyMatrix3(d).normalize(), q.vertexNormals.push(r);
                    }q.color.copy(g.color);b = 0;for (f = n.length; b < f; b++) {
                        r = n[b], q.vertexColors.push(r.clone());
                    }q.materialIndex = g.materialIndex + c;h.push(q);
                }a = 0;for (t = l.length; a < t; a++) {
                    if (c = l[a], d = [], void 0 !== c) {
                        b = 0;for (f = c.length; b < f; b++) {
                            d.push(c[b].clone());
                        }m.push(d);
                    }
                }
            } else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);
        }, mergeMesh: function mergeMesh(a) {
            a && a.isMesh ? (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a);
        }, mergeVertices: function mergeVertices() {
            var a = {},
                b = [],
                c = [],
                d = Math.pow(10, 4),
                e;var f = 0;for (e = this.vertices.length; f < e; f++) {
                var g = this.vertices[f];g = Math.round(g.x * d) + "_" + Math.round(g.y * d) + "_" + Math.round(g.z * d);void 0 === a[g] ? (a[g] = f, b.push(this.vertices[f]), c[f] = b.length - 1) : c[f] = c[a[g]];
            }a = [];f = 0;for (e = this.faces.length; f < e; f++) {
                for (d = this.faces[f], d.a = c[d.a], d.b = c[d.b], d.c = c[d.c], d = [d.a, d.b, d.c], g = 0; 3 > g; g++) {
                    if (d[g] === d[(g + 1) % 3]) {
                        a.push(f);break;
                    }
                }
            }for (f = a.length - 1; 0 <= f; f--) {
                for (d = a[f], this.faces.splice(d, 1), c = 0, e = this.faceVertexUvs.length; c < e; c++) {
                    this.faceVertexUvs[c].splice(d, 1);
                }
            }f = this.vertices.length - b.length;this.vertices = b;return f;
        }, setFromPoints: function setFromPoints(a) {
            this.vertices = [];for (var b = 0, c = a.length; b < c; b++) {
                var d = a[b];this.vertices.push(new n(d.x, d.y, d.z || 0));
            }return this;
        }, sortFacesByMaterialIndex: function sortFacesByMaterialIndex() {
            for (var a = this.faces, b = a.length, c = 0; c < b; c++) {
                a[c]._id = c;
            }a.sort(function (a, b) {
                return a.materialIndex - b.materialIndex;
            });var d = this.faceVertexUvs[0],
                e = this.faceVertexUvs[1],
                f,
                g;d && d.length === b && (f = []);e && e.length === b && (g = []);for (c = 0; c < b; c++) {
                var h = a[c]._id;f && f.push(d[h]);g && g.push(e[h]);
            }f && (this.faceVertexUvs[0] = f);g && (this.faceVertexUvs[1] = g);
        }, toJSON: function toJSON() {
            function a(a, b, c) {
                return c ? a | 1 << b : a & ~(1 << b);
            }function b(a) {
                var b = a.x.toString() + a.y.toString() + a.z.toString();if (void 0 !== m[b]) return m[b];m[b] = k.length / 3;k.push(a.x, a.y, a.z);return m[b];
            }function c(a) {
                var b = a.r.toString() + a.g.toString() + a.b.toString();if (void 0 !== q[b]) return q[b];q[b] = l.length;l.push(a.getHex());return q[b];
            }function d(a) {
                var b = a.x.toString() + a.y.toString();if (void 0 !== t[b]) return t[b];t[b] = n.length / 2;n.push(a.x, a.y);return t[b];
            }var e = { metadata: { version: 4.5, type: "Geometry", generator: "Geometry.toJSON" } };e.uuid = this.uuid;e.type = this.type;"" !== this.name && (e.name = this.name);if (void 0 !== this.parameters) {
                var f = this.parameters,
                    g;for (g in f) {
                    void 0 !== f[g] && (e[g] = f[g]);
                }return e;
            }f = [];for (g = 0; g < this.vertices.length; g++) {
                var h = this.vertices[g];f.push(h.x, h.y, h.z);
            }h = [];var k = [],
                m = {},
                l = [],
                q = {},
                n = [],
                t = {};for (g = 0; g < this.faces.length; g++) {
                var r = this.faces[g],
                    u = void 0 !== this.faceVertexUvs[0][g],
                    w = 0 < r.normal.length(),
                    z = 0 < r.vertexNormals.length,
                    x = 1 !== r.color.r || 1 !== r.color.g || 1 !== r.color.b,
                    C = 0 < r.vertexColors.length,
                    y = 0;y = a(y, 0, 0);y = a(y, 1, !0);y = a(y, 2, !1);y = a(y, 3, u);y = a(y, 4, w);y = a(y, 5, z);y = a(y, 6, x);y = a(y, 7, C);h.push(y);h.push(r.a, r.b, r.c);h.push(r.materialIndex);u && (u = this.faceVertexUvs[0][g], h.push(d(u[0]), d(u[1]), d(u[2])));w && h.push(b(r.normal));z && (w = r.vertexNormals, h.push(b(w[0]), b(w[1]), b(w[2])));x && h.push(c(r.color));C && (r = r.vertexColors, h.push(c(r[0]), c(r[1]), c(r[2])));
            }e.data = {};e.data.vertices = f;e.data.normals = k;0 < l.length && (e.data.colors = l);0 < n.length && (e.data.uvs = [n]);e.data.faces = h;return e;
        }, clone: function clone() {
            return new G().copy(this);
        }, copy: function copy(a) {
            var b, c, d;this.vertices = [];this.colors = [];this.faces = [];this.faceVertexUvs = [[]];this.morphTargets = [];this.morphNormals = [];this.skinWeights = [];this.skinIndices = [];this.lineDistances = [];this.boundingSphere = this.boundingBox = null;this.name = a.name;var e = a.vertices;var f = 0;for (b = e.length; f < b; f++) {
                this.vertices.push(e[f].clone());
            }e = a.colors;f = 0;for (b = e.length; f < b; f++) {
                this.colors.push(e[f].clone());
            }e = a.faces;f = 0;for (b = e.length; f < b; f++) {
                this.faces.push(e[f].clone());
            }f = 0;for (b = a.faceVertexUvs.length; f < b; f++) {
                var g = a.faceVertexUvs[f];void 0 === this.faceVertexUvs[f] && (this.faceVertexUvs[f] = []);e = 0;for (c = g.length; e < c; e++) {
                    var h = g[e],
                        k = [];var m = 0;for (d = h.length; m < d; m++) {
                        k.push(h[m].clone());
                    }this.faceVertexUvs[f].push(k);
                }
            }m = a.morphTargets;f = 0;for (b = m.length; f < b; f++) {
                d = {};d.name = m[f].name;if (void 0 !== m[f].vertices) for (d.vertices = [], e = 0, c = m[f].vertices.length; e < c; e++) {
                    d.vertices.push(m[f].vertices[e].clone());
                }if (void 0 !== m[f].normals) for (d.normals = [], e = 0, c = m[f].normals.length; e < c; e++) {
                    d.normals.push(m[f].normals[e].clone());
                }this.morphTargets.push(d);
            }m = a.morphNormals;f = 0;for (b = m.length; f < b; f++) {
                d = {};if (void 0 !== m[f].vertexNormals) for (d.vertexNormals = [], e = 0, c = m[f].vertexNormals.length; e < c; e++) {
                    g = m[f].vertexNormals[e], h = {}, h.a = g.a.clone(), h.b = g.b.clone(), h.c = g.c.clone(), d.vertexNormals.push(h);
                }if (void 0 !== m[f].faceNormals) for (d.faceNormals = [], e = 0, c = m[f].faceNormals.length; e < c; e++) {
                    d.faceNormals.push(m[f].faceNormals[e].clone());
                }this.morphNormals.push(d);
            }e = a.skinWeights;f = 0;for (b = e.length; f < b; f++) {
                this.skinWeights.push(e[f].clone());
            }e = a.skinIndices;f = 0;for (b = e.length; f < b; f++) {
                this.skinIndices.push(e[f].clone());
            }e = a.lineDistances;f = 0;for (b = e.length; f < b; f++) {
                this.lineDistances.push(e[f]);
            }f = a.boundingBox;null !== f && (this.boundingBox = f.clone());f = a.boundingSphere;null !== f && (this.boundingSphere = f.clone());this.elementsNeedUpdate = a.elementsNeedUpdate;this.verticesNeedUpdate = a.verticesNeedUpdate;this.uvsNeedUpdate = a.uvsNeedUpdate;this.normalsNeedUpdate = a.normalsNeedUpdate;this.colorsNeedUpdate = a.colorsNeedUpdate;this.lineDistancesNeedUpdate = a.lineDistancesNeedUpdate;this.groupsNeedUpdate = a.groupsNeedUpdate;return this;
        }, dispose: function dispose() {
            this.dispatchEvent({ type: "dispose" });
        } });Object.defineProperty(P.prototype, "needsUpdate", { set: function set$$1(a) {
            !0 === a && this.version++;
        } });Object.assign(P.prototype, { isBufferAttribute: !0, onUploadCallback: function onUploadCallback() {},
        setArray: function setArray(a) {
            if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count = void 0 !== a ? a.length / this.itemSize : 0;this.array = a;return this;
        }, setDynamic: function setDynamic(a) {
            this.dynamic = a;return this;
        }, copy: function copy(a) {
            this.name = a.name;this.array = new a.array.constructor(a.array);this.itemSize = a.itemSize;this.count = a.count;this.normalized = a.normalized;this.dynamic = a.dynamic;return this;
        }, copyAt: function copyAt(a, b, c) {
            a *= this.itemSize;c *= b.itemSize;for (var d = 0, e = this.itemSize; d < e; d++) {
                this.array[a + d] = b.array[c + d];
            }return this;
        }, copyArray: function copyArray(a) {
            this.array.set(a);return this;
        }, copyColorsArray: function copyColorsArray(a) {
            for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
                var f = a[d];void 0 === f && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", d), f = new K());b[c++] = f.r;b[c++] = f.g;b[c++] = f.b;
            }return this;
        }, copyVector2sArray: function copyVector2sArray(a) {
            for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
                var f = a[d];void 0 === f && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", d), f = new B());b[c++] = f.x;b[c++] = f.y;
            }return this;
        }, copyVector3sArray: function copyVector3sArray(a) {
            for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
                var f = a[d];void 0 === f && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", d), f = new n());b[c++] = f.x;b[c++] = f.y;b[c++] = f.z;
            }return this;
        }, copyVector4sArray: function copyVector4sArray(a) {
            for (var b = this.array, c = 0, d = 0, e = a.length; d < e; d++) {
                var f = a[d];void 0 === f && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", d), f = new ba());b[c++] = f.x;b[c++] = f.y;
                b[c++] = f.z;b[c++] = f.w;
            }return this;
        }, set: function set$$1(a, b) {
            void 0 === b && (b = 0);this.array.set(a, b);return this;
        }, getX: function getX(a) {
            return this.array[a * this.itemSize];
        }, setX: function setX(a, b) {
            this.array[a * this.itemSize] = b;return this;
        }, getY: function getY(a) {
            return this.array[a * this.itemSize + 1];
        }, setY: function setY(a, b) {
            this.array[a * this.itemSize + 1] = b;return this;
        }, getZ: function getZ(a) {
            return this.array[a * this.itemSize + 2];
        }, setZ: function setZ(a, b) {
            this.array[a * this.itemSize + 2] = b;return this;
        }, getW: function getW(a) {
            return this.array[a * this.itemSize + 3];
        }, setW: function setW(a, b) {
            this.array[a * this.itemSize + 3] = b;return this;
        }, setXY: function setXY(a, b, c) {
            a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;return this;
        }, setXYZ: function setXYZ(a, b, c, d) {
            a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;this.array[a + 2] = d;return this;
        }, setXYZW: function setXYZW(a, b, c, d, e) {
            a *= this.itemSize;this.array[a + 0] = b;this.array[a + 1] = c;this.array[a + 2] = d;this.array[a + 3] = e;return this;
        }, onUpload: function onUpload(a) {
            this.onUploadCallback = a;return this;
        }, clone: function clone() {
            return new this.constructor(this.array, this.itemSize).copy(this);
        } });vc.prototype = Object.create(P.prototype);vc.prototype.constructor = vc;wc.prototype = Object.create(P.prototype);wc.prototype.constructor = wc;xc.prototype = Object.create(P.prototype);xc.prototype.constructor = xc;yc.prototype = Object.create(P.prototype);yc.prototype.constructor = yc;pb.prototype = Object.create(P.prototype);pb.prototype.constructor = pb;zc.prototype = Object.create(P.prototype);zc.prototype.constructor = zc;qb.prototype = Object.create(P.prototype);qb.prototype.constructor = qb;F.prototype = Object.create(P.prototype);F.prototype.constructor = F;Ac.prototype = Object.create(P.prototype);Ac.prototype.constructor = Ac;Object.assign(Se.prototype, { computeGroups: function computeGroups(a) {
            var b = [],
                c = void 0;a = a.faces;for (var d = 0; d < a.length; d++) {
                var e = a[d];if (e.materialIndex !== c) {
                    c = e.materialIndex;void 0 !== f && (f.count = 3 * d - f.start, b.push(f));var f = { start: 3 * d, materialIndex: c };
                }
            }void 0 !== f && (f.count = 3 * d - f.start, b.push(f));this.groups = b;
        }, fromGeometry: function fromGeometry(a) {
            var b = a.faces,
                c = a.vertices,
                d = a.faceVertexUvs,
                e = d[0] && 0 < d[0].length,
                f = d[1] && 0 < d[1].length,
                g = a.morphTargets,
                h = g.length;if (0 < h) {
                var k = [];for (var m = 0; m < h; m++) {
                    k[m] = { name: g[m].name, data: [] };
                }this.morphTargets.position = k;
            }var l = a.morphNormals,
                n = l.length;if (0 < n) {
                var v = [];for (m = 0; m < n; m++) {
                    v[m] = { name: l[m].name, data: [] };
                }this.morphTargets.normal = v;
            }var t = a.skinIndices,
                r = a.skinWeights,
                u = t.length === c.length,
                w = r.length === c.length;0 < c.length && 0 === b.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for (m = 0; m < b.length; m++) {
                var z = b[m];this.vertices.push(c[z.a], c[z.b], c[z.c]);var x = z.vertexNormals;3 === x.length ? this.normals.push(x[0], x[1], x[2]) : (x = z.normal, this.normals.push(x, x, x));x = z.vertexColors;3 === x.length ? this.colors.push(x[0], x[1], x[2]) : (x = z.color, this.colors.push(x, x, x));!0 === e && (x = d[0][m], void 0 !== x ? this.uvs.push(x[0], x[1], x[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", m), this.uvs.push(new B(), new B(), new B())));!0 === f && (x = d[1][m], void 0 !== x ? this.uvs2.push(x[0], x[1], x[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", m), this.uvs2.push(new B(), new B(), new B())));for (x = 0; x < h; x++) {
                    var C = g[x].vertices;k[x].data.push(C[z.a], C[z.b], C[z.c]);
                }for (x = 0; x < n; x++) {
                    C = l[x].vertexNormals[m], v[x].data.push(C.a, C.b, C.c);
                }u && this.skinIndices.push(t[z.a], t[z.b], t[z.c]);w && this.skinWeights.push(r[z.a], r[z.b], r[z.c]);
            }this.computeGroups(a);this.verticesNeedUpdate = a.verticesNeedUpdate;this.normalsNeedUpdate = a.normalsNeedUpdate;this.colorsNeedUpdate = a.colorsNeedUpdate;this.uvsNeedUpdate = a.uvsNeedUpdate;this.groupsNeedUpdate = a.groupsNeedUpdate;
            return this;
        } });var Yf = 1;D.prototype = Object.assign(Object.create(ka.prototype), { constructor: D, isBufferGeometry: !0, getIndex: function getIndex() {
            return this.index;
        }, setIndex: function setIndex(a) {
            Array.isArray(a) ? this.index = new (65535 < Te(a) ? qb : pb)(a, 1) : this.index = a;
        }, addAttribute: function addAttribute(a, b, c) {
            if (!(b && b.isBufferAttribute || b && b.isInterleavedBufferAttribute)) return console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(a, new P(b, c));if ("index" === a) return console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(b), this;this.attributes[a] = b;return this;
        }, getAttribute: function getAttribute(a) {
            return this.attributes[a];
        }, removeAttribute: function removeAttribute(a) {
            delete this.attributes[a];return this;
        }, addGroup: function addGroup(a, b, c) {
            this.groups.push({ start: a, count: b, materialIndex: void 0 !== c ? c : 0 });
        }, clearGroups: function clearGroups() {
            this.groups = [];
        }, setDrawRange: function setDrawRange(a, b) {
            this.drawRange.start = a;this.drawRange.count = b;
        }, applyMatrix: function applyMatrix(a) {
            var b = this.attributes.position;void 0 !== b && (a.applyToBufferAttribute(b), b.needsUpdate = !0);var c = this.attributes.normal;
            void 0 !== c && (b = new pa().getNormalMatrix(a), b.applyToBufferAttribute(c), c.needsUpdate = !0);c = this.attributes.tangent;void 0 !== c && (b = new pa().getNormalMatrix(a), b.applyToBufferAttribute(c), c.needsUpdate = !0);null !== this.boundingBox && this.computeBoundingBox();null !== this.boundingSphere && this.computeBoundingSphere();return this;
        }, rotateX: function () {
            var a = new J();return function (b) {
                a.makeRotationX(b);this.applyMatrix(a);return this;
            };
        }(), rotateY: function () {
            var a = new J();return function (b) {
                a.makeRotationY(b);this.applyMatrix(a);
                return this;
            };
        }(), rotateZ: function () {
            var a = new J();return function (b) {
                a.makeRotationZ(b);this.applyMatrix(a);return this;
            };
        }(), translate: function () {
            var a = new J();return function (b, c, d) {
                a.makeTranslation(b, c, d);this.applyMatrix(a);return this;
            };
        }(), scale: function () {
            var a = new J();return function (b, c, d) {
                a.makeScale(b, c, d);this.applyMatrix(a);return this;
            };
        }(), lookAt: function () {
            var a = new E();return function (b) {
                a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix);
            };
        }(), center: function () {
            var a = new n();return function () {
                this.computeBoundingBox();
                this.boundingBox.getCenter(a).negate();this.translate(a.x, a.y, a.z);return this;
            };
        }(), setFromObject: function setFromObject(a) {
            var b = a.geometry;if (a.isPoints || a.isLine) {
                a = new F(3 * b.vertices.length, 3);var c = new F(3 * b.colors.length, 3);this.addAttribute("position", a.copyVector3sArray(b.vertices));this.addAttribute("color", c.copyColorsArray(b.colors));b.lineDistances && b.lineDistances.length === b.vertices.length && (a = new F(b.lineDistances.length, 1), this.addAttribute("lineDistance", a.copyArray(b.lineDistances)));null !== b.boundingSphere && (this.boundingSphere = b.boundingSphere.clone());null !== b.boundingBox && (this.boundingBox = b.boundingBox.clone());
            } else a.isMesh && b && b.isGeometry && this.fromGeometry(b);return this;
        }, setFromPoints: function setFromPoints(a) {
            for (var b = [], c = 0, d = a.length; c < d; c++) {
                var e = a[c];b.push(e.x, e.y, e.z || 0);
            }this.addAttribute("position", new F(b, 3));return this;
        }, updateFromObject: function updateFromObject(a) {
            var b = a.geometry;if (a.isMesh) {
                var c = b.__directGeometry;!0 === b.elementsNeedUpdate && (c = void 0, b.elementsNeedUpdate = !1);if (void 0 === c) return this.fromGeometry(b);
                c.verticesNeedUpdate = b.verticesNeedUpdate;c.normalsNeedUpdate = b.normalsNeedUpdate;c.colorsNeedUpdate = b.colorsNeedUpdate;c.uvsNeedUpdate = b.uvsNeedUpdate;c.groupsNeedUpdate = b.groupsNeedUpdate;b.verticesNeedUpdate = !1;b.normalsNeedUpdate = !1;b.colorsNeedUpdate = !1;b.uvsNeedUpdate = !1;b.groupsNeedUpdate = !1;b = c;
            }!0 === b.verticesNeedUpdate && (c = this.attributes.position, void 0 !== c && (c.copyVector3sArray(b.vertices), c.needsUpdate = !0), b.verticesNeedUpdate = !1);!0 === b.normalsNeedUpdate && (c = this.attributes.normal, void 0 !== c && (c.copyVector3sArray(b.normals), c.needsUpdate = !0), b.normalsNeedUpdate = !1);!0 === b.colorsNeedUpdate && (c = this.attributes.color, void 0 !== c && (c.copyColorsArray(b.colors), c.needsUpdate = !0), b.colorsNeedUpdate = !1);b.uvsNeedUpdate && (c = this.attributes.uv, void 0 !== c && (c.copyVector2sArray(b.uvs), c.needsUpdate = !0), b.uvsNeedUpdate = !1);b.lineDistancesNeedUpdate && (c = this.attributes.lineDistance, void 0 !== c && (c.copyArray(b.lineDistances), c.needsUpdate = !0), b.lineDistancesNeedUpdate = !1);b.groupsNeedUpdate && (b.computeGroups(a.geometry), this.groups = b.groups, b.groupsNeedUpdate = !1);return this;
        }, fromGeometry: function fromGeometry(a) {
            a.__directGeometry = new Se().fromGeometry(a);return this.fromDirectGeometry(a.__directGeometry);
        }, fromDirectGeometry: function fromDirectGeometry(a) {
            var b = new Float32Array(3 * a.vertices.length);this.addAttribute("position", new P(b, 3).copyVector3sArray(a.vertices));0 < a.normals.length && (b = new Float32Array(3 * a.normals.length), this.addAttribute("normal", new P(b, 3).copyVector3sArray(a.normals)));0 < a.colors.length && (b = new Float32Array(3 * a.colors.length), this.addAttribute("color", new P(b, 3).copyColorsArray(a.colors)));0 < a.uvs.length && (b = new Float32Array(2 * a.uvs.length), this.addAttribute("uv", new P(b, 2).copyVector2sArray(a.uvs)));0 < a.uvs2.length && (b = new Float32Array(2 * a.uvs2.length), this.addAttribute("uv2", new P(b, 2).copyVector2sArray(a.uvs2)));this.groups = a.groups;for (var c in a.morphTargets) {
                b = [];for (var d = a.morphTargets[c], e = 0, f = d.length; e < f; e++) {
                    var g = d[e],
                        h = new F(3 * g.data.length, 3);h.name = g.name;b.push(h.copyVector3sArray(g.data));
                }this.morphAttributes[c] = b;
            }0 < a.skinIndices.length && (c = new F(4 * a.skinIndices.length, 4), this.addAttribute("skinIndex", c.copyVector4sArray(a.skinIndices)));0 < a.skinWeights.length && (c = new F(4 * a.skinWeights.length, 4), this.addAttribute("skinWeight", c.copyVector4sArray(a.skinWeights)));null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());return this;
        }, computeBoundingBox: function () {
            var a = new Ha();return function () {
                null === this.boundingBox && (this.boundingBox = new Ha());var b = this.attributes.position,
                    c = this.morphAttributes.position;if (void 0 !== b) {
                    if (this.boundingBox.setFromBufferAttribute(b), c) {
                        b = 0;for (var d = c.length; b < d; b++) {
                            a.setFromBufferAttribute(c[b]), this.boundingBox.expandByPoint(a.min), this.boundingBox.expandByPoint(a.max);
                        }
                    }
                } else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
            };
        }(), computeBoundingSphere: function () {
            var a = new Ha(),
                b = new Ha(),
                c = new n();return function () {
                null === this.boundingSphere && (this.boundingSphere = new Ia());var d = this.attributes.position,
                    e = this.morphAttributes.position;if (d) {
                    var f = this.boundingSphere.center;a.setFromBufferAttribute(d);if (e) for (var g = 0, h = e.length; g < h; g++) {
                        var k = e[g];b.setFromBufferAttribute(k);a.expandByPoint(b.min);a.expandByPoint(b.max);
                    }a.getCenter(f);var m = 0;g = 0;for (h = d.count; g < h; g++) {
                        c.fromBufferAttribute(d, g), m = Math.max(m, f.distanceToSquared(c));
                    }if (e) for (g = 0, h = e.length; g < h; g++) {
                        k = e[g];d = 0;for (var l = k.count; d < l; d++) {
                            c.fromBufferAttribute(k, g), m = Math.max(m, f.distanceToSquared(c));
                        }
                    }this.boundingSphere.radius = Math.sqrt(m);isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
                }
            };
        }(), computeFaceNormals: function computeFaceNormals() {}, computeVertexNormals: function computeVertexNormals() {
            var a = this.index,
                b = this.attributes;if (b.position) {
                var c = b.position.array;if (void 0 === b.normal) this.addAttribute("normal", new P(new Float32Array(c.length), 3));else for (var d = b.normal.array, e = 0, f = d.length; e < f; e++) {
                    d[e] = 0;
                }d = b.normal.array;var g = new n(),
                    h = new n(),
                    k = new n(),
                    m = new n(),
                    l = new n();if (a) {
                    var q = a.array;e = 0;for (f = a.count; e < f; e += 3) {
                        a = 3 * q[e + 0];var v = 3 * q[e + 1];var t = 3 * q[e + 2];g.fromArray(c, a);h.fromArray(c, v);k.fromArray(c, t);m.subVectors(k, h);l.subVectors(g, h);m.cross(l);d[a] += m.x;d[a + 1] += m.y;d[a + 2] += m.z;d[v] += m.x;d[v + 1] += m.y;d[v + 2] += m.z;d[t] += m.x;d[t + 1] += m.y;d[t + 2] += m.z;
                    }
                } else for (e = 0, f = c.length; e < f; e += 9) {
                    g.fromArray(c, e), h.fromArray(c, e + 3), k.fromArray(c, e + 6), m.subVectors(k, h), l.subVectors(g, h), m.cross(l), d[e] = m.x, d[e + 1] = m.y, d[e + 2] = m.z, d[e + 3] = m.x, d[e + 4] = m.y, d[e + 5] = m.z, d[e + 6] = m.x, d[e + 7] = m.y, d[e + 8] = m.z;
                }this.normalizeNormals();b.normal.needsUpdate = !0;
            }
        }, merge: function merge(a, b) {
            if (a && a.isBufferGeometry) {
                void 0 === b && (b = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var c = this.attributes,
                    d;for (d in c) {
                    if (void 0 !== a.attributes[d]) {
                        var e = c[d].array,
                            f = a.attributes[d],
                            g = f.array,
                            h = 0;for (f = f.itemSize * b; h < g.length; h++, f++) {
                            e[f] = g[h];
                        }
                    }
                }return this;
            }console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);
        }, normalizeNormals: function () {
            var a = new n();return function () {
                for (var b = this.attributes.normal, c = 0, d = b.count; c < d; c++) {
                    a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.normalize(), b.setXYZ(c, a.x, a.y, a.z);
                }
            };
        }(), toNonIndexed: function toNonIndexed() {
            function a(a, b) {
                var c = a.array;
                a = a.itemSize;for (var d = new c.constructor(b.length * a), e, f = 0, g = 0, h = b.length; g < h; g++) {
                    e = b[g] * a;for (var k = 0; k < a; k++) {
                        d[f++] = c[e++];
                    }
                }return new P(d, a);
            }if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;var b = new D(),
                c = this.index.array,
                d = this.attributes,
                e;for (e in d) {
                var f = d[e];f = a(f, c);b.addAttribute(e, f);
            }var g = this.morphAttributes;for (e in g) {
                var h = [],
                    k = g[e];d = 0;for (var m = k.length; d < m; d++) {
                    f = k[d], f = a(f, c), h.push(f);
                }b.morphAttributes[e] = h;
            }c = this.groups;d = 0;for (e = c.length; d < e; d++) {
                f = c[d], b.addGroup(f.start, f.count, f.materialIndex);
            }return b;
        }, toJSON: function toJSON() {
            var a = { metadata: { version: 4.5, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };a.uuid = this.uuid;a.type = this.type;"" !== this.name && (a.name = this.name);0 < Object.keys(this.userData).length && (a.userData = this.userData);if (void 0 !== this.parameters) {
                var b = this.parameters;for (m in b) {
                    void 0 !== b[m] && (a[m] = b[m]);
                }return a;
            }a.data = { attributes: {} };b = this.index;null !== b && (a.data.index = { type: b.array.constructor.name,
                array: Array.prototype.slice.call(b.array) });var c = this.attributes;for (m in c) {
                b = c[m];var d = { itemSize: b.itemSize, type: b.array.constructor.name, array: Array.prototype.slice.call(b.array), normalized: b.normalized };"" !== b.name && (d.name = b.name);a.data.attributes[m] = d;
            }c = {};var e = !1;for (m in this.morphAttributes) {
                for (var f = this.morphAttributes[m], g = [], h = 0, k = f.length; h < k; h++) {
                    b = f[h], d = { itemSize: b.itemSize, type: b.array.constructor.name, array: Array.prototype.slice.call(b.array), normalized: b.normalized }, "" !== b.name && (d.name = b.name), g.push(d);
                }0 < g.length && (c[m] = g, e = !0);
            }e && (a.data.morphAttributes = c);var m = this.groups;0 < m.length && (a.data.groups = JSON.parse(JSON.stringify(m)));m = this.boundingSphere;null !== m && (a.data.boundingSphere = { center: m.center.toArray(), radius: m.radius });return a;
        }, clone: function clone() {
            return new D().copy(this);
        }, copy: function copy(a) {
            var b;this.index = null;this.attributes = {};this.morphAttributes = {};this.groups = [];this.boundingSphere = this.boundingBox = null;this.name = a.name;var c = a.index;null !== c && this.setIndex(c.clone());
            c = a.attributes;for (g in c) {
                this.addAttribute(g, c[g].clone());
            }var d = a.morphAttributes;for (g in d) {
                var e = [],
                    f = d[g];c = 0;for (b = f.length; c < b; c++) {
                    e.push(f[c].clone());
                }this.morphAttributes[g] = e;
            }var g = a.groups;c = 0;for (b = g.length; c < b; c++) {
                d = g[c], this.addGroup(d.start, d.count, d.materialIndex);
            }g = a.boundingBox;null !== g && (this.boundingBox = g.clone());g = a.boundingSphere;null !== g && (this.boundingSphere = g.clone());this.drawRange.start = a.drawRange.start;this.drawRange.count = a.drawRange.count;this.userData = a.userData;
            return this;
        }, dispose: function dispose() {
            this.dispatchEvent({ type: "dispose" });
        } });Ob.prototype = Object.create(G.prototype);Ob.prototype.constructor = Ob;rb.prototype = Object.create(D.prototype);rb.prototype.constructor = rb;Cc.prototype = Object.create(G.prototype);Cc.prototype.constructor = Cc;sb.prototype = Object.create(D.prototype);sb.prototype.constructor = sb;var Zf = 0;M.prototype = Object.assign(Object.create(ka.prototype), { constructor: M, isMaterial: !0, onBeforeCompile: function onBeforeCompile() {}, setValues: function setValues(a) {
            if (void 0 !== a) for (var b in a) {
                var c = a[b];if (void 0 === c) console.warn("THREE.Material: '" + b + "' parameter is undefined.");else if ("shading" === b) console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === c ? !0 : !1;else {
                    var d = this[b];void 0 === d ? console.warn("THREE." + this.type + ": '" + b + "' is not a property of this material.") : d && d.isColor ? d.set(c) : d && d.isVector3 && c && c.isVector3 ? d.copy(c) : this[b] = c;
                }
            }
        }, toJSON: function toJSON(a) {
            function b(a) {
                var b = [],
                    c;for (c in a) {
                    var d = a[c];delete d.metadata;
                    b.push(d);
                }return b;
            }var c = void 0 === a || "string" === typeof a;c && (a = { textures: {}, images: {} });var d = { metadata: { version: 4.5, type: "Material", generator: "Material.toJSON" } };d.uuid = this.uuid;d.type = this.type;"" !== this.name && (d.name = this.name);this.color && this.color.isColor && (d.color = this.color.getHex());void 0 !== this.roughness && (d.roughness = this.roughness);void 0 !== this.metalness && (d.metalness = this.metalness);this.emissive && this.emissive.isColor && (d.emissive = this.emissive.getHex());1 !== this.emissiveIntensity && (d.emissiveIntensity = this.emissiveIntensity);this.specular && this.specular.isColor && (d.specular = this.specular.getHex());void 0 !== this.shininess && (d.shininess = this.shininess);void 0 !== this.clearCoat && (d.clearCoat = this.clearCoat);void 0 !== this.clearCoatRoughness && (d.clearCoatRoughness = this.clearCoatRoughness);this.map && this.map.isTexture && (d.map = this.map.toJSON(a).uuid);this.alphaMap && this.alphaMap.isTexture && (d.alphaMap = this.alphaMap.toJSON(a).uuid);this.lightMap && this.lightMap.isTexture && (d.lightMap = this.lightMap.toJSON(a).uuid);this.aoMap && this.aoMap.isTexture && (d.aoMap = this.aoMap.toJSON(a).uuid, d.aoMapIntensity = this.aoMapIntensity);this.bumpMap && this.bumpMap.isTexture && (d.bumpMap = this.bumpMap.toJSON(a).uuid, d.bumpScale = this.bumpScale);this.normalMap && this.normalMap.isTexture && (d.normalMap = this.normalMap.toJSON(a).uuid, d.normalMapType = this.normalMapType, d.normalScale = this.normalScale.toArray());this.displacementMap && this.displacementMap.isTexture && (d.displacementMap = this.displacementMap.toJSON(a).uuid, d.displacementScale = this.displacementScale, d.displacementBias = this.displacementBias);this.roughnessMap && this.roughnessMap.isTexture && (d.roughnessMap = this.roughnessMap.toJSON(a).uuid);this.metalnessMap && this.metalnessMap.isTexture && (d.metalnessMap = this.metalnessMap.toJSON(a).uuid);this.emissiveMap && this.emissiveMap.isTexture && (d.emissiveMap = this.emissiveMap.toJSON(a).uuid);this.specularMap && this.specularMap.isTexture && (d.specularMap = this.specularMap.toJSON(a).uuid);this.envMap && this.envMap.isTexture && (d.envMap = this.envMap.toJSON(a).uuid, d.reflectivity = this.reflectivity, void 0 !== this.combine && (d.combine = this.combine), void 0 !== this.envMapIntensity && (d.envMapIntensity = this.envMapIntensity));this.gradientMap && this.gradientMap.isTexture && (d.gradientMap = this.gradientMap.toJSON(a).uuid);void 0 !== this.size && (d.size = this.size);void 0 !== this.sizeAttenuation && (d.sizeAttenuation = this.sizeAttenuation);1 !== this.blending && (d.blending = this.blending);!0 === this.flatShading && (d.flatShading = this.flatShading);0 !== this.side && (d.side = this.side);0 !== this.vertexColors && (d.vertexColors = this.vertexColors);1 > this.opacity && (d.opacity = this.opacity);!0 === this.transparent && (d.transparent = this.transparent);d.depthFunc = this.depthFunc;d.depthTest = this.depthTest;d.depthWrite = this.depthWrite;0 !== this.rotation && (d.rotation = this.rotation);!0 === this.polygonOffset && (d.polygonOffset = !0);0 !== this.polygonOffsetFactor && (d.polygonOffsetFactor = this.polygonOffsetFactor);0 !== this.polygonOffsetUnits && (d.polygonOffsetUnits = this.polygonOffsetUnits);
            1 !== this.linewidth && (d.linewidth = this.linewidth);void 0 !== this.dashSize && (d.dashSize = this.dashSize);void 0 !== this.gapSize && (d.gapSize = this.gapSize);void 0 !== this.scale && (d.scale = this.scale);!0 === this.dithering && (d.dithering = !0);0 < this.alphaTest && (d.alphaTest = this.alphaTest);!0 === this.premultipliedAlpha && (d.premultipliedAlpha = this.premultipliedAlpha);!0 === this.wireframe && (d.wireframe = this.wireframe);1 < this.wireframeLinewidth && (d.wireframeLinewidth = this.wireframeLinewidth);"round" !== this.wireframeLinecap && (d.wireframeLinecap = this.wireframeLinecap);"round" !== this.wireframeLinejoin && (d.wireframeLinejoin = this.wireframeLinejoin);!0 === this.morphTargets && (d.morphTargets = !0);!0 === this.skinning && (d.skinning = !0);!1 === this.visible && (d.visible = !1);"{}" !== JSON.stringify(this.userData) && (d.userData = this.userData);c && (c = b(a.textures), a = b(a.images), 0 < c.length && (d.textures = c), 0 < a.length && (d.images = a));return d;
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.name = a.name;this.fog = a.fog;
            this.lights = a.lights;this.blending = a.blending;this.side = a.side;this.flatShading = a.flatShading;this.vertexColors = a.vertexColors;this.opacity = a.opacity;this.transparent = a.transparent;this.blendSrc = a.blendSrc;this.blendDst = a.blendDst;this.blendEquation = a.blendEquation;this.blendSrcAlpha = a.blendSrcAlpha;this.blendDstAlpha = a.blendDstAlpha;this.blendEquationAlpha = a.blendEquationAlpha;this.depthFunc = a.depthFunc;this.depthTest = a.depthTest;this.depthWrite = a.depthWrite;this.colorWrite = a.colorWrite;this.precision = a.precision;this.polygonOffset = a.polygonOffset;this.polygonOffsetFactor = a.polygonOffsetFactor;this.polygonOffsetUnits = a.polygonOffsetUnits;this.dithering = a.dithering;this.alphaTest = a.alphaTest;this.premultipliedAlpha = a.premultipliedAlpha;this.visible = a.visible;this.userData = JSON.parse(JSON.stringify(a.userData));this.clipShadows = a.clipShadows;this.clipIntersection = a.clipIntersection;var b = a.clippingPlanes,
                c = null;if (null !== b) {
                var d = b.length;c = Array(d);for (var e = 0; e !== d; ++e) {
                    c[e] = b[e].clone();
                }
            }this.clippingPlanes = c;this.shadowSide = a.shadowSide;return this;
        }, dispose: function dispose() {
            this.dispatchEvent({ type: "dispose" });
        } });Ca.prototype = Object.create(M.prototype);Ca.prototype.constructor = Ca;Ca.prototype.isShaderMaterial = !0;Ca.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.fragmentShader = a.fragmentShader;this.vertexShader = a.vertexShader;this.uniforms = Mb(a.uniforms);this.defines = Object.assign({}, a.defines);this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.lights = a.lights;this.clipping = a.clipping;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;this.extensions = a.extensions;return this;
    };Ca.prototype.toJSON = function (a) {
        var b = M.prototype.toJSON.call(this, a);b.uniforms = {};for (var c in this.uniforms) {
            var d = this.uniforms[c].value;b.uniforms[c] = d && d.isTexture ? { type: "t", value: d.toJSON(a).uuid } : d && d.isColor ? { type: "c", value: d.getHex() } : d && d.isVector2 ? { type: "v2", value: d.toArray() } : d && d.isVector3 ? { type: "v3", value: d.toArray() } : d && d.isVector4 ? { type: "v4",
                value: d.toArray() } : d && d.isMatrix3 ? { type: "m3", value: d.toArray() } : d && d.isMatrix4 ? { type: "m4", value: d.toArray() } : { value: d };
        }0 < Object.keys(this.defines).length && (b.defines = this.defines);b.vertexShader = this.vertexShader;b.fragmentShader = this.fragmentShader;a = {};for (var e in this.extensions) {
            !0 === this.extensions[e] && (a[e] = !0);
        }0 < Object.keys(a).length && (b.extensions = a);return b;
    };Object.assign(tb.prototype, { set: function set$$1(a, b) {
            this.origin.copy(a);this.direction.copy(b);return this;
        }, clone: function clone() {
            return new this.constructor().copy(this);
        },
        copy: function copy(a) {
            this.origin.copy(a.origin);this.direction.copy(a.direction);return this;
        }, at: function at(a, b) {
            void 0 === b && (console.warn("THREE.Ray: .at() target is now required"), b = new n());return b.copy(this.direction).multiplyScalar(a).add(this.origin);
        }, lookAt: function lookAt(a) {
            this.direction.copy(a).sub(this.origin).normalize();return this;
        }, recast: function () {
            var a = new n();return function (b) {
                this.origin.copy(this.at(b, a));return this;
            };
        }(), closestPointToPoint: function closestPointToPoint(a, b) {
            void 0 === b && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), b = new n());b.subVectors(a, this.origin);a = b.dot(this.direction);return 0 > a ? b.copy(this.origin) : b.copy(this.direction).multiplyScalar(a).add(this.origin);
        }, distanceToPoint: function distanceToPoint(a) {
            return Math.sqrt(this.distanceSqToPoint(a));
        }, distanceSqToPoint: function () {
            var a = new n();return function (b) {
                var c = a.subVectors(b, this.origin).dot(this.direction);if (0 > c) return this.origin.distanceToSquared(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceToSquared(b);
            };
        }(), distanceSqToSegment: function () {
            var a = new n(),
                b = new n(),
                c = new n();return function (d, e, f, g) {
                a.copy(d).add(e).multiplyScalar(.5);b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);var h = .5 * d.distanceTo(e),
                    k = -this.direction.dot(b),
                    m = c.dot(this.direction),
                    l = -c.dot(b),
                    n = c.lengthSq(),
                    v = Math.abs(1 - k * k);if (0 < v) {
                    d = k * l - m;e = k * m - l;var t = h * v;0 <= d ? e >= -t ? e <= t ? (h = 1 / v, d *= h, e *= h, k = d * (d + k * e + 2 * m) + e * (k * d + e + 2 * l) + n) : (e = h, d = Math.max(0, -(k * e + m)), k = -d * d + e * (e + 2 * l) + n) : (e = -h, d = Math.max(0, -(k * e + m)), k = -d * d + e * (e + 2 * l) + n) : e <= -t ? (d = Math.max(0, -(-k * h + m)), e = 0 < d ? -h : Math.min(Math.max(-h, -l), h), k = -d * d + e * (e + 2 * l) + n) : e <= t ? (d = 0, e = Math.min(Math.max(-h, -l), h), k = e * (e + 2 * l) + n) : (d = Math.max(0, -(k * h + m)), e = 0 < d ? h : Math.min(Math.max(-h, -l), h), k = -d * d + e * (e + 2 * l) + n);
                } else e = 0 < k ? -h : h, d = Math.max(0, -(k * e + m)), k = -d * d + e * (e + 2 * l) + n;f && f.copy(this.direction).multiplyScalar(d).add(this.origin);g && g.copy(b).multiplyScalar(e).add(a);return k;
            };
        }(), intersectSphere: function () {
            var a = new n();return function (b, c) {
                a.subVectors(b.center, this.origin);var d = a.dot(this.direction),
                    e = a.dot(a) - d * d;b = b.radius * b.radius;if (e > b) return null;
                b = Math.sqrt(b - e);e = d - b;d += b;return 0 > e && 0 > d ? null : 0 > e ? this.at(d, c) : this.at(e, c);
            };
        }(), intersectsSphere: function intersectsSphere(a) {
            return this.distanceSqToPoint(a.center) <= a.radius * a.radius;
        }, distanceToPlane: function distanceToPlane(a) {
            var b = a.normal.dot(this.direction);if (0 === b) return 0 === a.distanceToPoint(this.origin) ? 0 : null;a = -(this.origin.dot(a.normal) + a.constant) / b;return 0 <= a ? a : null;
        }, intersectPlane: function intersectPlane(a, b) {
            a = this.distanceToPlane(a);return null === a ? null : this.at(a, b);
        }, intersectsPlane: function intersectsPlane(a) {
            var b = a.distanceToPoint(this.origin);
            return 0 === b || 0 > a.normal.dot(this.direction) * b ? !0 : !1;
        }, intersectBox: function intersectBox(a, b) {
            var c = 1 / this.direction.x;var d = 1 / this.direction.y;var e = 1 / this.direction.z,
                f = this.origin;if (0 <= c) {
                var g = (a.min.x - f.x) * c;c *= a.max.x - f.x;
            } else g = (a.max.x - f.x) * c, c *= a.min.x - f.x;if (0 <= d) {
                var h = (a.min.y - f.y) * d;d *= a.max.y - f.y;
            } else h = (a.max.y - f.y) * d, d *= a.min.y - f.y;if (g > d || h > c) return null;if (h > g || g !== g) g = h;if (d < c || c !== c) c = d;0 <= e ? (h = (a.min.z - f.z) * e, a = (a.max.z - f.z) * e) : (h = (a.max.z - f.z) * e, a = (a.min.z - f.z) * e);if (g > a || h > c) return null;
            if (h > g || g !== g) g = h;if (a < c || c !== c) c = a;return 0 > c ? null : this.at(0 <= g ? g : c, b);
        }, intersectsBox: function () {
            var a = new n();return function (b) {
                return null !== this.intersectBox(b, a);
            };
        }(), intersectTriangle: function () {
            var a = new n(),
                b = new n(),
                c = new n(),
                d = new n();return function (e, f, g, h, k) {
                b.subVectors(f, e);c.subVectors(g, e);d.crossVectors(b, c);f = this.direction.dot(d);if (0 < f) {
                    if (h) return null;h = 1;
                } else if (0 > f) h = -1, f = -f;else return null;a.subVectors(this.origin, e);e = h * this.direction.dot(c.crossVectors(a, c));if (0 > e) return null;
                g = h * this.direction.dot(b.cross(a));if (0 > g || e + g > f) return null;e = -h * a.dot(d);return 0 > e ? null : this.at(e / f, k);
            };
        }(), applyMatrix4: function applyMatrix4(a) {
            this.origin.applyMatrix4(a);this.direction.transformDirection(a);return this;
        }, equals: function equals(a) {
            return a.origin.equals(this.origin) && a.direction.equals(this.direction);
        } });Object.assign(ua, { getNormal: function () {
            var a = new n();return function (b, c, d, e) {
                void 0 === e && (console.warn("THREE.Triangle: .getNormal() target is now required"), e = new n());e.subVectors(d, c);a.subVectors(b, c);e.cross(a);b = e.lengthSq();return 0 < b ? e.multiplyScalar(1 / Math.sqrt(b)) : e.set(0, 0, 0);
            };
        }(), getBarycoord: function () {
            var a = new n(),
                b = new n(),
                c = new n();return function (d, e, f, g, h) {
                a.subVectors(g, e);b.subVectors(f, e);c.subVectors(d, e);d = a.dot(a);e = a.dot(b);f = a.dot(c);var k = b.dot(b);g = b.dot(c);var m = d * k - e * e;void 0 === h && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), h = new n());if (0 === m) return h.set(-2, -1, -1);m = 1 / m;k = (k * f - e * g) * m;d = (d * g - e * f) * m;return h.set(1 - k - d, d, k);
            };
        }(), containsPoint: function () {
            var a = new n();return function (b, c, d, e) {
                ua.getBarycoord(b, c, d, e, a);return 0 <= a.x && 0 <= a.y && 1 >= a.x + a.y;
            };
        }(), getUV: function () {
            var a = new n();return function (b, c, d, e, f, g, h, k) {
                this.getBarycoord(b, c, d, e, a);k.set(0, 0);k.addScaledVector(f, a.x);k.addScaledVector(g, a.y);k.addScaledVector(h, a.z);return k;
            };
        }() });Object.assign(ua.prototype, { set: function set$$1(a, b, c) {
            this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;
        }, setFromPointsAndIndices: function setFromPointsAndIndices(a, b, c, d) {
            this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this;
        },
        clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this;
        }, getArea: function () {
            var a = new n(),
                b = new n();return function () {
                a.subVectors(this.c, this.b);b.subVectors(this.a, this.b);return .5 * a.cross(b).length();
            };
        }(), getMidpoint: function getMidpoint(a) {
            void 0 === a && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), a = new n());return a.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
        }, getNormal: function getNormal(a) {
            return ua.getNormal(this.a, this.b, this.c, a);
        }, getPlane: function getPlane(a) {
            void 0 === a && (console.warn("THREE.Triangle: .getPlane() target is now required"), a = new n());return a.setFromCoplanarPoints(this.a, this.b, this.c);
        }, getBarycoord: function getBarycoord(a, b) {
            return ua.getBarycoord(a, this.a, this.b, this.c, b);
        }, containsPoint: function containsPoint(a) {
            return ua.containsPoint(a, this.a, this.b, this.c);
        }, getUV: function getUV(a, b, c, d, e) {
            return ua.getUV(a, this.a, this.b, this.c, b, c, d, e);
        }, intersectsBox: function intersectsBox(a) {
            return a.intersectsTriangle(this);
        }, closestPointToPoint: function () {
            var a = new n(),
                b = new n(),
                c = new n(),
                d = new n(),
                e = new n(),
                f = new n();return function (g, h) {
                void 0 === h && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), h = new n());var k = this.a,
                    m = this.b,
                    l = this.c;a.subVectors(m, k);b.subVectors(l, k);d.subVectors(g, k);var q = a.dot(d),
                    v = b.dot(d);if (0 >= q && 0 >= v) return h.copy(k);e.subVectors(g, m);var t = a.dot(e),
                    r = b.dot(e);if (0 <= t && r <= t) return h.copy(m);var u = q * r - t * v;if (0 >= u && 0 <= q && 0 >= t) return m = q / (q - t), h.copy(k).addScaledVector(a, m);f.subVectors(g, l);g = a.dot(f);var w = b.dot(f);if (0 <= w && g <= w) return h.copy(l);q = g * v - q * w;if (0 >= q && 0 <= v && 0 >= w) return u = v / (v - w), h.copy(k).addScaledVector(b, u);v = t * w - g * r;if (0 >= v && 0 <= r - t && 0 <= g - w) return c.subVectors(l, m), u = (r - t) / (r - t + (g - w)), h.copy(m).addScaledVector(c, u);l = 1 / (v + q + u);m = q * l;u *= l;return h.copy(k).addScaledVector(a, m).addScaledVector(b, u);
            };
        }(), equals: function equals(a) {
            return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
        } });ya.prototype = Object.create(M.prototype);ya.prototype.constructor = ya;ya.prototype.isMeshBasicMaterial = !0;ya.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.lightMap = a.lightMap;this.lightMapIntensity = a.lightMapIntensity;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;
        this.wireframeLinejoin = a.wireframeLinejoin;this.skinning = a.skinning;this.morphTargets = a.morphTargets;return this;
    };va.prototype = Object.assign(Object.create(E.prototype), { constructor: va, isMesh: !0, setDrawMode: function setDrawMode(a) {
            this.drawMode = a;
        }, copy: function copy(a) {
            E.prototype.copy.call(this, a);this.drawMode = a.drawMode;void 0 !== a.morphTargetInfluences && (this.morphTargetInfluences = a.morphTargetInfluences.slice());void 0 !== a.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, a.morphTargetDictionary));
            return this;
        }, updateMorphTargets: function updateMorphTargets() {
            var a = this.geometry;if (a.isBufferGeometry) {
                a = a.morphAttributes;var b = Object.keys(a);if (0 < b.length) {
                    var c = a[b[0]];if (void 0 !== c) for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, a = 0, b = c.length; a < b; a++) {
                        var d = c[a].name || String(a);this.morphTargetInfluences.push(0);this.morphTargetDictionary[d] = a;
                    }
                }
            } else a = a.morphTargets, void 0 !== a && 0 < a.length && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        },
        raycast: function () {
            function a(a, b, c, d, e, f, g, h) {
                if (null === (1 === b.side ? d.intersectTriangle(g, f, e, !0, h) : d.intersectTriangle(e, f, g, 2 !== b.side, h))) return null;u.copy(h);u.applyMatrix4(a.matrixWorld);b = c.ray.origin.distanceTo(u);return b < c.near || b > c.far ? null : { distance: b, point: u.clone(), object: a };
            }function b(b, c, d, e, k, m, l, p, n) {
                f.fromBufferAttribute(k, l);g.fromBufferAttribute(k, p);h.fromBufferAttribute(k, n);if (b = a(b, c, d, e, f, g, h, r)) m && (q.fromBufferAttribute(m, l), v.fromBufferAttribute(m, p), t.fromBufferAttribute(m, n), b.uv = ua.getUV(r, f, g, h, q, v, t, new B())), m = new Nb(l, p, n), ua.getNormal(f, g, h, m.normal), b.face = m;return b;
            }var c = new J(),
                d = new tb(),
                e = new Ia(),
                f = new n(),
                g = new n(),
                h = new n(),
                k = new n(),
                m = new n(),
                l = new n(),
                q = new B(),
                v = new B(),
                t = new B(),
                r = new n(),
                u = new n();return function (p, n) {
                var u = this.geometry,
                    w = this.material,
                    y = this.matrixWorld;if (void 0 !== w && (null === u.boundingSphere && u.computeBoundingSphere(), e.copy(u.boundingSphere), e.applyMatrix4(y), !1 !== p.ray.intersectsSphere(e) && (c.getInverse(y), d.copy(p.ray).applyMatrix4(c), null === u.boundingBox || !1 !== d.intersectsBox(u.boundingBox)))) if (u.isBufferGeometry) {
                    var z = u.index,
                        D = u.attributes.position,
                        A = u.attributes.uv,
                        F = u.groups;u = u.drawRange;var E, H;if (null !== z) {
                        if (Array.isArray(w)) {
                            var G = 0;for (E = F.length; G < E; G++) {
                                var I = F[G];var L = w[I.materialIndex];var J = Math.max(I.start, u.start);for (H = y = Math.min(I.start + I.count, u.start + u.count); J < H; J += 3) {
                                    y = z.getX(J);var K = z.getX(J + 1);var M = z.getX(J + 2);if (y = b(this, L, p, d, D, A, y, K, M)) y.faceIndex = Math.floor(J / 3), y.face.materialIndex = I.materialIndex, n.push(y);
                                }
                            }
                        } else for (J = Math.max(0, u.start), y = Math.min(z.count, u.start + u.count), G = J, E = y; G < E; G += 3) {
                            if (y = z.getX(G), K = z.getX(G + 1), M = z.getX(G + 2), y = b(this, w, p, d, D, A, y, K, M)) y.faceIndex = Math.floor(G / 3), n.push(y);
                        }
                    } else if (void 0 !== D) if (Array.isArray(w)) for (G = 0, E = F.length; G < E; G++) {
                        for (I = F[G], L = w[I.materialIndex], J = Math.max(I.start, u.start), H = y = Math.min(I.start + I.count, u.start + u.count); J < H; J += 3) {
                            if (y = J, K = J + 1, M = J + 2, y = b(this, L, p, d, D, A, y, K, M)) y.faceIndex = Math.floor(J / 3), y.face.materialIndex = I.materialIndex, n.push(y);
                        }
                    } else for (J = Math.max(0, u.start), y = Math.min(D.count, u.start + u.count), G = J, E = y; G < E; G += 3) {
                        if (y = G, K = G + 1, M = G + 2, y = b(this, w, p, d, D, A, y, K, M)) y.faceIndex = Math.floor(G / 3), n.push(y);
                    }
                } else if (u.isGeometry) for (D = Array.isArray(w), A = u.vertices, F = u.faces, y = u.faceVertexUvs[0], 0 < y.length && (z = y), L = 0, J = F.length; L < J; L++) {
                    if (H = F[L], y = D ? w[H.materialIndex] : w, void 0 !== y) {
                        G = A[H.a];E = A[H.b];I = A[H.c];if (!0 === y.morphTargets) {
                            K = u.morphTargets;M = this.morphTargetInfluences;f.set(0, 0, 0);g.set(0, 0, 0);h.set(0, 0, 0);for (var P = 0, R = K.length; P < R; P++) {
                                var S = M[P];if (0 !== S) {
                                    var U = K[P].vertices;f.addScaledVector(k.subVectors(U[H.a], G), S);g.addScaledVector(m.subVectors(U[H.b], E), S);h.addScaledVector(l.subVectors(U[H.c], I), S);
                                }
                            }f.add(G);g.add(E);h.add(I);G = f;E = g;I = h;
                        }if (y = a(this, y, p, d, G, E, I, r)) z && z[L] && (K = z[L], q.copy(K[0]), v.copy(K[1]), t.copy(K[2]), y.uv = ua.getUV(r, G, E, I, q, v, t, new B())), y.face = H, y.faceIndex = L, n.push(y);
                    }
                }
            };
        }(), clone: function clone() {
            return new this.constructor(this.geometry, this.material).copy(this);
        } });$a.prototype = Object.create(S.prototype);$a.prototype.constructor = $a;$a.prototype.isCubeTexture = !0;Object.defineProperty($a.prototype, "images", { get: function get$$1() {
            return this.image;
        }, set: function set$$1(a) {
            this.image = a;
        } });Qb.prototype = Object.create(S.prototype);Qb.prototype.constructor = Qb;Qb.prototype.isDataTexture2DArray = !0;Rb.prototype = Object.create(S.prototype);Rb.prototype.constructor = Rb;Rb.prototype.isDataTexture3D = !0;var $e = new S(),
        ug = new Qb(),
        wg = new Rb(),
        af = new $a(),
        Ue = [],
        We = [],
        Ze = new Float32Array(16),
        Ye = new Float32Array(9),
        Xe = new Float32Array(4);ef.prototype.updateCache = function (a) {
        var b = this.cache;a instanceof Float32Array && b.length !== a.length && (this.cache = new Float32Array(a.length));ha(b, a);
    };ff.prototype.setValue = function (a, b, c) {
        for (var d = this.seq, e = 0, f = d.length; e !== f; ++e) {
            var g = d[e];g.setValue(a, b[g.id], c);
        }
    };var fe = /([\w\d_]+)(\])?(\[|\.)?/g;fb.prototype.setValue = function (a, b, c) {
        b = this.map[b];void 0 !== b && b.setValue(a, c, this.renderer);
    };fb.prototype.setOptional = function (a, b, c) {
        b = b[c];void 0 !== b && this.setValue(a, c, b);
    };fb.upload = function (a, b, c, d) {
        for (var e = 0, f = b.length; e !== f; ++e) {
            var g = b[e],
                h = c[g.id];!1 !== h.needsUpdate && g.setValue(a, h.value, d);
        }
    };fb.seqWithValue = function (a, b) {
        for (var c = [], d = 0, e = a.length; d !== e; ++d) {
            var f = a[d];f.id in b && c.push(f);
        }return c;
    };var Rg = 0,
        Zg = 0;gb.prototype = Object.create(M.prototype);gb.prototype.constructor = gb;gb.prototype.isMeshDepthMaterial = !0;gb.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.depthPacking = a.depthPacking;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.map = a.map;this.alphaMap = a.alphaMap;this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;return this;
    };hb.prototype = Object.create(M.prototype);hb.prototype.constructor = hb;hb.prototype.isMeshDistanceMaterial = !0;hb.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.referencePosition.copy(a.referencePosition);this.nearDistance = a.nearDistance;this.farDistance = a.farDistance;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.map = a.map;this.alphaMap = a.alphaMap;this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;return this;
    };Tb.prototype = Object.assign(Object.create(E.prototype), { constructor: Tb, isGroup: !0 });Va.prototype = Object.assign(Object.create(E.prototype), { constructor: Va, isCamera: !0, copy: function copy(a, b) {
            E.prototype.copy.call(this, a, b);this.matrixWorldInverse.copy(a.matrixWorldInverse);this.projectionMatrix.copy(a.projectionMatrix);
            this.projectionMatrixInverse.copy(a.projectionMatrixInverse);return this;
        }, getWorldDirection: function getWorldDirection(a) {
            void 0 === a && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), a = new n());this.updateMatrixWorld(!0);var b = this.matrixWorld.elements;return a.set(-b[8], -b[9], -b[10]).normalize();
        }, updateMatrixWorld: function updateMatrixWorld(a) {
            E.prototype.updateMatrixWorld.call(this, a);this.matrixWorldInverse.getInverse(this.matrixWorld);
        }, clone: function clone() {
            return new this.constructor().copy(this);
        } });U.prototype = Object.assign(Object.create(Va.prototype), { constructor: U, isPerspectiveCamera: !0, copy: function copy(a, b) {
            Va.prototype.copy.call(this, a, b);this.fov = a.fov;this.zoom = a.zoom;this.near = a.near;this.far = a.far;this.focus = a.focus;this.aspect = a.aspect;this.view = null === a.view ? null : Object.assign({}, a.view);this.filmGauge = a.filmGauge;this.filmOffset = a.filmOffset;return this;
        }, setFocalLength: function setFocalLength(a) {
            a = .5 * this.getFilmHeight() / a;this.fov = 2 * H.RAD2DEG * Math.atan(a);this.updateProjectionMatrix();
        }, getFocalLength: function getFocalLength() {
            var a = Math.tan(.5 * H.DEG2RAD * this.fov);return .5 * this.getFilmHeight() / a;
        }, getEffectiveFOV: function getEffectiveFOV() {
            return 2 * H.RAD2DEG * Math.atan(Math.tan(.5 * H.DEG2RAD * this.fov) / this.zoom);
        }, getFilmWidth: function getFilmWidth() {
            return this.filmGauge * Math.min(this.aspect, 1);
        }, getFilmHeight: function getFilmHeight() {
            return this.filmGauge / Math.max(this.aspect, 1);
        }, setViewOffset: function setViewOffset(a, b, c, d, e, f) {
            this.aspect = a / b;null === this.view && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 });this.view.enabled = !0;this.view.fullWidth = a;this.view.fullHeight = b;this.view.offsetX = c;this.view.offsetY = d;this.view.width = e;this.view.height = f;this.updateProjectionMatrix();
        }, clearViewOffset: function clearViewOffset() {
            null !== this.view && (this.view.enabled = !1);this.updateProjectionMatrix();
        }, updateProjectionMatrix: function updateProjectionMatrix() {
            var a = this.near,
                b = a * Math.tan(.5 * H.DEG2RAD * this.fov) / this.zoom,
                c = 2 * b,
                d = this.aspect * c,
                e = -.5 * d,
                f = this.view;if (null !== this.view && this.view.enabled) {
                var g = f.fullWidth,
                    h = f.fullHeight;e += f.offsetX * d / g;b -= f.offsetY * c / h;d *= f.width / g;c *= f.height / h;
            }f = this.filmOffset;0 !== f && (e += a * f / this.getFilmWidth());this.projectionMatrix.makePerspective(e, e + d, b, b - c, a, this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix);
        }, toJSON: function toJSON(a) {
            a = E.prototype.toJSON.call(this, a);a.object.fov = this.fov;a.object.zoom = this.zoom;a.object.near = this.near;a.object.far = this.far;a.object.focus = this.focus;a.object.aspect = this.aspect;null !== this.view && (a.object.view = Object.assign({}, this.view));a.object.filmGauge = this.filmGauge;a.object.filmOffset = this.filmOffset;
            return a;
        } });Fc.prototype = Object.assign(Object.create(U.prototype), { constructor: Fc, isArrayCamera: !0 });var rf = new n(),
        sf = new n();Object.assign(zd.prototype, { isFogExp2: !0, clone: function clone() {
            return new zd(this.color, this.density);
        }, toJSON: function toJSON() {
            return { type: "FogExp2", color: this.color.getHex(), density: this.density };
        } });Object.assign(Ad.prototype, { isFog: !0, clone: function clone() {
            return new Ad(this.color, this.near, this.far);
        }, toJSON: function toJSON() {
            return { type: "Fog", color: this.color.getHex(), near: this.near, far: this.far };
        } });
    Bd.prototype = Object.assign(Object.create(E.prototype), { constructor: Bd, isScene: !0, copy: function copy(a, b) {
            E.prototype.copy.call(this, a, b);null !== a.background && (this.background = a.background.clone());null !== a.fog && (this.fog = a.fog.clone());null !== a.overrideMaterial && (this.overrideMaterial = a.overrideMaterial.clone());this.autoUpdate = a.autoUpdate;this.matrixAutoUpdate = a.matrixAutoUpdate;return this;
        }, toJSON: function toJSON(a) {
            var b = E.prototype.toJSON.call(this, a);null !== this.background && (b.object.background = this.background.toJSON(a));
            null !== this.fog && (b.object.fog = this.fog.toJSON());return b;
        }, dispose: function dispose() {
            this.dispatchEvent({ type: "dispose" });
        } });Object.defineProperty(ub.prototype, "needsUpdate", { set: function set$$1(a) {
            !0 === a && this.version++;
        } });Object.assign(ub.prototype, { isInterleavedBuffer: !0, onUploadCallback: function onUploadCallback() {}, setArray: function setArray(a) {
            if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count = void 0 !== a ? a.length / this.stride : 0;this.array = a;return this;
        }, setDynamic: function setDynamic(a) {
            this.dynamic = a;return this;
        }, copy: function copy(a) {
            this.array = new a.array.constructor(a.array);this.count = a.count;this.stride = a.stride;this.dynamic = a.dynamic;return this;
        }, copyAt: function copyAt(a, b, c) {
            a *= this.stride;c *= b.stride;for (var d = 0, e = this.stride; d < e; d++) {
                this.array[a + d] = b.array[c + d];
            }return this;
        }, set: function set$$1(a, b) {
            void 0 === b && (b = 0);this.array.set(a, b);return this;
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, onUpload: function onUpload(a) {
            this.onUploadCallback = a;return this;
        } });Object.defineProperties(Gc.prototype, { count: { get: function get$$1() {
                return this.data.count;
            } }, array: { get: function get$$1() {
                return this.data.array;
            } } });Object.assign(Gc.prototype, { isInterleavedBufferAttribute: !0, setX: function setX(a, b) {
            this.data.array[a * this.data.stride + this.offset] = b;return this;
        }, setY: function setY(a, b) {
            this.data.array[a * this.data.stride + this.offset + 1] = b;return this;
        }, setZ: function setZ(a, b) {
            this.data.array[a * this.data.stride + this.offset + 2] = b;return this;
        }, setW: function setW(a, b) {
            this.data.array[a * this.data.stride + this.offset + 3] = b;return this;
        }, getX: function getX(a) {
            return this.data.array[a * this.data.stride + this.offset];
        }, getY: function getY(a) {
            return this.data.array[a * this.data.stride + this.offset + 1];
        }, getZ: function getZ(a) {
            return this.data.array[a * this.data.stride + this.offset + 2];
        }, getW: function getW(a) {
            return this.data.array[a * this.data.stride + this.offset + 3];
        }, setXY: function setXY(a, b, c) {
            a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;return this;
        }, setXYZ: function setXYZ(a, b, c, d) {
            a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;this.data.array[a + 2] = d;return this;
        },
        setXYZW: function setXYZW(a, b, c, d, e) {
            a = a * this.data.stride + this.offset;this.data.array[a + 0] = b;this.data.array[a + 1] = c;this.data.array[a + 2] = d;this.data.array[a + 3] = e;return this;
        } });jb.prototype = Object.create(M.prototype);jb.prototype.constructor = jb;jb.prototype.isSpriteMaterial = !0;jb.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.rotation = a.rotation;this.sizeAttenuation = a.sizeAttenuation;return this;
    };var Ub;Hc.prototype = Object.assign(Object.create(E.prototype), { constructor: Hc, isSprite: !0, raycast: function () {
            function a(a, b, c, d, h, k) {
                e.subVectors(a, c).addScalar(.5).multiply(d);void 0 !== h ? (f.x = k * e.x - h * e.y, f.y = h * e.x + k * e.y) : f.copy(e);a.copy(b);a.x += f.x;a.y += f.y;a.applyMatrix4(g);
            }var b = new n(),
                c = new n(),
                d = new n(),
                e = new B(),
                f = new B(),
                g = new J(),
                h = new n(),
                k = new n(),
                m = new n(),
                l = new B(),
                q = new B(),
                v = new B();return function (e, f) {
                c.setFromMatrixScale(this.matrixWorld);g.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld);d.setFromMatrixPosition(this.modelViewMatrix);var p = this.material.rotation;
                if (0 !== p) {
                    var n = Math.cos(p);var r = Math.sin(p);
                }p = this.center;a(h.set(-.5, -.5, 0), d, p, c, r, n);a(k.set(.5, -.5, 0), d, p, c, r, n);a(m.set(.5, .5, 0), d, p, c, r, n);l.set(0, 0);q.set(1, 0);v.set(1, 1);var t = e.ray.intersectTriangle(h, k, m, !1, b);if (null === t && (a(k.set(-.5, .5, 0), d, p, c, r, n), q.set(0, 1), t = e.ray.intersectTriangle(h, m, k, !1, b), null === t)) return;r = e.ray.origin.distanceTo(b);r < e.near || r > e.far || f.push({ distance: r, point: b.clone(), uv: ua.getUV(b, h, k, m, l, q, v, new B()), face: null, object: this });
            };
        }(), clone: function clone() {
            return new this.constructor(this.material).copy(this);
        },
        copy: function copy(a) {
            E.prototype.copy.call(this, a);void 0 !== a.center && this.center.copy(a.center);return this;
        } });Ic.prototype = Object.assign(Object.create(E.prototype), { constructor: Ic, copy: function copy(a) {
            E.prototype.copy.call(this, a, !1);a = a.levels;for (var b = 0, c = a.length; b < c; b++) {
                var d = a[b];this.addLevel(d.object.clone(), d.distance);
            }return this;
        }, addLevel: function addLevel(a, b) {
            void 0 === b && (b = 0);b = Math.abs(b);for (var c = this.levels, d = 0; d < c.length && !(b < c[d].distance); d++) {}c.splice(d, 0, { distance: b, object: a });this.add(a);
        },
        getObjectForDistance: function getObjectForDistance(a) {
            for (var b = this.levels, c = 1, d = b.length; c < d && !(a < b[c].distance); c++) {}return b[c - 1].object;
        }, raycast: function () {
            var a = new n();return function (b, c) {
                a.setFromMatrixPosition(this.matrixWorld);var d = b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b, c);
            };
        }(), update: function () {
            var a = new n(),
                b = new n();return function (c) {
                var d = this.levels;if (1 < d.length) {
                    a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c = a.distanceTo(b);d[0].object.visible = !0;for (var e = 1, f = d.length; e < f; e++) {
                        if (c >= d[e].distance) d[e - 1].object.visible = !1, d[e].object.visible = !0;else break;
                    }for (; e < f; e++) {
                        d[e].object.visible = !1;
                    }
                }
            };
        }(), toJSON: function toJSON(a) {
            a = E.prototype.toJSON.call(this, a);a.object.levels = [];for (var b = this.levels, c = 0, d = b.length; c < d; c++) {
                var e = b[c];a.object.levels.push({ object: e.object.uuid, distance: e.distance });
            }return a;
        } });Jc.prototype = Object.assign(Object.create(va.prototype), { constructor: Jc, isSkinnedMesh: !0, bind: function bind(a, b) {
            this.skeleton = a;void 0 === b && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), b = this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b);
        }, pose: function pose() {
            this.skeleton.pose();
        }, normalizeSkinWeights: function normalizeSkinWeights() {
            for (var a = new ba(), b = this.geometry.attributes.skinWeight, c = 0, d = b.count; c < d; c++) {
                a.x = b.getX(c);a.y = b.getY(c);a.z = b.getZ(c);a.w = b.getW(c);var e = 1 / a.manhattanLength();Infinity !== e ? a.multiplyScalar(e) : a.set(1, 0, 0, 0);b.setXYZW(c, a.x, a.y, a.z, a.w);
            }
        }, updateMatrixWorld: function updateMatrixWorld(a) {
            va.prototype.updateMatrixWorld.call(this, a);
            "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
        }, clone: function clone() {
            return new this.constructor(this.geometry, this.material).copy(this);
        } });Object.assign(Cd.prototype, { calculateInverses: function calculateInverses() {
            this.boneInverses = [];for (var a = 0, b = this.bones.length; a < b; a++) {
                var c = new J();this.bones[a] && c.getInverse(this.bones[a].matrixWorld);
                this.boneInverses.push(c);
            }
        }, pose: function pose() {
            var a, b;var c = 0;for (b = this.bones.length; c < b; c++) {
                (a = this.bones[c]) && a.matrixWorld.getInverse(this.boneInverses[c]);
            }c = 0;for (b = this.bones.length; c < b; c++) {
                if (a = this.bones[c]) a.parent && a.parent.isBone ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
            }
        }, update: function () {
            var a = new J(),
                b = new J();return function () {
                for (var c = this.bones, d = this.boneInverses, e = this.boneMatrices, f = this.boneTexture, g = 0, h = c.length; g < h; g++) {
                    a.multiplyMatrices(c[g] ? c[g].matrixWorld : b, d[g]), a.toArray(e, 16 * g);
                }void 0 !== f && (f.needsUpdate = !0);
            };
        }(), clone: function clone() {
            return new Cd(this.bones, this.boneInverses);
        }, getBoneByName: function getBoneByName(a) {
            for (var b = 0, c = this.bones.length; b < c; b++) {
                var d = this.bones[b];if (d.name === a) return d;
            }
        } });je.prototype = Object.assign(Object.create(E.prototype), { constructor: je, isBone: !0 });R.prototype = Object.create(M.prototype);R.prototype.constructor = R;R.prototype.isLineBasicMaterial = !0;
    R.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.color.copy(a.color);this.linewidth = a.linewidth;this.linecap = a.linecap;this.linejoin = a.linejoin;return this;
    };da.prototype = Object.assign(Object.create(E.prototype), { constructor: da, isLine: !0, computeLineDistances: function () {
            var a = new n(),
                b = new n();return function () {
                var c = this.geometry;if (c.isBufferGeometry) {
                    if (null === c.index) {
                        for (var d = c.attributes.position, e = [0], f = 1, g = d.count; f < g; f++) {
                            a.fromBufferAttribute(d, f - 1), b.fromBufferAttribute(d, f), e[f] = e[f - 1], e[f] += a.distanceTo(b);
                        }c.addAttribute("lineDistance", new F(e, 1));
                    } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                } else if (c.isGeometry) for (d = c.vertices, e = c.lineDistances, e[0] = 0, f = 1, g = d.length; f < g; f++) {
                    e[f] = e[f - 1], e[f] += d[f - 1].distanceTo(d[f]);
                }return this;
            };
        }(), raycast: function () {
            var a = new J(),
                b = new tb(),
                c = new Ia();return function (d, e) {
                var f = d.linePrecision,
                    g = this.geometry,
                    h = this.matrixWorld;null === g.boundingSphere && g.computeBoundingSphere();
                c.copy(g.boundingSphere);c.applyMatrix4(h);c.radius += f;if (!1 !== d.ray.intersectsSphere(c)) {
                    a.getInverse(h);b.copy(d.ray).applyMatrix4(a);f /= (this.scale.x + this.scale.y + this.scale.z) / 3;f *= f;var k = new n(),
                        m = new n();h = new n();var l = new n(),
                        q = this && this.isLineSegments ? 2 : 1;if (g.isBufferGeometry) {
                        var v = g.index,
                            t = g.attributes.position.array;if (null !== v) {
                            v = v.array;g = 0;for (var r = v.length - 1; g < r; g += q) {
                                var u = v[g + 1];k.fromArray(t, 3 * v[g]);m.fromArray(t, 3 * u);u = b.distanceSqToSegment(k, m, l, h);u > f || (l.applyMatrix4(this.matrixWorld), u = d.ray.origin.distanceTo(l), u < d.near || u > d.far || e.push({ distance: u, point: h.clone().applyMatrix4(this.matrixWorld), index: g, face: null, faceIndex: null, object: this }));
                            }
                        } else for (g = 0, r = t.length / 3 - 1; g < r; g += q) {
                            k.fromArray(t, 3 * g), m.fromArray(t, 3 * g + 3), u = b.distanceSqToSegment(k, m, l, h), u > f || (l.applyMatrix4(this.matrixWorld), u = d.ray.origin.distanceTo(l), u < d.near || u > d.far || e.push({ distance: u, point: h.clone().applyMatrix4(this.matrixWorld), index: g, face: null, faceIndex: null, object: this }));
                        }
                    } else if (g.isGeometry) for (k = g.vertices, m = k.length, g = 0; g < m - 1; g += q) {
                        u = b.distanceSqToSegment(k[g], k[g + 1], l, h), u > f || (l.applyMatrix4(this.matrixWorld), u = d.ray.origin.distanceTo(l), u < d.near || u > d.far || e.push({ distance: u, point: h.clone().applyMatrix4(this.matrixWorld), index: g, face: null, faceIndex: null, object: this }));
                    }
                }
            };
        }(), clone: function clone() {
            return new this.constructor(this.geometry, this.material).copy(this);
        } });W.prototype = Object.assign(Object.create(da.prototype), { constructor: W, isLineSegments: !0, computeLineDistances: function () {
            var a = new n(),
                b = new n();return function () {
                var c = this.geometry;if (c.isBufferGeometry) {
                    if (null === c.index) {
                        for (var d = c.attributes.position, e = [], f = 0, g = d.count; f < g; f += 2) {
                            a.fromBufferAttribute(d, f), b.fromBufferAttribute(d, f + 1), e[f] = 0 === f ? 0 : e[f - 1], e[f + 1] = e[f] + a.distanceTo(b);
                        }c.addAttribute("lineDistance", new F(e, 1));
                    } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                } else if (c.isGeometry) for (d = c.vertices, e = c.lineDistances, f = 0, g = d.length; f < g; f += 2) {
                    a.copy(d[f]), b.copy(d[f + 1]), e[f] = 0 === f ? 0 : e[f - 1], e[f + 1] = e[f] + a.distanceTo(b);
                }return this;
            };
        }() });Dd.prototype = Object.assign(Object.create(da.prototype), { constructor: Dd, isLineLoop: !0 });Ja.prototype = Object.create(M.prototype);Ja.prototype.constructor = Ja;Ja.prototype.isPointsMaterial = !0;Ja.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.size = a.size;this.sizeAttenuation = a.sizeAttenuation;this.morphTargets = a.morphTargets;return this;
    };Vb.prototype = Object.assign(Object.create(E.prototype), { constructor: Vb, isPoints: !0, raycast: function () {
            var a = new J(),
                b = new tb(),
                c = new Ia();return function (d, e) {
                function f(a, c) {
                    var f = b.distanceSqToPoint(a);f < l && (b.closestPointToPoint(a, q), q.applyMatrix4(k), a = d.ray.origin.distanceTo(q), a < d.near || a > d.far || e.push({ distance: a, distanceToRay: Math.sqrt(f), point: q.clone(), index: c, face: null, object: g }));
                }var g = this,
                    h = this.geometry,
                    k = this.matrixWorld,
                    m = d.params.Points.threshold;null === h.boundingSphere && h.computeBoundingSphere();c.copy(h.boundingSphere);c.applyMatrix4(k);
                c.radius += m;if (!1 !== d.ray.intersectsSphere(c)) {
                    a.getInverse(k);b.copy(d.ray).applyMatrix4(a);m /= (this.scale.x + this.scale.y + this.scale.z) / 3;var l = m * m;m = new n();var q = new n();if (h.isBufferGeometry) {
                        var v = h.index;h = h.attributes.position.array;if (null !== v) {
                            var t = v.array;v = 0;for (var r = t.length; v < r; v++) {
                                var u = t[v];m.fromArray(h, 3 * u);f(m, u);
                            }
                        } else for (v = 0, t = h.length / 3; v < t; v++) {
                            m.fromArray(h, 3 * v), f(m, v);
                        }
                    } else for (m = h.vertices, v = 0, t = m.length; v < t; v++) {
                        f(m[v], v);
                    }
                }
            };
        }(), clone: function clone() {
            return new this.constructor(this.geometry, this.material).copy(this);
        } });ke.prototype = Object.assign(Object.create(S.prototype), { constructor: ke, isVideoTexture: !0, update: function update() {
            var a = this.image;a.readyState >= a.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
        } });Wb.prototype = Object.create(S.prototype);Wb.prototype.constructor = Wb;Wb.prototype.isCompressedTexture = !0;Kc.prototype = Object.create(S.prototype);Kc.prototype.constructor = Kc;Kc.prototype.isCanvasTexture = !0;Lc.prototype = Object.create(S.prototype);Lc.prototype.constructor = Lc;Lc.prototype.isDepthTexture = !0;Xb.prototype = Object.create(D.prototype);Xb.prototype.constructor = Xb;Mc.prototype = Object.create(G.prototype);Mc.prototype.constructor = Mc;Yb.prototype = Object.create(D.prototype);Yb.prototype.constructor = Yb;Nc.prototype = Object.create(G.prototype);Nc.prototype.constructor = Nc;Aa.prototype = Object.create(D.prototype);Aa.prototype.constructor = Aa;Oc.prototype = Object.create(G.prototype);Oc.prototype.constructor = Oc;Zb.prototype = Object.create(Aa.prototype);Zb.prototype.constructor = Zb;Pc.prototype = Object.create(G.prototype);
    Pc.prototype.constructor = Pc;vb.prototype = Object.create(Aa.prototype);vb.prototype.constructor = vb;Qc.prototype = Object.create(G.prototype);Qc.prototype.constructor = Qc;$b.prototype = Object.create(Aa.prototype);$b.prototype.constructor = $b;Rc.prototype = Object.create(G.prototype);Rc.prototype.constructor = Rc;ac.prototype = Object.create(Aa.prototype);ac.prototype.constructor = ac;Sc.prototype = Object.create(G.prototype);Sc.prototype.constructor = Sc;wb.prototype = Object.create(D.prototype);wb.prototype.constructor = wb;wb.prototype.toJSON = function () {
        var a = D.prototype.toJSON.call(this);a.path = this.parameters.path.toJSON();return a;
    };Tc.prototype = Object.create(G.prototype);Tc.prototype.constructor = Tc;bc.prototype = Object.create(D.prototype);bc.prototype.constructor = bc;Uc.prototype = Object.create(G.prototype);Uc.prototype.constructor = Uc;cc.prototype = Object.create(D.prototype);cc.prototype.constructor = cc;var lh = { triangulate: function triangulate(a, b, c) {
            c = c || 2;var d = b && b.length,
                e = d ? b[0] * c : a.length,
                f = vf(a, 0, e, c, !0),
                g = [];if (!f) return g;
            var h;if (d) {
                var k = c;d = [];var m;var l = 0;for (m = b.length; l < m; l++) {
                    var n = b[l] * k;var v = l < m - 1 ? b[l + 1] * k : a.length;n = vf(a, n, v, k, !1);n === n.next && (n.steiner = !0);d.push(fh(n));
                }d.sort(dh);for (l = 0; l < d.length; l++) {
                    b = d[l];k = f;if (k = eh(b, k)) b = yf(k, b), Wc(b, b.next);f = Wc(f, f.next);
                }
            }if (a.length > 80 * c) {
                var t = h = a[0];var r = d = a[1];for (k = c; k < e; k += c) {
                    l = a[k], b = a[k + 1], l < t && (t = l), b < r && (r = b), l > h && (h = l), b > d && (d = b);
                }h = Math.max(h - t, d - r);h = 0 !== h ? 1 / h : 0;
            }Xc(f, g, c, t, r, h);return g;
        } },
        ab = { area: function area(a) {
            for (var b = a.length, c = 0, d = b - 1, e = 0; e < b; d = e++) {
                c += a[d].x * a[e].y - a[e].x * a[d].y;
            }return .5 * c;
        }, isClockWise: function isClockWise(a) {
            return 0 > ab.area(a);
        }, triangulateShape: function triangulateShape(a, b) {
            var c = [],
                d = [],
                e = [];zf(a);Af(c, a);var f = a.length;b.forEach(zf);for (a = 0; a < b.length; a++) {
                d.push(f), f += b[a].length, Af(c, b[a]);
            }b = lh.triangulate(c, d);for (a = 0; a < b.length; a += 3) {
                e.push(b.slice(a, a + 3));
            }return e;
        } };yb.prototype = Object.create(G.prototype);yb.prototype.constructor = yb;yb.prototype.toJSON = function () {
        var a = G.prototype.toJSON.call(this);return Bf(this.parameters.shapes, this.parameters.options, a);
    };Wa.prototype = Object.create(D.prototype);Wa.prototype.constructor = Wa;Wa.prototype.toJSON = function () {
        var a = D.prototype.toJSON.call(this);return Bf(this.parameters.shapes, this.parameters.options, a);
    };var gh = { generateTopUV: function generateTopUV(a, b, c, d, e) {
            a = b[3 * d];d = b[3 * d + 1];var f = b[3 * e];e = b[3 * e + 1];return [new B(b[3 * c], b[3 * c + 1]), new B(a, d), new B(f, e)];
        }, generateSideWallUV: function generateSideWallUV(a, b, c, d, e, f) {
            a = b[3 * c];var g = b[3 * c + 1];c = b[3 * c + 2];var h = b[3 * d],
                k = b[3 * d + 1];d = b[3 * d + 2];var m = b[3 * e],
                l = b[3 * e + 1];e = b[3 * e + 2];var n = b[3 * f],
                v = b[3 * f + 1];b = b[3 * f + 2];return .01 > Math.abs(g - k) ? [new B(a, 1 - c), new B(h, 1 - d), new B(m, 1 - e), new B(n, 1 - b)] : [new B(g, 1 - c), new B(k, 1 - d), new B(l, 1 - e), new B(v, 1 - b)];
        } };Zc.prototype = Object.create(G.prototype);Zc.prototype.constructor = Zc;dc.prototype = Object.create(Wa.prototype);dc.prototype.constructor = dc;$c.prototype = Object.create(G.prototype);$c.prototype.constructor = $c;zb.prototype = Object.create(D.prototype);zb.prototype.constructor = zb;ad.prototype = Object.create(G.prototype);ad.prototype.constructor = ad;ec.prototype = Object.create(D.prototype);ec.prototype.constructor = ec;bd.prototype = Object.create(G.prototype);bd.prototype.constructor = bd;fc.prototype = Object.create(D.prototype);fc.prototype.constructor = fc;Ab.prototype = Object.create(G.prototype);Ab.prototype.constructor = Ab;Ab.prototype.toJSON = function () {
        var a = G.prototype.toJSON.call(this);return Cf(this.parameters.shapes, a);
    };Bb.prototype = Object.create(D.prototype);Bb.prototype.constructor = Bb;Bb.prototype.toJSON = function () {
        var a = D.prototype.toJSON.call(this);return Cf(this.parameters.shapes, a);
    };gc.prototype = Object.create(D.prototype);gc.prototype.constructor = gc;Cb.prototype = Object.create(G.prototype);Cb.prototype.constructor = Cb;bb.prototype = Object.create(D.prototype);bb.prototype.constructor = bb;cd.prototype = Object.create(Cb.prototype);cd.prototype.constructor = cd;dd.prototype = Object.create(bb.prototype);dd.prototype.constructor = dd;ed.prototype = Object.create(G.prototype);ed.prototype.constructor = ed;hc.prototype = Object.create(D.prototype);hc.prototype.constructor = hc;var na = Object.freeze({ WireframeGeometry: Xb,
        ParametricGeometry: Mc, ParametricBufferGeometry: Yb, TetrahedronGeometry: Oc, TetrahedronBufferGeometry: Zb, OctahedronGeometry: Pc, OctahedronBufferGeometry: vb, IcosahedronGeometry: Qc, IcosahedronBufferGeometry: $b, DodecahedronGeometry: Rc, DodecahedronBufferGeometry: ac, PolyhedronGeometry: Nc, PolyhedronBufferGeometry: Aa, TubeGeometry: Sc, TubeBufferGeometry: wb, TorusKnotGeometry: Tc, TorusKnotBufferGeometry: bc, TorusGeometry: Uc, TorusBufferGeometry: cc, TextGeometry: Zc, TextBufferGeometry: dc, SphereGeometry: $c, SphereBufferGeometry: zb,
        RingGeometry: ad, RingBufferGeometry: ec, PlaneGeometry: Cc, PlaneBufferGeometry: sb, LatheGeometry: bd, LatheBufferGeometry: fc, ShapeGeometry: Ab, ShapeBufferGeometry: Bb, ExtrudeGeometry: yb, ExtrudeBufferGeometry: Wa, EdgesGeometry: gc, ConeGeometry: cd, ConeBufferGeometry: dd, CylinderGeometry: Cb, CylinderBufferGeometry: bb, CircleGeometry: ed, CircleBufferGeometry: hc, BoxGeometry: Ob, BoxBufferGeometry: rb });Db.prototype = Object.create(M.prototype);Db.prototype.constructor = Db;Db.prototype.isShadowMaterial = !0;Db.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.color.copy(a.color);return this;
    };ic.prototype = Object.create(Ca.prototype);ic.prototype.constructor = ic;ic.prototype.isRawShaderMaterial = !0;Xa.prototype = Object.create(M.prototype);Xa.prototype.constructor = Xa;Xa.prototype.isMeshStandardMaterial = !0;Xa.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.defines = { STANDARD: "" };this.color.copy(a.color);this.roughness = a.roughness;this.metalness = a.metalness;this.map = a.map;this.lightMap = a.lightMap;this.lightMapIntensity = a.lightMapIntensity;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap = a.emissiveMap;this.emissiveIntensity = a.emissiveIntensity;this.bumpMap = a.bumpMap;this.bumpScale = a.bumpScale;this.normalMap = a.normalMap;this.normalMapType = a.normalMapType;this.normalScale.copy(a.normalScale);this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.roughnessMap = a.roughnessMap;this.metalnessMap = a.metalnessMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.envMapIntensity = a.envMapIntensity;this.refractionRatio = a.refractionRatio;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
    };Eb.prototype = Object.create(Xa.prototype);Eb.prototype.constructor = Eb;Eb.prototype.isMeshPhysicalMaterial = !0;Eb.prototype.copy = function (a) {
        Xa.prototype.copy.call(this, a);this.defines = { PHYSICAL: "" };this.reflectivity = a.reflectivity;this.clearCoat = a.clearCoat;this.clearCoatRoughness = a.clearCoatRoughness;return this;
    };Ka.prototype = Object.create(M.prototype);Ka.prototype.constructor = Ka;Ka.prototype.isMeshPhongMaterial = !0;Ka.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.color.copy(a.color);this.specular.copy(a.specular);this.shininess = a.shininess;this.map = a.map;this.lightMap = a.lightMap;this.lightMapIntensity = a.lightMapIntensity;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap = a.emissiveMap;this.emissiveIntensity = a.emissiveIntensity;this.bumpMap = a.bumpMap;this.bumpScale = a.bumpScale;this.normalMap = a.normalMap;this.normalMapType = a.normalMapType;this.normalScale.copy(a.normalScale);this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;
        this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
    };Fb.prototype = Object.create(Ka.prototype);Fb.prototype.constructor = Fb;Fb.prototype.isMeshToonMaterial = !0;Fb.prototype.copy = function (a) {
        Ka.prototype.copy.call(this, a);this.gradientMap = a.gradientMap;return this;
    };Gb.prototype = Object.create(M.prototype);Gb.prototype.constructor = Gb;Gb.prototype.isMeshNormalMaterial = !0;Gb.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.bumpMap = a.bumpMap;this.bumpScale = a.bumpScale;this.normalMap = a.normalMap;this.normalMapType = a.normalMapType;this.normalScale.copy(a.normalScale);this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.wireframe = a.wireframe;
        this.wireframeLinewidth = a.wireframeLinewidth;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
    };Hb.prototype = Object.create(M.prototype);Hb.prototype.constructor = Hb;Hb.prototype.isMeshLambertMaterial = !0;Hb.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.color.copy(a.color);this.map = a.map;this.lightMap = a.lightMap;this.lightMapIntensity = a.lightMapIntensity;this.aoMap = a.aoMap;this.aoMapIntensity = a.aoMapIntensity;this.emissive.copy(a.emissive);
        this.emissiveMap = a.emissiveMap;this.emissiveIntensity = a.emissiveIntensity;this.specularMap = a.specularMap;this.alphaMap = a.alphaMap;this.envMap = a.envMap;this.combine = a.combine;this.reflectivity = a.reflectivity;this.refractionRatio = a.refractionRatio;this.wireframe = a.wireframe;this.wireframeLinewidth = a.wireframeLinewidth;this.wireframeLinecap = a.wireframeLinecap;this.wireframeLinejoin = a.wireframeLinejoin;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
    };
    Ib.prototype = Object.create(M.prototype);Ib.prototype.constructor = Ib;Ib.prototype.isMeshMatcapMaterial = !0;Ib.prototype.copy = function (a) {
        M.prototype.copy.call(this, a);this.defines = { MATCAP: "" };this.color.copy(a.color);this.matcap = a.matcap;this.map = a.map;this.bumpMap = a.bumpMap;this.bumpScale = a.bumpScale;this.normalMap = a.normalMap;this.normalMapType = a.normalMapType;this.normalScale.copy(a.normalScale);this.displacementMap = a.displacementMap;this.displacementScale = a.displacementScale;this.displacementBias = a.displacementBias;this.alphaMap = a.alphaMap;this.skinning = a.skinning;this.morphTargets = a.morphTargets;this.morphNormals = a.morphNormals;return this;
    };Jb.prototype = Object.create(R.prototype);Jb.prototype.constructor = Jb;Jb.prototype.isLineDashedMaterial = !0;Jb.prototype.copy = function (a) {
        R.prototype.copy.call(this, a);this.scale = a.scale;this.dashSize = a.dashSize;this.gapSize = a.gapSize;return this;
    };var mh = Object.freeze({ ShadowMaterial: Db, SpriteMaterial: jb, RawShaderMaterial: ic, ShaderMaterial: Ca, PointsMaterial: Ja,
        MeshPhysicalMaterial: Eb, MeshStandardMaterial: Xa, MeshPhongMaterial: Ka, MeshToonMaterial: Fb, MeshNormalMaterial: Gb, MeshLambertMaterial: Hb, MeshDepthMaterial: gb, MeshDistanceMaterial: hb, MeshBasicMaterial: ya, MeshMatcapMaterial: Ib, LineDashedMaterial: Jb, LineBasicMaterial: R, Material: M }),
        sa = { arraySlice: function arraySlice(a, b, c) {
            return sa.isTypedArray(a) ? new a.constructor(a.subarray(b, void 0 !== c ? c : a.length)) : a.slice(b, c);
        }, convertArray: function convertArray(a, b, c) {
            return !a || !c && a.constructor === b ? a : "number" === typeof b.BYTES_PER_ELEMENT ? new b(a) : Array.prototype.slice.call(a);
        }, isTypedArray: function isTypedArray(a) {
            return ArrayBuffer.isView(a) && !(a instanceof DataView);
        }, getKeyframeOrder: function getKeyframeOrder(a) {
            for (var b = a.length, c = Array(b), d = 0; d !== b; ++d) {
                c[d] = d;
            }c.sort(function (b, c) {
                return a[b] - a[c];
            });return c;
        }, sortedArray: function sortedArray(a, b, c) {
            for (var d = a.length, e = new a.constructor(d), f = 0, g = 0; g !== d; ++f) {
                for (var h = c[f] * b, k = 0; k !== b; ++k) {
                    e[g++] = a[h + k];
                }
            }return e;
        }, flattenJSON: function flattenJSON(a, b, c, d) {
            for (var e = 1, f = a[0]; void 0 !== f && void 0 === f[d];) {
                f = a[e++];
            }if (void 0 !== f) {
                var g = f[d];
                if (void 0 !== g) if (Array.isArray(g)) {
                    do {
                        g = f[d], void 0 !== g && (b.push(f.time), c.push.apply(c, g)), f = a[e++];
                    } while (void 0 !== f);
                } else if (void 0 !== g.toArray) {
                    do {
                        g = f[d], void 0 !== g && (b.push(f.time), g.toArray(c, c.length)), f = a[e++];
                    } while (void 0 !== f);
                } else {
                    do {
                        g = f[d], void 0 !== g && (b.push(f.time), c.push(g)), f = a[e++];
                    } while (void 0 !== f);
                }
            }
        } };Object.assign(wa.prototype, { evaluate: function evaluate(a) {
            var b = this.parameterPositions,
                c = this._cachedIndex,
                d = b[c],
                e = b[c - 1];a: {
                b: {
                    c: {
                        d: if (!(a < d)) {
                            for (var f = c + 2;;) {
                                if (void 0 === d) {
                                    if (a < e) break d;
                                    this._cachedIndex = c = b.length;return this.afterEnd_(c - 1, a, e);
                                }if (c === f) break;e = d;d = b[++c];if (a < d) break b;
                            }d = b.length;break c;
                        }if (a >= e) break a;else {
                            f = b[1];a < f && (c = 2, e = f);for (f = c - 2;;) {
                                if (void 0 === e) return this._cachedIndex = 0, this.beforeStart_(0, a, d);if (c === f) break;d = e;e = b[--c - 1];if (a >= e) break b;
                            }d = c;c = 0;
                        }
                    }for (; c < d;) {
                        e = c + d >>> 1, a < b[e] ? d = e : c = e + 1;
                    }d = b[c];e = b[c - 1];if (void 0 === e) return this._cachedIndex = 0, this.beforeStart_(0, a, d);if (void 0 === d) return this._cachedIndex = c = b.length, this.afterEnd_(c - 1, e, a);
                }this._cachedIndex = c;this.intervalChanged_(c, e, d);
            }return this.interpolate_(c, e, a, d);
        }, settings: null, DefaultSettings_: {}, getSettings_: function getSettings_() {
            return this.settings || this.DefaultSettings_;
        }, copySampleValue_: function copySampleValue_(a) {
            var b = this.resultBuffer,
                c = this.sampleValues,
                d = this.valueSize;a *= d;for (var e = 0; e !== d; ++e) {
                b[e] = c[a + e];
            }return b;
        }, interpolate_: function interpolate_() {
            throw Error("call to abstract method");
        }, intervalChanged_: function intervalChanged_() {} });Object.assign(wa.prototype, { beforeStart_: wa.prototype.copySampleValue_, afterEnd_: wa.prototype.copySampleValue_ });
    Fd.prototype = Object.assign(Object.create(wa.prototype), { constructor: Fd, DefaultSettings_: { endingStart: 2400, endingEnd: 2400 }, intervalChanged_: function intervalChanged_(a, b, c) {
            var d = this.parameterPositions,
                e = a - 2,
                f = a + 1,
                g = d[e],
                h = d[f];if (void 0 === g) switch (this.getSettings_().endingStart) {case 2401:
                    e = a;g = 2 * b - c;break;case 2402:
                    e = d.length - 2;g = b + d[e] - d[e + 1];break;default:
                    e = a, g = c;}if (void 0 === h) switch (this.getSettings_().endingEnd) {case 2401:
                    f = a;h = 2 * c - b;break;case 2402:
                    f = 1;h = c + d[1] - d[0];break;default:
                    f = a - 1, h = b;}a = .5 * (c - b);d = this.valueSize;
            this._weightPrev = a / (b - g);this._weightNext = a / (h - c);this._offsetPrev = e * d;this._offsetNext = f * d;
        }, interpolate_: function interpolate_(a, b, c, d) {
            var e = this.resultBuffer,
                f = this.sampleValues,
                g = this.valueSize;a *= g;var h = a - g,
                k = this._offsetPrev,
                m = this._offsetNext,
                l = this._weightPrev,
                n = this._weightNext,
                v = (c - b) / (d - b);c = v * v;d = c * v;b = -l * d + 2 * l * c - l * v;l = (1 + l) * d + (-1.5 - 2 * l) * c + (-.5 + l) * v + 1;v = (-1 - n) * d + (1.5 + n) * c + .5 * v;n = n * d - n * c;for (c = 0; c !== g; ++c) {
                e[c] = b * f[k + c] + l * f[h + c] + v * f[a + c] + n * f[m + c];
            }return e;
        } });fd.prototype = Object.assign(Object.create(wa.prototype), { constructor: fd, interpolate_: function interpolate_(a, b, c, d) {
            var e = this.resultBuffer,
                f = this.sampleValues,
                g = this.valueSize;a *= g;var h = a - g;b = (c - b) / (d - b);c = 1 - b;for (d = 0; d !== g; ++d) {
                e[d] = f[h + d] * c + f[a + d] * b;
            }return e;
        } });Gd.prototype = Object.assign(Object.create(wa.prototype), { constructor: Gd, interpolate_: function interpolate_(a) {
            return this.copySampleValue_(a - 1);
        } });Object.assign(ra, { toJSON: function toJSON(a) {
            var b = a.constructor;if (void 0 !== b.toJSON) b = b.toJSON(a);else {
                b = { name: a.name, times: sa.convertArray(a.times, Array), values: sa.convertArray(a.values, Array) };var c = a.getInterpolation();c !== a.DefaultInterpolation && (b.interpolation = c);
            }b.type = a.ValueTypeName;return b;
        } });Object.assign(ra.prototype, { constructor: ra, TimeBufferType: Float32Array, ValueBufferType: Float32Array, DefaultInterpolation: 2301, InterpolantFactoryMethodDiscrete: function InterpolantFactoryMethodDiscrete(a) {
            return new Gd(this.times, this.values, this.getValueSize(), a);
        }, InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(a) {
            return new fd(this.times, this.values, this.getValueSize(), a);
        }, InterpolantFactoryMethodSmooth: function InterpolantFactoryMethodSmooth(a) {
            return new Fd(this.times, this.values, this.getValueSize(), a);
        }, setInterpolation: function setInterpolation(a) {
            switch (a) {case 2300:
                    var b = this.InterpolantFactoryMethodDiscrete;break;case 2301:
                    b = this.InterpolantFactoryMethodLinear;break;case 2302:
                    b = this.InterpolantFactoryMethodSmooth;}if (void 0 === b) {
                b = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;if (void 0 === this.createInterpolant) if (a !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);else throw Error(b);console.warn("THREE.KeyframeTrack:", b);return this;
            }this.createInterpolant = b;return this;
        }, getInterpolation: function getInterpolation() {
            switch (this.createInterpolant) {case this.InterpolantFactoryMethodDiscrete:
                    return 2300;case this.InterpolantFactoryMethodLinear:
                    return 2301;case this.InterpolantFactoryMethodSmooth:
                    return 2302;}
        }, getValueSize: function getValueSize() {
            return this.values.length / this.times.length;
        }, shift: function shift(a) {
            if (0 !== a) for (var b = this.times, c = 0, d = b.length; c !== d; ++c) {
                b[c] += a;
            }return this;
        }, scale: function scale(a) {
            if (1 !== a) for (var b = this.times, c = 0, d = b.length; c !== d; ++c) {
                b[c] *= a;
            }return this;
        }, trim: function trim(a, b) {
            for (var c = this.times, d = c.length, e = 0, f = d - 1; e !== d && c[e] < a;) {
                ++e;
            }for (; -1 !== f && c[f] > b;) {
                --f;
            }++f;if (0 !== e || f !== d) e >= f && (f = Math.max(f, 1), e = f - 1), a = this.getValueSize(), this.times = sa.arraySlice(c, e, f), this.values = sa.arraySlice(this.values, e * a, f * a);return this;
        }, validate: function validate() {
            var a = !0,
                b = this.getValueSize();0 !== b - Math.floor(b) && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), a = !1);var c = this.times;b = this.values;var d = c.length;0 === d && (console.error("THREE.KeyframeTrack: Track is empty.", this), a = !1);for (var e = null, f = 0; f !== d; f++) {
                var g = c[f];if ("number" === typeof g && isNaN(g)) {
                    console.error("THREE.KeyframeTrack: Time is not a valid number.", this, f, g);a = !1;break;
                }if (null !== e && e > g) {
                    console.error("THREE.KeyframeTrack: Out of order keys.", this, f, g, e);a = !1;break;
                }e = g;
            }if (void 0 !== b && sa.isTypedArray(b)) for (f = 0, c = b.length; f !== c; ++f) {
                if (d = b[f], isNaN(d)) {
                    console.error("THREE.KeyframeTrack: Value is not a valid number.", this, f, d);a = !1;break;
                }
            }return a;
        }, optimize: function optimize() {
            for (var a = this.times, b = this.values, c = this.getValueSize(), d = 2302 === this.getInterpolation(), e = 1, f = a.length - 1, g = 1; g < f; ++g) {
                var h = !1,
                    k = a[g];if (k !== a[g + 1] && (1 !== g || k !== k[0])) if (d) h = !0;else {
                    var m = g * c,
                        l = m - c,
                        n = m + c;for (k = 0; k !== c; ++k) {
                        var v = b[m + k];if (v !== b[l + k] || v !== b[n + k]) {
                            h = !0;break;
                        }
                    }
                }if (h) {
                    if (g !== e) for (a[e] = a[g], h = g * c, m = e * c, k = 0; k !== c; ++k) {
                        b[m + k] = b[h + k];
                    }++e;
                }
            }if (0 < f) {
                a[e] = a[f];h = f * c;m = e * c;for (k = 0; k !== c; ++k) {
                    b[m + k] = b[h + k];
                }++e;
            }e !== a.length && (this.times = sa.arraySlice(a, 0, e), this.values = sa.arraySlice(b, 0, e * c));return this;
        }, clone: function clone() {
            var a = sa.arraySlice(this.times, 0),
                b = sa.arraySlice(this.values, 0);a = new this.constructor(this.name, a, b);a.createInterpolant = this.createInterpolant;return a;
        } });Hd.prototype = Object.assign(Object.create(ra.prototype), { constructor: Hd, ValueTypeName: "bool", ValueBufferType: Array, DefaultInterpolation: 2300, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 });Id.prototype = Object.assign(Object.create(ra.prototype), { constructor: Id, ValueTypeName: "color" });jc.prototype = Object.assign(Object.create(ra.prototype), { constructor: jc, ValueTypeName: "number" });Jd.prototype = Object.assign(Object.create(wa.prototype), { constructor: Jd, interpolate_: function interpolate_(a, b, c, d) {
            var e = this.resultBuffer,
                f = this.sampleValues,
                g = this.valueSize;a *= g;b = (c - b) / (d - b);for (c = a + g; a !== c; a += 4) {
                aa.slerpFlat(e, 0, f, a - g, f, a, b);
            }return e;
        } });gd.prototype = Object.assign(Object.create(ra.prototype), { constructor: gd, ValueTypeName: "quaternion", DefaultInterpolation: 2301, InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(a) {
            return new Jd(this.times, this.values, this.getValueSize(), a);
        }, InterpolantFactoryMethodSmooth: void 0 });Kd.prototype = Object.assign(Object.create(ra.prototype), { constructor: Kd, ValueTypeName: "string", ValueBufferType: Array, DefaultInterpolation: 2300, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 });kc.prototype = Object.assign(Object.create(ra.prototype), { constructor: kc, ValueTypeName: "vector" });Object.assign(Ga, { parse: function parse$$1(a) {
            for (var b = [], c = a.tracks, d = 1 / (a.fps || 1), e = 0, f = c.length; e !== f; ++e) {
                b.push(ih(c[e]).scale(d));
            }return new Ga(a.name, a.duration, b);
        }, toJSON: function toJSON(a) {
            var b = [],
                c = a.tracks;a = { name: a.name, duration: a.duration, tracks: b, uuid: a.uuid };for (var d = 0, e = c.length; d !== e; ++d) {
                b.push(ra.toJSON(c[d]));
            }return a;
        }, CreateFromMorphTargetSequence: function CreateFromMorphTargetSequence(a, b, c, d) {
            for (var e = b.length, f = [], g = 0; g < e; g++) {
                var h = [],
                    k = [];h.push((g + e - 1) % e, g, (g + 1) % e);k.push(0, 1, 0);var m = sa.getKeyframeOrder(h);h = sa.sortedArray(h, 1, m);k = sa.sortedArray(k, 1, m);d || 0 !== h[0] || (h.push(e), k.push(k[0]));f.push(new jc(".morphTargetInfluences[" + b[g].name + "]", h, k).scale(1 / c));
            }return new Ga(a, -1, f);
        }, findByName: function findByName(a, b) {
            var c = a;Array.isArray(a) || (c = a.geometry && a.geometry.animations || a.animations);for (a = 0; a < c.length; a++) {
                if (c[a].name === b) return c[a];
            }return null;
        }, CreateClipsFromMorphTargetSequences: function CreateClipsFromMorphTargetSequences(a, b, c) {
            for (var d = {}, e = /^([\w-]*?)([\d]+)$/, f = 0, g = a.length; f < g; f++) {
                var h = a[f],
                    k = h.name.match(e);if (k && 1 < k.length) {
                    var m = k[1];(k = d[m]) || (d[m] = k = []);k.push(h);
                }
            }a = [];for (m in d) {
                a.push(Ga.CreateFromMorphTargetSequence(m, d[m], b, c));
            }return a;
        }, parseAnimation: function parseAnimation(a, b) {
            if (!a) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;var c = function c(a, b, _c, d, e) {
                if (0 !== _c.length) {
                    var f = [],
                        g = [];sa.flattenJSON(_c, f, g, d);0 !== f.length && e.push(new a(b, f, g));
                }
            },
                d = [],
                e = a.name || "default",
                f = a.length || -1,
                g = a.fps || 30;a = a.hierarchy || [];for (var h = 0; h < a.length; h++) {
                var k = a[h].keys;if (k && 0 !== k.length) if (k[0].morphTargets) {
                    f = {};for (var m = 0; m < k.length; m++) {
                        if (k[m].morphTargets) for (var l = 0; l < k[m].morphTargets.length; l++) {
                            f[k[m].morphTargets[l]] = -1;
                        }
                    }for (var n in f) {
                        var v = [],
                            t = [];for (l = 0; l !== k[m].morphTargets.length; ++l) {
                            var r = k[m];v.push(r.time);t.push(r.morphTarget === n ? 1 : 0);
                        }d.push(new jc(".morphTargetInfluence[" + n + "]", v, t));
                    }f = f.length * (g || 1);
                } else m = ".bones[" + b[h].name + "]", c(kc, m + ".position", k, "pos", d), c(gd, m + ".quaternion", k, "rot", d), c(kc, m + ".scale", k, "scl", d);
            }return 0 === d.length ? null : new Ga(e, f, d);
        } });Object.assign(Ga.prototype, { resetDuration: function resetDuration() {
            for (var a = 0, b = 0, c = this.tracks.length; b !== c; ++b) {
                var d = this.tracks[b];a = Math.max(a, d.times[d.times.length - 1]);
            }this.duration = a;return this;
        }, trim: function trim() {
            for (var a = 0; a < this.tracks.length; a++) {
                this.tracks[a].trim(0, this.duration);
            }return this;
        }, validate: function validate() {
            for (var a = !0, b = 0; b < this.tracks.length; b++) {
                a = a && this.tracks[b].validate();
            }return a;
        }, optimize: function optimize() {
            for (var a = 0; a < this.tracks.length; a++) {
                this.tracks[a].optimize();
            }return this;
        }, clone: function clone() {
            for (var a = [], b = 0; b < this.tracks.length; b++) {
                a.push(this.tracks[b].clone());
            }return new Ga(this.name, this.duration, a);
        } });var Lb = { enabled: !1, files: {}, add: function add(a, b) {
            !1 !== this.enabled && (this.files[a] = b);
        }, get: function get$$1(a) {
            if (!1 !== this.enabled) return this.files[a];
        }, remove: function remove(a) {
            delete this.files[a];
        }, clear: function clear() {
            this.files = {};
        } },
        Ba = new ne(),
        Ra = {};Object.assign(La.prototype, { load: function load(a, b, c, d) {
            void 0 === a && (a = "");void 0 !== this.path && (a = this.path + a);a = this.manager.resolveURL(a);var e = this,
                f = Lb.get(a);if (void 0 !== f) return e.manager.itemStart(a), setTimeout(function () {
                b && b(f);e.manager.itemEnd(a);
            }, 0), f;if (void 0 !== Ra[a]) Ra[a].push({ onLoad: b, onProgress: c, onError: d });else {
                var g = a.match(/^data:(.*?)(;base64)?,(.*)$/);if (g) {
                    c = g[1];var h = !!g[2];g = g[3];g = decodeURIComponent(g);h && (g = atob(g));try {
                        var k = (this.responseType || "").toLowerCase();switch (k) {case "arraybuffer":case "blob":
                                var m = new Uint8Array(g.length);for (h = 0; h < g.length; h++) {
                                    m[h] = g.charCodeAt(h);
                                }var l = "blob" === k ? new Blob([m.buffer], { type: c }) : m.buffer;break;case "document":
                                l = new DOMParser().parseFromString(g, c);break;case "json":
                                l = JSON.parse(g);break;default:
                                l = g;}setTimeout(function () {
                            b && b(l);e.manager.itemEnd(a);
                        }, 0);
                    } catch (v) {
                        setTimeout(function () {
                            d && d(v);e.manager.itemError(a);e.manager.itemEnd(a);
                        }, 0);
                    }
                } else {
                    Ra[a] = [];Ra[a].push({ onLoad: b, onProgress: c, onError: d });var n = new XMLHttpRequest();n.open("GET", a, !0);n.addEventListener("load", function (b) {
                        var c = this.response;Lb.add(a, c);var d = Ra[a];delete Ra[a];if (200 === this.status || 0 === this.status) {
                            0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");for (var f = 0, g = d.length; f < g; f++) {
                                var h = d[f];if (h.onLoad) h.onLoad(c);
                            }
                        } else {
                            f = 0;for (g = d.length; f < g; f++) {
                                if (h = d[f], h.onError) h.onError(b);
                            }e.manager.itemError(a);
                        }e.manager.itemEnd(a);
                    }, !1);n.addEventListener("progress", function (b) {
                        for (var c = Ra[a], d = 0, e = c.length; d < e; d++) {
                            var f = c[d];if (f.onProgress) f.onProgress(b);
                        }
                    }, !1);n.addEventListener("error", function (b) {
                        var c = Ra[a];delete Ra[a];for (var d = 0, f = c.length; d < f; d++) {
                            var g = c[d];if (g.onError) g.onError(b);
                        }e.manager.itemError(a);e.manager.itemEnd(a);
                    }, !1);n.addEventListener("abort", function (b) {
                        var c = Ra[a];delete Ra[a];for (var d = 0, f = c.length; d < f; d++) {
                            var g = c[d];if (g.onError) g.onError(b);
                        }e.manager.itemError(a);
                        e.manager.itemEnd(a);
                    }, !1);void 0 !== this.responseType && (n.responseType = this.responseType);void 0 !== this.withCredentials && (n.withCredentials = this.withCredentials);n.overrideMimeType && n.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");for (h in this.requestHeader) {
                        n.setRequestHeader(h, this.requestHeader[h]);
                    }n.send(null);
                }e.manager.itemStart(a);return n;
            }
        }, setPath: function setPath(a) {
            this.path = a;return this;
        }, setResponseType: function setResponseType(a) {
            this.responseType = a;return this;
        }, setWithCredentials: function setWithCredentials(a) {
            this.withCredentials = a;return this;
        }, setMimeType: function setMimeType(a) {
            this.mimeType = a;return this;
        }, setRequestHeader: function setRequestHeader(a) {
            this.requestHeader = a;return this;
        } });Object.assign(Df.prototype, { load: function load(a, b, c, d) {
            var e = this,
                f = new La(e.manager);f.setPath(e.path);f.load(a, function (a) {
                b(e.parse(JSON.parse(a)));
            }, c, d);
        }, parse: function parse$$1(a) {
            for (var b = [], c = 0; c < a.length; c++) {
                var d = Ga.parse(a[c]);b.push(d);
            }return b;
        }, setPath: function setPath(a) {
            this.path = a;return this;
        } });Object.assign(Ef.prototype, { load: function load(a, b, c, d) {
            function e(e) {
                k.load(a[e], function (a) {
                    a = f._parser(a, !0);g[e] = { width: a.width, height: a.height, format: a.format, mipmaps: a.mipmaps };m += 1;6 === m && (1 === a.mipmapCount && (h.minFilter = 1006), h.format = a.format, h.needsUpdate = !0, b && b(h));
                }, c, d);
            }var f = this,
                g = [],
                h = new Wb();h.image = g;var k = new La(this.manager);k.setPath(this.path);k.setResponseType("arraybuffer");if (Array.isArray(a)) for (var m = 0, l = 0, n = a.length; l < n; ++l) {
                e(l);
            } else k.load(a, function (a) {
                a = f._parser(a, !0);if (a.isCubemap) for (var c = a.mipmaps.length / a.mipmapCount, d = 0; d < c; d++) {
                    g[d] = { mipmaps: [] };
                    for (var e = 0; e < a.mipmapCount; e++) {
                        g[d].mipmaps.push(a.mipmaps[d * a.mipmapCount + e]), g[d].format = a.format, g[d].width = a.width, g[d].height = a.height;
                    }
                } else h.image.width = a.width, h.image.height = a.height, h.mipmaps = a.mipmaps;1 === a.mipmapCount && (h.minFilter = 1006);h.format = a.format;h.needsUpdate = !0;b && b(h);
            }, c, d);return h;
        }, setPath: function setPath(a) {
            this.path = a;return this;
        } });Object.assign(oe.prototype, { load: function load(a, b, c, d) {
            var e = this,
                f = new nb(),
                g = new La(this.manager);g.setResponseType("arraybuffer");g.setPath(this.path);
            g.load(a, function (a) {
                if (a = e._parser(a)) void 0 !== a.image ? f.image = a.image : void 0 !== a.data && (f.image.width = a.width, f.image.height = a.height, f.image.data = a.data), f.wrapS = void 0 !== a.wrapS ? a.wrapS : 1001, f.wrapT = void 0 !== a.wrapT ? a.wrapT : 1001, f.magFilter = void 0 !== a.magFilter ? a.magFilter : 1006, f.minFilter = void 0 !== a.minFilter ? a.minFilter : 1008, f.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (f.format = a.format), void 0 !== a.type && (f.type = a.type), void 0 !== a.mipmaps && (f.mipmaps = a.mipmaps), 1 === a.mipmapCount && (f.minFilter = 1006), f.needsUpdate = !0, b && b(f, a);
            }, c, d);return f;
        }, setPath: function setPath(a) {
            this.path = a;return this;
        } });Object.assign(hd.prototype, { crossOrigin: "anonymous", load: function load(a, b, c, d) {
            function e() {
                k.removeEventListener("load", e, !1);k.removeEventListener("error", f, !1);Lb.add(a, this);b && b(this);g.manager.itemEnd(a);
            }function f(b) {
                k.removeEventListener("load", e, !1);k.removeEventListener("error", f, !1);d && d(b);g.manager.itemError(a);g.manager.itemEnd(a);
            }void 0 === a && (a = "");void 0 !== this.path && (a = this.path + a);a = this.manager.resolveURL(a);var g = this,
                h = Lb.get(a);if (void 0 !== h) return g.manager.itemStart(a), setTimeout(function () {
                b && b(h);g.manager.itemEnd(a);
            }, 0), h;var k = document.createElementNS("http://www.w3.org/1999/xhtml", "img");k.addEventListener("load", e, !1);k.addEventListener("error", f, !1);"data:" !== a.substr(0, 5) && void 0 !== this.crossOrigin && (k.crossOrigin = this.crossOrigin);g.manager.itemStart(a);k.src = a;return k;
        }, setCrossOrigin: function setCrossOrigin(a) {
            this.crossOrigin = a;return this;
        }, setPath: function setPath(a) {
            this.path = a;return this;
        } });Object.assign(pe.prototype, { crossOrigin: "anonymous", load: function load(a, b, c, d) {
            function e(c) {
                g.load(a[c], function (a) {
                    f.images[c] = a;h++;6 === h && (f.needsUpdate = !0, b && b(f));
                }, void 0, d);
            }var f = new $a(),
                g = new hd(this.manager);g.setCrossOrigin(this.crossOrigin);g.setPath(this.path);var h = 0;for (c = 0; c < a.length; ++c) {
                e(c);
            }return f;
        }, setCrossOrigin: function setCrossOrigin(a) {
            this.crossOrigin = a;return this;
        }, setPath: function setPath(a) {
            this.path = a;return this;
        } });Object.assign(Ld.prototype, { crossOrigin: "anonymous", load: function load(a, b, c, d) {
            var e = new S(),
                f = new hd(this.manager);f.setCrossOrigin(this.crossOrigin);f.setPath(this.path);f.load(a, function (c) {
                e.image = c;c = 0 < a.search(/\.jpe?g($|\?)/i) || 0 === a.search(/^data:image\/jpeg/);e.format = c ? 1022 : 1023;e.needsUpdate = !0;void 0 !== b && b(e);
            }, c, d);return e;
        }, setCrossOrigin: function setCrossOrigin(a) {
            this.crossOrigin = a;return this;
        }, setPath: function setPath(a) {
            this.path = a;return this;
        } });Object.assign(L.prototype, { getPoint: function getPoint() {
            console.warn("THREE.Curve: .getPoint() not implemented.");return null;
        }, getPointAt: function getPointAt(a, b) {
            a = this.getUtoTmapping(a);return this.getPoint(a, b);
        }, getPoints: function getPoints(a) {
            void 0 === a && (a = 5);for (var b = [], c = 0; c <= a; c++) {
                b.push(this.getPoint(c / a));
            }return b;
        }, getSpacedPoints: function getSpacedPoints(a) {
            void 0 === a && (a = 5);for (var b = [], c = 0; c <= a; c++) {
                b.push(this.getPointAt(c / a));
            }return b;
        }, getLength: function getLength() {
            var a = this.getLengths();return a[a.length - 1];
        }, getLengths: function getLengths(a) {
            void 0 === a && (a = this.arcLengthDivisions);if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) return this.cacheArcLengths;
            this.needsUpdate = !1;var b = [],
                c = this.getPoint(0),
                d,
                e = 0;b.push(0);for (d = 1; d <= a; d++) {
                var f = this.getPoint(d / a);e += f.distanceTo(c);b.push(e);c = f;
            }return this.cacheArcLengths = b;
        }, updateArcLengths: function updateArcLengths() {
            this.needsUpdate = !0;this.getLengths();
        }, getUtoTmapping: function getUtoTmapping(a, b) {
            var c = this.getLengths(),
                d = c.length;b = b ? b : a * c[d - 1];for (var e = 0, f = d - 1, g; e <= f;) {
                if (a = Math.floor(e + (f - e) / 2), g = c[a] - b, 0 > g) e = a + 1;else if (0 < g) f = a - 1;else {
                    f = a;break;
                }
            }a = f;if (c[a] === b) return a / (d - 1);e = c[a];return (a + (b - e) / (c[a + 1] - e)) / (d - 1);
        }, getTangent: function getTangent(a) {
            var b = a - 1E-4;a += 1E-4;0 > b && (b = 0);1 < a && (a = 1);b = this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize();
        }, getTangentAt: function getTangentAt(a) {
            a = this.getUtoTmapping(a);return this.getTangent(a);
        }, computeFrenetFrames: function computeFrenetFrames(a, b) {
            var c = new n(),
                d = [],
                e = [],
                f = [],
                g = new n(),
                h = new J(),
                k;for (k = 0; k <= a; k++) {
                var m = k / a;d[k] = this.getTangentAt(m);d[k].normalize();
            }e[0] = new n();f[0] = new n();k = Number.MAX_VALUE;m = Math.abs(d[0].x);var l = Math.abs(d[0].y),
                q = Math.abs(d[0].z);m <= k && (k = m, c.set(1, 0, 0));l <= k && (k = l, c.set(0, 1, 0));q <= k && c.set(0, 0, 1);g.crossVectors(d[0], c).normalize();e[0].crossVectors(d[0], g);f[0].crossVectors(d[0], e[0]);for (k = 1; k <= a; k++) {
                e[k] = e[k - 1].clone(), f[k] = f[k - 1].clone(), g.crossVectors(d[k - 1], d[k]), g.length() > Number.EPSILON && (g.normalize(), c = Math.acos(H.clamp(d[k - 1].dot(d[k]), -1, 1)), e[k].applyMatrix4(h.makeRotationAxis(g, c))), f[k].crossVectors(d[k], e[k]);
            }if (!0 === b) for (c = Math.acos(H.clamp(e[0].dot(e[a]), -1, 1)), c /= a, 0 < d[0].dot(g.crossVectors(e[0], e[a])) && (c = -c), k = 1; k <= a; k++) {
                e[k].applyMatrix4(h.makeRotationAxis(d[k], c * k)), f[k].crossVectors(d[k], e[k]);
            }return { tangents: d, normals: e, binormals: f };
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.arcLengthDivisions = a.arcLengthDivisions;return this;
        }, toJSON: function toJSON() {
            var a = { metadata: { version: 4.5, type: "Curve", generator: "Curve.toJSON" } };a.arcLengthDivisions = this.arcLengthDivisions;a.type = this.type;return a;
        }, fromJSON: function fromJSON(a) {
            this.arcLengthDivisions = a.arcLengthDivisions;return this;
        } });Ea.prototype = Object.create(L.prototype);Ea.prototype.constructor = Ea;Ea.prototype.isEllipseCurve = !0;Ea.prototype.getPoint = function (a, b) {
        b = b || new B();for (var c = 2 * Math.PI, d = this.aEndAngle - this.aStartAngle, e = Math.abs(d) < Number.EPSILON; 0 > d;) {
            d += c;
        }for (; d > c;) {
            d -= c;
        }d < Number.EPSILON && (d = e ? 0 : c);!0 !== this.aClockwise || e || (d = d === c ? -c : d - c);c = this.aStartAngle + a * d;a = this.aX + this.xRadius * Math.cos(c);var f = this.aY + this.yRadius * Math.sin(c);0 !== this.aRotation && (c = Math.cos(this.aRotation), d = Math.sin(this.aRotation), e = a - this.aX, f -= this.aY, a = e * c - f * d + this.aX, f = e * d + f * c + this.aY);return b.set(a, f);
    };Ea.prototype.copy = function (a) {
        L.prototype.copy.call(this, a);this.aX = a.aX;this.aY = a.aY;this.xRadius = a.xRadius;this.yRadius = a.yRadius;this.aStartAngle = a.aStartAngle;this.aEndAngle = a.aEndAngle;this.aClockwise = a.aClockwise;this.aRotation = a.aRotation;return this;
    };Ea.prototype.toJSON = function () {
        var a = L.prototype.toJSON.call(this);a.aX = this.aX;a.aY = this.aY;a.xRadius = this.xRadius;a.yRadius = this.yRadius;a.aStartAngle = this.aStartAngle;a.aEndAngle = this.aEndAngle;a.aClockwise = this.aClockwise;a.aRotation = this.aRotation;return a;
    };Ea.prototype.fromJSON = function (a) {
        L.prototype.fromJSON.call(this, a);this.aX = a.aX;this.aY = a.aY;this.xRadius = a.xRadius;this.yRadius = a.yRadius;this.aStartAngle = a.aStartAngle;this.aEndAngle = a.aEndAngle;this.aClockwise = a.aClockwise;this.aRotation = a.aRotation;return this;
    };lc.prototype = Object.create(Ea.prototype);lc.prototype.constructor = lc;lc.prototype.isArcCurve = !0;var Yd = new n(),
        Me = new qe(),
        Ne = new qe(),
        Oe = new qe();oa.prototype = Object.create(L.prototype);oa.prototype.constructor = oa;oa.prototype.isCatmullRomCurve3 = !0;oa.prototype.getPoint = function (a, b) {
        b = b || new n();var c = this.points,
            d = c.length;a *= d - (this.closed ? 0 : 1);var e = Math.floor(a);a -= e;this.closed ? e += 0 < e ? 0 : (Math.floor(Math.abs(e) / d) + 1) * d : 0 === a && e === d - 1 && (e = d - 2, a = 1);if (this.closed || 0 < e) var f = c[(e - 1) % d];else Yd.subVectors(c[0], c[1]).add(c[0]), f = Yd;var g = c[e % d];var h = c[(e + 1) % d];this.closed || e + 2 < d ? c = c[(e + 2) % d] : (Yd.subVectors(c[d - 1], c[d - 2]).add(c[d - 1]), c = Yd);if ("centripetal" === this.curveType || "chordal" === this.curveType) {
            var k = "chordal" === this.curveType ? .5 : .25;
            d = Math.pow(f.distanceToSquared(g), k);e = Math.pow(g.distanceToSquared(h), k);k = Math.pow(h.distanceToSquared(c), k);1E-4 > e && (e = 1);1E-4 > d && (d = e);1E-4 > k && (k = e);Me.initNonuniformCatmullRom(f.x, g.x, h.x, c.x, d, e, k);Ne.initNonuniformCatmullRom(f.y, g.y, h.y, c.y, d, e, k);Oe.initNonuniformCatmullRom(f.z, g.z, h.z, c.z, d, e, k);
        } else "catmullrom" === this.curveType && (Me.initCatmullRom(f.x, g.x, h.x, c.x, this.tension), Ne.initCatmullRom(f.y, g.y, h.y, c.y, this.tension), Oe.initCatmullRom(f.z, g.z, h.z, c.z, this.tension));b.set(Me.calc(a), Ne.calc(a), Oe.calc(a));return b;
    };oa.prototype.copy = function (a) {
        L.prototype.copy.call(this, a);this.points = [];for (var b = 0, c = a.points.length; b < c; b++) {
            this.points.push(a.points[b].clone());
        }this.closed = a.closed;this.curveType = a.curveType;this.tension = a.tension;return this;
    };oa.prototype.toJSON = function () {
        var a = L.prototype.toJSON.call(this);a.points = [];for (var b = 0, c = this.points.length; b < c; b++) {
            a.points.push(this.points[b].toArray());
        }a.closed = this.closed;a.curveType = this.curveType;a.tension = this.tension;return a;
    };
    oa.prototype.fromJSON = function (a) {
        L.prototype.fromJSON.call(this, a);this.points = [];for (var b = 0, c = a.points.length; b < c; b++) {
            var d = a.points[b];this.points.push(new n().fromArray(d));
        }this.closed = a.closed;this.curveType = a.curveType;this.tension = a.tension;return this;
    };Ma.prototype = Object.create(L.prototype);Ma.prototype.constructor = Ma;Ma.prototype.isCubicBezierCurve = !0;Ma.prototype.getPoint = function (a, b) {
        b = b || new B();var c = this.v0,
            d = this.v1,
            e = this.v2,
            f = this.v3;b.set(jd(a, c.x, d.x, e.x, f.x), jd(a, c.y, d.y, e.y, f.y));return b;
    };Ma.prototype.copy = function (a) {
        L.prototype.copy.call(this, a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);this.v3.copy(a.v3);return this;
    };Ma.prototype.toJSON = function () {
        var a = L.prototype.toJSON.call(this);a.v0 = this.v0.toArray();a.v1 = this.v1.toArray();a.v2 = this.v2.toArray();a.v3 = this.v3.toArray();return a;
    };Ma.prototype.fromJSON = function (a) {
        L.prototype.fromJSON.call(this, a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);this.v3.fromArray(a.v3);return this;
    };
    Ya.prototype = Object.create(L.prototype);Ya.prototype.constructor = Ya;Ya.prototype.isCubicBezierCurve3 = !0;Ya.prototype.getPoint = function (a, b) {
        b = b || new n();var c = this.v0,
            d = this.v1,
            e = this.v2,
            f = this.v3;b.set(jd(a, c.x, d.x, e.x, f.x), jd(a, c.y, d.y, e.y, f.y), jd(a, c.z, d.z, e.z, f.z));return b;
    };Ya.prototype.copy = function (a) {
        L.prototype.copy.call(this, a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);this.v3.copy(a.v3);return this;
    };Ya.prototype.toJSON = function () {
        var a = L.prototype.toJSON.call(this);a.v0 = this.v0.toArray();
        a.v1 = this.v1.toArray();a.v2 = this.v2.toArray();a.v3 = this.v3.toArray();return a;
    };Ya.prototype.fromJSON = function (a) {
        L.prototype.fromJSON.call(this, a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);this.v3.fromArray(a.v3);return this;
    };ja.prototype = Object.create(L.prototype);ja.prototype.constructor = ja;ja.prototype.isLineCurve = !0;ja.prototype.getPoint = function (a, b) {
        b = b || new B();1 === a ? b.copy(this.v2) : (b.copy(this.v2).sub(this.v1), b.multiplyScalar(a).add(this.v1));return b;
    };ja.prototype.getPointAt = function (a, b) {
        return this.getPoint(a, b);
    };ja.prototype.getTangent = function () {
        return this.v2.clone().sub(this.v1).normalize();
    };ja.prototype.copy = function (a) {
        L.prototype.copy.call(this, a);this.v1.copy(a.v1);this.v2.copy(a.v2);return this;
    };ja.prototype.toJSON = function () {
        var a = L.prototype.toJSON.call(this);a.v1 = this.v1.toArray();a.v2 = this.v2.toArray();return a;
    };ja.prototype.fromJSON = function (a) {
        L.prototype.fromJSON.call(this, a);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this;
    };Na.prototype = Object.create(L.prototype);Na.prototype.constructor = Na;Na.prototype.isLineCurve3 = !0;Na.prototype.getPoint = function (a, b) {
        b = b || new n();1 === a ? b.copy(this.v2) : (b.copy(this.v2).sub(this.v1), b.multiplyScalar(a).add(this.v1));return b;
    };Na.prototype.getPointAt = function (a, b) {
        return this.getPoint(a, b);
    };Na.prototype.copy = function (a) {
        L.prototype.copy.call(this, a);this.v1.copy(a.v1);this.v2.copy(a.v2);return this;
    };Na.prototype.toJSON = function () {
        var a = L.prototype.toJSON.call(this);a.v1 = this.v1.toArray();a.v2 = this.v2.toArray();
        return a;
    };Na.prototype.fromJSON = function (a) {
        L.prototype.fromJSON.call(this, a);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this;
    };Oa.prototype = Object.create(L.prototype);Oa.prototype.constructor = Oa;Oa.prototype.isQuadraticBezierCurve = !0;Oa.prototype.getPoint = function (a, b) {
        b = b || new B();var c = this.v0,
            d = this.v1,
            e = this.v2;b.set(id(a, c.x, d.x, e.x), id(a, c.y, d.y, e.y));return b;
    };Oa.prototype.copy = function (a) {
        L.prototype.copy.call(this, a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);return this;
    };
    Oa.prototype.toJSON = function () {
        var a = L.prototype.toJSON.call(this);a.v0 = this.v0.toArray();a.v1 = this.v1.toArray();a.v2 = this.v2.toArray();return a;
    };Oa.prototype.fromJSON = function (a) {
        L.prototype.fromJSON.call(this, a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this;
    };Za.prototype = Object.create(L.prototype);Za.prototype.constructor = Za;Za.prototype.isQuadraticBezierCurve3 = !0;Za.prototype.getPoint = function (a, b) {
        b = b || new n();var c = this.v0,
            d = this.v1,
            e = this.v2;b.set(id(a, c.x, d.x, e.x), id(a, c.y, d.y, e.y), id(a, c.z, d.z, e.z));return b;
    };Za.prototype.copy = function (a) {
        L.prototype.copy.call(this, a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);return this;
    };Za.prototype.toJSON = function () {
        var a = L.prototype.toJSON.call(this);a.v0 = this.v0.toArray();a.v1 = this.v1.toArray();a.v2 = this.v2.toArray();return a;
    };Za.prototype.fromJSON = function (a) {
        L.prototype.fromJSON.call(this, a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this;
    };Pa.prototype = Object.create(L.prototype);
    Pa.prototype.constructor = Pa;Pa.prototype.isSplineCurve = !0;Pa.prototype.getPoint = function (a, b) {
        b = b || new B();var c = this.points,
            d = (c.length - 1) * a;a = Math.floor(d);d -= a;var e = c[0 === a ? a : a - 1],
            f = c[a],
            g = c[a > c.length - 2 ? c.length - 1 : a + 1];c = c[a > c.length - 3 ? c.length - 1 : a + 2];b.set(Ff(d, e.x, f.x, g.x, c.x), Ff(d, e.y, f.y, g.y, c.y));return b;
    };Pa.prototype.copy = function (a) {
        L.prototype.copy.call(this, a);this.points = [];for (var b = 0, c = a.points.length; b < c; b++) {
            this.points.push(a.points[b].clone());
        }return this;
    };Pa.prototype.toJSON = function () {
        var a = L.prototype.toJSON.call(this);a.points = [];for (var b = 0, c = this.points.length; b < c; b++) {
            a.points.push(this.points[b].toArray());
        }return a;
    };Pa.prototype.fromJSON = function (a) {
        L.prototype.fromJSON.call(this, a);this.points = [];for (var b = 0, c = a.points.length; b < c; b++) {
            var d = a.points[b];this.points.push(new B().fromArray(d));
        }return this;
    };var Pe = Object.freeze({ ArcCurve: lc, CatmullRomCurve3: oa, CubicBezierCurve: Ma, CubicBezierCurve3: Ya, EllipseCurve: Ea, LineCurve: ja, LineCurve3: Na, QuadraticBezierCurve: Oa, QuadraticBezierCurve3: Za,
        SplineCurve: Pa });cb.prototype = Object.assign(Object.create(L.prototype), { constructor: cb, add: function add(a) {
            this.curves.push(a);
        }, closePath: function closePath() {
            var a = this.curves[0].getPoint(0),
                b = this.curves[this.curves.length - 1].getPoint(1);a.equals(b) || this.curves.push(new ja(b, a));
        }, getPoint: function getPoint(a) {
            var b = a * this.getLength(),
                c = this.getCurveLengths();for (a = 0; a < c.length;) {
                if (c[a] >= b) return b = c[a] - b, a = this.curves[a], c = a.getLength(), a.getPointAt(0 === c ? 0 : 1 - b / c);a++;
            }return null;
        }, getLength: function getLength() {
            var a = this.getCurveLengths();
            return a[a.length - 1];
        }, updateArcLengths: function updateArcLengths() {
            this.needsUpdate = !0;this.cacheLengths = null;this.getCurveLengths();
        }, getCurveLengths: function getCurveLengths() {
            if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;for (var a = [], b = 0, c = 0, d = this.curves.length; c < d; c++) {
                b += this.curves[c].getLength(), a.push(b);
            }return this.cacheLengths = a;
        }, getSpacedPoints: function getSpacedPoints(a) {
            void 0 === a && (a = 40);for (var b = [], c = 0; c <= a; c++) {
                b.push(this.getPoint(c / a));
            }this.autoClose && b.push(b[0]);return b;
        }, getPoints: function getPoints(a) {
            a = a || 12;for (var b = [], c, d = 0, e = this.curves; d < e.length; d++) {
                var f = e[d];f = f.getPoints(f && f.isEllipseCurve ? 2 * a : f && (f.isLineCurve || f.isLineCurve3) ? 1 : f && f.isSplineCurve ? a * f.points.length : a);for (var g = 0; g < f.length; g++) {
                    var h = f[g];c && c.equals(h) || (b.push(h), c = h);
                }
            }this.autoClose && 1 < b.length && !b[b.length - 1].equals(b[0]) && b.push(b[0]);return b;
        }, copy: function copy(a) {
            L.prototype.copy.call(this, a);this.curves = [];for (var b = 0, c = a.curves.length; b < c; b++) {
                this.curves.push(a.curves[b].clone());
            }this.autoClose = a.autoClose;return this;
        },
        toJSON: function toJSON() {
            var a = L.prototype.toJSON.call(this);a.autoClose = this.autoClose;a.curves = [];for (var b = 0, c = this.curves.length; b < c; b++) {
                a.curves.push(this.curves[b].toJSON());
            }return a;
        }, fromJSON: function fromJSON(a) {
            L.prototype.fromJSON.call(this, a);this.autoClose = a.autoClose;this.curves = [];for (var b = 0, c = a.curves.length; b < c; b++) {
                var d = a.curves[b];this.curves.push(new Pe[d.type]().fromJSON(d));
            }return this;
        } });Qa.prototype = Object.assign(Object.create(cb.prototype), { constructor: Qa, setFromPoints: function setFromPoints(a) {
            this.moveTo(a[0].x, a[0].y);for (var b = 1, c = a.length; b < c; b++) {
                this.lineTo(a[b].x, a[b].y);
            }
        }, moveTo: function moveTo(a, b) {
            this.currentPoint.set(a, b);
        }, lineTo: function lineTo(a, b) {
            var c = new ja(this.currentPoint.clone(), new B(a, b));this.curves.push(c);this.currentPoint.set(a, b);
        }, quadraticCurveTo: function quadraticCurveTo(a, b, c, d) {
            a = new Oa(this.currentPoint.clone(), new B(a, b), new B(c, d));this.curves.push(a);this.currentPoint.set(c, d);
        }, bezierCurveTo: function bezierCurveTo(a, b, c, d, e, f) {
            a = new Ma(this.currentPoint.clone(), new B(a, b), new B(c, d), new B(e, f));this.curves.push(a);
            this.currentPoint.set(e, f);
        }, splineThru: function splineThru(a) {
            var b = [this.currentPoint.clone()].concat(a);b = new Pa(b);this.curves.push(b);this.currentPoint.copy(a[a.length - 1]);
        }, arc: function arc(a, b, c, d, e, f) {
            this.absarc(a + this.currentPoint.x, b + this.currentPoint.y, c, d, e, f);
        }, absarc: function absarc(a, b, c, d, e, f) {
            this.absellipse(a, b, c, c, d, e, f);
        }, ellipse: function ellipse(a, b, c, d, e, f, g, h) {
            this.absellipse(a + this.currentPoint.x, b + this.currentPoint.y, c, d, e, f, g, h);
        }, absellipse: function absellipse(a, b, c, d, e, f, g, h) {
            a = new Ea(a, b, c, d, e, f, g, h);0 < this.curves.length && (b = a.getPoint(0), b.equals(this.currentPoint) || this.lineTo(b.x, b.y));this.curves.push(a);a = a.getPoint(1);this.currentPoint.copy(a);
        }, copy: function copy(a) {
            cb.prototype.copy.call(this, a);this.currentPoint.copy(a.currentPoint);return this;
        }, toJSON: function toJSON() {
            var a = cb.prototype.toJSON.call(this);a.currentPoint = this.currentPoint.toArray();return a;
        }, fromJSON: function fromJSON(a) {
            cb.prototype.fromJSON.call(this, a);this.currentPoint.fromArray(a.currentPoint);return this;
        } });kb.prototype = Object.assign(Object.create(Qa.prototype), { constructor: kb, getPointsHoles: function getPointsHoles(a) {
            for (var b = [], c = 0, d = this.holes.length; c < d; c++) {
                b[c] = this.holes[c].getPoints(a);
            }return b;
        }, extractPoints: function extractPoints(a) {
            return { shape: this.getPoints(a), holes: this.getPointsHoles(a) };
        }, copy: function copy(a) {
            Qa.prototype.copy.call(this, a);this.holes = [];for (var b = 0, c = a.holes.length; b < c; b++) {
                this.holes.push(a.holes[b].clone());
            }return this;
        }, toJSON: function toJSON() {
            var a = Qa.prototype.toJSON.call(this);a.uuid = this.uuid;a.holes = [];for (var b = 0, c = this.holes.length; b < c; b++) {
                a.holes.push(this.holes[b].toJSON());
            }return a;
        }, fromJSON: function fromJSON(a) {
            Qa.prototype.fromJSON.call(this, a);this.uuid = a.uuid;this.holes = [];for (var b = 0, c = a.holes.length; b < c; b++) {
                var d = a.holes[b];this.holes.push(new Qa().fromJSON(d));
            }return this;
        } });ia.prototype = Object.assign(Object.create(E.prototype), { constructor: ia, isLight: !0, copy: function copy(a) {
            E.prototype.copy.call(this, a);this.color.copy(a.color);this.intensity = a.intensity;return this;
        }, toJSON: function toJSON(a) {
            a = E.prototype.toJSON.call(this, a);a.object.color = this.color.getHex();a.object.intensity = this.intensity;void 0 !== this.groundColor && (a.object.groundColor = this.groundColor.getHex());void 0 !== this.distance && (a.object.distance = this.distance);void 0 !== this.angle && (a.object.angle = this.angle);void 0 !== this.decay && (a.object.decay = this.decay);void 0 !== this.penumbra && (a.object.penumbra = this.penumbra);void 0 !== this.shadow && (a.object.shadow = this.shadow.toJSON());return a;
        } });Md.prototype = Object.assign(Object.create(ia.prototype), { constructor: Md, isHemisphereLight: !0, copy: function copy(a) {
            ia.prototype.copy.call(this, a);this.groundColor.copy(a.groundColor);return this;
        } });Object.assign(Kb.prototype, { copy: function copy(a) {
            this.camera = a.camera.clone();this.bias = a.bias;this.radius = a.radius;this.mapSize.copy(a.mapSize);return this;
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, toJSON: function toJSON() {
            var a = {};0 !== this.bias && (a.bias = this.bias);1 !== this.radius && (a.radius = this.radius);if (512 !== this.mapSize.x || 512 !== this.mapSize.y) a.mapSize = this.mapSize.toArray();a.camera = this.camera.toJSON(!1).object;delete a.camera.matrix;
            return a;
        } });Nd.prototype = Object.assign(Object.create(Kb.prototype), { constructor: Nd, isSpotLightShadow: !0, update: function update(a) {
            var b = this.camera,
                c = 2 * H.RAD2DEG * a.angle,
                d = this.mapSize.width / this.mapSize.height;a = a.distance || b.far;if (c !== b.fov || d !== b.aspect || a !== b.far) b.fov = c, b.aspect = d, b.far = a, b.updateProjectionMatrix();
        } });Od.prototype = Object.assign(Object.create(ia.prototype), { constructor: Od, isSpotLight: !0, copy: function copy(a) {
            ia.prototype.copy.call(this, a);this.distance = a.distance;this.angle = a.angle;this.penumbra = a.penumbra;this.decay = a.decay;this.target = a.target.clone();this.shadow = a.shadow.clone();return this;
        } });Pd.prototype = Object.assign(Object.create(ia.prototype), { constructor: Pd, isPointLight: !0, copy: function copy(a) {
            ia.prototype.copy.call(this, a);this.distance = a.distance;this.decay = a.decay;this.shadow = a.shadow.clone();return this;
        } });kd.prototype = Object.assign(Object.create(Va.prototype), { constructor: kd, isOrthographicCamera: !0, copy: function copy(a, b) {
            Va.prototype.copy.call(this, a, b);this.left = a.left;this.right = a.right;this.top = a.top;this.bottom = a.bottom;this.near = a.near;this.far = a.far;this.zoom = a.zoom;this.view = null === a.view ? null : Object.assign({}, a.view);return this;
        }, setViewOffset: function setViewOffset(a, b, c, d, e, f) {
            null === this.view && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 });this.view.enabled = !0;this.view.fullWidth = a;this.view.fullHeight = b;this.view.offsetX = c;this.view.offsetY = d;this.view.width = e;this.view.height = f;this.updateProjectionMatrix();
        }, clearViewOffset: function clearViewOffset() {
            null !== this.view && (this.view.enabled = !1);this.updateProjectionMatrix();
        }, updateProjectionMatrix: function updateProjectionMatrix() {
            var a = (this.right - this.left) / (2 * this.zoom),
                b = (this.top - this.bottom) / (2 * this.zoom),
                c = (this.right + this.left) / 2,
                d = (this.top + this.bottom) / 2,
                e = c - a;c += a;a = d + b;b = d - b;if (null !== this.view && this.view.enabled) {
                c = this.zoom / (this.view.width / this.view.fullWidth);b = this.zoom / (this.view.height / this.view.fullHeight);var f = (this.right - this.left) / this.view.width;d = (this.top - this.bottom) / this.view.height;e += this.view.offsetX / c * f;c = e + this.view.width / c * f;a -= this.view.offsetY / b * d;b = a - this.view.height / b * d;
            }this.projectionMatrix.makeOrthographic(e, c, a, b, this.near, this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix);
        }, toJSON: function toJSON(a) {
            a = E.prototype.toJSON.call(this, a);a.object.zoom = this.zoom;a.object.left = this.left;a.object.right = this.right;a.object.top = this.top;a.object.bottom = this.bottom;a.object.near = this.near;a.object.far = this.far;null !== this.view && (a.object.view = Object.assign({}, this.view));return a;
        } });
    Qd.prototype = Object.assign(Object.create(Kb.prototype), { constructor: Qd });Rd.prototype = Object.assign(Object.create(ia.prototype), { constructor: Rd, isDirectionalLight: !0, copy: function copy(a) {
            ia.prototype.copy.call(this, a);this.target = a.target.clone();this.shadow = a.shadow.clone();return this;
        } });Sd.prototype = Object.assign(Object.create(ia.prototype), { constructor: Sd, isAmbientLight: !0 });Td.prototype = Object.assign(Object.create(ia.prototype), { constructor: Td, isRectAreaLight: !0, copy: function copy(a) {
            ia.prototype.copy.call(this, a);this.width = a.width;this.height = a.height;return this;
        }, toJSON: function toJSON(a) {
            a = ia.prototype.toJSON.call(this, a);a.object.width = this.width;a.object.height = this.height;return a;
        } });Object.assign(Ud.prototype, { load: function load(a, b, c, d) {
            var e = this,
                f = new La(e.manager);f.setPath(e.path);f.load(a, function (a) {
                b(e.parse(JSON.parse(a)));
            }, c, d);
        }, parse: function parse$$1(a) {
            function b(a) {
                void 0 === c[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);return c[a];
            }var c = this.textures,
                d = new mh[a.type]();void 0 !== a.uuid && (d.uuid = a.uuid);void 0 !== a.name && (d.name = a.name);void 0 !== a.color && d.color.setHex(a.color);void 0 !== a.roughness && (d.roughness = a.roughness);void 0 !== a.metalness && (d.metalness = a.metalness);void 0 !== a.emissive && d.emissive.setHex(a.emissive);void 0 !== a.specular && d.specular.setHex(a.specular);void 0 !== a.shininess && (d.shininess = a.shininess);void 0 !== a.clearCoat && (d.clearCoat = a.clearCoat);void 0 !== a.clearCoatRoughness && (d.clearCoatRoughness = a.clearCoatRoughness);void 0 !== a.vertexColors && (d.vertexColors = a.vertexColors);void 0 !== a.fog && (d.fog = a.fog);void 0 !== a.flatShading && (d.flatShading = a.flatShading);void 0 !== a.blending && (d.blending = a.blending);void 0 !== a.combine && (d.combine = a.combine);void 0 !== a.side && (d.side = a.side);void 0 !== a.opacity && (d.opacity = a.opacity);void 0 !== a.transparent && (d.transparent = a.transparent);void 0 !== a.alphaTest && (d.alphaTest = a.alphaTest);void 0 !== a.depthTest && (d.depthTest = a.depthTest);void 0 !== a.depthWrite && (d.depthWrite = a.depthWrite);void 0 !== a.colorWrite && (d.colorWrite = a.colorWrite);
            void 0 !== a.wireframe && (d.wireframe = a.wireframe);void 0 !== a.wireframeLinewidth && (d.wireframeLinewidth = a.wireframeLinewidth);void 0 !== a.wireframeLinecap && (d.wireframeLinecap = a.wireframeLinecap);void 0 !== a.wireframeLinejoin && (d.wireframeLinejoin = a.wireframeLinejoin);void 0 !== a.rotation && (d.rotation = a.rotation);1 !== a.linewidth && (d.linewidth = a.linewidth);void 0 !== a.dashSize && (d.dashSize = a.dashSize);void 0 !== a.gapSize && (d.gapSize = a.gapSize);void 0 !== a.scale && (d.scale = a.scale);void 0 !== a.polygonOffset && (d.polygonOffset = a.polygonOffset);void 0 !== a.polygonOffsetFactor && (d.polygonOffsetFactor = a.polygonOffsetFactor);void 0 !== a.polygonOffsetUnits && (d.polygonOffsetUnits = a.polygonOffsetUnits);void 0 !== a.skinning && (d.skinning = a.skinning);void 0 !== a.morphTargets && (d.morphTargets = a.morphTargets);void 0 !== a.dithering && (d.dithering = a.dithering);void 0 !== a.visible && (d.visible = a.visible);void 0 !== a.userData && (d.userData = a.userData);if (void 0 !== a.uniforms) for (var e in a.uniforms) {
                var f = a.uniforms[e];d.uniforms[e] = {};switch (f.type) {case "t":
                        d.uniforms[e].value = b(f.value);break;case "c":
                        d.uniforms[e].value = new K().setHex(f.value);break;case "v2":
                        d.uniforms[e].value = new B().fromArray(f.value);break;case "v3":
                        d.uniforms[e].value = new n().fromArray(f.value);break;case "v4":
                        d.uniforms[e].value = new ba().fromArray(f.value);break;case "m3":
                        d.uniforms[e].value = new pa().fromArray(f.value);case "m4":
                        d.uniforms[e].value = new J().fromArray(f.value);break;default:
                        d.uniforms[e].value = f.value;}
            }void 0 !== a.defines && (d.defines = a.defines);void 0 !== a.vertexShader && (d.vertexShader = a.vertexShader);void 0 !== a.fragmentShader && (d.fragmentShader = a.fragmentShader);if (void 0 !== a.extensions) for (var g in a.extensions) {
                d.extensions[g] = a.extensions[g];
            }void 0 !== a.shading && (d.flatShading = 1 === a.shading);void 0 !== a.size && (d.size = a.size);void 0 !== a.sizeAttenuation && (d.sizeAttenuation = a.sizeAttenuation);void 0 !== a.map && (d.map = b(a.map));void 0 !== a.alphaMap && (d.alphaMap = b(a.alphaMap), d.transparent = !0);void 0 !== a.bumpMap && (d.bumpMap = b(a.bumpMap));
            void 0 !== a.bumpScale && (d.bumpScale = a.bumpScale);void 0 !== a.normalMap && (d.normalMap = b(a.normalMap));void 0 !== a.normalMapType && (d.normalMapType = a.normalMapType);void 0 !== a.normalScale && (e = a.normalScale, !1 === Array.isArray(e) && (e = [e, e]), d.normalScale = new B().fromArray(e));void 0 !== a.displacementMap && (d.displacementMap = b(a.displacementMap));void 0 !== a.displacementScale && (d.displacementScale = a.displacementScale);void 0 !== a.displacementBias && (d.displacementBias = a.displacementBias);void 0 !== a.roughnessMap && (d.roughnessMap = b(a.roughnessMap));void 0 !== a.metalnessMap && (d.metalnessMap = b(a.metalnessMap));void 0 !== a.emissiveMap && (d.emissiveMap = b(a.emissiveMap));void 0 !== a.emissiveIntensity && (d.emissiveIntensity = a.emissiveIntensity);void 0 !== a.specularMap && (d.specularMap = b(a.specularMap));void 0 !== a.envMap && (d.envMap = b(a.envMap));void 0 !== a.envMapIntensity && (d.envMapIntensity = a.envMapIntensity);void 0 !== a.reflectivity && (d.reflectivity = a.reflectivity);void 0 !== a.lightMap && (d.lightMap = b(a.lightMap));void 0 !== a.lightMapIntensity && (d.lightMapIntensity = a.lightMapIntensity);void 0 !== a.aoMap && (d.aoMap = b(a.aoMap));void 0 !== a.aoMapIntensity && (d.aoMapIntensity = a.aoMapIntensity);void 0 !== a.gradientMap && (d.gradientMap = b(a.gradientMap));return d;
        }, setPath: function setPath(a) {
            this.path = a;return this;
        }, setTextures: function setTextures(a) {
            this.textures = a;return this;
        } });var Qe = { decodeText: function decodeText(a) {
            if ("undefined" !== typeof TextDecoder) return new TextDecoder().decode(a);for (var b = "", c = 0, d = a.length; c < d; c++) {
                b += String.fromCharCode(a[c]);
            }return decodeURIComponent(escape(b));
        },
        extractUrlBase: function extractUrlBase(a) {
            var b = a.lastIndexOf("/");return -1 === b ? "./" : a.substr(0, b + 1);
        } };Object.assign(re.prototype, { load: function load(a, b, c, d) {
            var e = this,
                f = new La(e.manager);f.setPath(e.path);f.load(a, function (a) {
                b(e.parse(JSON.parse(a)));
            }, c, d);
        }, parse: function parse$$1(a) {
            var b = new D(),
                c = a.data.index;if (void 0 !== c) {
                var d = new Re[c.type](c.array);b.setIndex(new P(d, 1));
            }c = a.data.attributes;for (var e in c) {
                var f = c[e];d = new Re[f.type](f.array);d = new P(d, f.itemSize, f.normalized);void 0 !== f.name && (d.name = f.name);b.addAttribute(e, d);
            }var g = a.data.morphAttributes;if (g) for (e in g) {
                var h = g[e],
                    k = [];c = 0;for (var m = h.length; c < m; c++) {
                    f = h[c], d = new Re[f.type](f.array), d = new P(d, f.itemSize, f.normalized), void 0 !== f.name && (d.name = f.name), k.push(d);
                }b.morphAttributes[e] = k;
            }e = a.data.groups || a.data.drawcalls || a.data.offsets;if (void 0 !== e) for (c = 0, f = e.length; c !== f; ++c) {
                d = e[c], b.addGroup(d.start, d.count, d.materialIndex);
            }c = a.data.boundingSphere;void 0 !== c && (e = new n(), void 0 !== c.center && e.fromArray(c.center), b.boundingSphere = new Ia(e, c.radius));a.name && (b.name = a.name);a.userData && (b.userData = a.userData);return b;
        }, setPath: function setPath(a) {
            this.path = a;return this;
        } });var Re = { Int8Array: Int8Array, Uint8Array: Uint8Array, Uint8ClampedArray: "undefined" !== typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array, Int16Array: Int16Array, Uint16Array: Uint16Array, Int32Array: Int32Array, Uint32Array: Uint32Array, Float32Array: Float32Array, Float64Array: Float64Array };Object.assign(se.prototype, { crossOrigin: "anonymous", load: function load(a, b, c, d) {
            var e = this,
                f = void 0 === this.path ? Qe.extractUrlBase(a) : this.path;this.resourcePath = this.resourcePath || f;f = new La(e.manager);f.setPath(this.path);f.load(a, function (c) {
                var f = null;try {
                    f = JSON.parse(c);
                } catch (k) {
                    void 0 !== d && d(k);console.error("THREE:ObjectLoader: Can't parse " + a + ".", k.message);return;
                }c = f.metadata;void 0 === c || void 0 === c.type || "geometry" === c.type.toLowerCase() ? console.error("THREE.ObjectLoader: Can't load " + a) : e.parse(f, b);
            }, c, d);
        }, setPath: function setPath(a) {
            this.path = a;return this;
        }, setResourcePath: function setResourcePath(a) {
            this.resourcePath = a;return this;
        }, setCrossOrigin: function setCrossOrigin(a) {
            this.crossOrigin = a;return this;
        }, parse: function parse$$1(a, b) {
            var c = this.parseShape(a.shapes);c = this.parseGeometries(a.geometries, c);var d = this.parseImages(a.images, function () {
                void 0 !== b && b(e);
            });d = this.parseTextures(a.textures, d);d = this.parseMaterials(a.materials, d);var e = this.parseObject(a.object, c, d);a.animations && (e.animations = this.parseAnimations(a.animations));void 0 !== a.images && 0 !== a.images.length || void 0 === b || b(e);return e;
        }, parseShape: function parseShape(a) {
            var b = {};if (void 0 !== a) for (var c = 0, d = a.length; c < d; c++) {
                var e = new kb().fromJSON(a[c]);
                b[e.uuid] = e;
            }return b;
        }, parseGeometries: function parseGeometries(a, b) {
            var c = {};if (void 0 !== a) for (var d = new re(), e = 0, f = a.length; e < f; e++) {
                var g = a[e];switch (g.type) {case "PlaneGeometry":case "PlaneBufferGeometry":
                        var h = new na[g.type](g.width, g.height, g.widthSegments, g.heightSegments);break;case "BoxGeometry":case "BoxBufferGeometry":case "CubeGeometry":
                        h = new na[g.type](g.width, g.height, g.depth, g.widthSegments, g.heightSegments, g.depthSegments);break;case "CircleGeometry":case "CircleBufferGeometry":
                        h = new na[g.type](g.radius, g.segments, g.thetaStart, g.thetaLength);break;case "CylinderGeometry":case "CylinderBufferGeometry":
                        h = new na[g.type](g.radiusTop, g.radiusBottom, g.height, g.radialSegments, g.heightSegments, g.openEnded, g.thetaStart, g.thetaLength);break;case "ConeGeometry":case "ConeBufferGeometry":
                        h = new na[g.type](g.radius, g.height, g.radialSegments, g.heightSegments, g.openEnded, g.thetaStart, g.thetaLength);break;case "SphereGeometry":case "SphereBufferGeometry":
                        h = new na[g.type](g.radius, g.widthSegments, g.heightSegments, g.phiStart, g.phiLength, g.thetaStart, g.thetaLength);break;case "DodecahedronGeometry":case "DodecahedronBufferGeometry":case "IcosahedronGeometry":case "IcosahedronBufferGeometry":case "OctahedronGeometry":case "OctahedronBufferGeometry":case "TetrahedronGeometry":case "TetrahedronBufferGeometry":
                        h = new na[g.type](g.radius, g.detail);break;case "RingGeometry":case "RingBufferGeometry":
                        h = new na[g.type](g.innerRadius, g.outerRadius, g.thetaSegments, g.phiSegments, g.thetaStart, g.thetaLength);break;case "TorusGeometry":case "TorusBufferGeometry":
                        h = new na[g.type](g.radius, g.tube, g.radialSegments, g.tubularSegments, g.arc);break;case "TorusKnotGeometry":case "TorusKnotBufferGeometry":
                        h = new na[g.type](g.radius, g.tube, g.tubularSegments, g.radialSegments, g.p, g.q);break;case "TubeGeometry":case "TubeBufferGeometry":
                        h = new na[g.type](new Pe[g.path.type]().fromJSON(g.path), g.tubularSegments, g.radius, g.radialSegments, g.closed);break;case "LatheGeometry":case "LatheBufferGeometry":
                        h = new na[g.type](g.points, g.segments, g.phiStart, g.phiLength);break;case "PolyhedronGeometry":case "PolyhedronBufferGeometry":
                        h = new na[g.type](g.vertices, g.indices, g.radius, g.details);break;case "ShapeGeometry":case "ShapeBufferGeometry":
                        h = [];for (var k = 0, m = g.shapes.length; k < m; k++) {
                            var l = b[g.shapes[k]];h.push(l);
                        }h = new na[g.type](h, g.curveSegments);break;case "ExtrudeGeometry":case "ExtrudeBufferGeometry":
                        h = [];k = 0;for (m = g.shapes.length; k < m; k++) {
                            l = b[g.shapes[k]], h.push(l);
                        }k = g.options.extrudePath;void 0 !== k && (g.options.extrudePath = new Pe[k.type]().fromJSON(k));h = new na[g.type](h, g.options);break;case "BufferGeometry":
                        h = d.parse(g);
                        break;case "Geometry":
                        "THREE" in window && "LegacyJSONLoader" in THREE ? h = new THREE.LegacyJSONLoader().parse(g, this.resourcePath).geometry : console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:
                        console.warn('THREE.ObjectLoader: Unsupported geometry type "' + g.type + '"');continue;}h.uuid = g.uuid;void 0 !== g.name && (h.name = g.name);!0 === h.isBufferGeometry && void 0 !== g.userData && (h.userData = g.userData);c[g.uuid] = h;
            }return c;
        }, parseMaterials: function parseMaterials(a, b) {
            var c = {},
                d = {};if (void 0 !== a) {
                var e = new Ud();e.setTextures(b);b = 0;for (var f = a.length; b < f; b++) {
                    var g = a[b];if ("MultiMaterial" === g.type) {
                        for (var h = [], k = 0; k < g.materials.length; k++) {
                            var m = g.materials[k];void 0 === c[m.uuid] && (c[m.uuid] = e.parse(m));h.push(c[m.uuid]);
                        }d[g.uuid] = h;
                    } else void 0 === c[g.uuid] && (c[g.uuid] = e.parse(g)), d[g.uuid] = c[g.uuid];
                }
            }return d;
        }, parseAnimations: function parseAnimations(a) {
            for (var b = [], c = 0; c < a.length; c++) {
                var d = a[c],
                    e = Ga.parse(d);void 0 !== d.uuid && (e.uuid = d.uuid);b.push(e);
            }return b;
        }, parseImages: function parseImages(a, b) {
            function c(a) {
                d.manager.itemStart(a);return f.load(a, function () {
                    d.manager.itemEnd(a);
                }, void 0, function () {
                    d.manager.itemError(a);d.manager.itemEnd(a);
                });
            }var d = this,
                e = {};if (void 0 !== a && 0 < a.length) {
                b = new ne(b);var f = new hd(b);f.setCrossOrigin(this.crossOrigin);b = 0;for (var g = a.length; b < g; b++) {
                    var h = a[b],
                        k = h.url;if (Array.isArray(k)) {
                        e[h.uuid] = [];for (var m = 0, l = k.length; m < l; m++) {
                            var n = k[m];n = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(n) ? n : d.resourcePath + n;e[h.uuid].push(c(n));
                        }
                    } else n = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h.url) ? h.url : d.resourcePath + h.url, e[h.uuid] = c(n);
                }
            }return e;
        }, parseTextures: function parseTextures(a, b) {
            function c(a, b) {
                if ("number" === typeof a) return a;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", a);return b[a];
            }var d = {};if (void 0 !== a) for (var e = 0, f = a.length; e < f; e++) {
                var g = a[e];void 0 === g.image && console.warn('THREE.ObjectLoader: No "image" specified for', g.uuid);void 0 === b[g.image] && console.warn("THREE.ObjectLoader: Undefined image", g.image);var h = Array.isArray(b[g.image]) ? new $a(b[g.image]) : new S(b[g.image]);h.needsUpdate = !0;h.uuid = g.uuid;void 0 !== g.name && (h.name = g.name);void 0 !== g.mapping && (h.mapping = c(g.mapping, nh));void 0 !== g.offset && h.offset.fromArray(g.offset);void 0 !== g.repeat && h.repeat.fromArray(g.repeat);void 0 !== g.center && h.center.fromArray(g.center);void 0 !== g.rotation && (h.rotation = g.rotation);void 0 !== g.wrap && (h.wrapS = c(g.wrap[0], Sf), h.wrapT = c(g.wrap[1], Sf));void 0 !== g.format && (h.format = g.format);void 0 !== g.type && (h.type = g.type);void 0 !== g.encoding && (h.encoding = g.encoding);
                void 0 !== g.minFilter && (h.minFilter = c(g.minFilter, Tf));void 0 !== g.magFilter && (h.magFilter = c(g.magFilter, Tf));void 0 !== g.anisotropy && (h.anisotropy = g.anisotropy);void 0 !== g.flipY && (h.flipY = g.flipY);void 0 !== g.premultiplyAlpha && (h.premultiplyAlpha = g.premultiplyAlpha);void 0 !== g.unpackAlignment && (h.unpackAlignment = g.unpackAlignment);d[g.uuid] = h;
            }return d;
        }, parseObject: function parseObject(a, b, c) {
            function d(a) {
                void 0 === b[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);return b[a];
            }function e(a) {
                if (void 0 !== a) {
                    if (Array.isArray(a)) {
                        for (var b = [], d = 0, e = a.length; d < e; d++) {
                            var f = a[d];void 0 === c[f] && console.warn("THREE.ObjectLoader: Undefined material", f);b.push(c[f]);
                        }return b;
                    }void 0 === c[a] && console.warn("THREE.ObjectLoader: Undefined material", a);return c[a];
                }
            }switch (a.type) {case "Scene":
                    var f = new Bd();void 0 !== a.background && Number.isInteger(a.background) && (f.background = new K(a.background));void 0 !== a.fog && ("Fog" === a.fog.type ? f.fog = new Ad(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (f.fog = new zd(a.fog.color, a.fog.density)));break;case "PerspectiveCamera":
                    f = new U(a.fov, a.aspect, a.near, a.far);void 0 !== a.focus && (f.focus = a.focus);void 0 !== a.zoom && (f.zoom = a.zoom);void 0 !== a.filmGauge && (f.filmGauge = a.filmGauge);void 0 !== a.filmOffset && (f.filmOffset = a.filmOffset);void 0 !== a.view && (f.view = Object.assign({}, a.view));break;case "OrthographicCamera":
                    f = new kd(a.left, a.right, a.top, a.bottom, a.near, a.far);void 0 !== a.zoom && (f.zoom = a.zoom);void 0 !== a.view && (f.view = Object.assign({}, a.view));break;case "AmbientLight":
                    f = new Sd(a.color, a.intensity);break;case "DirectionalLight":
                    f = new Rd(a.color, a.intensity);break;case "PointLight":
                    f = new Pd(a.color, a.intensity, a.distance, a.decay);break;case "RectAreaLight":
                    f = new Td(a.color, a.intensity, a.width, a.height);break;case "SpotLight":
                    f = new Od(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);break;case "HemisphereLight":
                    f = new Md(a.color, a.groundColor, a.intensity);break;case "SkinnedMesh":
                    console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
                case "Mesh":
                    f = d(a.geometry);var g = e(a.material);f = f.bones && 0 < f.bones.length ? new Jc(f, g) : new va(f, g);void 0 !== a.drawMode && f.setDrawMode(a.drawMode);break;case "LOD":
                    f = new Ic();break;case "Line":
                    f = new da(d(a.geometry), e(a.material), a.mode);break;case "LineLoop":
                    f = new Dd(d(a.geometry), e(a.material));break;case "LineSegments":
                    f = new W(d(a.geometry), e(a.material));break;case "PointCloud":case "Points":
                    f = new Vb(d(a.geometry), e(a.material));break;case "Sprite":
                    f = new Hc(e(a.material));break;case "Group":
                    f = new Tb();
                    break;default:
                    f = new E();}f.uuid = a.uuid;void 0 !== a.name && (f.name = a.name);void 0 !== a.matrix ? (f.matrix.fromArray(a.matrix), void 0 !== a.matrixAutoUpdate && (f.matrixAutoUpdate = a.matrixAutoUpdate), f.matrixAutoUpdate && f.matrix.decompose(f.position, f.quaternion, f.scale)) : (void 0 !== a.position && f.position.fromArray(a.position), void 0 !== a.rotation && f.rotation.fromArray(a.rotation), void 0 !== a.quaternion && f.quaternion.fromArray(a.quaternion), void 0 !== a.scale && f.scale.fromArray(a.scale));void 0 !== a.castShadow && (f.castShadow = a.castShadow);void 0 !== a.receiveShadow && (f.receiveShadow = a.receiveShadow);a.shadow && (void 0 !== a.shadow.bias && (f.shadow.bias = a.shadow.bias), void 0 !== a.shadow.radius && (f.shadow.radius = a.shadow.radius), void 0 !== a.shadow.mapSize && f.shadow.mapSize.fromArray(a.shadow.mapSize), void 0 !== a.shadow.camera && (f.shadow.camera = this.parseObject(a.shadow.camera)));void 0 !== a.visible && (f.visible = a.visible);void 0 !== a.frustumCulled && (f.frustumCulled = a.frustumCulled);void 0 !== a.renderOrder && (f.renderOrder = a.renderOrder);
            void 0 !== a.userData && (f.userData = a.userData);void 0 !== a.layers && (f.layers.mask = a.layers);if (void 0 !== a.children) {
                g = a.children;for (var h = 0; h < g.length; h++) {
                    f.add(this.parseObject(g[h], b, c));
                }
            }if ("LOD" === a.type) for (a = a.levels, g = 0; g < a.length; g++) {
                h = a[g];var k = f.getObjectByProperty("uuid", h.object);void 0 !== k && f.addLevel(k, h.distance);
            }return f;
        } });var nh = { UVMapping: 300, CubeReflectionMapping: 301, CubeRefractionMapping: 302, EquirectangularReflectionMapping: 303, EquirectangularRefractionMapping: 304, SphericalReflectionMapping: 305,
        CubeUVReflectionMapping: 306, CubeUVRefractionMapping: 307 },
        Sf = { RepeatWrapping: 1E3, ClampToEdgeWrapping: 1001, MirroredRepeatWrapping: 1002 },
        Tf = { NearestFilter: 1003, NearestMipMapNearestFilter: 1004, NearestMipMapLinearFilter: 1005, LinearFilter: 1006, LinearMipMapNearestFilter: 1007, LinearMipMapLinearFilter: 1008 };te.prototype = { constructor: te, setOptions: function setOptions(a) {
            this.options = a;return this;
        }, load: function load(a, b, c, d) {
            void 0 === a && (a = "");void 0 !== this.path && (a = this.path + a);a = this.manager.resolveURL(a);var e = this,
                f = Lb.get(a);
            if (void 0 !== f) return e.manager.itemStart(a), setTimeout(function () {
                b && b(f);e.manager.itemEnd(a);
            }, 0), f;fetch(a).then(function (a) {
                return a.blob();
            }).then(function (a) {
                return void 0 === e.options ? createImageBitmap(a) : createImageBitmap(a, e.options);
            }).then(function (c) {
                Lb.add(a, c);b && b(c);e.manager.itemEnd(a);
            }).catch(function (b) {
                d && d(b);e.manager.itemError(a);e.manager.itemEnd(a);
            });e.manager.itemStart(a);
        }, setCrossOrigin: function setCrossOrigin() {
            return this;
        }, setPath: function setPath(a) {
            this.path = a;return this;
        } };Object.assign(ue.prototype, { moveTo: function moveTo(a, b) {
            this.currentPath = new Qa();this.subPaths.push(this.currentPath);this.currentPath.moveTo(a, b);
        }, lineTo: function lineTo(a, b) {
            this.currentPath.lineTo(a, b);
        }, quadraticCurveTo: function quadraticCurveTo(a, b, c, d) {
            this.currentPath.quadraticCurveTo(a, b, c, d);
        }, bezierCurveTo: function bezierCurveTo(a, b, c, d, e, f) {
            this.currentPath.bezierCurveTo(a, b, c, d, e, f);
        }, splineThru: function splineThru(a) {
            this.currentPath.splineThru(a);
        }, toShapes: function toShapes(a, b) {
            function c(a) {
                for (var b = [], c = 0, d = a.length; c < d; c++) {
                    var e = a[c],
                        f = new kb();f.curves = e.curves;b.push(f);
                }return b;
            }
            function d(a, b) {
                for (var c = b.length, d = !1, e = c - 1, f = 0; f < c; e = f++) {
                    var g = b[e],
                        h = b[f],
                        k = h.x - g.x,
                        l = h.y - g.y;if (Math.abs(l) > Number.EPSILON) {
                        if (0 > l && (g = b[f], k = -k, h = b[e], l = -l), !(a.y < g.y || a.y > h.y)) if (a.y === g.y) {
                            if (a.x === g.x) return !0;
                        } else {
                            e = l * (a.x - g.x) - k * (a.y - g.y);if (0 === e) return !0;0 > e || (d = !d);
                        }
                    } else if (a.y === g.y && (h.x <= a.x && a.x <= g.x || g.x <= a.x && a.x <= h.x)) return !0;
                }return d;
            }var e = ab.isClockWise,
                f = this.subPaths;if (0 === f.length) return [];if (!0 === b) return c(f);b = [];if (1 === f.length) {
                var g = f[0];var h = new kb();h.curves = g.curves;
                b.push(h);return b;
            }var k = !e(f[0].getPoints());k = a ? !k : k;h = [];var l = [],
                n = [],
                q = 0;l[q] = void 0;n[q] = [];for (var v = 0, t = f.length; v < t; v++) {
                g = f[v];var r = g.getPoints();var u = e(r);(u = a ? !u : u) ? (!k && l[q] && q++, l[q] = { s: new kb(), p: r }, l[q].s.curves = g.curves, k && q++, n[q] = []) : n[q].push({ h: g, p: r[0] });
            }if (!l[0]) return c(f);if (1 < l.length) {
                v = !1;a = [];e = 0;for (f = l.length; e < f; e++) {
                    h[e] = [];
                }e = 0;for (f = l.length; e < f; e++) {
                    for (g = n[e], u = 0; u < g.length; u++) {
                        k = g[u];q = !0;for (r = 0; r < l.length; r++) {
                            d(k.p, l[r].p) && (e !== r && a.push({ froms: e, tos: r, hole: u }), q ? (q = !1, h[r].push(k)) : v = !0);
                        }q && h[e].push(k);
                    }
                }0 < a.length && (v || (n = h));
            }v = 0;for (e = l.length; v < e; v++) {
                for (h = l[v].s, b.push(h), a = n[v], f = 0, g = a.length; f < g; f++) {
                    h.holes.push(a[f].h);
                }
            }return b;
        } });Object.assign(ve.prototype, { isFont: !0, generateShapes: function generateShapes(a, b) {
            void 0 === b && (b = 100);var c = [],
                d = b;b = this.data;var e = Array.from ? Array.from(a) : String(a).split("");d /= b.resolution;var f = (b.boundingBox.yMax - b.boundingBox.yMin + b.underlineThickness) * d;a = [];for (var g = 0, h = 0, k = 0; k < e.length; k++) {
                var l = e[k];if ("\n" === l) g = 0, h -= f;else {
                    var n = d;var q = g,
                        v = h;if (l = b.glyphs[l] || b.glyphs["?"]) {
                        var t = new ue();if (l.o) for (var r = l._cachedOutline || (l._cachedOutline = l.o.split(" ")), u = 0, w = r.length; u < w;) {
                            switch (r[u++]) {case "m":
                                    var z = r[u++] * n + q;var x = r[u++] * n + v;t.moveTo(z, x);break;case "l":
                                    z = r[u++] * n + q;x = r[u++] * n + v;t.lineTo(z, x);break;case "q":
                                    var C = r[u++] * n + q;var y = r[u++] * n + v;var B = r[u++] * n + q;var D = r[u++] * n + v;t.quadraticCurveTo(B, D, C, y);break;case "b":
                                    C = r[u++] * n + q, y = r[u++] * n + v, B = r[u++] * n + q, D = r[u++] * n + v, z = r[u++] * n + q, x = r[u++] * n + v, t.bezierCurveTo(B, D, z, x, C, y);}
                        }n = { offsetX: l.ha * n, path: t };
                    } else n = void 0;g += n.offsetX;a.push(n.path);
                }
            }b = 0;for (e = a.length; b < e; b++) {
                Array.prototype.push.apply(c, a[b].toShapes());
            }return c;
        } });Object.assign(Gf.prototype, { load: function load(a, b, c, d) {
            var e = this,
                f = new La(this.manager);f.setPath(this.path);f.load(a, function (a) {
                try {
                    var c = JSON.parse(a);
                } catch (k) {
                    console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), c = JSON.parse(a.substring(65, a.length - 2));
                }a = e.parse(c);b && b(a);
            }, c, d);
        }, parse: function parse$$1(a) {
            return new ve(a);
        },
        setPath: function setPath(a) {
            this.path = a;return this;
        } });ld.Handlers = { handlers: [], add: function add(a, b) {
            this.handlers.push(a, b);
        }, get: function get$$1(a) {
            for (var b = this.handlers, c = 0, d = b.length; c < d; c += 2) {
                var e = b[c + 1];if (b[c].test(a)) return e;
            }return null;
        } };Object.assign(ld.prototype, { crossOrigin: "anonymous", onLoadStart: function onLoadStart() {}, onLoadProgress: function onLoadProgress() {}, onLoadComplete: function onLoadComplete() {}, initMaterials: function initMaterials(a, b, c) {
            for (var d = [], e = 0; e < a.length; ++e) {
                d[e] = this.createMaterial(a[e], b, c);
            }return d;
        }, createMaterial: function () {
            var a = { NoBlending: 0, NormalBlending: 1, AdditiveBlending: 2, SubtractiveBlending: 3, MultiplyBlending: 4, CustomBlending: 5 },
                b = new K(),
                c = new Ld(),
                d = new Ud();return function (e, f, g) {
                function h(a, b, d, e, h) {
                    a = f + a;var l = ld.Handlers.get(a);null !== l ? a = l.load(a) : (c.setCrossOrigin(g), a = c.load(a));void 0 !== b && (a.repeat.fromArray(b), 1 !== b[0] && (a.wrapS = 1E3), 1 !== b[1] && (a.wrapT = 1E3));void 0 !== d && a.offset.fromArray(d);void 0 !== e && ("repeat" === e[0] && (a.wrapS = 1E3), "mirror" === e[0] && (a.wrapS = 1002), "repeat" === e[1] && (a.wrapT = 1E3), "mirror" === e[1] && (a.wrapT = 1002));void 0 !== h && (a.anisotropy = h);b = H.generateUUID();k[b] = a;return b;
                }var k = {},
                    l = { uuid: H.generateUUID(), type: "MeshLambertMaterial" },
                    n;for (n in e) {
                    var q = e[n];switch (n) {case "DbgColor":case "DbgIndex":case "opticalDensity":case "illumination":
                            break;case "DbgName":
                            l.name = q;break;case "blending":
                            l.blending = a[q];break;case "colorAmbient":case "mapAmbient":
                            console.warn("THREE.Loader.createMaterial:", n, "is no longer supported.");break;case "colorDiffuse":
                            l.color = b.fromArray(q).getHex();break;
                        case "colorSpecular":
                            l.specular = b.fromArray(q).getHex();break;case "colorEmissive":
                            l.emissive = b.fromArray(q).getHex();break;case "specularCoef":
                            l.shininess = q;break;case "shading":
                            "basic" === q.toLowerCase() && (l.type = "MeshBasicMaterial");"phong" === q.toLowerCase() && (l.type = "MeshPhongMaterial");"standard" === q.toLowerCase() && (l.type = "MeshStandardMaterial");break;case "mapDiffuse":
                            l.map = h(q, e.mapDiffuseRepeat, e.mapDiffuseOffset, e.mapDiffuseWrap, e.mapDiffuseAnisotropy);break;case "mapDiffuseRepeat":case "mapDiffuseOffset":case "mapDiffuseWrap":case "mapDiffuseAnisotropy":
                            break;
                        case "mapEmissive":
                            l.emissiveMap = h(q, e.mapEmissiveRepeat, e.mapEmissiveOffset, e.mapEmissiveWrap, e.mapEmissiveAnisotropy);break;case "mapEmissiveRepeat":case "mapEmissiveOffset":case "mapEmissiveWrap":case "mapEmissiveAnisotropy":
                            break;case "mapLight":
                            l.lightMap = h(q, e.mapLightRepeat, e.mapLightOffset, e.mapLightWrap, e.mapLightAnisotropy);break;case "mapLightRepeat":case "mapLightOffset":case "mapLightWrap":case "mapLightAnisotropy":
                            break;case "mapAO":
                            l.aoMap = h(q, e.mapAORepeat, e.mapAOOffset, e.mapAOWrap, e.mapAOAnisotropy);break;case "mapAORepeat":case "mapAOOffset":case "mapAOWrap":case "mapAOAnisotropy":
                            break;case "mapBump":
                            l.bumpMap = h(q, e.mapBumpRepeat, e.mapBumpOffset, e.mapBumpWrap, e.mapBumpAnisotropy);break;case "mapBumpScale":
                            l.bumpScale = q;break;case "mapBumpRepeat":case "mapBumpOffset":case "mapBumpWrap":case "mapBumpAnisotropy":
                            break;case "mapNormal":
                            l.normalMap = h(q, e.mapNormalRepeat, e.mapNormalOffset, e.mapNormalWrap, e.mapNormalAnisotropy);break;case "mapNormalFactor":
                            l.normalScale = q;break;
                        case "mapNormalRepeat":case "mapNormalOffset":case "mapNormalWrap":case "mapNormalAnisotropy":
                            break;case "mapSpecular":
                            l.specularMap = h(q, e.mapSpecularRepeat, e.mapSpecularOffset, e.mapSpecularWrap, e.mapSpecularAnisotropy);break;case "mapSpecularRepeat":case "mapSpecularOffset":case "mapSpecularWrap":case "mapSpecularAnisotropy":
                            break;case "mapMetalness":
                            l.metalnessMap = h(q, e.mapMetalnessRepeat, e.mapMetalnessOffset, e.mapMetalnessWrap, e.mapMetalnessAnisotropy);break;case "mapMetalnessRepeat":case "mapMetalnessOffset":case "mapMetalnessWrap":case "mapMetalnessAnisotropy":
                            break;
                        case "mapRoughness":
                            l.roughnessMap = h(q, e.mapRoughnessRepeat, e.mapRoughnessOffset, e.mapRoughnessWrap, e.mapRoughnessAnisotropy);break;case "mapRoughnessRepeat":case "mapRoughnessOffset":case "mapRoughnessWrap":case "mapRoughnessAnisotropy":
                            break;case "mapAlpha":
                            l.alphaMap = h(q, e.mapAlphaRepeat, e.mapAlphaOffset, e.mapAlphaWrap, e.mapAlphaAnisotropy);break;case "mapAlphaRepeat":case "mapAlphaOffset":case "mapAlphaWrap":case "mapAlphaAnisotropy":
                            break;case "flipSided":
                            l.side = 1;break;case "doubleSided":
                            l.side = 2;break;case "transparency":
                            console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");l.opacity = q;break;case "depthTest":case "depthWrite":case "colorWrite":case "opacity":case "reflectivity":case "transparent":case "visible":case "wireframe":
                            l[n] = q;break;case "vertexColors":
                            !0 === q && (l.vertexColors = 2);"face" === q && (l.vertexColors = 1);break;default:
                            console.error("THREE.Loader.createMaterial: Unsupported", n, q);}
                }"MeshBasicMaterial" === l.type && delete l.emissive;"MeshPhongMaterial" !== l.type && delete l.specular;1 > l.opacity && (l.transparent = !0);d.setTextures(k);return d.parse(l);
            };
        }() });var Zd,
        ze = { getContext: function getContext() {
            void 0 === Zd && (Zd = new (window.AudioContext || window.webkitAudioContext)());return Zd;
        }, setContext: function setContext(a) {
            Zd = a;
        } };Object.assign(we.prototype, { load: function load(a, b, c, d) {
            var e = new La(this.manager);e.setResponseType("arraybuffer");e.setPath(this.path);e.load(a, function (a) {
                a = a.slice(0);ze.getContext().decodeAudioData(a, function (a) {
                    b(a);
                });
            }, c, d);
        }, setPath: function setPath(a) {
            this.path = a;
            return this;
        } });Object.assign(Hf.prototype, { update: function () {
            var a,
                b,
                c,
                d,
                e,
                f,
                g,
                h,
                k = new J(),
                l = new J();return function (m) {
                if (a !== this || b !== m.focus || c !== m.fov || d !== m.aspect * this.aspect || e !== m.near || f !== m.far || g !== m.zoom || h !== this.eyeSep) {
                    a = this;b = m.focus;c = m.fov;d = m.aspect * this.aspect;e = m.near;f = m.far;g = m.zoom;var n = m.projectionMatrix.clone();h = this.eyeSep / 2;var p = h * e / b,
                        t = e * Math.tan(H.DEG2RAD * c * .5) / g;l.elements[12] = -h;k.elements[12] = h;var r = -t * d + p;var u = t * d + p;n.elements[0] = 2 * e / (u - r);n.elements[8] = (u + r) / (u - r);this.cameraL.projectionMatrix.copy(n);r = -t * d - p;u = t * d - p;n.elements[0] = 2 * e / (u - r);n.elements[8] = (u + r) / (u - r);this.cameraR.projectionMatrix.copy(n);
                }this.cameraL.matrixWorld.copy(m.matrixWorld).multiply(l);this.cameraR.matrixWorld.copy(m.matrixWorld).multiply(k);
            };
        }() });md.prototype = Object.create(E.prototype);md.prototype.constructor = md;Object.assign(xe.prototype, { start: function start() {
            this.oldTime = this.startTime = ("undefined" === typeof performance ? Date : performance).now();this.elapsedTime = 0;this.running = !0;
        },
        stop: function stop() {
            this.getElapsedTime();this.autoStart = this.running = !1;
        }, getElapsedTime: function getElapsedTime() {
            this.getDelta();return this.elapsedTime;
        }, getDelta: function getDelta() {
            var a = 0;if (this.autoStart && !this.running) return this.start(), 0;if (this.running) {
                var b = ("undefined" === typeof performance ? Date : performance).now();a = (b - this.oldTime) / 1E3;this.oldTime = b;this.elapsedTime += a;
            }return a;
        } });ye.prototype = Object.assign(Object.create(E.prototype), { constructor: ye, getInput: function getInput() {
            return this.gain;
        }, removeFilter: function removeFilter() {
            null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null);return this;
        }, getFilter: function getFilter() {
            return this.filter;
        }, setFilter: function setFilter(a) {
            null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination);this.filter = a;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this;
        }, getMasterVolume: function getMasterVolume() {
            return this.gain.gain.value;
        },
        setMasterVolume: function setMasterVolume(a) {
            this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);return this;
        }, updateMatrixWorld: function () {
            var a = new n(),
                b = new aa(),
                c = new n(),
                d = new n(),
                e = new xe();return function (f) {
                E.prototype.updateMatrixWorld.call(this, f);f = this.context.listener;var g = this.up;this.timeDelta = e.getDelta();this.matrixWorld.decompose(a, b, c);d.set(0, 0, -1).applyQuaternion(b);if (f.positionX) {
                    var h = this.context.currentTime + this.timeDelta;f.positionX.linearRampToValueAtTime(a.x, h);f.positionY.linearRampToValueAtTime(a.y, h);f.positionZ.linearRampToValueAtTime(a.z, h);f.forwardX.linearRampToValueAtTime(d.x, h);f.forwardY.linearRampToValueAtTime(d.y, h);f.forwardZ.linearRampToValueAtTime(d.z, h);f.upX.linearRampToValueAtTime(g.x, h);f.upY.linearRampToValueAtTime(g.y, h);f.upZ.linearRampToValueAtTime(g.z, h);
                } else f.setPosition(a.x, a.y, a.z), f.setOrientation(d.x, d.y, d.z, g.x, g.y, g.z);
            };
        }() });mc.prototype = Object.assign(Object.create(E.prototype), { constructor: mc, getOutput: function getOutput() {
            return this.gain;
        }, setNodeSource: function setNodeSource(a) {
            this.hasPlaybackControl = !1;this.sourceType = "audioNode";this.source = a;this.connect();return this;
        }, setMediaElementSource: function setMediaElementSource(a) {
            this.hasPlaybackControl = !1;this.sourceType = "mediaNode";this.source = this.context.createMediaElementSource(a);this.connect();return this;
        }, setBuffer: function setBuffer(a) {
            this.buffer = a;this.sourceType = "buffer";this.autoplay && this.play();return this;
        }, play: function play() {
            if (!0 === this.isPlaying) console.warn("THREE.Audio: Audio is already playing.");else if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else {
                var a = this.context.createBufferSource();a.buffer = this.buffer;a.loop = this.loop;a.onended = this.onEnded.bind(this);this.startTime = this.context.currentTime;a.start(this.startTime, this.offset);this.isPlaying = !0;this.source = a;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect();
            }
        }, pause: function pause() {
            if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return !0 === this.isPlaying && (this.source.stop(), this.source.onended = null, this.offset += (this.context.currentTime - this.startTime) * this.playbackRate, this.isPlaying = !1), this;
        }, stop: function stop() {
            if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return this.source.stop(), this.source.onended = null, this.offset = 0, this.isPlaying = !1, this;
        }, connect: function connect() {
            if (0 < this.filters.length) {
                this.source.connect(this.filters[0]);for (var a = 1, b = this.filters.length; a < b; a++) {
                    this.filters[a - 1].connect(this.filters[a]);
                }this.filters[this.filters.length - 1].connect(this.getOutput());
            } else this.source.connect(this.getOutput());return this;
        }, disconnect: function disconnect() {
            if (0 < this.filters.length) {
                this.source.disconnect(this.filters[0]);for (var a = 1, b = this.filters.length; a < b; a++) {
                    this.filters[a - 1].disconnect(this.filters[a]);
                }this.filters[this.filters.length - 1].disconnect(this.getOutput());
            } else this.source.disconnect(this.getOutput());return this;
        }, getFilters: function getFilters() {
            return this.filters;
        }, setFilters: function setFilters(a) {
            a || (a = []);!0 === this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;return this;
        }, setDetune: function setDetune(a) {
            this.detune = a;if (void 0 !== this.source.detune) return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
        }, getDetune: function getDetune() {
            return this.detune;
        }, getFilter: function getFilter() {
            return this.getFilters()[0];
        }, setFilter: function setFilter(a) {
            return this.setFilters(a ? [a] : []);
        }, setPlaybackRate: function setPlaybackRate(a) {
            if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return this.playbackRate = a, !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
        }, getPlaybackRate: function getPlaybackRate() {
            return this.playbackRate;
        }, onEnded: function onEnded() {
            this.isPlaying = !1;
        }, getLoop: function getLoop() {
            return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
        }, setLoop: function setLoop(a) {
            if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");else return this.loop = a, !0 === this.isPlaying && (this.source.loop = this.loop), this;
        }, getVolume: function getVolume() {
            return this.gain.gain.value;
        }, setVolume: function setVolume(a) {
            this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);return this;
        } });Ae.prototype = Object.assign(Object.create(mc.prototype), { constructor: Ae, getOutput: function getOutput() {
            return this.panner;
        }, getRefDistance: function getRefDistance() {
            return this.panner.refDistance;
        }, setRefDistance: function setRefDistance(a) {
            this.panner.refDistance = a;return this;
        }, getRolloffFactor: function getRolloffFactor() {
            return this.panner.rolloffFactor;
        }, setRolloffFactor: function setRolloffFactor(a) {
            this.panner.rolloffFactor = a;return this;
        }, getDistanceModel: function getDistanceModel() {
            return this.panner.distanceModel;
        }, setDistanceModel: function setDistanceModel(a) {
            this.panner.distanceModel = a;return this;
        }, getMaxDistance: function getMaxDistance() {
            return this.panner.maxDistance;
        }, setMaxDistance: function setMaxDistance(a) {
            this.panner.maxDistance = a;return this;
        }, setDirectionalCone: function setDirectionalCone(a, b, c) {
            this.panner.coneInnerAngle = a;this.panner.coneOuterAngle = b;this.panner.coneOuterGain = c;return this;
        }, updateMatrixWorld: function () {
            var a = new n(),
                b = new aa(),
                c = new n(),
                d = new n();return function (e) {
                E.prototype.updateMatrixWorld.call(this, e);if (!0 !== this.hasPlaybackControl || !1 !== this.isPlaying) if (this.matrixWorld.decompose(a, b, c), d.set(0, 0, 1).applyQuaternion(b), e = this.panner, e.positionX) {
                    var f = this.context.currentTime + this.listener.timeDelta;e.positionX.linearRampToValueAtTime(a.x, f);e.positionY.linearRampToValueAtTime(a.y, f);e.positionZ.linearRampToValueAtTime(a.z, f);e.orientationX.linearRampToValueAtTime(d.x, f);e.orientationY.linearRampToValueAtTime(d.y, f);e.orientationZ.linearRampToValueAtTime(d.z, f);
                } else e.setPosition(a.x, a.y, a.z), e.setOrientation(d.x, d.y, d.z);
            };
        }() });Object.assign(Be.prototype, { getFrequencyData: function getFrequencyData() {
            this.analyser.getByteFrequencyData(this.data);return this.data;
        }, getAverageFrequency: function getAverageFrequency() {
            for (var a = 0, b = this.getFrequencyData(), c = 0; c < b.length; c++) {
                a += b[c];
            }return a / b.length;
        } });Object.assign(Ce.prototype, { accumulate: function accumulate(a, b) {
            var c = this.buffer,
                d = this.valueSize;a = a * d + d;var e = this.cumulativeWeight;if (0 === e) {
                for (e = 0; e !== d; ++e) {
                    c[a + e] = c[e];
                }e = b;
            } else e += b, this._mixBufferRegion(c, a, 0, b / e, d);this.cumulativeWeight = e;
        }, apply: function apply(a) {
            var b = this.valueSize,
                c = this.buffer;a = a * b + b;var d = this.cumulativeWeight,
                e = this.binding;this.cumulativeWeight = 0;1 > d && this._mixBufferRegion(c, a, 3 * b, 1 - d, b);d = b;for (var f = b + b; d !== f; ++d) {
                if (c[d] !== c[d + b]) {
                    e.setValue(c, a);break;
                }
            }
        }, saveOriginalState: function saveOriginalState() {
            var a = this.buffer,
                b = this.valueSize,
                c = 3 * b;this.binding.getValue(a, c);for (var d = b; d !== c; ++d) {
                a[d] = a[c + d % b];
            }this.cumulativeWeight = 0;
        }, restoreOriginalState: function restoreOriginalState() {
            this.binding.setValue(this.buffer, 3 * this.valueSize);
        }, _select: function _select(a, b, c, d, e) {
            if (.5 <= d) for (d = 0; d !== e; ++d) {
                a[b + d] = a[c + d];
            }
        }, _slerp: function _slerp(a, b, c, d) {
            aa.slerpFlat(a, b, a, b, a, c, d);
        }, _lerp: function _lerp(a, b, c, d, e) {
            for (var f = 1 - d, g = 0; g !== e; ++g) {
                var h = b + g;a[h] = a[h] * f + a[c + g] * d;
            }
        } });Object.assign(If.prototype, { getValue: function getValue(a, b) {
            this.bind();var c = this._bindings[this._targetGroup.nCachedObjects_];void 0 !== c && c.getValue(a, b);
        }, setValue: function setValue(a, b) {
            for (var c = this._bindings, d = this._targetGroup.nCachedObjects_, e = c.length; d !== e; ++d) {
                c[d].setValue(a, b);
            }
        }, bind: function bind() {
            for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length; b !== c; ++b) {
                a[b].bind();
            }
        }, unbind: function unbind() {
            for (var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length; b !== c; ++b) {
                a[b].unbind();
            }
        } });Object.assign(ma, { Composite: If, create: function create(a, b, c) {
            return a && a.isAnimationObjectGroup ? new ma.Composite(a, b, c) : new ma(a, b, c);
        }, sanitizeNodeName: function () {
            var a = /[\[\]\.:\/]/g;return function (b) {
                return b.replace(/\s/g, "_").replace(a, "");
            };
        }(), parseTrackName: function () {
            var a = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]",
                b = /((?:WC+[\/:])*)/.source.replace("WC", "[^\\[\\]\\.:\\/]");a = /(WCOD+)?/.source.replace("WCOD", a);var c = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", "[^\\[\\]\\.:\\/]"),
                d = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", "[^\\[\\]\\.:\\/]"),
                e = new RegExp("^" + b + a + c + d + "$"),
                f = ["material", "materials", "bones"];return function (a) {
                var b = e.exec(a);if (!b) throw Error("PropertyBinding: Cannot parse trackName: " + a);b = { nodeName: b[2], objectName: b[3], objectIndex: b[4], propertyName: b[5], propertyIndex: b[6] };var c = b.nodeName && b.nodeName.lastIndexOf(".");if (void 0 !== c && -1 !== c) {
                    var d = b.nodeName.substring(c + 1);-1 !== f.indexOf(d) && (b.nodeName = b.nodeName.substring(0, c), b.objectName = d);
                }if (null === b.propertyName || 0 === b.propertyName.length) throw Error("PropertyBinding: can not parse propertyName from trackName: " + a);return b;
            };
        }(), findNode: function findNode(a, b) {
            if (!b || "" === b || "root" === b || "." === b || -1 === b || b === a.name || b === a.uuid) return a;if (a.skeleton) {
                var c = a.skeleton.getBoneByName(b);if (void 0 !== c) return c;
            }if (a.children) {
                var d = function d(a) {
                    for (var c = 0; c < a.length; c++) {
                        var e = a[c];if (e.name === b || e.uuid === b || (e = d(e.children))) return e;
                    }return null;
                };if (a = d(a.children)) return a;
            }return null;
        } });Object.assign(ma.prototype, { _getValue_unavailable: function _getValue_unavailable() {}, _setValue_unavailable: function _setValue_unavailable() {}, BindingType: { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 }, Versioning: { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 }, GetterByBindingType: [function (a, b) {
            a[b] = this.node[this.propertyName];
        }, function (a, b) {
            for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
                a[b++] = c[d];
            }
        }, function (a, b) {
            a[b] = this.resolvedProperty[this.propertyIndex];
        }, function (a, b) {
            this.resolvedProperty.toArray(a, b);
        }], SetterByBindingTypeAndVersioning: [[function (a, b) {
            this.targetObject[this.propertyName] = a[b];
        }, function (a, b) {
            this.targetObject[this.propertyName] = a[b];this.targetObject.needsUpdate = !0;
        }, function (a, b) {
            this.targetObject[this.propertyName] = a[b];this.targetObject.matrixWorldNeedsUpdate = !0;
        }], [function (a, b) {
            for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
                c[d] = a[b++];
            }
        }, function (a, b) {
            for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
                c[d] = a[b++];
            }this.targetObject.needsUpdate = !0;
        }, function (a, b) {
            for (var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d) {
                c[d] = a[b++];
            }this.targetObject.matrixWorldNeedsUpdate = !0;
        }], [function (a, b) {
            this.resolvedProperty[this.propertyIndex] = a[b];
        }, function (a, b) {
            this.resolvedProperty[this.propertyIndex] = a[b];this.targetObject.needsUpdate = !0;
        }, function (a, b) {
            this.resolvedProperty[this.propertyIndex] = a[b];this.targetObject.matrixWorldNeedsUpdate = !0;
        }], [function (a, b) {
            this.resolvedProperty.fromArray(a, b);
        }, function (a, b) {
            this.resolvedProperty.fromArray(a, b);this.targetObject.needsUpdate = !0;
        }, function (a, b) {
            this.resolvedProperty.fromArray(a, b);this.targetObject.matrixWorldNeedsUpdate = !0;
        }]], getValue: function getValue(a, b) {
            this.bind();this.getValue(a, b);
        }, setValue: function setValue(a, b) {
            this.bind();this.setValue(a, b);
        }, bind: function bind() {
            var a = this.node,
                b = this.parsedPath,
                c = b.objectName,
                d = b.propertyName,
                e = b.propertyIndex;a || (this.node = a = ma.findNode(this.rootNode, b.nodeName) || this.rootNode);this.getValue = this._getValue_unavailable;
            this.setValue = this._setValue_unavailable;if (a) {
                if (c) {
                    var f = b.objectIndex;switch (c) {case "materials":
                            if (!a.material) {
                                console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);return;
                            }if (!a.material.materials) {
                                console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);return;
                            }a = a.material.materials;break;case "bones":
                            if (!a.skeleton) {
                                console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);return;
                            }a = a.skeleton.bones;for (c = 0; c < a.length; c++) {
                                if (a[c].name === f) {
                                    f = c;break;
                                }
                            }break;default:
                            if (void 0 === a[c]) {
                                console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);return;
                            }a = a[c];}if (void 0 !== f) {
                        if (void 0 === a[f]) {
                            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, a);return;
                        }a = a[f];
                    }
                }f = a[d];if (void 0 === f) console.error("THREE.PropertyBinding: Trying to update property for track: " + b.nodeName + "." + d + " but it wasn't found.", a);else {
                    b = this.Versioning.None;this.targetObject = a;void 0 !== a.needsUpdate ? b = this.Versioning.NeedsUpdate : void 0 !== a.matrixWorldNeedsUpdate && (b = this.Versioning.MatrixWorldNeedsUpdate);c = this.BindingType.Direct;if (void 0 !== e) {
                        if ("morphTargetInfluences" === d) {
                            if (!a.geometry) {
                                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);return;
                            }if (a.geometry.isBufferGeometry) {
                                if (!a.geometry.morphAttributes) {
                                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);return;
                                }for (c = 0; c < this.node.geometry.morphAttributes.position.length; c++) {
                                    if (a.geometry.morphAttributes.position[c].name === e) {
                                        e = c;break;
                                    }
                                }
                            } else {
                                if (!a.geometry.morphTargets) {
                                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);return;
                                }for (c = 0; c < this.node.geometry.morphTargets.length; c++) {
                                    if (a.geometry.morphTargets[c].name === e) {
                                        e = c;break;
                                    }
                                }
                            }
                        }c = this.BindingType.ArrayElement;this.resolvedProperty = f;this.propertyIndex = e;
                    } else void 0 !== f.fromArray && void 0 !== f.toArray ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = f) : Array.isArray(f) ? (c = this.BindingType.EntireArray, this.resolvedProperty = f) : this.propertyName = d;this.getValue = this.GetterByBindingType[c];this.setValue = this.SetterByBindingTypeAndVersioning[c][b];
                }
            } else console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
        }, unbind: function unbind() {
            this.node = null;this.getValue = this._getValue_unbound;this.setValue = this._setValue_unbound;
        } });
    Object.assign(ma.prototype, { _getValue_unbound: ma.prototype.getValue, _setValue_unbound: ma.prototype.setValue });Object.assign(Jf.prototype, { isAnimationObjectGroup: !0, add: function add() {
            for (var a = this._objects, b = a.length, c = this.nCachedObjects_, d = this._indicesByUUID, e = this._paths, f = this._parsedPaths, g = this._bindings, h = g.length, k = void 0, l = 0, n = arguments.length; l !== n; ++l) {
                var q = arguments[l],
                    v = q.uuid,
                    t = d[v];if (void 0 === t) {
                    t = b++;d[v] = t;a.push(q);v = 0;for (var r = h; v !== r; ++v) {
                        g[v].push(new ma(q, e[v], f[v]));
                    }
                } else if (t < c) {
                    k = a[t];var u = --c;r = a[u];d[r.uuid] = t;a[t] = r;d[v] = u;a[u] = q;v = 0;for (r = h; v !== r; ++v) {
                        var w = g[v],
                            z = w[t];w[t] = w[u];void 0 === z && (z = new ma(q, e[v], f[v]));w[u] = z;
                    }
                } else a[t] !== k && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
            }this.nCachedObjects_ = c;
        }, remove: function remove() {
            for (var a = this._objects, b = this.nCachedObjects_, c = this._indicesByUUID, d = this._bindings, e = d.length, f = 0, g = arguments.length; f !== g; ++f) {
                var h = arguments[f],
                    k = h.uuid,
                    l = c[k];if (void 0 !== l && l >= b) {
                    var n = b++,
                        q = a[n];c[q.uuid] = l;a[l] = q;c[k] = n;a[n] = h;h = 0;for (k = e; h !== k; ++h) {
                        q = d[h];var v = q[l];q[l] = q[n];q[n] = v;
                    }
                }
            }this.nCachedObjects_ = b;
        }, uncache: function uncache() {
            for (var a = this._objects, b = a.length, c = this.nCachedObjects_, d = this._indicesByUUID, e = this._bindings, f = e.length, g = 0, h = arguments.length; g !== h; ++g) {
                var k = arguments[g].uuid,
                    l = d[k];if (void 0 !== l) if (delete d[k], l < c) {
                    k = --c;var n = a[k],
                        q = --b,
                        v = a[q];d[n.uuid] = l;a[l] = n;d[v.uuid] = k;a[k] = v;a.pop();n = 0;for (v = f; n !== v; ++n) {
                        var t = e[n],
                            r = t[q];t[l] = t[k];t[k] = r;t.pop();
                    }
                } else for (q = --b, v = a[q], d[v.uuid] = l, a[l] = v, a.pop(), n = 0, v = f; n !== v; ++n) {
                    t = e[n], t[l] = t[q], t.pop();
                }
            }this.nCachedObjects_ = c;
        }, subscribe_: function subscribe_(a, b) {
            var c = this._bindingsIndicesByPath,
                d = c[a],
                e = this._bindings;if (void 0 !== d) return e[d];var f = this._paths,
                g = this._parsedPaths,
                h = this._objects,
                k = this.nCachedObjects_,
                l = Array(h.length);d = e.length;c[a] = d;f.push(a);g.push(b);e.push(l);c = k;for (d = h.length; c !== d; ++c) {
                l[c] = new ma(h[c], a, b);
            }return l;
        }, unsubscribe_: function unsubscribe_(a) {
            var b = this._bindingsIndicesByPath,
                c = b[a];if (void 0 !== c) {
                var d = this._paths,
                    e = this._parsedPaths,
                    f = this._bindings,
                    g = f.length - 1,
                    h = f[g];b[a[g]] = c;f[c] = h;f.pop();e[c] = e[g];e.pop();d[c] = d[g];d.pop();
            }
        } });Object.assign(Kf.prototype, { play: function play() {
            this._mixer._activateAction(this);return this;
        }, stop: function stop() {
            this._mixer._deactivateAction(this);return this.reset();
        }, reset: function reset() {
            this.paused = !1;this.enabled = !0;this.time = 0;this._loopCount = -1;this._startTime = null;return this.stopFading().stopWarping();
        }, isRunning: function isRunning() {
            return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
        }, isScheduled: function isScheduled() {
            return this._mixer._isActiveAction(this);
        }, startAt: function startAt(a) {
            this._startTime = a;return this;
        }, setLoop: function setLoop(a, b) {
            this.loop = a;this.repetitions = b;return this;
        }, setEffectiveWeight: function setEffectiveWeight(a) {
            this.weight = a;this._effectiveWeight = this.enabled ? a : 0;return this.stopFading();
        }, getEffectiveWeight: function getEffectiveWeight() {
            return this._effectiveWeight;
        }, fadeIn: function fadeIn(a) {
            return this._scheduleFading(a, 0, 1);
        }, fadeOut: function fadeOut(a) {
            return this._scheduleFading(a, 1, 0);
        }, crossFadeFrom: function crossFadeFrom(a, b, c) {
            a.fadeOut(b);this.fadeIn(b);if (c) {
                c = this._clip.duration;var d = a._clip.duration,
                    e = c / d;a.warp(1, d / c, b);this.warp(e, 1, b);
            }return this;
        }, crossFadeTo: function crossFadeTo(a, b, c) {
            return a.crossFadeFrom(this, b, c);
        }, stopFading: function stopFading() {
            var a = this._weightInterpolant;null !== a && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(a));return this;
        }, setEffectiveTimeScale: function setEffectiveTimeScale(a) {
            this.timeScale = a;this._effectiveTimeScale = this.paused ? 0 : a;return this.stopWarping();
        }, getEffectiveTimeScale: function getEffectiveTimeScale() {
            return this._effectiveTimeScale;
        },
        setDuration: function setDuration(a) {
            this.timeScale = this._clip.duration / a;return this.stopWarping();
        }, syncWith: function syncWith(a) {
            this.time = a.time;this.timeScale = a.timeScale;return this.stopWarping();
        }, halt: function halt(a) {
            return this.warp(this._effectiveTimeScale, 0, a);
        }, warp: function warp(a, b, c) {
            var d = this._mixer,
                e = d.time,
                f = this._timeScaleInterpolant,
                g = this.timeScale;null === f && (this._timeScaleInterpolant = f = d._lendControlInterpolant());d = f.parameterPositions;f = f.sampleValues;d[0] = e;d[1] = e + c;f[0] = a / g;f[1] = b / g;return this;
        }, stopWarping: function stopWarping() {
            var a = this._timeScaleInterpolant;null !== a && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(a));return this;
        }, getMixer: function getMixer() {
            return this._mixer;
        }, getClip: function getClip() {
            return this._clip;
        }, getRoot: function getRoot() {
            return this._localRoot || this._mixer._root;
        }, _update: function _update(a, b, c, d) {
            if (this.enabled) {
                var e = this._startTime;if (null !== e) {
                    b = (a - e) * c;if (0 > b || 0 === c) return;this._startTime = null;b *= c;
                }b *= this._updateTimeScale(a);c = this._updateTime(b);a = this._updateWeight(a);if (0 < a) {
                    b = this._interpolants;
                    e = this._propertyBindings;for (var f = 0, g = b.length; f !== g; ++f) {
                        b[f].evaluate(c), e[f].accumulate(d, a);
                    }
                }
            } else this._updateWeight(a);
        }, _updateWeight: function _updateWeight(a) {
            var b = 0;if (this.enabled) {
                b = this.weight;var c = this._weightInterpolant;if (null !== c) {
                    var d = c.evaluate(a)[0];b *= d;a > c.parameterPositions[1] && (this.stopFading(), 0 === d && (this.enabled = !1));
                }
            }return this._effectiveWeight = b;
        }, _updateTimeScale: function _updateTimeScale(a) {
            var b = 0;if (!this.paused) {
                b = this.timeScale;var c = this._timeScaleInterpolant;if (null !== c) {
                    var d = c.evaluate(a)[0];
                    b *= d;a > c.parameterPositions[1] && (this.stopWarping(), 0 === b ? this.paused = !0 : this.timeScale = b);
                }
            }return this._effectiveTimeScale = b;
        }, _updateTime: function _updateTime(a) {
            var b = this.time + a,
                c = this._clip.duration,
                d = this.loop,
                e = this._loopCount,
                f = 2202 === d;if (0 === a) return -1 === e ? b : f && 1 === (e & 1) ? c - b : b;if (2200 === d) a: {
                if (-1 === e && (this._loopCount = 0, this._setEndings(!0, !0, !1)), b >= c) b = c;else if (0 > b) b = 0;else break a;this.clampWhenFinished ? this.paused = !0 : this.enabled = !1;this._mixer.dispatchEvent({ type: "finished", action: this, direction: 0 > a ? -1 : 1 });
            } else {
                -1 === e && (0 <= a ? (e = 0, this._setEndings(!0, 0 === this.repetitions, f)) : this._setEndings(0 === this.repetitions, !0, f));if (b >= c || 0 > b) {
                    d = Math.floor(b / c);b -= c * d;e += Math.abs(d);var g = this.repetitions - e;0 >= g ? (this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, b = 0 < a ? c : 0, this._mixer.dispatchEvent({ type: "finished", action: this, direction: 0 < a ? 1 : -1 })) : (1 === g ? (a = 0 > a, this._setEndings(a, !a, f)) : this._setEndings(!1, !1, f), this._loopCount = e, this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: d }));
                }if (f && 1 === (e & 1)) return this.time = b, c - b;
            }return this.time = b;
        }, _setEndings: function _setEndings(a, b, c) {
            var d = this._interpolantSettings;c ? (d.endingStart = 2401, d.endingEnd = 2401) : (d.endingStart = a ? this.zeroSlopeAtStart ? 2401 : 2400 : 2402, d.endingEnd = b ? this.zeroSlopeAtEnd ? 2401 : 2400 : 2402);
        }, _scheduleFading: function _scheduleFading(a, b, c) {
            var d = this._mixer,
                e = d.time,
                f = this._weightInterpolant;null === f && (this._weightInterpolant = f = d._lendControlInterpolant());d = f.parameterPositions;f = f.sampleValues;d[0] = e;f[0] = b;d[1] = e + a;f[1] = c;return this;
        } });De.prototype = Object.assign(Object.create(ka.prototype), { constructor: De, _bindAction: function _bindAction(a, b) {
            var c = a._localRoot || this._root,
                d = a._clip.tracks,
                e = d.length,
                f = a._propertyBindings;a = a._interpolants;var g = c.uuid,
                h = this._bindingsByRootAndName,
                k = h[g];void 0 === k && (k = {}, h[g] = k);for (h = 0; h !== e; ++h) {
                var l = d[h],
                    n = l.name,
                    q = k[n];if (void 0 === q) {
                    q = f[h];if (void 0 !== q) {
                        null === q._cacheIndex && (++q.referenceCount, this._addInactiveBinding(q, g, n));continue;
                    }q = new Ce(ma.create(c, n, b && b._propertyBindings[h].binding.parsedPath), l.ValueTypeName, l.getValueSize());++q.referenceCount;this._addInactiveBinding(q, g, n);
                }f[h] = q;a[h].resultBuffer = q.buffer;
            }
        }, _activateAction: function _activateAction(a) {
            if (!this._isActiveAction(a)) {
                if (null === a._cacheIndex) {
                    var b = (a._localRoot || this._root).uuid,
                        c = a._clip.uuid,
                        d = this._actionsByClip[c];this._bindAction(a, d && d.knownActions[0]);this._addInactiveAction(a, c, b);
                }b = a._propertyBindings;c = 0;for (d = b.length; c !== d; ++c) {
                    var e = b[c];0 === e.useCount++ && (this._lendBinding(e), e.saveOriginalState());
                }this._lendAction(a);
            }
        }, _deactivateAction: function _deactivateAction(a) {
            if (this._isActiveAction(a)) {
                for (var b = a._propertyBindings, c = 0, d = b.length; c !== d; ++c) {
                    var e = b[c];0 === --e.useCount && (e.restoreOriginalState(), this._takeBackBinding(e));
                }this._takeBackAction(a);
            }
        }, _initMemoryManager: function _initMemoryManager() {
            this._actions = [];this._nActiveActions = 0;this._actionsByClip = {};this._bindings = [];this._nActiveBindings = 0;this._bindingsByRootAndName = {};this._controlInterpolants = [];this._nActiveControlInterpolants = 0;var a = this;this.stats = { actions: { get total() {
                        return a._actions.length;
                    }, get inUse() {
                        return a._nActiveActions;
                    } }, bindings: { get total() {
                        return a._bindings.length;
                    },
                    get inUse() {
                        return a._nActiveBindings;
                    } }, controlInterpolants: { get total() {
                        return a._controlInterpolants.length;
                    }, get inUse() {
                        return a._nActiveControlInterpolants;
                    } } };
        }, _isActiveAction: function _isActiveAction(a) {
            a = a._cacheIndex;return null !== a && a < this._nActiveActions;
        }, _addInactiveAction: function _addInactiveAction(a, b, c) {
            var d = this._actions,
                e = this._actionsByClip,
                f = e[b];void 0 === f ? (f = { knownActions: [a], actionByRoot: {} }, a._byClipCacheIndex = 0, e[b] = f) : (b = f.knownActions, a._byClipCacheIndex = b.length, b.push(a));a._cacheIndex = d.length;d.push(a);
            f.actionByRoot[c] = a;
        }, _removeInactiveAction: function _removeInactiveAction(a) {
            var b = this._actions,
                c = b[b.length - 1],
                d = a._cacheIndex;c._cacheIndex = d;b[d] = c;b.pop();a._cacheIndex = null;b = a._clip.uuid;c = this._actionsByClip;d = c[b];var e = d.knownActions,
                f = e[e.length - 1],
                g = a._byClipCacheIndex;f._byClipCacheIndex = g;e[g] = f;e.pop();a._byClipCacheIndex = null;delete d.actionByRoot[(a._localRoot || this._root).uuid];0 === e.length && delete c[b];this._removeInactiveBindingsForAction(a);
        }, _removeInactiveBindingsForAction: function _removeInactiveBindingsForAction(a) {
            a = a._propertyBindings;
            for (var b = 0, c = a.length; b !== c; ++b) {
                var d = a[b];0 === --d.referenceCount && this._removeInactiveBinding(d);
            }
        }, _lendAction: function _lendAction(a) {
            var b = this._actions,
                c = a._cacheIndex,
                d = this._nActiveActions++,
                e = b[d];a._cacheIndex = d;b[d] = a;e._cacheIndex = c;b[c] = e;
        }, _takeBackAction: function _takeBackAction(a) {
            var b = this._actions,
                c = a._cacheIndex,
                d = --this._nActiveActions,
                e = b[d];a._cacheIndex = d;b[d] = a;e._cacheIndex = c;b[c] = e;
        }, _addInactiveBinding: function _addInactiveBinding(a, b, c) {
            var d = this._bindingsByRootAndName,
                e = d[b],
                f = this._bindings;void 0 === e && (e = {}, d[b] = e);e[c] = a;a._cacheIndex = f.length;f.push(a);
        }, _removeInactiveBinding: function _removeInactiveBinding(a) {
            var b = this._bindings,
                c = a.binding,
                d = c.rootNode.uuid;c = c.path;var e = this._bindingsByRootAndName,
                f = e[d],
                g = b[b.length - 1];a = a._cacheIndex;g._cacheIndex = a;b[a] = g;b.pop();delete f[c];a: {
                for (var h in f) {
                    break a;
                }delete e[d];
            }
        }, _lendBinding: function _lendBinding(a) {
            var b = this._bindings,
                c = a._cacheIndex,
                d = this._nActiveBindings++,
                e = b[d];a._cacheIndex = d;b[d] = a;e._cacheIndex = c;b[c] = e;
        }, _takeBackBinding: function _takeBackBinding(a) {
            var b = this._bindings,
                c = a._cacheIndex,
                d = --this._nActiveBindings,
                e = b[d];a._cacheIndex = d;b[d] = a;e._cacheIndex = c;b[c] = e;
        }, _lendControlInterpolant: function _lendControlInterpolant() {
            var a = this._controlInterpolants,
                b = this._nActiveControlInterpolants++,
                c = a[b];void 0 === c && (c = new fd(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), c.__cacheIndex = b, a[b] = c);return c;
        }, _takeBackControlInterpolant: function _takeBackControlInterpolant(a) {
            var b = this._controlInterpolants,
                c = a.__cacheIndex,
                d = --this._nActiveControlInterpolants,
                e = b[d];a.__cacheIndex = d;b[d] = a;e.__cacheIndex = c;b[c] = e;
        }, _controlInterpolantsResultBuffer: new Float32Array(1), clipAction: function clipAction(a, b) {
            var c = b || this._root,
                d = c.uuid;c = "string" === typeof a ? Ga.findByName(c, a) : a;a = null !== c ? c.uuid : a;var e = this._actionsByClip[a],
                f = null;if (void 0 !== e) {
                f = e.actionByRoot[d];if (void 0 !== f) return f;f = e.knownActions[0];null === c && (c = f._clip);
            }if (null === c) return null;b = new Kf(this, c, b);this._bindAction(b, f);this._addInactiveAction(b, a, d);return b;
        }, existingAction: function existingAction(a, b) {
            var c = b || this._root;b = c.uuid;c = "string" === typeof a ? Ga.findByName(c, a) : a;a = this._actionsByClip[c ? c.uuid : a];return void 0 !== a ? a.actionByRoot[b] || null : null;
        }, stopAllAction: function stopAllAction() {
            for (var a = this._actions, b = this._nActiveActions, c = this._bindings, d = this._nActiveBindings, e = this._nActiveBindings = this._nActiveActions = 0; e !== b; ++e) {
                a[e].reset();
            }for (e = 0; e !== d; ++e) {
                c[e].useCount = 0;
            }return this;
        }, update: function update(a) {
            a *= this.timeScale;for (var b = this._actions, c = this._nActiveActions, d = this.time += a, e = Math.sign(a), f = this._accuIndex ^= 1, g = 0; g !== c; ++g) {
                b[g]._update(d, a, e, f);
            }a = this._bindings;b = this._nActiveBindings;for (g = 0; g !== b; ++g) {
                a[g].apply(f);
            }return this;
        }, getRoot: function getRoot() {
            return this._root;
        }, uncacheClip: function uncacheClip(a) {
            var b = this._actions;a = a.uuid;var c = this._actionsByClip,
                d = c[a];if (void 0 !== d) {
                d = d.knownActions;for (var e = 0, f = d.length; e !== f; ++e) {
                    var g = d[e];this._deactivateAction(g);var h = g._cacheIndex,
                        k = b[b.length - 1];g._cacheIndex = null;g._byClipCacheIndex = null;k._cacheIndex = h;b[h] = k;b.pop();this._removeInactiveBindingsForAction(g);
                }delete c[a];
            }
        }, uncacheRoot: function uncacheRoot(a) {
            a = a.uuid;var b = this._actionsByClip;for (d in b) {
                var c = b[d].actionByRoot[a];void 0 !== c && (this._deactivateAction(c), this._removeInactiveAction(c));
            }var d = this._bindingsByRootAndName[a];if (void 0 !== d) for (var e in d) {
                a = d[e], a.restoreOriginalState(), this._removeInactiveBinding(a);
            }
        }, uncacheAction: function uncacheAction(a, b) {
            a = this.existingAction(a, b);null !== a && (this._deactivateAction(a), this._removeInactiveAction(a));
        } });Vd.prototype.clone = function () {
        return new Vd(void 0 === this.value.clone ? this.value : this.value.clone());
    };Ee.prototype = Object.assign(Object.create(D.prototype), { constructor: Ee, isInstancedBufferGeometry: !0, copy: function copy(a) {
            D.prototype.copy.call(this, a);this.maxInstancedCount = a.maxInstancedCount;return this;
        }, clone: function clone() {
            return new this.constructor().copy(this);
        } });Fe.prototype = Object.assign(Object.create(ub.prototype), { constructor: Fe, isInstancedInterleavedBuffer: !0, copy: function copy(a) {
            ub.prototype.copy.call(this, a);this.meshPerAttribute = a.meshPerAttribute;return this;
        } });Ge.prototype = Object.assign(Object.create(P.prototype), { constructor: Ge, isInstancedBufferAttribute: !0, copy: function copy(a) {
            P.prototype.copy.call(this, a);this.meshPerAttribute = a.meshPerAttribute;return this;
        } });Object.assign(Lf.prototype, { linePrecision: 1, set: function set$$1(a, b) {
            this.ray.set(a, b);
        }, setFromCamera: function setFromCamera(a, b) {
            b && b.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(b.matrixWorld), this.ray.direction.set(a.x, a.y, .5).unproject(b).sub(this.ray.origin).normalize()) : b && b.isOrthographicCamera ? (this.ray.origin.set(a.x, a.y, (b.near + b.far) / (b.near - b.far)).unproject(b), this.ray.direction.set(0, 0, -1).transformDirection(b.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
        }, intersectObject: function intersectObject(a, b, c) {
            c = c || [];He(a, this, c, b);c.sort(Mf);return c;
        }, intersectObjects: function intersectObjects(a, b, c) {
            c = c || [];if (!1 === Array.isArray(a)) return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), c;for (var d = 0, e = a.length; d < e; d++) {
                He(a[d], this, c, b);
            }c.sort(Mf);return c;
        } });Object.assign(Nf.prototype, { set: function set$$1(a, b, c) {
            this.radius = a;this.phi = b;this.theta = c;return this;
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.radius = a.radius;this.phi = a.phi;this.theta = a.theta;return this;
        }, makeSafe: function makeSafe() {
            this.phi = Math.max(1E-6, Math.min(Math.PI - 1E-6, this.phi));return this;
        }, setFromVector3: function setFromVector3(a) {
            return this.setFromCartesianCoords(a.x, a.y, a.z);
        }, setFromCartesianCoords: function setFromCartesianCoords(a, b, c) {
            this.radius = Math.sqrt(a * a + b * b + c * c);0 === this.radius ? this.phi = this.theta = 0 : (this.theta = Math.atan2(a, c), this.phi = Math.acos(H.clamp(b / this.radius, -1, 1)));return this;
        } });Object.assign(Of.prototype, { set: function set$$1(a, b, c) {
            this.radius = a;this.theta = b;this.y = c;return this;
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.radius = a.radius;this.theta = a.theta;this.y = a.y;return this;
        }, setFromVector3: function setFromVector3(a) {
            return this.setFromCartesianCoords(a.x, a.y, a.z);
        }, setFromCartesianCoords: function setFromCartesianCoords(a, b, c) {
            this.radius = Math.sqrt(a * a + c * c);this.theta = Math.atan2(a, c);this.y = b;return this;
        } });Object.assign(Ie.prototype, { set: function set$$1(a, b) {
            this.min.copy(a);
            this.max.copy(b);return this;
        }, setFromPoints: function setFromPoints(a) {
            this.makeEmpty();for (var b = 0, c = a.length; b < c; b++) {
                this.expandByPoint(a[b]);
            }return this;
        }, setFromCenterAndSize: function () {
            var a = new B();return function (b, c) {
                c = a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(c);this.max.copy(b).add(c);return this;
            };
        }(), clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.min.copy(a.min);this.max.copy(a.max);return this;
        }, makeEmpty: function makeEmpty() {
            this.min.x = this.min.y = Infinity;this.max.x = this.max.y = -Infinity;return this;
        }, isEmpty: function isEmpty() {
            return this.max.x < this.min.x || this.max.y < this.min.y;
        }, getCenter: function getCenter(a) {
            void 0 === a && (console.warn("THREE.Box2: .getCenter() target is now required"), a = new B());return this.isEmpty() ? a.set(0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
        }, getSize: function getSize(a) {
            void 0 === a && (console.warn("THREE.Box2: .getSize() target is now required"), a = new B());return this.isEmpty() ? a.set(0, 0) : a.subVectors(this.max, this.min);
        }, expandByPoint: function expandByPoint(a) {
            this.min.min(a);this.max.max(a);
            return this;
        }, expandByVector: function expandByVector(a) {
            this.min.sub(a);this.max.add(a);return this;
        }, expandByScalar: function expandByScalar(a) {
            this.min.addScalar(-a);this.max.addScalar(a);return this;
        }, containsPoint: function containsPoint(a) {
            return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
        }, containsBox: function containsBox(a) {
            return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y;
        }, getParameter: function getParameter(a, b) {
            void 0 === b && (console.warn("THREE.Box2: .getParameter() target is now required"), b = new B());
            return b.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
        }, intersectsBox: function intersectsBox(a) {
            return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
        }, clampPoint: function clampPoint(a, b) {
            void 0 === b && (console.warn("THREE.Box2: .clampPoint() target is now required"), b = new B());return b.copy(a).clamp(this.min, this.max);
        }, distanceToPoint: function () {
            var a = new B();return function (b) {
                return a.copy(b).clamp(this.min, this.max).sub(b).length();
            };
        }(), intersect: function intersect(a) {
            this.min.max(a.min);
            this.max.min(a.max);return this;
        }, union: function union(a) {
            this.min.min(a.min);this.max.max(a.max);return this;
        }, translate: function translate(a) {
            this.min.add(a);this.max.add(a);return this;
        }, equals: function equals(a) {
            return a.min.equals(this.min) && a.max.equals(this.max);
        } });Object.assign(Je.prototype, { set: function set$$1(a, b) {
            this.start.copy(a);this.end.copy(b);return this;
        }, clone: function clone() {
            return new this.constructor().copy(this);
        }, copy: function copy(a) {
            this.start.copy(a.start);this.end.copy(a.end);return this;
        }, getCenter: function getCenter(a) {
            void 0 === a && (console.warn("THREE.Line3: .getCenter() target is now required"), a = new n());return a.addVectors(this.start, this.end).multiplyScalar(.5);
        }, delta: function delta(a) {
            void 0 === a && (console.warn("THREE.Line3: .delta() target is now required"), a = new n());return a.subVectors(this.end, this.start);
        }, distanceSq: function distanceSq() {
            return this.start.distanceToSquared(this.end);
        }, distance: function distance() {
            return this.start.distanceTo(this.end);
        }, at: function at(a, b) {
            void 0 === b && (console.warn("THREE.Line3: .at() target is now required"), b = new n());return this.delta(b).multiplyScalar(a).add(this.start);
        }, closestPointToPointParameter: function () {
            var a = new n(),
                b = new n();return function (c, d) {
                a.subVectors(c, this.start);b.subVectors(this.end, this.start);c = b.dot(b);c = b.dot(a) / c;d && (c = H.clamp(c, 0, 1));return c;
            };
        }(), closestPointToPoint: function closestPointToPoint(a, b, c) {
            a = this.closestPointToPointParameter(a, b);void 0 === c && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), c = new n());return this.delta(c).multiplyScalar(a).add(this.start);
        }, applyMatrix4: function applyMatrix4(a) {
            this.start.applyMatrix4(a);
            this.end.applyMatrix4(a);return this;
        }, equals: function equals(a) {
            return a.start.equals(this.start) && a.end.equals(this.end);
        } });nd.prototype = Object.create(E.prototype);nd.prototype.constructor = nd;nd.prototype.isImmediateRenderObject = !0;od.prototype = Object.create(W.prototype);od.prototype.constructor = od;od.prototype.update = function () {
        var a = new n(),
            b = new n(),
            c = new pa();return function () {
            var d = ["a", "b", "c"];this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);var e = this.object.matrixWorld,
                f = this.geometry.attributes.position,
                g = this.object.geometry;if (g && g.isGeometry) for (var h = g.vertices, k = g.faces, l = g = 0, n = k.length; l < n; l++) {
                for (var q = k[l], v = 0, t = q.vertexNormals.length; v < t; v++) {
                    var r = q.vertexNormals[v];a.copy(h[q[d[v]]]).applyMatrix4(e);b.copy(r).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);f.setXYZ(g, a.x, a.y, a.z);g += 1;f.setXYZ(g, b.x, b.y, b.z);g += 1;
                }
            } else if (g && g.isBufferGeometry) for (d = g.attributes.position, h = g.attributes.normal, v = g = 0, t = d.count; v < t; v++) {
                a.set(d.getX(v), d.getY(v), d.getZ(v)).applyMatrix4(e), b.set(h.getX(v), h.getY(v), h.getZ(v)), b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a), f.setXYZ(g, a.x, a.y, a.z), g += 1, f.setXYZ(g, b.x, b.y, b.z), g += 1;
            }f.needsUpdate = !0;
        };
    }();nc.prototype = Object.create(E.prototype);nc.prototype.constructor = nc;nc.prototype.dispose = function () {
        this.cone.geometry.dispose();this.cone.material.dispose();
    };nc.prototype.update = function () {
        var a = new n();return function () {
            this.light.updateMatrixWorld();var b = this.light.distance ? this.light.distance : 1E3,
                c = b * Math.tan(this.light.angle);this.cone.scale.set(c, c, b);a.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(a);void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
        };
    }();oc.prototype = Object.create(W.prototype);oc.prototype.constructor = oc;oc.prototype.updateMatrixWorld = function () {
        var a = new n(),
            b = new J(),
            c = new J();return function (d) {
            var e = this.bones,
                f = this.geometry,
                g = f.getAttribute("position");c.getInverse(this.root.matrixWorld);
            for (var h = 0, k = 0; h < e.length; h++) {
                var l = e[h];l.parent && l.parent.isBone && (b.multiplyMatrices(c, l.matrixWorld), a.setFromMatrixPosition(b), g.setXYZ(k, a.x, a.y, a.z), b.multiplyMatrices(c, l.parent.matrixWorld), a.setFromMatrixPosition(b), g.setXYZ(k + 1, a.x, a.y, a.z), k += 2);
            }f.getAttribute("position").needsUpdate = !0;E.prototype.updateMatrixWorld.call(this, d);
        };
    }();pc.prototype = Object.create(va.prototype);pc.prototype.constructor = pc;pc.prototype.dispose = function () {
        this.geometry.dispose();this.material.dispose();
    };pc.prototype.update = function () {
        void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
    };qc.prototype = Object.create(da.prototype);qc.prototype.constructor = qc;qc.prototype.update = function () {
        this.scale.set(.5 * this.light.width, .5 * this.light.height, 1);if (void 0 !== this.color) this.material.color.set(this.color), this.children[0].material.color.set(this.color);else {
            this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);var a = this.material.color,
                b = Math.max(a.r, a.g, a.b);1 < b && a.multiplyScalar(1 / b);this.children[0].material.color.copy(this.material.color);
        }
    };qc.prototype.dispose = function () {
        this.geometry.dispose();this.material.dispose();this.children[0].geometry.dispose();this.children[0].material.dispose();
    };rc.prototype = Object.create(E.prototype);rc.prototype.constructor = rc;rc.prototype.dispose = function () {
        this.children[0].geometry.dispose();this.children[0].material.dispose();
    };rc.prototype.update = function () {
        var a = new n(),
            b = new K(),
            c = new K();return function () {
            var d = this.children[0];if (void 0 !== this.color) this.material.color.set(this.color);else {
                var e = d.geometry.getAttribute("color");b.copy(this.light.color);c.copy(this.light.groundColor);for (var f = 0, g = e.count; f < g; f++) {
                    var h = f < g / 2 ? b : c;e.setXYZ(f, h.r, h.g, h.b);
                }e.needsUpdate = !0;
            }d.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());
        };
    }();pd.prototype = Object.create(W.prototype);pd.prototype.constructor = pd;Wd.prototype = Object.create(W.prototype);Wd.prototype.constructor = Wd;sc.prototype = Object.create(da.prototype);
    sc.prototype.constructor = sc;sc.prototype.update = function () {
        function a(a, b, d, e) {
            d = (b - a) / d;t.setXYZ(k, 0, 0, 0);l++;for (n = a; n < b; n += d) {
                q = k + l, t.setXYZ(q, Math.sin(n) * c, 0, Math.cos(n) * c), t.setXYZ(q + 1, Math.sin(Math.min(n + d, b)) * c, 0, Math.cos(Math.min(n + d, b)) * c), t.setXYZ(q + 2, 0, 0, 0), l += 3;
            }v.addGroup(k, l, e);k += l;l = 0;
        }var b = this.audio,
            c = this.range,
            d = this.divisionsInnerAngle,
            e = this.divisionsOuterAngle,
            f = H.degToRad(b.panner.coneInnerAngle);b = H.degToRad(b.panner.coneOuterAngle);var g = f / 2,
            h = b / 2,
            k = 0,
            l = 0,
            n,
            q,
            v = this.geometry,
            t = v.attributes.position;v.clearGroups();a(-h, -g, e, 0);a(-g, g, d, 1);a(g, h, e, 0);t.needsUpdate = !0;f === b && (this.material[0].visible = !1);
    };sc.prototype.dispose = function () {
        this.geometry.dispose();this.material[0].dispose();this.material[1].dispose();
    };qd.prototype = Object.create(W.prototype);qd.prototype.constructor = qd;qd.prototype.update = function () {
        var a = new n(),
            b = new n(),
            c = new pa();return function () {
            this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);var d = this.object.matrixWorld,
                e = this.geometry.attributes.position,
                f = this.object.geometry,
                g = f.vertices;f = f.faces;for (var h = 0, k = 0, l = f.length; k < l; k++) {
                var n = f[k],
                    q = n.normal;a.copy(g[n.a]).add(g[n.b]).add(g[n.c]).divideScalar(3).applyMatrix4(d);b.copy(q).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);e.setXYZ(h, a.x, a.y, a.z);h += 1;e.setXYZ(h, b.x, b.y, b.z);h += 1;
            }e.needsUpdate = !0;
        };
    }();tc.prototype = Object.create(E.prototype);tc.prototype.constructor = tc;tc.prototype.dispose = function () {
        this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();
        this.targetLine.material.dispose();
    };tc.prototype.update = function () {
        var a = new n(),
            b = new n(),
            c = new n();return function () {
            a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b, a);this.lightPlane.lookAt(b);void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color));this.targetLine.lookAt(b);
            this.targetLine.scale.z = c.length();
        };
    }();rd.prototype = Object.create(W.prototype);rd.prototype.constructor = rd;rd.prototype.update = function () {
        function a(a, g, h, k) {
            d.set(g, h, k).unproject(e);a = c[a];if (void 0 !== a) for (g = b.getAttribute("position"), h = 0, k = a.length; h < k; h++) {
                g.setXYZ(a[h], d.x, d.y, d.z);
            }
        }var b,
            c,
            d = new n(),
            e = new Va();return function () {
            b = this.geometry;c = this.pointMap;e.projectionMatrix.copy(this.camera.projectionMatrix);a("c", 0, 0, -1);a("t", 0, 0, 1);a("n1", -1, -1, -1);a("n2", 1, -1, -1);a("n3", -1, 1, -1);a("n4", 1, 1, -1);a("f1", -1, -1, 1);a("f2", 1, -1, 1);a("f3", -1, 1, 1);a("f4", 1, 1, 1);a("u1", .7, 1.1, -1);a("u2", -.7, 1.1, -1);a("u3", 0, 2, -1);a("cf1", -1, 0, 1);a("cf2", 1, 0, 1);a("cf3", 0, -1, 1);a("cf4", 0, 1, 1);a("cn1", -1, 0, -1);a("cn2", 1, 0, -1);a("cn3", 0, -1, -1);a("cn4", 0, 1, -1);b.getAttribute("position").needsUpdate = !0;
        };
    }();db.prototype = Object.create(W.prototype);db.prototype.constructor = db;db.prototype.update = function () {
        var a = new Ha();return function (b) {
            void 0 !== b && console.warn("THREE.BoxHelper: .update() has no longer arguments.");
            void 0 !== this.object && a.setFromObject(this.object);if (!a.isEmpty()) {
                b = a.min;var c = a.max,
                    d = this.geometry.attributes.position,
                    e = d.array;e[0] = c.x;e[1] = c.y;e[2] = c.z;e[3] = b.x;e[4] = c.y;e[5] = c.z;e[6] = b.x;e[7] = b.y;e[8] = c.z;e[9] = c.x;e[10] = b.y;e[11] = c.z;e[12] = c.x;e[13] = c.y;e[14] = b.z;e[15] = b.x;e[16] = c.y;e[17] = b.z;e[18] = b.x;e[19] = b.y;e[20] = b.z;e[21] = c.x;e[22] = b.y;e[23] = b.z;d.needsUpdate = !0;this.geometry.computeBoundingSphere();
            }
        };
    }();db.prototype.setFromObject = function (a) {
        this.object = a;this.update();return this;
    };
    db.prototype.copy = function (a) {
        W.prototype.copy.call(this, a);this.object = a.object;return this;
    };db.prototype.clone = function () {
        return new this.constructor().copy(this);
    };sd.prototype = Object.create(W.prototype);sd.prototype.constructor = sd;sd.prototype.updateMatrixWorld = function (a) {
        var b = this.box;b.isEmpty() || (b.getCenter(this.position), b.getSize(this.scale), this.scale.multiplyScalar(.5), E.prototype.updateMatrixWorld.call(this, a));
    };td.prototype = Object.create(da.prototype);td.prototype.constructor = td;td.prototype.updateMatrixWorld = function (a) {
        var b = -this.plane.constant;1E-8 > Math.abs(b) && (b = 1E-8);this.scale.set(.5 * this.size, .5 * this.size, b);this.children[0].material.side = 0 > b ? 1 : 0;this.lookAt(this.plane.normal);E.prototype.updateMatrixWorld.call(this, a);
    };var Xd, Ke;eb.prototype = Object.create(E.prototype);eb.prototype.constructor = eb;eb.prototype.setDirection = function () {
        var a = new n(),
            b;return function (c) {
            .99999 < c.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > c.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(c.z, 0, -c.x).normalize(), b = Math.acos(c.y), this.quaternion.setFromAxisAngle(a, b));
        };
    }();eb.prototype.setLength = function (a, b, c) {
        void 0 === b && (b = .2 * a);void 0 === c && (c = .2 * b);this.line.scale.set(1, Math.max(0, a - b), 1);this.line.updateMatrix();this.cone.scale.set(c, b, c);this.cone.position.y = a;this.cone.updateMatrix();
    };eb.prototype.setColor = function (a) {
        this.line.material.color.copy(a);this.cone.material.color.copy(a);
    };eb.prototype.copy = function (a) {
        E.prototype.copy.call(this, a, !1);this.line.copy(a.line);this.cone.copy(a.cone);return this;
    };eb.prototype.clone = function () {
        return new this.constructor().copy(this);
    };ud.prototype = Object.create(W.prototype);ud.prototype.constructor = ud;L.create = function (a, b) {
        console.log("THREE.Curve.create() has been deprecated");a.prototype = Object.create(L.prototype);a.prototype.constructor = a;a.prototype.getPoint = b;return a;
    };Object.assign(cb.prototype, { createPointsGeometry: function createPointsGeometry(a) {
            console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");a = this.getPoints(a);
            return this.createGeometry(a);
        }, createSpacedPointsGeometry: function createSpacedPointsGeometry(a) {
            console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");a = this.getSpacedPoints(a);return this.createGeometry(a);
        }, createGeometry: function createGeometry(a) {
            console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for (var b = new G(), c = 0, d = a.length; c < d; c++) {
                var e = a[c];b.vertices.push(new n(e.x, e.y, e.z || 0));
            }return b;
        } });Object.assign(Qa.prototype, { fromPoints: function fromPoints(a) {
            console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");this.setFromPoints(a);
        } });Qf.prototype = Object.create(oa.prototype);Rf.prototype = Object.create(oa.prototype);Le.prototype = Object.create(oa.prototype);Object.assign(Le.prototype, { initFromArray: function initFromArray() {
            console.error("THREE.Spline: .initFromArray() has been removed.");
        }, getControlPointsArray: function getControlPointsArray() {
            console.error("THREE.Spline: .getControlPointsArray() has been removed.");
        },
        reparametrizeByArcLength: function reparametrizeByArcLength() {
            console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
        } });pd.prototype.setColors = function () {
        console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
    };oc.prototype.update = function () {
        console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
    };Object.assign(ld.prototype, { extractUrlBase: function extractUrlBase(a) {
            console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
            return Qe.extractUrlBase(a);
        } });Object.assign(se.prototype, { setTexturePath: function setTexturePath(a) {
            console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");return this.setResourcePath(a);
        } });Object.assign(Ie.prototype, { center: function center(a) {
            console.warn("THREE.Box2: .center() has been renamed to .getCenter().");return this.getCenter(a);
        }, empty: function empty() {
            console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");return this.isEmpty();
        }, isIntersectionBox: function isIntersectionBox(a) {
            console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
            return this.intersectsBox(a);
        }, size: function size(a) {
            console.warn("THREE.Box2: .size() has been renamed to .getSize().");return this.getSize(a);
        } });Object.assign(Ha.prototype, { center: function center(a) {
            console.warn("THREE.Box3: .center() has been renamed to .getCenter().");return this.getCenter(a);
        }, empty: function empty() {
            console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");return this.isEmpty();
        }, isIntersectionBox: function isIntersectionBox(a) {
            console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
            return this.intersectsBox(a);
        }, isIntersectionSphere: function isIntersectionSphere(a) {
            console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(a);
        }, size: function size(a) {
            console.warn("THREE.Box3: .size() has been renamed to .getSize().");return this.getSize(a);
        } });Je.prototype.center = function (a) {
        console.warn("THREE.Line3: .center() has been renamed to .getCenter().");return this.getCenter(a);
    };Object.assign(H, { random16: function random16() {
            console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
            return Math.random();
        }, nearestPowerOfTwo: function nearestPowerOfTwo(a) {
            console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");return H.floorPowerOfTwo(a);
        }, nextPowerOfTwo: function nextPowerOfTwo(a) {
            console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");return H.ceilPowerOfTwo(a);
        } });Object.assign(pa.prototype, { flattenToArrayOffset: function flattenToArrayOffset(a, b) {
            console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(a, b);
        },
        multiplyVector3: function multiplyVector3(a) {
            console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this);
        }, multiplyVector3Array: function multiplyVector3Array() {
            console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
        }, applyToBuffer: function applyToBuffer(a) {
            console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");return this.applyToBufferAttribute(a);
        }, applyToVector3Array: function applyToVector3Array() {
            console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
        } });
    Object.assign(J.prototype, { extractPosition: function extractPosition(a) {
            console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");return this.copyPosition(a);
        }, flattenToArrayOffset: function flattenToArrayOffset(a, b) {
            console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(a, b);
        }, getPosition: function () {
            var a;return function () {
                void 0 === a && (a = new n());console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
                return a.setFromMatrixColumn(this, 3);
            };
        }(), setRotationFromQuaternion: function setRotationFromQuaternion(a) {
            console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");return this.makeRotationFromQuaternion(a);
        }, multiplyToArray: function multiplyToArray() {
            console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
        }, multiplyVector3: function multiplyVector3(a) {
            console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this);
        }, multiplyVector4: function multiplyVector4(a) {
            console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
            return a.applyMatrix4(this);
        }, multiplyVector3Array: function multiplyVector3Array() {
            console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
        }, rotateAxis: function rotateAxis(a) {
            console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");a.transformDirection(this);
        }, crossVector: function crossVector(a) {
            console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this);
        }, translate: function translate() {
            console.error("THREE.Matrix4: .translate() has been removed.");
        },
        rotateX: function rotateX() {
            console.error("THREE.Matrix4: .rotateX() has been removed.");
        }, rotateY: function rotateY() {
            console.error("THREE.Matrix4: .rotateY() has been removed.");
        }, rotateZ: function rotateZ() {
            console.error("THREE.Matrix4: .rotateZ() has been removed.");
        }, rotateByAxis: function rotateByAxis() {
            console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
        }, applyToBuffer: function applyToBuffer(a) {
            console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");return this.applyToBufferAttribute(a);
        },
        applyToVector3Array: function applyToVector3Array() {
            console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
        }, makeFrustum: function makeFrustum(a, b, c, d, e, f) {
            console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");return this.makePerspective(a, b, d, c, e, f);
        } });Ta.prototype.isIntersectionLine = function (a) {
        console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");return this.intersectsLine(a);
    };aa.prototype.multiplyVector3 = function (a) {
        console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this);
    };Object.assign(tb.prototype, { isIntersectionBox: function isIntersectionBox(a) {
            console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(a);
        }, isIntersectionPlane: function isIntersectionPlane(a) {
            console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");return this.intersectsPlane(a);
        }, isIntersectionSphere: function isIntersectionSphere(a) {
            console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
            return this.intersectsSphere(a);
        } });Object.assign(ua.prototype, { area: function area() {
            console.warn("THREE.Triangle: .area() has been renamed to .getArea().");return this.getArea();
        }, barycoordFromPoint: function barycoordFromPoint(a, b) {
            console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return this.getBarycoord(a, b);
        }, midpoint: function midpoint(a) {
            console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");return this.getMidpoint(a);
        }, normal: function normal(a) {
            console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
            return this.getNormal(a);
        }, plane: function plane(a) {
            console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");return this.getPlane(a);
        } });Object.assign(ua, { barycoordFromPoint: function barycoordFromPoint(a, b, c, d, e) {
            console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return ua.getBarycoord(a, b, c, d, e);
        }, normal: function normal(a, b, c, d) {
            console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");return ua.getNormal(a, b, c, d);
        } });Object.assign(kb.prototype, { extractAllPoints: function extractAllPoints(a) {
            console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
            return this.extractPoints(a);
        }, extrude: function extrude(a) {
            console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");return new yb(this, a);
        }, makeGeometry: function makeGeometry(a) {
            console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");return new Ab(this, a);
        } });Object.assign(B.prototype, { fromAttribute: function fromAttribute(a, b, c) {
            console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a, b, c);
        }, distanceToManhattan: function distanceToManhattan(a) {
            console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
            return this.manhattanDistanceTo(a);
        }, lengthManhattan: function lengthManhattan() {
            console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength();
        } });Object.assign(n.prototype, { setEulerFromRotationMatrix: function setEulerFromRotationMatrix() {
            console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
        }, setEulerFromQuaternion: function setEulerFromQuaternion() {
            console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
        },
        getPositionFromMatrix: function getPositionFromMatrix(a) {
            console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(a);
        }, getScaleFromMatrix: function getScaleFromMatrix(a) {
            console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a);
        }, getColumnFromMatrix: function getColumnFromMatrix(a, b) {
            console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(b, a);
        }, applyProjection: function applyProjection(a) {
            console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");return this.applyMatrix4(a);
        }, fromAttribute: function fromAttribute(a, b, c) {
            console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a, b, c);
        }, distanceToManhattan: function distanceToManhattan(a) {
            console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(a);
        }, lengthManhattan: function lengthManhattan() {
            console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
            return this.manhattanLength();
        } });Object.assign(ba.prototype, { fromAttribute: function fromAttribute(a, b, c) {
            console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a, b, c);
        }, lengthManhattan: function lengthManhattan() {
            console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength();
        } });Object.assign(G.prototype, { computeTangents: function computeTangents() {
            console.error("THREE.Geometry: .computeTangents() has been removed.");
        }, computeLineDistances: function computeLineDistances() {
            console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
        } });
    Object.assign(E.prototype, { getChildByName: function getChildByName(a) {
            console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(a);
        }, renderDepth: function renderDepth() {
            console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
        }, translate: function translate(a, b) {
            console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b, a);
        }, getWorldRotation: function getWorldRotation() {
            console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
        } });
    Object.defineProperties(E.prototype, { eulerOrder: { get: function get$$1() {
                console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");return this.rotation.order;
            }, set: function set$$1(a) {
                console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order = a;
            } }, useQuaternion: { get: function get$$1() {
                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
            }, set: function set$$1() {
                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
            } } });
    Object.defineProperties(Ic.prototype, { objects: { get: function get$$1() {
                console.warn("THREE.LOD: .objects has been renamed to .levels.");return this.levels;
            } } });Object.defineProperty(Cd.prototype, "useVertexTexture", { get: function get$$1() {
            console.warn("THREE.Skeleton: useVertexTexture has been removed.");
        }, set: function set$$1() {
            console.warn("THREE.Skeleton: useVertexTexture has been removed.");
        } });Jc.prototype.initBones = function () {
        console.error("THREE.SkinnedMesh: initBones() has been removed.");
    };Object.defineProperty(L.prototype, "__arcLengthDivisions", { get: function get$$1() {
            console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");return this.arcLengthDivisions;
        }, set: function set$$1(a) {
            console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");this.arcLengthDivisions = a;
        } });U.prototype.setLens = function (a, b) {
        console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");void 0 !== b && (this.filmGauge = b);this.setFocalLength(a);
    };Object.defineProperties(ia.prototype, { onlyShadow: { set: function set$$1() {
                console.warn("THREE.Light: .onlyShadow has been removed.");
            } }, shadowCameraFov: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");this.shadow.camera.fov = a;
            } }, shadowCameraLeft: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");this.shadow.camera.left = a;
            } }, shadowCameraRight: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");this.shadow.camera.right = a;
            } }, shadowCameraTop: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
                this.shadow.camera.top = a;
            } }, shadowCameraBottom: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");this.shadow.camera.bottom = a;
            } }, shadowCameraNear: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");this.shadow.camera.near = a;
            } }, shadowCameraFar: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");this.shadow.camera.far = a;
            } }, shadowCameraVisible: { set: function set$$1() {
                console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
            } },
        shadowBias: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowBias is now .shadow.bias.");this.shadow.bias = a;
            } }, shadowDarkness: { set: function set$$1() {
                console.warn("THREE.Light: .shadowDarkness has been removed.");
            } }, shadowMapWidth: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");this.shadow.mapSize.width = a;
            } }, shadowMapHeight: { set: function set$$1(a) {
                console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");this.shadow.mapSize.height = a;
            } } });Object.defineProperties(P.prototype, { length: { get: function get$$1() {
                console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");return this.array.length;
            } }, copyIndicesArray: function copyIndicesArray() {
            console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
        } });Object.assign(D.prototype, { addIndex: function addIndex(a) {
            console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(a);
        }, addDrawCall: function addDrawCall(a, b, c) {
            void 0 !== c && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
            console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(a, b);
        }, clearDrawCalls: function clearDrawCalls() {
            console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");this.clearGroups();
        }, computeTangents: function computeTangents() {
            console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
        }, computeOffsets: function computeOffsets() {
            console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
        } });Object.defineProperties(D.prototype, { drawcalls: { get: function get$$1() {
                console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
                return this.groups;
            } }, offsets: { get: function get$$1() {
                console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups;
            } } });Object.assign(Wa.prototype, { getArrays: function getArrays() {
            console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
        }, addShapeList: function addShapeList() {
            console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
        }, addShape: function addShape() {
            console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
        } });Object.defineProperties(Vd.prototype, { dynamic: { set: function set$$1() {
                console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
            } }, onUpdate: { value: function value() {
                console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");return this;
            } } });Object.defineProperties(M.prototype, { wrapAround: { get: function get$$1() {
                console.warn("THREE.Material: .wrapAround has been removed.");
            }, set: function set$$1() {
                console.warn("THREE.Material: .wrapAround has been removed.");
            } }, overdraw: { get: function get$$1() {
                console.warn("THREE.Material: .overdraw has been removed.");
            },
            set: function set$$1() {
                console.warn("THREE.Material: .overdraw has been removed.");
            } }, wrapRGB: { get: function get$$1() {
                console.warn("THREE.Material: .wrapRGB has been removed.");return new K();
            } }, shading: { get: function get$$1() {
                console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
            }, set: function set$$1(a) {
                console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading = 1 === a;
            } } });Object.defineProperties(Ka.prototype, { metal: { get: function get$$1() {
                console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
                return !1;
            }, set: function set$$1() {
                console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
            } } });Object.defineProperties(Ca.prototype, { derivatives: { get: function get$$1() {
                console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");return this.extensions.derivatives;
            }, set: function set$$1(a) {
                console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");this.extensions.derivatives = a;
            } } });Object.assign(ie.prototype, { clearTarget: function clearTarget(a, b, c, d) {
            console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");this.setRenderTarget(a);this.clear(b, c, d);
        }, animate: function animate(a) {
            console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");this.setAnimationLoop(a);
        }, getCurrentRenderTarget: function getCurrentRenderTarget() {
            console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");return this.getRenderTarget();
        }, getMaxAnisotropy: function getMaxAnisotropy() {
            console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
            return this.capabilities.getMaxAnisotropy();
        }, getPrecision: function getPrecision() {
            console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");return this.capabilities.precision;
        }, resetGLState: function resetGLState() {
            console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");return this.state.reset();
        }, supportsFloatTextures: function supportsFloatTextures() {
            console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");return this.extensions.get("OES_texture_float");
        },
        supportsHalfFloatTextures: function supportsHalfFloatTextures() {
            console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return this.extensions.get("OES_texture_half_float");
        }, supportsStandardDerivatives: function supportsStandardDerivatives() {
            console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");return this.extensions.get("OES_standard_derivatives");
        }, supportsCompressedTextureS3TC: function supportsCompressedTextureS3TC() {
            console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
            return this.extensions.get("WEBGL_compressed_texture_s3tc");
        }, supportsCompressedTexturePVRTC: function supportsCompressedTexturePVRTC() {
            console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return this.extensions.get("WEBGL_compressed_texture_pvrtc");
        }, supportsBlendMinMax: function supportsBlendMinMax() {
            console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return this.extensions.get("EXT_blend_minmax");
        }, supportsVertexTextures: function supportsVertexTextures() {
            console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
            return this.capabilities.vertexTextures;
        }, supportsInstancedArrays: function supportsInstancedArrays() {
            console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");return this.extensions.get("ANGLE_instanced_arrays");
        }, enableScissorTest: function enableScissorTest(a) {
            console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");this.setScissorTest(a);
        }, initMaterial: function initMaterial() {
            console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
        }, addPrePlugin: function addPrePlugin() {
            console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
        },
        addPostPlugin: function addPostPlugin() {
            console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
        }, updateShadowMap: function updateShadowMap() {
            console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
        }, setFaceCulling: function setFaceCulling() {
            console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
        } });Object.defineProperties(ie.prototype, { shadowMapEnabled: { get: function get$$1() {
                return this.shadowMap.enabled;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
                this.shadowMap.enabled = a;
            } }, shadowMapType: { get: function get$$1() {
                return this.shadowMap.type;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");this.shadowMap.type = a;
            } }, shadowMapCullFace: { get: function get$$1() {
                console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
            }, set: function set$$1() {
                console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
            } } });Object.defineProperties(of.prototype, { cullFace: { get: function get$$1() {
                console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
            }, set: function set$$1() {
                console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
            } }, renderReverseSided: { get: function get$$1() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
            }, set: function set$$1() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
            } },
        renderSingleSided: { get: function get$$1() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
            }, set: function set$$1() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
            } } });Object.defineProperties(mb.prototype, { activeCubeFace: { set: function set$$1() {
                console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().");
            } },
        activeMipMapLevel: { set: function set$$1() {
                console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().");
            } } });Object.defineProperties(Sa.prototype, { wrapS: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");this.texture.wrapS = a;
            } }, wrapT: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
                return this.texture.wrapT;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT = a;
            } }, magFilter: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter = a;
            } }, minFilter: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter;
            },
            set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter = a;
            } }, anisotropy: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");return this.texture.anisotropy;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy = a;
            } }, offset: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset;
            },
            set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset = a;
            } }, repeat: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");this.texture.repeat = a;
            } }, format: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");return this.texture.format;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
                this.texture.format = a;
            } }, type: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type = a;
            } }, generateMipmaps: { get: function get$$1() {
                console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");return this.texture.generateMipmaps;
            }, set: function set$$1(a) {
                console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
                this.texture.generateMipmaps = a;
            } } });Object.defineProperties(tf.prototype, { standing: { set: function set$$1() {
                console.warn("THREE.WebVRManager: .standing has been removed.");
            } }, userHeight: { set: function set$$1() {
                console.warn("THREE.WebVRManager: .userHeight has been removed.");
            } } });mc.prototype.load = function (a) {
        console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var b = this;new we().load(a, function (a) {
            b.setBuffer(a);
        });return this;
    };Be.prototype.getData = function () {
        console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
        return this.getFrequencyData();
    };md.prototype.updateCubeMap = function (a, b) {
        console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");return this.update(a, b);
    };lb.crossOrigin = void 0;lb.loadTexture = function (a, b, c, d) {
        console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var e = new Ld();e.setCrossOrigin(this.crossOrigin);a = e.load(a, c, void 0, d);b && (a.mapping = b);return a;
    };lb.loadTextureCube = function (a, b, c, d) {
        console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
        var e = new pe();e.setCrossOrigin(this.crossOrigin);a = e.load(a, c, void 0, d);b && (a.mapping = b);return a;
    };lb.loadCompressedTexture = function () {
        console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
    };lb.loadCompressedTextureCube = function () {
        console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
    };l.WebGLMultisampleRenderTarget = $d;l.WebGLRenderTargetCube = mb;l.WebGLRenderTarget = Sa;l.WebGLRenderer = ie;l.ShaderLib = Ua;l.UniformsLib = I;l.UniformsUtils = jh;l.ShaderChunk = V;l.FogExp2 = zd;l.Fog = Ad;l.Scene = Bd;l.Sprite = Hc;l.LOD = Ic;l.SkinnedMesh = Jc;l.Skeleton = Cd;l.Bone = je;l.Mesh = va;l.LineSegments = W;l.LineLoop = Dd;l.Line = da;l.Points = Vb;l.Group = Tb;l.VideoTexture = ke;l.DataTexture = nb;l.DataTexture2DArray = Qb;l.DataTexture3D = Rb;l.CompressedTexture = Wb;l.CubeTexture = $a;l.CanvasTexture = Kc;l.DepthTexture = Lc;l.Texture = S;l.AnimationLoader = Df;l.CompressedTextureLoader = Ef;l.DataTextureLoader = oe;l.CubeTextureLoader = pe;l.TextureLoader = Ld;l.ObjectLoader = se;l.MaterialLoader = Ud;l.BufferGeometryLoader = re;l.DefaultLoadingManager = Ba;l.LoadingManager = ne;l.ImageLoader = hd;l.ImageBitmapLoader = te;l.FontLoader = Gf;l.FileLoader = La;l.Loader = ld;l.LoaderUtils = Qe;l.Cache = Lb;l.AudioLoader = we;l.SpotLightShadow = Nd;l.SpotLight = Od;l.PointLight = Pd;l.RectAreaLight = Td;l.HemisphereLight = Md;l.DirectionalLightShadow = Qd;l.DirectionalLight = Rd;l.AmbientLight = Sd;l.LightShadow = Kb;l.Light = ia;l.StereoCamera = Hf;l.PerspectiveCamera = U;l.OrthographicCamera = kd;l.CubeCamera = md;l.ArrayCamera = Fc;l.Camera = Va;l.AudioListener = ye;l.PositionalAudio = Ae;l.AudioContext = ze;l.AudioAnalyser = Be;l.Audio = mc;l.VectorKeyframeTrack = kc;l.StringKeyframeTrack = Kd;l.QuaternionKeyframeTrack = gd;l.NumberKeyframeTrack = jc;l.ColorKeyframeTrack = Id;l.BooleanKeyframeTrack = Hd;l.PropertyMixer = Ce;l.PropertyBinding = ma;l.KeyframeTrack = ra;l.AnimationUtils = sa;l.AnimationObjectGroup = Jf;l.AnimationMixer = De;l.AnimationClip = Ga;l.Uniform = Vd;l.InstancedBufferGeometry = Ee;l.BufferGeometry = D;l.Geometry = G;l.InterleavedBufferAttribute = Gc;l.InstancedInterleavedBuffer = Fe;l.InterleavedBuffer = ub;l.InstancedBufferAttribute = Ge;l.Face3 = Nb;l.Object3D = E;l.Raycaster = Lf;l.Layers = be;l.EventDispatcher = ka;l.Clock = xe;l.QuaternionLinearInterpolant = Jd;l.LinearInterpolant = fd;l.DiscreteInterpolant = Gd;l.CubicInterpolant = Fd;l.Interpolant = wa;l.Triangle = ua;l.Math = H;l.Spherical = Nf;l.Cylindrical = Of;l.Plane = Ta;l.Frustum = vd;l.Sphere = Ia;l.Ray = tb;l.Matrix4 = J;l.Matrix3 = pa;l.Box3 = Ha;l.Box2 = Ie;l.Line3 = Je;l.Euler = ob;l.Vector4 = ba;l.Vector3 = n;l.Vector2 = B;l.Quaternion = aa;l.Color = K;l.ImmediateRenderObject = nd;l.VertexNormalsHelper = od;l.SpotLightHelper = nc;l.SkeletonHelper = oc;l.PointLightHelper = pc;l.RectAreaLightHelper = qc;l.HemisphereLightHelper = rc;l.GridHelper = pd;l.PolarGridHelper = Wd;l.PositionalAudioHelper = sc;l.FaceNormalsHelper = qd;l.DirectionalLightHelper = tc;l.CameraHelper = rd;l.BoxHelper = db;l.Box3Helper = sd;l.PlaneHelper = td;l.ArrowHelper = eb;l.AxesHelper = ud;l.Shape = kb;l.Path = Qa;l.ShapePath = ue;l.Font = ve;l.CurvePath = cb;l.Curve = L;l.ImageUtils = lb;l.ShapeUtils = ab;l.WebGLUtils = pf;l.WireframeGeometry = Xb;l.ParametricGeometry = Mc;l.ParametricBufferGeometry = Yb;l.TetrahedronGeometry = Oc;l.TetrahedronBufferGeometry = Zb;l.OctahedronGeometry = Pc;l.OctahedronBufferGeometry = vb;l.IcosahedronGeometry = Qc;l.IcosahedronBufferGeometry = $b;l.DodecahedronGeometry = Rc;l.DodecahedronBufferGeometry = ac;l.PolyhedronGeometry = Nc;l.PolyhedronBufferGeometry = Aa;l.TubeGeometry = Sc;l.TubeBufferGeometry = wb;l.TorusKnotGeometry = Tc;l.TorusKnotBufferGeometry = bc;l.TorusGeometry = Uc;l.TorusBufferGeometry = cc;l.TextGeometry = Zc;l.TextBufferGeometry = dc;l.SphereGeometry = $c;l.SphereBufferGeometry = zb;l.RingGeometry = ad;l.RingBufferGeometry = ec;l.PlaneGeometry = Cc;l.PlaneBufferGeometry = sb;l.LatheGeometry = bd;l.LatheBufferGeometry = fc;l.ShapeGeometry = Ab;l.ShapeBufferGeometry = Bb;l.ExtrudeGeometry = yb;l.ExtrudeBufferGeometry = Wa;l.EdgesGeometry = gc;l.ConeGeometry = cd;l.ConeBufferGeometry = dd;l.CylinderGeometry = Cb;l.CylinderBufferGeometry = bb;l.CircleGeometry = ed;l.CircleBufferGeometry = hc;l.BoxGeometry = Ob;l.CubeGeometry = Ob;l.BoxBufferGeometry = rb;l.ShadowMaterial = Db;l.SpriteMaterial = jb;l.RawShaderMaterial = ic;l.ShaderMaterial = Ca;l.PointsMaterial = Ja;l.MeshPhysicalMaterial = Eb;l.MeshStandardMaterial = Xa;l.MeshPhongMaterial = Ka;l.MeshToonMaterial = Fb;l.MeshNormalMaterial = Gb;l.MeshLambertMaterial = Hb;l.MeshDepthMaterial = gb;l.MeshDistanceMaterial = hb;l.MeshBasicMaterial = ya;l.MeshMatcapMaterial = Ib;l.LineDashedMaterial = Jb;l.LineBasicMaterial = R;l.Material = M;l.Float64BufferAttribute = Ac;l.Float32BufferAttribute = F;l.Uint32BufferAttribute = qb;l.Int32BufferAttribute = zc;l.Uint16BufferAttribute = pb;l.Int16BufferAttribute = yc;l.Uint8ClampedBufferAttribute = xc;l.Uint8BufferAttribute = wc;l.Int8BufferAttribute = vc;l.BufferAttribute = P;l.ArcCurve = lc;l.CatmullRomCurve3 = oa;l.CubicBezierCurve = Ma;l.CubicBezierCurve3 = Ya;l.EllipseCurve = Ea;l.LineCurve = ja;l.LineCurve3 = Na;l.QuadraticBezierCurve = Oa;l.QuadraticBezierCurve3 = Za;l.SplineCurve = Pa;l.REVISION = "103dev";l.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };l.CullFaceNone = 0;l.CullFaceBack = 1;l.CullFaceFront = 2;l.CullFaceFrontBack = 3;l.FrontFaceDirectionCW = 0;l.FrontFaceDirectionCCW = 1;l.BasicShadowMap = 0;l.PCFShadowMap = 1;l.PCFSoftShadowMap = 2;l.FrontSide = 0;l.BackSide = 1;l.DoubleSide = 2;l.FlatShading = 1;l.SmoothShading = 2;l.NoColors = 0;l.FaceColors = 1;l.VertexColors = 2;l.NoBlending = 0;l.NormalBlending = 1;l.AdditiveBlending = 2;l.SubtractiveBlending = 3;l.MultiplyBlending = 4;l.CustomBlending = 5;l.AddEquation = 100;l.SubtractEquation = 101;l.ReverseSubtractEquation = 102;l.MinEquation = 103;l.MaxEquation = 104;l.ZeroFactor = 200;l.OneFactor = 201;l.SrcColorFactor = 202;l.OneMinusSrcColorFactor = 203;l.SrcAlphaFactor = 204;l.OneMinusSrcAlphaFactor = 205;l.DstAlphaFactor = 206;l.OneMinusDstAlphaFactor = 207;l.DstColorFactor = 208;l.OneMinusDstColorFactor = 209;l.SrcAlphaSaturateFactor = 210;l.NeverDepth = 0;l.AlwaysDepth = 1;l.LessDepth = 2;l.LessEqualDepth = 3;l.EqualDepth = 4;l.GreaterEqualDepth = 5;l.GreaterDepth = 6;l.NotEqualDepth = 7;l.MultiplyOperation = 0;l.MixOperation = 1;l.AddOperation = 2;l.NoToneMapping = 0;l.LinearToneMapping = 1;l.ReinhardToneMapping = 2;l.Uncharted2ToneMapping = 3;l.CineonToneMapping = 4;l.ACESFilmicToneMapping = 5;l.UVMapping = 300;l.CubeReflectionMapping = 301;l.CubeRefractionMapping = 302;l.EquirectangularReflectionMapping = 303;l.EquirectangularRefractionMapping = 304;l.SphericalReflectionMapping = 305;l.CubeUVReflectionMapping = 306;l.CubeUVRefractionMapping = 307;l.RepeatWrapping = 1E3;l.ClampToEdgeWrapping = 1001;l.MirroredRepeatWrapping = 1002;l.NearestFilter = 1003;l.NearestMipMapNearestFilter = 1004;l.NearestMipMapLinearFilter = 1005;l.LinearFilter = 1006;l.LinearMipMapNearestFilter = 1007;l.LinearMipMapLinearFilter = 1008;l.UnsignedByteType = 1009;l.ByteType = 1010;l.ShortType = 1011;l.UnsignedShortType = 1012;l.IntType = 1013;l.UnsignedIntType = 1014;l.FloatType = 1015;l.HalfFloatType = 1016;l.UnsignedShort4444Type = 1017;l.UnsignedShort5551Type = 1018;l.UnsignedShort565Type = 1019;l.UnsignedInt248Type = 1020;l.AlphaFormat = 1021;l.RGBFormat = 1022;l.RGBAFormat = 1023;l.LuminanceFormat = 1024;l.LuminanceAlphaFormat = 1025;l.RGBEFormat = 1023;l.DepthFormat = 1026;l.DepthStencilFormat = 1027;l.RedFormat = 1028;l.RGB_S3TC_DXT1_Format = 33776;l.RGBA_S3TC_DXT1_Format = 33777;l.RGBA_S3TC_DXT3_Format = 33778;l.RGBA_S3TC_DXT5_Format = 33779;l.RGB_PVRTC_4BPPV1_Format = 35840;l.RGB_PVRTC_2BPPV1_Format = 35841;l.RGBA_PVRTC_4BPPV1_Format = 35842;l.RGBA_PVRTC_2BPPV1_Format = 35843;l.RGB_ETC1_Format = 36196;l.RGBA_ASTC_4x4_Format = 37808;l.RGBA_ASTC_5x4_Format = 37809;l.RGBA_ASTC_5x5_Format = 37810;l.RGBA_ASTC_6x5_Format = 37811;l.RGBA_ASTC_6x6_Format = 37812;l.RGBA_ASTC_8x5_Format = 37813;l.RGBA_ASTC_8x6_Format = 37814;l.RGBA_ASTC_8x8_Format = 37815;l.RGBA_ASTC_10x5_Format = 37816;l.RGBA_ASTC_10x6_Format = 37817;l.RGBA_ASTC_10x8_Format = 37818;l.RGBA_ASTC_10x10_Format = 37819;l.RGBA_ASTC_12x10_Format = 37820;l.RGBA_ASTC_12x12_Format = 37821;l.LoopOnce = 2200;l.LoopRepeat = 2201;l.LoopPingPong = 2202;l.InterpolateDiscrete = 2300;l.InterpolateLinear = 2301;l.InterpolateSmooth = 2302;l.ZeroCurvatureEnding = 2400;l.ZeroSlopeEnding = 2401;l.WrapAroundEnding = 2402;l.TrianglesDrawMode = 0;l.TriangleStripDrawMode = 1;l.TriangleFanDrawMode = 2;l.LinearEncoding = 3E3;l.sRGBEncoding = 3001;l.GammaEncoding = 3007;l.RGBEEncoding = 3002;l.LogLuvEncoding = 3003;l.RGBM7Encoding = 3004;
    l.RGBM16Encoding = 3005;l.RGBDEncoding = 3006;l.BasicDepthPacking = 3200;l.RGBADepthPacking = 3201;l.TangentSpaceNormalMap = 0;l.ObjectSpaceNormalMap = 1;l.Face4 = function (a, b, c, d, e, f, g) {
        console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new Nb(a, b, c, e, f, g);
    };l.LineStrip = 0;l.LinePieces = 1;l.MeshFaceMaterial = function (a) {
        console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");return a;
    };l.MultiMaterial = function (a) {
        void 0 === a && (a = []);console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
        a.isMultiMaterial = !0;a.materials = a;a.clone = function () {
            return a.slice();
        };return a;
    };l.PointCloud = function (a, b) {
        console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new Vb(a, b);
    };l.Particle = function (a) {
        console.warn("THREE.Particle has been renamed to THREE.Sprite.");return new Hc(a);
    };l.ParticleSystem = function (a, b) {
        console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");return new Vb(a, b);
    };l.PointCloudMaterial = function (a) {
        console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
        return new Ja(a);
    };l.ParticleBasicMaterial = function (a) {
        console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new Ja(a);
    };l.ParticleSystemMaterial = function (a) {
        console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new Ja(a);
    };l.Vertex = function (a, b, c) {
        console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");return new n(a, b, c);
    };l.DynamicBufferAttribute = function (a, b) {
        console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");
        return new P(a, b).setDynamic(!0);
    };l.Int8Attribute = function (a, b) {
        console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");return new vc(a, b);
    };l.Uint8Attribute = function (a, b) {
        console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");return new wc(a, b);
    };l.Uint8ClampedAttribute = function (a, b) {
        console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");return new xc(a, b);
    };l.Int16Attribute = function (a, b) {
        console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");return new yc(a, b);
    };l.Uint16Attribute = function (a, b) {
        console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");return new pb(a, b);
    };l.Int32Attribute = function (a, b) {
        console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");return new zc(a, b);
    };l.Uint32Attribute = function (a, b) {
        console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
        return new qb(a, b);
    };l.Float32Attribute = function (a, b) {
        console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");return new F(a, b);
    };l.Float64Attribute = function (a, b) {
        console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");return new Ac(a, b);
    };l.ClosedSplineCurve3 = Qf;l.SplineCurve3 = Rf;l.Spline = Le;l.AxisHelper = function (a) {
        console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");return new ud(a);
    };
    l.BoundingBoxHelper = function (a, b) {
        console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");return new db(a, b);
    };l.EdgesHelper = function (a, b) {
        console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");return new W(new gc(a.geometry), new R({ color: void 0 !== b ? b : 16777215 }));
    };l.WireframeHelper = function (a, b) {
        console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");return new W(new Xb(a.geometry), new R({ color: void 0 !== b ? b : 16777215 }));
    };l.XHRLoader = function (a) {
        console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");return new La(a);
    };l.BinaryTextureLoader = function (a) {
        console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");return new oe(a);
    };l.GeometryUtils = { merge: function merge(a, b, c) {
            console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");if (b.isMesh) {
                b.matrixAutoUpdate && b.updateMatrix();
                var d = b.matrix;b = b.geometry;
            }a.merge(b, d, c);
        }, center: function center(a) {
            console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center();
        } };l.Projector = function () {
        console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");this.projectVector = function (a, b) {
            console.warn("THREE.Projector: .projectVector() is now vector.project().");a.project(b);
        };this.unprojectVector = function (a, b) {
            console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");
            a.unproject(b);
        };this.pickingRay = function () {
            console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
        };
    };l.CanvasRenderer = function () {
        console.error("THREE.CanvasRenderer has been removed");
    };l.JSONLoader = function () {
        console.error("THREE.JSONLoader has been removed.");
    };l.SceneUtils = { createMultiMaterialObject: function createMultiMaterialObject() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
        }, detach: function detach() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
        },
        attach: function attach() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
        } };l.LensFlare = function () {
        console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js");
    };Object.defineProperty(l, "__esModule", { value: !0 });
});
// three.js ends

(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
            }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
                var n = t[o][1][e];return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }return n[o].exports;
    }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
        s(r[o]);
    }return s;
})({ 1: [function (require, module, exports) {

        Object.defineProperty(exports, '__esModule', { value: true });

        function intervalometer(cb, request, cancel, requestParameter) {
            var requestId;
            var previousLoopTime;
            function loop(now) {
                // must be requested before cb() because that might call .stop()
                requestId = request(loop, requestParameter);

                // called with "ms since last call". 0 on start()
                cb(now - (previousLoopTime || now));

                previousLoopTime = now;
            }
            return {
                start: function start() {
                    if (!requestId) {
                        // prevent double starts
                        loop(0);
                    }
                },
                stop: function stop() {
                    cancel(requestId);
                    requestId = null;
                    previousLoopTime = 0;
                }
            };
        }

        function frameIntervalometer(cb) {
            return intervalometer(cb, requestAnimationFrame, cancelAnimationFrame);
        }

        function timerIntervalometer(cb, delay) {
            return intervalometer(cb, setTimeout, clearTimeout, delay);
        }

        exports.intervalometer = intervalometer;
        exports.frameIntervalometer = frameIntervalometer;
        exports.timerIntervalometer = timerIntervalometer;
    }, {}], 2: [function (require, module, exports) {

        function _interopDefault(ex) {
            return ex && (typeof ex === "undefined" ? "undefined" : _typeof(ex)) === 'object' && 'default' in ex ? ex['default'] : ex;
        }

        var _Symbol = _interopDefault(require('poor-mans-symbol'));
        var intervalometer = require('intervalometer');

        function preventEvent(element, eventName, toggleProperty, preventWithProperty) {
            function handler(e) {
                if (Boolean(element[toggleProperty]) === Boolean(preventWithProperty)) {
                    e.stopImmediatePropagation();
                    // console.log(eventName, 'prevented on', element);
                }
                delete element[toggleProperty];
            }
            element.addEventListener(eventName, handler, false);

            // Return handler to allow to disable the prevention. Usage:
            // const preventionHandler = preventEvent(el, 'click');
            // el.removeEventHandler('click', preventionHandler);
            return handler;
        }

        function proxyProperty(object, propertyName, sourceObject, copyFirst) {
            function get$$1() {
                return sourceObject[propertyName];
            }
            function set$$1(value) {
                sourceObject[propertyName] = value;
            }

            if (copyFirst) {
                set$$1(object[propertyName]);
            }

            Object.defineProperty(object, propertyName, { get: get$$1, set: set$$1 });
        }

        function proxyEvent(object, eventName, sourceObject) {
            sourceObject.addEventListener(eventName, function () {
                return object.dispatchEvent(new Event(eventName));
            });
        }

        function dispatchEventAsync(element, type) {
            Promise.resolve().then(function () {
                element.dispatchEvent(new Event(type));
            });
        }

        // iOS 10 adds support for native inline playback + silent autoplay
        var isWhitelisted = 'object-fit' in document.head.style && /iPhone|iPod/i.test(navigator.userAgent) && !matchMedia('(-webkit-video-playable-inline)').matches;

        var symevent = _Symbol();
        var symplay = _Symbol('nativeplay');
        var sympause = _Symbol('nativepause');

        /**
         * UTILS
         */

        function getAudioFromVideo(video) {
            var audio = new Audio();
            proxyEvent(video, 'play', audio);
            proxyEvent(video, 'playing', audio);
            proxyEvent(video, 'pause', audio);
            audio.crossOrigin = video.crossOrigin;

            // 'data:' causes audio.networkState > 0
            // which then allows to keep <audio> in a resumable playing state
            // i.e. once you set a real src it will keep playing if it was if .play() was called
            audio.src = video.src || video.currentSrc || 'data:';

            // if (audio.src === 'data:') {
            //   TODO: wait for video to be selected
            // }
            return audio;
        }

        var lastRequests = [];
        var requestIndex = 0;
        var lastTimeupdateEvent;

        function setTime(video, time, rememberOnly) {
            // allow one timeupdate event every 200+ ms
            if ((lastTimeupdateEvent || 0) + 200 < Date.now()) {
                video[symevent] = true;
                lastTimeupdateEvent = Date.now();
            }
            if (!rememberOnly) {
                video.currentTime = time;
            }
            lastRequests[++requestIndex % 3] = time * 100 | 0 / 100;
        }

        function isPlayerEnded(player) {
            return player.driver.currentTime >= player.video.duration;
        }

        function update(timeDiff) {
            var player = this;
            // console.log('update', player.video.readyState, player.video.networkState, player.driver.readyState, player.driver.networkState, player.driver.paused);
            if (player.video.readyState >= player.video.HAVE_FUTURE_DATA) {
                if (!player.hasAudio) {
                    player.driver.currentTime = player.video.currentTime + timeDiff * player.video.playbackRate / 1000;
                    if (player.video.loop && isPlayerEnded(player)) {
                        player.driver.currentTime = 0;
                    }
                }
                setTime(player.video, player.driver.currentTime);
            } else if (player.video.networkState === player.video.NETWORK_IDLE && !player.video.buffered.length) {
                // this should happen when the source is available but:
                // - it's potentially playing (.paused === false)
                // - it's not ready to play
                // - it's not loading
                // If it hasAudio, that will be loaded in the 'emptied' handler below
                player.video.load();
                // console.log('Will load');
            }

            // console.assert(player.video.currentTime === player.driver.currentTime, 'Video not updating!');

            if (player.video.ended) {
                delete player.video[symevent]; // allow timeupdate event
                player.video.pause(true);
            }
        }

        /**
         * METHODS
         */

        function play() {
            // console.log('play');
            var video = this;
            var player = video[symevent];

            // if it's fullscreen, use the native player
            if (video.webkitDisplayingFullscreen) {
                video[symplay]();
                return;
            }

            if (player.driver.src !== 'data:' && player.driver.src !== video.src) {
                // console.log('src changed on play', video.src);
                setTime(video, 0, true);
                player.driver.src = video.src;
            }

            if (!video.paused) {
                return;
            }
            player.paused = false;

            if (!video.buffered.length) {
                // .load() causes the emptied event
                // the alternative is .play()+.pause() but that triggers play/pause events, even worse
                // possibly the alternative is preventing this event only once
                video.load();
            }

            player.driver.play();
            player.updater.start();

            if (!player.hasAudio) {
                dispatchEventAsync(video, 'play');
                if (player.video.readyState >= player.video.HAVE_ENOUGH_DATA) {
                    // console.log('onplay');
                    dispatchEventAsync(video, 'playing');
                }
            }
        }
        function pause(forceEvents) {
            // console.log('pause');
            var video = this;
            var player = video[symevent];

            player.driver.pause();
            player.updater.stop();

            // if it's fullscreen, the developer the native player.pause()
            // This is at the end of pause() because it also
            // needs to make sure that the simulation is paused
            if (video.webkitDisplayingFullscreen) {
                video[sympause]();
            }

            if (player.paused && !forceEvents) {
                return;
            }

            player.paused = true;
            if (!player.hasAudio) {
                dispatchEventAsync(video, 'pause');
            }
            if (video.ended) {
                video[symevent] = true;
                dispatchEventAsync(video, 'ended');
            }
        }

        /**
         * SETUP
         */

        function addPlayer(video, hasAudio) {
            var player = video[symevent] = {};
            player.paused = true; // track whether 'pause' events have been fired
            player.hasAudio = hasAudio;
            player.video = video;
            player.updater = intervalometer.frameIntervalometer(update.bind(player));

            if (hasAudio) {
                player.driver = getAudioFromVideo(video);
            } else {
                video.addEventListener('canplay', function () {
                    if (!video.paused) {
                        // console.log('oncanplay');
                        dispatchEventAsync(video, 'playing');
                    }
                });
                player.driver = {
                    src: video.src || video.currentSrc || 'data:',
                    muted: true,
                    paused: true,
                    pause: function pause() {
                        player.driver.paused = true;
                    },
                    play: function play() {
                        player.driver.paused = false;
                        // media automatically goes to 0 if .play() is called when it's done
                        if (isPlayerEnded(player)) {
                            setTime(video, 0);
                        }
                    },
                    get ended() {
                        return isPlayerEnded(player);
                    }
                };
            }

            // .load() causes the emptied event
            video.addEventListener('emptied', function () {
                // console.log('driver src is', player.driver.src);
                var wasEmpty = !player.driver.src || player.driver.src === 'data:';
                if (player.driver.src && player.driver.src !== video.src) {
                    // console.log('src changed to', video.src);
                    setTime(video, 0, true);
                    player.driver.src = video.src;
                    // playing videos will only keep playing if no src was present when .play()’ed
                    if (wasEmpty) {
                        player.driver.play();
                    } else {
                        player.updater.stop();
                    }
                }
            }, false);

            // stop programmatic player when OS takes over
            video.addEventListener('webkitbeginfullscreen', function () {
                if (!video.paused) {
                    // make sure that the <audio> and the syncer/updater are stopped
                    video.pause();

                    // play video natively
                    video[symplay]();
                } else if (hasAudio && !player.driver.buffered.length) {
                    // if the first play is native,
                    // the <audio> needs to be buffered manually
                    // so when the fullscreen ends, it can be set to the same current time
                    player.driver.load();
                }
            });
            if (hasAudio) {
                video.addEventListener('webkitendfullscreen', function () {
                    // sync audio to new video position
                    player.driver.currentTime = video.currentTime;
                    // console.assert(player.driver.currentTime === video.currentTime, 'Audio not synced');
                });

                // allow seeking
                video.addEventListener('seeking', function () {
                    if (lastRequests.indexOf(video.currentTime * 100 | 0 / 100) < 0) {
                        // console.log('User-requested seeking');
                        player.driver.currentTime = video.currentTime;
                    }
                });
            }
        }

        function overloadAPI(video) {
            var player = video[symevent];
            video[symplay] = video.play;
            video[sympause] = video.pause;
            video.play = play;
            video.pause = pause;
            proxyProperty(video, 'paused', player.driver);
            proxyProperty(video, 'muted', player.driver, true);
            proxyProperty(video, 'playbackRate', player.driver, true);
            proxyProperty(video, 'ended', player.driver);
            proxyProperty(video, 'loop', player.driver, true);
            preventEvent(video, 'seeking');
            preventEvent(video, 'seeked');
            preventEvent(video, 'timeupdate', symevent, false);
            preventEvent(video, 'ended', symevent, false); // prevent occasional native ended events
        }

        function enableInlineVideo(video, hasAudio, onlyWhitelisted) {
            if (hasAudio === void 0) hasAudio = true;
            if (onlyWhitelisted === void 0) onlyWhitelisted = true;

            if (onlyWhitelisted && !isWhitelisted || video[symevent]) {
                return;
            }
            addPlayer(video, hasAudio);
            overloadAPI(video);
            video.classList.add('IIV');
            if (!hasAudio && video.autoplay) {
                video.play();
            }
            if (!/iPhone|iPod|iPad/.test(navigator.platform)) {
                console.warn('iphone-inline-video is not guaranteed to work in emulated environments');
            }
        }

        enableInlineVideo.isWhitelisted = isWhitelisted;

        module.exports = enableInlineVideo;
    }, { "intervalometer": 1, "poor-mans-symbol": 3 }], 3: [function (require, module, exports) {

        var index = typeof Symbol === 'undefined' ? function (description) {
            return '@' + (description || '@') + Math.random();
        } : Symbol;

        module.exports = index;
    }, {}], 4: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _Detector = require('../lib/Detector');

        var _Detector2 = _interopRequireDefault(_Detector);

        var _MobileBuffering = require('../lib/MobileBuffering');

        var _MobileBuffering2 = _interopRequireDefault(_MobileBuffering);

        var _Util = require('../lib/Util');

        var _Util2 = _interopRequireDefault(_Util);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }

        var HAVE_CURRENT_DATA = 2;

        var BaseCanvas = function BaseCanvas(baseComponent, THREE) {
            var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return {
                constructor: function init(player, options) {
                    this.settings = options;
                    //basic settings
                    this.width = player.el().offsetWidth, this.height = player.el().offsetHeight;
                    this.lon = options.initLon, this.lat = options.initLat, this.phi = 0, this.theta = 0;
                    this.videoType = options.videoType;
                    this.clickToToggle = options.clickToToggle;
                    this.mouseDown = false;
                    this.isUserInteracting = false;

                    //define render
                    this.renderer = new THREE.WebGLRenderer();
                    this.renderer.setPixelRatio(window.devicePixelRatio);
                    this.renderer.setSize(this.width, this.height);
                    this.renderer.autoClear = false;
                    this.renderer.setClearColor(0x000000, 1);

                    //define texture, on ie 11, we need additional helper canvas to solve rendering issue.
                    var video = settings.getTech(player);
                    this.supportVideoTexture = _Detector2.default.supportVideoTexture();
                    this.liveStreamOnSafari = _Detector2.default.isLiveStreamOnSafari(video);
                    if (this.liveStreamOnSafari) this.supportVideoTexture = false;
                    if (!this.supportVideoTexture) {
                        this.helperCanvas = player.addChild("HelperCanvas", {
                            video: video,
                            width: options.helperCanvas.width ? options.helperCanvas.width : this.width,
                            height: options.helperCanvas.height ? options.helperCanvas.height : this.height
                        });
                        var context = this.helperCanvas.el();
                        this.texture = new THREE.Texture(context);
                    } else {
                        this.texture = new THREE.Texture(video);
                    }

                    video.style.visibility = "hidden";

                    this.texture.generateMipmaps = false;
                    this.texture.minFilter = THREE.LinearFilter;
                    this.texture.maxFilter = THREE.LinearFilter;
                    this.texture.format = THREE.RGBFormat;

                    this.el_ = this.renderer.domElement;
                    this.el_.classList.add('play-video-canvas');

                    options.el = this.el_;
                    baseComponent.call(this, player, options);

                    this.attachControlEvents();
                    this.player().on("play", function () {
                        this.time = new Date().getTime();
                        this.startAnimation();
                    }.bind(this));
                },

                attachControlEvents: function attachControlEvents() {
                    this.on('mousemove', this.handleMouseMove.bind(this));
                    this.on('touchmove', this.handleTouchMove.bind(this));
                    this.on('mousedown', this.handleMouseDown.bind(this));
                    this.on('touchstart', this.handleTouchStart.bind(this));
                    this.on('mouseup', this.handleMouseUp.bind(this));
                    this.on('touchend', this.handleTouchEnd.bind(this));
                    if (this.settings.scrollable) {
                        this.on('mousewheel', this.handleMouseWheel.bind(this));
                        this.on('MozMousePixelScroll', this.handleMouseWheel.bind(this));
                    }
                    this.on('mouseenter', this.handleMouseEnter.bind(this));
                    this.on('mouseleave', this.handleMouseLease.bind(this));
                    this.on('dispose', this.handleDispose.bind(this));
                },

                handleDispose: function handleDispose(event) {
                    this.off('mousemove', this.handleMouseMove.bind(this));
                    this.off('touchmove', this.handleTouchMove.bind(this));
                    this.off('mousedown', this.handleMouseDown.bind(this));
                    this.off('touchstart', this.handleTouchStart.bind(this));
                    this.off('mouseup', this.handleMouseUp.bind(this));
                    this.off('touchend', this.handleTouchEnd.bind(this));
                    if (this.settings.scrollable) {
                        this.off('mousewheel', this.handleMouseWheel.bind(this));
                        this.off('MozMousePixelScroll', this.handleMouseWheel.bind(this));
                    }
                    this.off('mouseenter', this.handleMouseEnter.bind(this));
                    this.off('mouseleave', this.handleMouseLease.bind(this));
                    this.off('dispose', this.handleDispose.bind(this));
                    this.stopAnimation();
                },

                startAnimation: function startAnimation() {
                    this.render_animation = true;
                    this.animate();
                },

                stopAnimation: function stopAnimation() {
                    this.render_animation = false;
                    if (this.requestAnimationId) {
                        cancelAnimationFrame(this.requestAnimationId);
                    }
                },

                handleResize: function handleResize() {
                    this.width = this.player().el().offsetWidth, this.height = this.player().el().offsetHeight;
                    this.renderer.setSize(this.width, this.height);
                },

                handleMouseUp: function handleMouseUp(event) {
                    this.mouseDown = false;
                    if (this.clickToToggle) {
                        var clientX = event.clientX || event.changedTouches && event.changedTouches[0].clientX;
                        var clientY = event.clientY || event.changedTouches && event.changedTouches[0].clientY;
                        if (typeof clientX === "undefined" || clientY === "undefined") return;
                        var diffX = Math.abs(clientX - this.onPointerDownPointerX);
                        var diffY = Math.abs(clientY - this.onPointerDownPointerY);
                        if (diffX < 0.1 && diffY < 0.1) this.player().paused() ? this.player().play() : this.player().pause();
                    }
                },

                handleMouseDown: function handleMouseDown(event) {
                    event.preventDefault();
                    var clientX = event.clientX || event.touches && event.touches[0].clientX;
                    var clientY = event.clientY || event.touches && event.touches[0].clientY;
                    if (typeof clientX === "undefined" || clientY === "undefined") return;
                    this.mouseDown = true;
                    this.onPointerDownPointerX = clientX;
                    this.onPointerDownPointerY = clientY;
                    this.onPointerDownLon = this.lon;
                    this.onPointerDownLat = this.lat;
                },

                handleTouchStart: function handleTouchStart(event) {
                    if (event.touches.length > 1) {
                        this.isUserPinch = true;
                        this.multiTouchDistance = _Util2.default.getTouchesDistance(event.touches);
                    }
                    this.handleMouseDown(event);
                },

                handleTouchEnd: function handleTouchEnd(event) {
                    this.isUserPinch = false;
                    this.handleMouseUp(event);
                },

                handleMouseMove: function handleMouseMove(event) {
                    var clientX = event.clientX || event.touches && event.touches[0].clientX;
                    var clientY = event.clientY || event.touches && event.touches[0].clientY;
                    if (typeof clientX === "undefined" || clientY === "undefined") return;
                    if (this.settings.clickAndDrag) {
                        if (this.mouseDown) {
                            this.lon = (this.onPointerDownPointerX - clientX) * 0.2 + this.onPointerDownLon;
                            this.lat = (clientY - this.onPointerDownPointerY) * 0.2 + this.onPointerDownLat;
                        }
                    } else {
                        var x = clientX - this.el_.offsetLeft;
                        var y = clientY - this.el_.offsetTop;
                        this.lon = x / this.width * 430 - 225;
                        this.lat = y / this.height * -180 + 90;
                    }
                },

                handleTouchMove: function handleTouchMove(event) {
                    //handle single touch event,
                    if (!this.isUserPinch || event.touches.length <= 1) {
                        this.handleMouseMove(event);
                    }
                },

                handleMobileOrientation: function handleMobileOrientation(event) {
                    if (typeof event.rotationRate === "undefined") return;
                    var x = event.rotationRate.alpha;
                    var y = event.rotationRate.beta;
                    var portrait = typeof event.portrait !== "undefined" ? event.portrait : window.matchMedia("(orientation: portrait)").matches;
                    var landscape = typeof event.landscape !== "undefined" ? event.landscape : window.matchMedia("(orientation: landscape)").matches;
                    var orientation = event.orientation || window.orientation;

                    if (portrait) {
                        this.lon = this.lon - y * this.settings.mobileVibrationValue;
                        this.lat = this.lat + x * this.settings.mobileVibrationValue;
                    } else if (landscape) {
                        var orientationDegree = -90;
                        if (typeof orientation != "undefined") {
                            orientationDegree = orientation;
                        }

                        this.lon = orientationDegree == -90 ? this.lon + x * this.settings.mobileVibrationValue : this.lon - x * this.settings.mobileVibrationValue;
                        this.lat = orientationDegree == -90 ? this.lat + y * this.settings.mobileVibrationValue : this.lat - y * this.settings.mobileVibrationValue;
                    }
                },

                handleMouseWheel: function handleMouseWheel(event) {
                    event.stopPropagation();
                    event.preventDefault();
                },

                handleMouseEnter: function handleMouseEnter(event) {
                    this.isUserInteracting = true;
                },

                handleMouseLease: function handleMouseLease(event) {
                    this.isUserInteracting = false;
                    if (this.mouseDown) {
                        this.mouseDown = false;
                    }
                },

                animate: function animate() {
                    if (!this.render_animation) return;
                    this.requestAnimationId = requestAnimationFrame(this.animate.bind(this));
                    if (!this.player().paused()) {
                        if (typeof this.texture !== "undefined" && (!this.isPlayOnMobile && this.player().readyState() >= HAVE_CURRENT_DATA || this.isPlayOnMobile && this.player().hasClass("play-playing"))) {
                            var ct = new Date().getTime();
                            if (ct - this.time >= 30) {
                                this.texture.needsUpdate = true;
                                this.time = ct;
                            }
                            if (this.isPlayOnMobile) {
                                var currentTime = this.player().currentTime();
                                if (_MobileBuffering2.default.isBuffering(currentTime)) {
                                    if (!this.player().hasClass("play-panorama-mobile-inline-video-buffering")) {
                                        this.player().addClass("play-panorama-mobile-inline-video-buffering");
                                    }
                                } else {
                                    if (this.player().hasClass("play-panorama-mobile-inline-video-buffering")) {
                                        this.player().removeClass("play-panorama-mobile-inline-video-buffering");
                                    }
                                }
                            }
                        }
                    }
                    this.render();
                },

                render: function render() {
                    if (!this.isUserInteracting) {
                        var symbolLat = this.lat > this.settings.initLat ? -1 : 1;
                        var symbolLon = this.lon > this.settings.initLon ? -1 : 1;
                        if (this.settings.backToVerticalCenter) {
                            this.lat = this.lat > this.settings.initLat - Math.abs(this.settings.returnStepLat) && this.lat < this.settings.initLat + Math.abs(this.settings.returnStepLat) ? this.settings.initLat : this.lat + this.settings.returnStepLat * symbolLat;
                        }
                        if (this.settings.backToHorizonCenter) {
                            this.lon = this.lon > this.settings.initLon - Math.abs(this.settings.returnStepLon) && this.lon < this.settings.initLon + Math.abs(this.settings.returnStepLon) ? this.settings.initLon : this.lon + this.settings.returnStepLon * symbolLon;
                        }
                    }
                    this.lat = Math.max(this.settings.minLat, Math.min(this.settings.maxLat, this.lat));
                    this.lon = Math.max(this.settings.minLon, Math.min(this.settings.maxLon, this.lon));
                    this.phi = THREE.Math.degToRad(90 - this.lat);
                    this.theta = THREE.Math.degToRad(this.lon);

                    if (!this.supportVideoTexture) {
                        this.helperCanvas.update();
                    }
                    this.renderer.clear();
                },

                playOnMobile: function playOnMobile() {
                    this.isPlayOnMobile = true;
                    if (this.settings.autoMobileOrientation) window.addEventListener('devicemotion', this.handleMobileOrientation.bind(this));
                },

                el: function el() {
                    return this.el_;
                }
            };
        };

        exports.default = BaseCanvas;
    }, { "../lib/Detector": 6, "../lib/MobileBuffering": 8, "../lib/Util": 11 }], 5: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _BaseCanvas = require('./BaseCanvas');

        var _BaseCanvas2 = _interopRequireDefault(_BaseCanvas);

        var _Util = require('./Util');

        var _Util2 = _interopRequireDefault(_Util);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }

        /**
         * Created by yanwsh on 4/3/16.
         */

        var Canvas = function Canvas(baseComponent, THREE) {
            var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var parent = (0, _BaseCanvas2.default)(baseComponent, THREE, settings);

            return _Util2.default.extend(parent, {
                constructor: function init(player, options) {
                    parent.constructor.call(this, player, options);

                    this.VRMode = false;
                    //define scene
                    this.scene = new THREE.Scene();
                    //define camera
                    this.camera = new THREE.PerspectiveCamera(options.initFov, this.width / this.height, 1, 2000);
                    this.camera.target = new THREE.Vector3(0, 0, 0);

                    //define geometry
                    var geometry = this.videoType === "equirectangular" ? new THREE.SphereGeometry(500, 60, 40) : new THREE.SphereBufferGeometry(500, 60, 40).toNonIndexed();
                    if (this.videoType === "fisheye") {
                        var normals = geometry.attributes.normal.array;
                        var uvs = geometry.attributes.uv.array;
                        for (var i = 0, l = normals.length / 3; i < l; i++) {
                            var x = normals[i * 3 + 0];
                            var y = normals[i * 3 + 1];
                            var z = normals[i * 3 + 2];

                            var r = Math.asin(Math.sqrt(x * x + z * z) / Math.sqrt(x * x + y * y + z * z)) / Math.PI;
                            if (y < 0) r = 1 - r;
                            var theta = x == 0 && z == 0 ? 0 : Math.acos(x / Math.sqrt(x * x + z * z));
                            if (z < 0) theta = theta * -1;
                            uvs[i * 2 + 0] = -0.8 * r * Math.cos(theta) + 0.5;
                            uvs[i * 2 + 1] = 0.8 * r * Math.sin(theta) + 0.5;
                        }
                        geometry.rotateX(options.rotateX);
                        geometry.rotateY(options.rotateY);
                        geometry.rotateZ(options.rotateZ);
                    } else if (this.videoType === "dual_fisheye") {
                        var _normals = geometry.attributes.normal.array;
                        var _uvs = geometry.attributes.uv.array;
                        var _l = _normals.length / 3;
                        for (var _i = 0; _i < _l / 2; _i++) {
                            var _x2 = _normals[_i * 3 + 0];
                            var _y = _normals[_i * 3 + 1];
                            var _z = _normals[_i * 3 + 2];

                            var _r = _x2 == 0 && _z == 0 ? 1 : Math.acos(_y) / Math.sqrt(_x2 * _x2 + _z * _z) * (2 / Math.PI);
                            _uvs[_i * 2 + 0] = _x2 * options.dualFish.circle1.rx * _r * options.dualFish.circle1.coverX + options.dualFish.circle1.x;
                            _uvs[_i * 2 + 1] = _z * options.dualFish.circle1.ry * _r * options.dualFish.circle1.coverY + options.dualFish.circle1.y;
                        }
                        for (var _i2 = _l / 2; _i2 < _l; _i2++) {
                            var _x3 = _normals[_i2 * 3 + 0];
                            var _y2 = _normals[_i2 * 3 + 1];
                            var _z2 = _normals[_i2 * 3 + 2];

                            var _r2 = _x3 == 0 && _z2 == 0 ? 1 : Math.acos(-_y2) / Math.sqrt(_x3 * _x3 + _z2 * _z2) * (2 / Math.PI);
                            _uvs[_i2 * 2 + 0] = -_x3 * options.dualFish.circle2.rx * _r2 * options.dualFish.circle2.coverX + options.dualFish.circle2.x;
                            _uvs[_i2 * 2 + 1] = _z2 * options.dualFish.circle2.ry * _r2 * options.dualFish.circle2.coverY + options.dualFish.circle2.y;
                        }
                        geometry.rotateX(options.rotateX);
                        geometry.rotateY(options.rotateY);
                        geometry.rotateZ(options.rotateZ);
                    }
                    geometry.scale(-1, 1, 1);
                    //define mesh
                    this.mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ map: this.texture }));
                    //this.mesh.scale.x = -1;
                    this.scene.add(this.mesh);
                },

                enableVR: function enableVR() {
                    this.VRMode = true;
                    if (typeof vrHMD !== 'undefined') {
                        var eyeParamsL = vrHMD.getEyeParameters('left');
                        var eyeParamsR = vrHMD.getEyeParameters('right');

                        this.eyeFOVL = eyeParamsL.recommendedFieldOfView;
                        this.eyeFOVR = eyeParamsR.recommendedFieldOfView;
                    }

                    this.cameraL = new THREE.PerspectiveCamera(this.camera.fov, this.width / 2 / this.height, 1, 2000);
                    this.cameraR = new THREE.PerspectiveCamera(this.camera.fov, this.width / 2 / this.height, 1, 2000);
                },

                disableVR: function disableVR() {
                    this.VRMode = false;
                    this.renderer.setViewport(0, 0, this.width, this.height);
                    this.renderer.setScissor(0, 0, this.width, this.height);
                },

                handleResize: function handleResize() {
                    parent.handleResize.call(this);
                    this.camera.aspect = this.width / this.height;
                    this.camera.updateProjectionMatrix();
                    if (this.VRMode) {
                        this.cameraL.aspect = this.camera.aspect / 2;
                        this.cameraR.aspect = this.camera.aspect / 2;
                        this.cameraL.updateProjectionMatrix();
                        this.cameraR.updateProjectionMatrix();
                    }
                },

                handleMouseWheel: function handleMouseWheel(event) {
                    parent.handleMouseWheel(event);
                    // WebKit
                    if (event.wheelDeltaY) {
                        this.camera.fov -= event.wheelDeltaY * 0.05;
                        // Opera / Explorer 9
                    } else if (event.wheelDelta) {
                        this.camera.fov -= event.wheelDelta * 0.05;
                        // Firefox
                    } else if (event.detail) {
                        this.camera.fov += event.detail * 1.0;
                    }
                    this.camera.fov = Math.min(this.settings.maxFov, this.camera.fov);
                    this.camera.fov = Math.max(this.settings.minFov, this.camera.fov);
                    this.camera.updateProjectionMatrix();
                    if (this.VRMode) {
                        this.cameraL.fov = this.camera.fov;
                        this.cameraR.fov = this.camera.fov;
                        this.cameraL.updateProjectionMatrix();
                        this.cameraR.updateProjectionMatrix();
                    }
                },

                handleTouchMove: function handleTouchMove(event) {
                    parent.handleTouchMove.call(this, event);
                    if (this.isUserPinch) {
                        var currentDistance = _Util2.default.getTouchesDistance(event.touches);
                        event.wheelDeltaY = (currentDistance - this.multiTouchDistance) * 2;
                        this.handleMouseWheel.call(this, event);
                        this.multiTouchDistance = currentDistance;
                    }
                },

                render: function render() {
                    parent.render.call(this);
                    this.camera.target.x = 500 * Math.sin(this.phi) * Math.cos(this.theta);
                    this.camera.target.y = 500 * Math.cos(this.phi);
                    this.camera.target.z = 500 * Math.sin(this.phi) * Math.sin(this.theta);
                    this.camera.lookAt(this.camera.target);

                    if (!this.VRMode) {
                        this.renderer.render(this.scene, this.camera);
                    } else {
                        var viewPortWidth = this.width / 2,
                            viewPortHeight = this.height;
                        if (typeof vrHMD !== 'undefined') {
                            this.cameraL.projectionMatrix = _Util2.default.fovToProjection(this.eyeFOVL, true, this.camera.near, this.camera.far);
                            this.cameraR.projectionMatrix = _Util2.default.fovToProjection(this.eyeFOVR, true, this.camera.near, this.camera.far);
                        } else {
                            var lonL = this.lon + this.settings.VRGapDegree;
                            var lonR = this.lon - this.settings.VRGapDegree;

                            var thetaL = THREE.Math.degToRad(lonL);
                            var thetaR = THREE.Math.degToRad(lonR);

                            var targetL = _Util2.default.deepCopy(this.camera.target);
                            targetL.x = 500 * Math.sin(this.phi) * Math.cos(thetaL);
                            targetL.z = 500 * Math.sin(this.phi) * Math.sin(thetaL);
                            this.cameraL.lookAt(targetL);

                            var targetR = _Util2.default.deepCopy(this.camera.target);
                            targetR.x = 500 * Math.sin(this.phi) * Math.cos(thetaR);
                            targetR.z = 500 * Math.sin(this.phi) * Math.sin(thetaR);
                            this.cameraR.lookAt(targetR);
                        }
                        // render left eye
                        this.renderer.setViewport(0, 0, viewPortWidth, viewPortHeight);
                        this.renderer.setScissor(0, 0, viewPortWidth, viewPortHeight);
                        this.renderer.render(this.scene, this.cameraL);

                        // render right eye
                        this.renderer.setViewport(viewPortWidth, 0, viewPortWidth, viewPortHeight);
                        this.renderer.setScissor(viewPortWidth, 0, viewPortWidth, viewPortHeight);
                        this.renderer.render(this.scene, this.cameraR);
                    }
                }
            });
        };

        exports.default = Canvas;
    }, { "./BaseCanvas": 4, "./Util": 11 }], 6: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        /**
         * @author alteredq / http://alteredqualia.com/
         * @author mr.doob / http://mrdoob.com/
         */

        //in case it's running on node.js
        var win = {};

        if (typeof window !== "undefined") {
            win = window;
        }

        var Detector = {

            canvas: !!win.CanvasRenderingContext2D,
            webgl: function () {

                try {

                    var canvas = document.createElement('canvas');return !!(win.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
                } catch (e) {

                    return false;
                }
            }(),
            workers: !!win.Worker,
            fileapi: win.File && win.FileReader && win.FileList && win.Blob,

            Check_Version: function Check_Version() {
                var rv = -1; // Return value assumes failure.

                if (navigator.appName == 'Microsoft Internet Explorer') {

                    var ua = navigator.userAgent,
                        re = new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})");

                    if (re.exec(ua) !== null) {
                        rv = parseFloat(RegExp.$1);
                    }
                } else if (navigator.appName == "Netscape") {
                    /// in IE 11 the navigator.appVersion says 'trident'
                    /// in Edge the navigator.appVersion does not say trident
                    if (navigator.appVersion.indexOf('Trident') !== -1) rv = 11;else {
                        var ua = navigator.userAgent;
                        var re = new RegExp("Edge\/([0-9]{1,}[\\.0-9]{0,})");
                        if (re.exec(ua) !== null) {
                            rv = parseFloat(RegExp.$1);
                        }
                    }
                }

                return rv;
            },

            supportVideoTexture: function supportVideoTexture() {
                //ie 11 and edge 12 doesn't support video texture.
                var version = this.Check_Version();
                return version === -1 || version >= 13;
            },

            isLiveStreamOnSafari: function isLiveStreamOnSafari(videoElement) {
                //live stream on safari doesn't support video texture
                var videoSources = [].slice.call(videoElement.querySelectorAll("source"));
                var result = false;
                if (videoElement.src && videoElement.src.indexOf('.m3u8') > -1) {
                    videoSources.push({
                        src: videoElement.src,
                        type: "application/x-mpegURL"
                    });
                }
                for (var i = 0; i < videoSources.length; i++) {
                    var currentVideoSource = videoSources[i];
                    if ((currentVideoSource.type === "application/x-mpegURL" || currentVideoSource.type === "application/vnd.apple.mpegurl") && /(Safari|AppleWebKit)/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor)) {
                        result = true;
                        break;
                    }
                }
                return result;
            },

            getWebGLErrorMessage: function getWebGLErrorMessage() {

                var element = document.createElement('div');
                element.id = 'webgl-error-message';

                if (!this.webgl) {

                    element.innerHTML = win.WebGLRenderingContext ? ['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n') : ['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n');
                }

                return element;
            },

            addGetWebGLMessage: function addGetWebGLMessage(parameters) {

                var parent, id, element;

                parameters = parameters || {};

                parent = parameters.parent !== undefined ? parameters.parent : document.body;
                id = parameters.id !== undefined ? parameters.id : 'oldie';

                element = Detector.getWebGLErrorMessage();
                element.id = id;

                parent.appendChild(element);
            }

        };

        exports.default = Detector;
    }, {}], 7: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        /**
         * Created by wensheng.yan on 5/23/16.
         */
        var HelperCanvas = function HelperCanvas(baseComponent) {
            var element = document.createElement('canvas');
            element.className = "play-video-helper-canvas";
            return {
                constructor: function init(player, options) {
                    this.videoElement = options.video;
                    this.width = options.width;
                    this.height = options.height;

                    element.width = this.width;
                    element.height = this.height;
                    element.style.display = "none";
                    options.el = element;

                    this.context = element.getContext('2d');
                    this.context.drawImage(this.videoElement, 0, 0, this.width, this.height);
                    baseComponent.call(this, player, options);
                },

                getContext: function getContext() {
                    return this.context;
                },

                update: function update() {
                    this.context.drawImage(this.videoElement, 0, 0, this.width, this.height);
                },

                el: function el() {
                    return element;
                }
            };
        };

        exports.default = HelperCanvas;
    }, {}], 8: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        /**
         * Created by yanwsh on 6/6/16.
         */
        var MobileBuffering = {
            prev_currentTime: 0,
            counter: 0,

            isBuffering: function isBuffering(currentTime) {
                if (currentTime == this.prev_currentTime) this.counter++;else this.counter = 0;
                this.prev_currentTime = currentTime;
                if (this.counter > 10) {
                    //not let counter overflow
                    this.counter = 10;
                    return true;
                }
                return false;
            }
        };

        exports.default = MobileBuffering;
    }, {}], 9: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
            return typeof obj === "undefined" ? "undefined" : _typeof(obj);
        } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
        };

        /**
         * Created by yanwsh on 4/4/16.
         */

        var Notice = function Notice(baseComponent) {
            var element = document.createElement('div');
            element.className = "play-video-notice-label";

            return {
                constructor: function init(player, options) {
                    if (_typeof$$1(options.NoticeMessage) == "object") {
                        element = options.NoticeMessage;
                        options.el = options.NoticeMessage;
                    } else if (typeof options.NoticeMessage == "string") {
                        element.innerHTML = options.NoticeMessage;
                        options.el = element;
                    }

                    baseComponent.call(this, player, options);
                },

                el: function el() {
                    return element;
                }
            };
        };

        exports.default = Notice;
    }, {}], 10: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _BaseCanvas = require('./BaseCanvas');

        var _BaseCanvas2 = _interopRequireDefault(_BaseCanvas);

        var _Util = require('./Util');

        var _Util2 = _interopRequireDefault(_Util);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }

        var ThreeDCanvas = function ThreeDCanvas(baseComponent, THREE) {
            var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var parent = (0, _BaseCanvas2.default)(baseComponent, THREE, settings);
            return _Util2.default.extend(parent, {
                constructor: function init(player, options) {
                    parent.constructor.call(this, player, options);
                    //only show left part by default
                    this.VRMode = false;
                    //define scene
                    this.scene = new THREE.Scene();

                    var aspectRatio = this.width / this.height;
                    //define camera
                    this.cameraL = new THREE.PerspectiveCamera(options.initFov, aspectRatio, 1, 2000);
                    this.cameraL.target = new THREE.Vector3(0, 0, 0);

                    this.cameraR = new THREE.PerspectiveCamera(options.initFov, aspectRatio / 2, 1, 2000);
                    this.cameraR.position.set(1000, 0, 0);
                    this.cameraR.target = new THREE.Vector3(1000, 0, 0);

                    var geometryL = new THREE.SphereBufferGeometry(500, 60, 40).toNonIndexed();
                    var geometryR = new THREE.SphereBufferGeometry(500, 60, 40).toNonIndexed();

                    var uvsL = geometryL.attributes.uv.array;
                    var normalsL = geometryL.attributes.normal.array;
                    for (var i = 0; i < normalsL.length / 3; i++) {
                        uvsL[i * 2 + 1] = uvsL[i * 2 + 1] / 2;
                    }

                    var uvsR = geometryR.attributes.uv.array;
                    var normalsR = geometryR.attributes.normal.array;
                    for (var i = 0; i < normalsR.length / 3; i++) {
                        uvsR[i * 2 + 1] = uvsR[i * 2 + 1] / 2 + 0.5;
                    }

                    geometryL.scale(-1, 1, 1);
                    geometryR.scale(-1, 1, 1);

                    this.meshL = new THREE.Mesh(geometryL, new THREE.MeshBasicMaterial({ map: this.texture }));

                    this.meshR = new THREE.Mesh(geometryR, new THREE.MeshBasicMaterial({ map: this.texture }));
                    this.meshR.position.set(1000, 0, 0);

                    this.scene.add(this.meshL);

                    if (options.callback) options.callback();
                },

                handleResize: function handleResize() {
                    parent.handleResize.call(this);
                    var aspectRatio = this.width / this.height;
                    if (!this.VRMode) {
                        this.cameraL.aspect = aspectRatio;
                        this.cameraL.updateProjectionMatrix();
                    } else {
                        aspectRatio /= 2;
                        this.cameraL.aspect = aspectRatio;
                        this.cameraR.aspect = aspectRatio;
                        this.cameraL.updateProjectionMatrix();
                        this.cameraR.updateProjectionMatrix();
                    }
                },

                handleMouseWheel: function handleMouseWheel(event) {
                    parent.handleMouseWheel(event);
                    // WebKit
                    if (event.wheelDeltaY) {
                        this.cameraL.fov -= event.wheelDeltaY * 0.05;
                        // Opera / Explorer 9
                    } else if (event.wheelDelta) {
                        this.cameraL.fov -= event.wheelDelta * 0.05;
                        // Firefox
                    } else if (event.detail) {
                        this.cameraL.fov += event.detail * 1.0;
                    }
                    this.cameraL.fov = Math.min(this.settings.maxFov, this.cameraL.fov);
                    this.cameraL.fov = Math.max(this.settings.minFov, this.cameraL.fov);
                    this.cameraL.updateProjectionMatrix();
                    if (this.VRMode) {
                        this.cameraR.fov = this.cameraL.fov;
                        this.cameraR.updateProjectionMatrix();
                    }
                },

                enableVR: function enableVR() {
                    this.VRMode = true;
                    this.scene.add(this.meshR);
                    this.handleResize();
                },

                disableVR: function disableVR() {
                    this.VRMode = false;
                    this.scene.remove(this.meshR);
                    this.handleResize();
                },

                render: function render() {
                    parent.render.call(this);
                    this.cameraL.target.x = 500 * Math.sin(this.phi) * Math.cos(this.theta);
                    this.cameraL.target.y = 500 * Math.cos(this.phi);
                    this.cameraL.target.z = 500 * Math.sin(this.phi) * Math.sin(this.theta);
                    this.cameraL.lookAt(this.cameraL.target);

                    if (this.VRMode) {
                        var viewPortWidth = this.width / 2,
                            viewPortHeight = this.height;
                        this.cameraR.target.x = 1000 + 500 * Math.sin(this.phi) * Math.cos(this.theta);
                        this.cameraR.target.y = 500 * Math.cos(this.phi);
                        this.cameraR.target.z = 500 * Math.sin(this.phi) * Math.sin(this.theta);
                        this.cameraR.lookAt(this.cameraR.target);

                        // render left eye
                        this.renderer.setViewport(0, 0, viewPortWidth, viewPortHeight);
                        this.renderer.setScissor(0, 0, viewPortWidth, viewPortHeight);
                        this.renderer.render(this.scene, this.cameraL);

                        // render right eye
                        this.renderer.setViewport(viewPortWidth, 0, viewPortWidth, viewPortHeight);
                        this.renderer.setScissor(viewPortWidth, 0, viewPortWidth, viewPortHeight);
                        this.renderer.render(this.scene, this.cameraR);
                    } else {
                        this.renderer.render(this.scene, this.cameraL);
                    }
                }
            });
        };

        exports.default = ThreeDCanvas;
    }, { "./BaseCanvas": 4, "./Util": 11 }], 11: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        /**
         * Created by wensheng.yan on 4/4/16.
         */
        function whichTransitionEvent() {
            var t;
            var el = document.createElement('fakeelement');
            var transitions = {
                'transition': 'transitionend',
                'OTransition': 'oTransitionEnd',
                'MozTransition': 'transitionend',
                'WebkitTransition': 'webkitTransitionEnd'
            };

            for (t in transitions) {
                if (el.style[t] !== undefined) {
                    return transitions[t];
                }
            }
        }

        function mobileAndTabletcheck() {
            var check = false;
            (function (a) {
                if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
            })(navigator.userAgent || navigator.vendor || window.opera);
            return check;
        }

        function isIos() {
            return (/iPhone|iPad|iPod/i.test(navigator.userAgent)
            );
        }

        function isRealIphone() {
            return (/iPhone|iPod/i.test(navigator.platform)
            );
        }

        //adopt code from: https://github.com/MozVR/vr-web-examples/blob/master/threejs-vr-boilerplate/js/VREffect.js
        function fovToNDCScaleOffset(fov) {
            var pxscale = 2.0 / (fov.leftTan + fov.rightTan);
            var pxoffset = (fov.leftTan - fov.rightTan) * pxscale * 0.5;
            var pyscale = 2.0 / (fov.upTan + fov.downTan);
            var pyoffset = (fov.upTan - fov.downTan) * pyscale * 0.5;
            return { scale: [pxscale, pyscale], offset: [pxoffset, pyoffset] };
        }

        function fovPortToProjection(fov, rightHanded, zNear, zFar) {

            rightHanded = rightHanded === undefined ? true : rightHanded;
            zNear = zNear === undefined ? 0.01 : zNear;
            zFar = zFar === undefined ? 10000.0 : zFar;

            var handednessScale = rightHanded ? -1.0 : 1.0;

            // start with an identity matrix
            var mobj = new THREE.Matrix4();
            var m = mobj.elements;

            // and with scale/offset info for normalized device coords
            var scaleAndOffset = fovToNDCScaleOffset(fov);

            // X result, map clip edges to [-w,+w]
            m[0 * 4 + 0] = scaleAndOffset.scale[0];
            m[0 * 4 + 1] = 0.0;
            m[0 * 4 + 2] = scaleAndOffset.offset[0] * handednessScale;
            m[0 * 4 + 3] = 0.0;

            // Y result, map clip edges to [-w,+w]
            // Y offset is negated because this proj matrix transforms from world coords with Y=up,
            // but the NDC scaling has Y=down (thanks D3D?)
            m[1 * 4 + 0] = 0.0;
            m[1 * 4 + 1] = scaleAndOffset.scale[1];
            m[1 * 4 + 2] = -scaleAndOffset.offset[1] * handednessScale;
            m[1 * 4 + 3] = 0.0;

            // Z result (up to the app)
            m[2 * 4 + 0] = 0.0;
            m[2 * 4 + 1] = 0.0;
            m[2 * 4 + 2] = zFar / (zNear - zFar) * -handednessScale;
            m[2 * 4 + 3] = zFar * zNear / (zNear - zFar);

            // W result (= Z in)
            m[3 * 4 + 0] = 0.0;
            m[3 * 4 + 1] = 0.0;
            m[3 * 4 + 2] = handednessScale;
            m[3 * 4 + 3] = 0.0;

            mobj.transpose();

            return mobj;
        }

        function fovToProjection(fov, rightHanded, zNear, zFar) {
            var DEG2RAD = Math.PI / 180.0;

            var fovPort = {
                upTan: Math.tan(fov.upDegrees * DEG2RAD),
                downTan: Math.tan(fov.downDegrees * DEG2RAD),
                leftTan: Math.tan(fov.leftDegrees * DEG2RAD),
                rightTan: Math.tan(fov.rightDegrees * DEG2RAD)
            };

            return fovPortToProjection(fovPort, rightHanded, zNear, zFar);
        }

        function extend(superClass) {
            var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            for (var method in superClass) {
                if (superClass.hasOwnProperty(method) && !subClassMethods.hasOwnProperty(method)) {
                    subClassMethods[method] = superClass[method];
                }
            }
            return subClassMethods;
        }

        function deepCopy(obj) {
            var to = {};

            for (var name in obj) {
                to[name] = obj[name];
            }

            return to;
        }

        function getTouchesDistance(touches) {
            return Math.sqrt((touches[0].clientX - touches[1].clientX) * (touches[0].clientX - touches[1].clientX) + (touches[0].clientY - touches[1].clientY) * (touches[0].clientY - touches[1].clientY));
        }

        exports.default = {
            whichTransitionEvent: whichTransitionEvent,
            mobileAndTabletcheck: mobileAndTabletcheck,
            isIos: isIos,
            isRealIphone: isRealIphone,
            fovToProjection: fovToProjection,
            extend: extend,
            deepCopy: deepCopy,
            getTouchesDistance: getTouchesDistance
        };
    }, {}], 12: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        /**
         * Created by yanwsh on 8/13/16.
         */

        var VRButton = function VRButton(ButtonComponent) {
            return {
                constructor: function init(player, options) {
                    ButtonComponent.call(this, player, options);
                },

                buildCSSClass: function buildCSSClass() {
                    return "play-VR-control " + ButtonComponent.prototype.buildCSSClass.call(this);
                },

                handleClick: function handleClick() {
                    var canvas = this.player().getChild("Canvas");
                    !canvas.VRMode ? canvas.enableVR() : canvas.disableVR();
                    canvas.VRMode ? this.addClass("enable") : this.removeClass("enable");
                    canvas.VRMode ? this.player().trigger('VRModeOn') : this.player().trigger('VRModeOff');
                },

                controlText_: "VR"
            };
        };

        exports.default = VRButton;
    }, {}], 13: [function (require, module, exports) {

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _Util = require('./lib/Util');

        var _Util2 = _interopRequireDefault(_Util);

        var _Detector = require('./lib/Detector');

        var _Detector2 = _interopRequireDefault(_Detector);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }

        var runOnMobile = typeof window !== "undefined" ? _Util2.default.mobileAndTabletcheck() : false;

        // Default options for the plugin.
        var defaults$$1 = {
            clickAndDrag: runOnMobile,
            showNotice: true,
            NoticeMessage: "Please use your mouse drag and drop the video.",
            autoHideNotice: 3000,
            //limit the video size when user scroll.
            scrollable: true,
            initFov: 75,
            maxFov: 105,
            minFov: 51,
            //initial position for the video
            initLat: 0,
            initLon: -180,
            //A float value back to center when mouse out the canvas. The higher, the faster.
            returnStepLat: 0.5,
            returnStepLon: 2,
            backToVerticalCenter: !runOnMobile,
            backToHorizonCenter: !runOnMobile,
            clickToToggle: false,

            //limit viewable zoom
            minLat: -85,
            maxLat: 85,

            minLon: -Infinity,
            maxLon: Infinity,

            videoType: "equirectangular",

            rotateX: 0,
            rotateY: 0,
            rotateZ: 0,

            autoMobileOrientation: false,
            mobileVibrationValue: runOnMobile && _Util2.default.isIos() ? 0.022 : 1,

            VREnable: true,
            VRGapDegree: 2.5,

            closePanorama: false,

            helperCanvas: {},

            dualFish: {
                width: 1920,
                height: 1080,
                circle1: {
                    x: 0.240625,
                    y: 0.553704,
                    rx: 0.23333,
                    ry: 0.43148,
                    coverX: 0.913,
                    coverY: 0.9
                },
                circle2: {
                    x: 0.757292,
                    y: 0.553704,
                    rx: 0.232292,
                    ry: 0.4296296,
                    coverX: 0.913,
                    coverY: 0.9308
                }
            }
        };

        function playerResize(player) {
            var canvas = player.getChild('Canvas');
            return function () {
                // player.el().style.width = window.innerWidth + "px";
                // player.el().style.height = window.innerHeight + "px";
                canvas.handleResize();
            };
        }

        function fullscreenOnIOS(player, clickFn) {
            var resizeFn = playerResize(player);
            player.controlBar.fullscreenToggle.off("tap", clickFn);
            player.controlBar.fullscreenToggle.on("tap", function fullscreen() {
                var canvas = player.getChild('Canvas');
                if (!player.isFullscreen()) {
                    //set to fullscreen
                    player.isFullscreen(true);
                    player.enterFullWindow();
                    resizeFn();
                    window.addEventListener("devicemotion", resizeFn);
                } else {
                    player.isFullscreen(false);
                    player.exitFullWindow();
                    player.el().style.width = "";
                    player.el().style.height = "";
                    canvas.handleResize();
                    window.removeEventListener("devicemotion", resizeFn);
                }
            });
        }

        /**
         * Function to invoke when the player is ready.
         *
         * This is a great place for your plugin to initialize itself. When this
         * function is called, the player will have its DOM and child components
         * in place.
         *
         * @function onPlayerReady
         * @param    {Player} player
         * @param    {Object} [options={}]
         */
        var onPlayerReady = function onPlayerReady(player, options, settings) {
            player.addClass('play-panorama');
            if (!_Detector2.default.webgl) {
                PopupNotification(player, {
                    NoticeMessage: _Detector2.default.getWebGLErrorMessage(),
                    autoHideNotice: options.autoHideNotice
                });
                if (options.callback) {
                    options.callback();
                }
                return;
            }
            player.addChild('Canvas', _Util2.default.deepCopy(options));
            var canvas = player.getChild('Canvas');
            if (runOnMobile) {
                var videoElement = settings.getTech(player);
                if (_Util2.default.isRealIphone()) {
                    var makeVideoPlayableInline = require('iphone-inline-video');
                    //ios 10 support play video inline
                    videoElement.setAttribute("playsinline", "");
                    makeVideoPlayableInline(videoElement, true);
                }
                if (_Util2.default.isIos()) {
                    fullscreenOnIOS(player, settings.getFullscreenToggleClickFn(player));
                }
                player.addClass("play-panorama-mobile-inline-video");
                player.removeClass("play-using-native-controls");
                canvas.playOnMobile();
            }
            if (options.showNotice) {
                player.on("playing", function () {
                    PopupNotification(player, _Util2.default.deepCopy(options));
                });
            }
            if (options.VREnable) {
                player.controlBar.addChild('VRButton', {}, player.controlBar.children().length - 1);
            }
            canvas.hide();
            player.on("play", function () {
                canvas.show();
            });
            player.on("fullscreenchange", function () {
                canvas.handleResize();
            });
            if (options.callback) options.callback();
        };

        var PopupNotification = function PopupNotification(player) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                NoticeMessage: ""
            };

            var notice = player.addChild('Notice', options);

            if (options.autoHideNotice > 0) {
                setTimeout(function () {
                    notice.addClass("play-video-notice-fadeOut");
                    var transitionEvent = _Util2.default.whichTransitionEvent();
                    var hide = function hide() {
                        notice.hide();
                        notice.removeClass("play-video-notice-fadeOut");
                        notice.off(transitionEvent, hide);
                    };
                    notice.on(transitionEvent, hide);
                }, options.autoHideNotice);
            }
        };

        var plugin = function plugin() {
            var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            /**
             * A video.js plugin.
             *
             * In the plugin function, the value of `this` is a video.js `Player`
             * instance. You cannot rely on the player being in a "ready" state here,
             * depending on how the plugin is invoked. This may or may not be important
             * to you; if not, remove the wait for "ready"!
             *
             * @function panorama
             * @param    {Object} [options={}]
             *           An object of options left to the plugin author to define.
             */
            var videoTypes = ["equirectangular", "fisheye", "3dVideo", "dual_fisheye"];
            var panorama = function panorama(options) {
                var _this = this;

                if (settings.mergeOption) options = settings.mergeOption(defaults$$1, options);
                if (typeof settings._init === "undefined" || typeof settings._init !== "function") {
                    console.error("plugin must implement init function().");
                    return;
                }
                if (videoTypes.indexOf(options.videoType) == -1) options.videoType = defaults$$1.videoType;
                settings._init(options);
                /* implement callback function when videojs is ready */
                this.ready(function () {
                    onPlayerReady(_this, options, settings);
                });
            };

            // Include the version number.
            panorama.VERSION = '0.1.7';

            return panorama;
        };

        exports.default = plugin;
    }, { "./lib/Detector": 6, "./lib/Util": 11, "iphone-inline-video": 2 }], 14: [function (require, module, exports) {

        var _Canvas = require('./lib/Canvas');

        var _Canvas2 = _interopRequireDefault(_Canvas);

        var _ThreeCanvas = require('./lib/ThreeCanvas');

        var _ThreeCanvas2 = _interopRequireDefault(_ThreeCanvas);

        var _Notice = require('./lib/Notice');

        var _Notice2 = _interopRequireDefault(_Notice);

        var _HelperCanvas = require('./lib/HelperCanvas');

        var _HelperCanvas2 = _interopRequireDefault(_HelperCanvas);

        var _VRButton = require('./lib/VRButton');

        var _VRButton2 = _interopRequireDefault(_VRButton);

        var _plugin = require('./plugin');

        var _plugin2 = _interopRequireDefault(_plugin);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }

        function getTech(player) {
            return player.tech({ IWillNotUseThisInPlugins: true }).el();
        }

        function getFullscreenToggleClickFn(player) {
            return player.controlBar.fullscreenToggle.handleClick;
        }

        var component = videojs$1.getComponent('Component');

        var notice = (0, _Notice2.default)(component);
        videojs$1.registerComponent('Notice', videojs$1.extend(component, notice));

        var helperCanvas = (0, _HelperCanvas2.default)(component);
        videojs$1.registerComponent('HelperCanvas', videojs$1.extend(component, helperCanvas));

        var button = videojs$1.getComponent("Button");
        var vrBtn = (0, _VRButton2.default)(button);
        videojs$1.registerComponent('VRButton', videojs$1.extend(button, vrBtn));

        // Register the plugin with video.js.
        videojs$1.plugin('panorama', (0, _plugin2.default)({
            _init: function _init(options) {
                var canvas = options.videoType !== "3dVideo" ? (0, _Canvas2.default)(component, window.THREE, {
                    getTech: getTech
                }) : (0, _ThreeCanvas2.default)(component, window.THREE, {
                    getTech: getTech
                });
                videojs$1.registerComponent('Canvas', videojs$1.extend(component, canvas));
            },
            mergeOption: function mergeOption(defaults$$1, options) {
                return videojs$1.mergeOptions(defaults$$1, options);
            },
            getTech: getTech,
            getFullscreenToggleClickFn: getFullscreenToggleClickFn
        }));
    }, { "./lib/Canvas": 5, "./lib/HelperCanvas": 7, "./lib/Notice": 9, "./lib/ThreeCanvas": 10, "./lib/VRButton": 12, "./plugin": 13 }] }, {}, [14]);

export default videojs$1;
